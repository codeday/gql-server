type User {
  id: ID!
  blocked: Boolean
  email: String
  username: String
  picture(transform: UserPictureTransformInput): String
  givenName: String
  familyName: String
  name: String
  title: String
  bio: String
  discordId: String
  acceptTos: Boolean
  displayNameFormat: String
  phoneNumber: String
  pronoun: String
  roles: [Role]
  badges(displayed: Boolean): [UserBadge]
  discordInformation: DiscordInformation
}

type DiscordUser {
  id: ID!
  name: String
  username: String
  bio: String
  discordId: String
  pronoun: String
  badges(displayed: Boolean): [DiscordUserBadge]
}

type DiscordUserBadge {
  id: ID!
  displayed: Boolean
  order: Int
  expiresUtc: String
}

input UpdateUserInput {
  username: String
  blocked: Boolean
  email: String
  givenName: String
  familyName: String
  displayNameFormat: String
  title: String
  bio: String
  phoneNumber: String
  pronoun: String
  acceptTos: Boolean
}

type UserBadge {
  id: ID!
  displayed: Boolean
  order: Int
  expiresUtc: String
}

input UserBadgeInput {
  id: ID!
  displayed: Boolean
  order: Int
  expiresUtc: String
}

input DisplayedUserBadgeInput {
  id: ID!
  order: Int!
}

type Role {
  id: ID!
  name: String!
  description: String
}

type DiscordInformation {
  username: String!
  discriminator: String!
  handle: String!
  tag: String!
  avatar: String
}

enum UserPictureFit {
  CLAMP
  CLIP
  CROP
  FACEAREA
  FILL
  FILLMAX
  MAX
  MIN
  SCALE
}

input UserPictureTransformInput {
  width: Int
  height: Int
  fit: UserPictureFit
}

input UserSingleInput {
  id: ID
  username: String
  email: String
  discordId: String
}

input UserSearch {
  givenName: String
  familyName: String
  name: String
  username: String
}

type SubscriptionUser {
  id: ID!
  username: String
  name: String
  pronoun: String
  bio: String
  discordId: String
  picture(transform: UserPictureTransformInput): String
  roles: [Role]
  badges: [UserBadge]
}

type SubscriptionBadge {
  type: String
  user: SubscriptionUser!
  badge: UserBadge!
}

type Query {
  getUser(where: UserSingleInput!, fresh: Boolean): User
  getDiscordUsers: [DiscordUser]!
  searchUsers(where: UserSearch!): [User]!
  userRoles(id: ID!): [Role]
  roleUsers(roleId: String!): [User]!
  roles: [Role]!
}

scalar FileUpload

enum PizzaOrTurtle {
  TURTLE
  PIZZA
}

type Mutation {
  updateUser(username: String, updates: UpdateUserInput!): Boolean
  addRole(id: ID!, roleId: ID!): Boolean
  addRoleByCode(where: UserSingleInput!, code: String!): Boolean
  setDisplayedBadges(
    where: UserSingleInput,
    badges: [DisplayedUserBadgeInput!]
  ): Boolean
  grantBadge(where: UserSingleInput!, badge: UserBadgeInput!): Boolean
  revokeBadge(where: UserSingleInput!, badge: UserBadgeInput!): Boolean
  uploadProfilePicture(where: UserSingleInput, upload: FileUpload!): String
  linkDiscord(userId: ID!, discordId: String!): Boolean
  unlinkDiscord(userId: ID!): Boolean
  pizzaOrTurtleCult(where: UserSingleInput!, pizzaOrTurtle: PizzaOrTurtle!): Boolean
}

type Subscription {
  userUpdate: SubscriptionUser
  userBadgeUpdate: SubscriptionBadge
  userDisplayedBadgesUpdate: SubscriptionUser
  userProfilePictureUpdate: SubscriptionUser
  userRoleUpdate: SubscriptionUser
  userUnlinkDiscord: String
  userCultSelection: SubscriptionUser
}

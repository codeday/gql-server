import { GraphQLResolveInfo, SelectionSetNode, FieldNode, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  AdvisorDateTime: any;
  AdvisorJSONObject: any;
  CalendarDateTime: any;
  CalendarJSONObject: any;
  ClearDateTime: any;
  ClearJSON: any;
  ClearJSONObject: any;
  CmsCircle: any;
  CmsDateTime: any;
  CmsDimension: any;
  CmsHexColor: any;
  CmsJSON: any;
  CmsQuality: any;
  CmsRectangle: any;
  EmailJSONObject: any;
  JSONObject: any;
  LabsDateTime: any;
  LabsJSON: any;
  LabsJSONObject: any;
  ShowcaseDateTime: any;
  ShowyourworkDateTime: any;
  Upload: any;
};

export type AccountBadge = {
  __typename?: 'AccountBadge';
  details?: Maybe<CmsBadge>;
  displayed?: Maybe<Scalars['Boolean']>;
  expiresUtc?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  order?: Maybe<Scalars['Int']>;
};

export type AccountBadgeInput = {
  displayed?: InputMaybe<Scalars['Boolean']>;
  expiresUtc?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  order?: InputMaybe<Scalars['Int']>;
};

export type AccountDiscordInformation = {
  __typename?: 'AccountDiscordInformation';
  avatar?: Maybe<Scalars['String']>;
  discriminator: Scalars['String'];
  handle: Scalars['String'];
  tag: Scalars['String'];
  username: Scalars['String'];
};

export type AccountDiscordTokenInfoInput = {
  accessToken: Scalars['String'];
  expiresIn: Scalars['Float'];
  refreshToken: Scalars['String'];
  scope: Scalars['String'];
  tokenType?: InputMaybe<Scalars['String']>;
};

export type AccountDisplayedBadgeInput = {
  id: Scalars['ID'];
  order: Scalars['Int'];
};

export type AccountMutation = {
  __typename?: 'AccountMutation';
  addRole: Scalars['Boolean'];
  addRoleByCode: Scalars['Boolean'];
  grantBadge: Scalars['Boolean'];
  linkDiscord: Scalars['Boolean'];
  pizzaOrTurtleCult: Scalars['Boolean'];
  revokeBadge: Scalars['Boolean'];
  setDiscordToken: Scalars['Boolean'];
  setDisplayedBadges: Scalars['Boolean'];
  unlinkDiscord: Scalars['Boolean'];
  updateUser: Scalars['Boolean'];
  uploadProfilePicture: Scalars['String'];
};


export type AccountMutationAddRoleArgs = {
  id: Scalars['ID'];
  roleId: Scalars['ID'];
};


export type AccountMutationAddRoleByCodeArgs = {
  code: Scalars['String'];
  where: AccountUserWhereInput;
};


export type AccountMutationGrantBadgeArgs = {
  badge: AccountBadgeInput;
  where: AccountUserWhereInput;
};


export type AccountMutationLinkDiscordArgs = {
  discordId: Scalars['String'];
  userId: Scalars['ID'];
};


export type AccountMutationPizzaOrTurtleCultArgs = {
  pizzaOrTurtle: AccountPizzaOrTurtle;
  where: AccountUserWhereInput;
};


export type AccountMutationRevokeBadgeArgs = {
  badge: AccountBadgeInput;
  where: AccountUserWhereInput;
};


export type AccountMutationSetDiscordTokenArgs = {
  tokenInfo: AccountDiscordTokenInfoInput;
  where: AccountUserWhereInput;
};


export type AccountMutationSetDisplayedBadgesArgs = {
  badges?: InputMaybe<Array<AccountDisplayedBadgeInput>>;
  where: AccountUserWhereInput;
};


export type AccountMutationUnlinkDiscordArgs = {
  userId: Scalars['ID'];
};


export type AccountMutationUpdateUserArgs = {
  updates: AccountUpdateUserInput;
  username: Scalars['String'];
};


export type AccountMutationUploadProfilePictureArgs = {
  upload: Scalars['Upload'];
  where: AccountUserWhereInput;
};

export enum AccountPizzaOrTurtle {
  Pizza = 'PIZZA',
  Turtle = 'TURTLE'
}

export type AccountQuery = {
  __typename?: 'AccountQuery';
  getDiscordToken?: Maybe<Scalars['String']>;
  getDiscordUsers: Array<Maybe<AccountUser>>;
  getUser?: Maybe<AccountUser>;
  roleUsers: Array<Maybe<AccountUser>>;
  roles: Array<Maybe<AccountRole>>;
  searchUsers: Array<Maybe<AccountUser>>;
  userRoles: Array<Maybe<AccountRole>>;
};


export type AccountQueryGetDiscordTokenArgs = {
  discordId: Scalars['String'];
  refresh?: InputMaybe<Scalars['Boolean']>;
};


export type AccountQueryGetUserArgs = {
  fresh?: InputMaybe<Scalars['Boolean']>;
  where: AccountUserWhereInput;
};


export type AccountQueryRoleUsersArgs = {
  roleId: Scalars['String'];
};


export type AccountQuerySearchUsersArgs = {
  where: AccountUserSearch;
};


export type AccountQueryUserRolesArgs = {
  id: Scalars['ID'];
};

export type AccountRole = {
  __typename?: 'AccountRole';
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
};

export type AccountSubscriptionBadge = {
  __typename?: 'AccountSubscriptionBadge';
  badge: AccountBadge;
  type?: Maybe<Scalars['String']>;
  user: AccountSubscriptionUser;
};

export type AccountSubscriptionUser = {
  __typename?: 'AccountSubscriptionUser';
  badges?: Maybe<Array<Maybe<AccountBadge>>>;
  bio?: Maybe<Scalars['String']>;
  discordId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  picture?: Maybe<Scalars['String']>;
  pronoun?: Maybe<Scalars['String']>;
  roles?: Maybe<Array<Maybe<AccountRole>>>;
  username?: Maybe<Scalars['String']>;
};

export type AccountUpdateUserInput = {
  acceptTos?: InputMaybe<Scalars['Boolean']>;
  bio?: InputMaybe<Scalars['String']>;
  blocked?: InputMaybe<Scalars['Boolean']>;
  displayNameFormat?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  familyName?: InputMaybe<Scalars['String']>;
  givenName?: InputMaybe<Scalars['String']>;
  phoneNumber?: InputMaybe<Scalars['String']>;
  pronoun?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  username?: InputMaybe<Scalars['String']>;
};

export type AccountUser = {
  __typename?: 'AccountUser';
  acceptTos?: Maybe<Scalars['Boolean']>;
  badges: Array<AccountBadge>;
  bio?: Maybe<Scalars['String']>;
  blocked: Scalars['Boolean'];
  discordId?: Maybe<Scalars['String']>;
  discordInformation?: Maybe<AccountDiscordInformation>;
  displayNameFormat?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  familyName?: Maybe<Scalars['String']>;
  githubUsername?: Maybe<Scalars['String']>;
  givenName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  picture?: Maybe<Scalars['String']>;
  pronoun?: Maybe<Scalars['String']>;
  roles: Array<AccountRole>;
  sites?: Maybe<Array<Maybe<CmsSite>>>;
  title?: Maybe<Scalars['String']>;
  username: Scalars['String'];
};


export type AccountUserBadgesArgs = {
  displayed?: InputMaybe<Scalars['Boolean']>;
};


export type AccountUserPictureArgs = {
  transform?: InputMaybe<AccountUserPictureTransformInput>;
};

export enum AccountUserPictureFit {
  Clamp = 'CLAMP',
  Clip = 'CLIP',
  Crop = 'CROP',
  Facearea = 'FACEAREA',
  Fill = 'FILL',
  Fillmax = 'FILLMAX',
  Max = 'MAX',
  Min = 'MIN',
  Scale = 'SCALE'
}

export type AccountUserPictureTransformInput = {
  fit?: InputMaybe<AccountUserPictureFit>;
  height?: InputMaybe<Scalars['Int']>;
  width?: InputMaybe<Scalars['Int']>;
};

export type AccountUserSearch = {
  familyName?: InputMaybe<Scalars['String']>;
  givenName?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  username?: InputMaybe<Scalars['String']>;
};

export type AccountUserWhereInput = {
  discordId?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  githubUsername?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  username?: InputMaybe<Scalars['String']>;
};

export type AdvisorAdvisor = {
  __typename?: 'AdvisorAdvisor';
  email: Scalars['String'];
  familyName: Scalars['String'];
  givenName: Scalars['String'];
  interviewsPerWeek: Scalars['Float'];
  resumesPerWeek: Scalars['Float'];
};

export type AdvisorAdvisorCreateInput = {
  email: Scalars['String'];
  familyName: Scalars['String'];
  givenName: Scalars['String'];
  limits: AdvisorAdvisorLimitInput;
  type: AdvisorAdvisorType;
  username?: InputMaybe<Scalars['String']>;
};

export type AdvisorAdvisorLimitInput = {
  interviewsPerWeek: Scalars['Float'];
  resumesPerWeek: Scalars['Float'];
};

export enum AdvisorAdvisorType {
  Hr = 'HR',
  Technical = 'TECHNICAL'
}

export type AdvisorAdvisorWhereInput = {
  email?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  username?: InputMaybe<Scalars['String']>;
};

export type AdvisorEventParticipation = {
  __typename?: 'AdvisorEventParticipation';
  awardIds: Array<Scalars['String']>;
  eventId: Scalars['String'];
  id: Scalars['String'];
  profile: AdvisorProfile;
};

export type AdvisorEventParticipationCreateInput = {
  awardIds?: InputMaybe<Array<Scalars['String']>>;
  eventId: Scalars['String'];
};

export type AdvisorMutation = {
  __typename?: 'AdvisorMutation';
  createAdvisor: Scalars['Boolean'];
  createEventParticipation: AdvisorEventParticipation;
  createProfile: AdvisorProfile;
  createRecommendation: AdvisorRecommendation;
  createRequest: Scalars['Boolean'];
  createTag: AdvisorTag;
  deleteTag: Scalars['Boolean'];
  editAdvisorLimits: Scalars['Boolean'];
  editProfile: AdvisorProfile;
  editRecommendation: AdvisorRecommendation;
  getAdvisors: Array<AdvisorAdvisor>;
  respondRequest: Scalars['Boolean'];
};


export type AdvisorMutationCreateAdvisorArgs = {
  data: AdvisorAdvisorCreateInput;
};


export type AdvisorMutationCreateEventParticipationArgs = {
  data: AdvisorEventParticipationCreateInput;
  username: Scalars['String'];
};


export type AdvisorMutationCreateProfileArgs = {
  data: AdvisorProfileCreateInput;
  username?: InputMaybe<Scalars['String']>;
};


export type AdvisorMutationCreateRecommendationArgs = {
  authorUsername?: InputMaybe<Scalars['String']>;
  data: AdvisorRecommendationCreateInput;
  username: Scalars['String'];
};


export type AdvisorMutationCreateRequestArgs = {
  email: Scalars['String'];
  familyName: Scalars['String'];
  givenName: Scalars['String'];
  resume?: InputMaybe<Scalars['Upload']>;
  type: AdvisorRequestType;
};


export type AdvisorMutationCreateTagArgs = {
  data: AdvisorTagCreateInput;
};


export type AdvisorMutationDeleteTagArgs = {
  id: Scalars['String'];
};


export type AdvisorMutationEditAdvisorLimitsArgs = {
  limits: AdvisorAdvisorLimitInput;
  where: AdvisorAdvisorWhereInput;
};


export type AdvisorMutationEditProfileArgs = {
  data: AdvisorProfileEditInput;
  username?: InputMaybe<Scalars['String']>;
};


export type AdvisorMutationEditRecommendationArgs = {
  data: AdvisorRecommendationEditInput;
  id: Scalars['String'];
};


export type AdvisorMutationRespondRequestArgs = {
  file?: InputMaybe<Scalars['Upload']>;
  request: Scalars['String'];
  response?: InputMaybe<Scalars['AdvisorJSONObject']>;
};

export type AdvisorPendingRequests = {
  __typename?: 'AdvisorPendingRequests';
  pendingRequests: Scalars['Float'];
  requestType: AdvisorRequestType;
};

export type AdvisorProfile = {
  __typename?: 'AdvisorProfile';
  bio?: Maybe<Scalars['String']>;
  createdAt: Scalars['AdvisorDateTime'];
  email: Scalars['String'];
  eventParticipation: Array<AdvisorEventParticipation>;
  experience: Array<AdvisorTag>;
  familyName: Scalars['String'];
  givenName: Scalars['String'];
  gradHighSchoolAt?: Maybe<Scalars['AdvisorDateTime']>;
  gradUniversityAt?: Maybe<Scalars['AdvisorDateTime']>;
  recommendations: Array<AdvisorRecommendation>;
  searchFullTimeAt?: Maybe<Scalars['AdvisorDateTime']>;
  searchInternships: Scalars['Boolean'];
  searchOpen: Scalars['Boolean'];
  underrepresentedEthnicity: Scalars['Boolean'];
  underrepresentedGender: Scalars['Boolean'];
  updatedAt: Scalars['AdvisorDateTime'];
  urlGithub?: Maybe<Scalars['String']>;
  urlLinkedIn?: Maybe<Scalars['String']>;
  urlResume?: Maybe<Scalars['String']>;
  urlWebsite?: Maybe<Scalars['String']>;
  username: Scalars['String'];
  workFteAt?: Maybe<Scalars['AdvisorDateTime']>;
  workInternAt?: Maybe<Scalars['AdvisorDateTime']>;
};

export type AdvisorProfileCreateInput = {
  bio?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  experience?: InputMaybe<Array<Scalars['String']>>;
  familyName: Scalars['String'];
  givenName: Scalars['String'];
  gradHighSchoolAt?: InputMaybe<Scalars['AdvisorDateTime']>;
  gradUniversityAt?: InputMaybe<Scalars['AdvisorDateTime']>;
  resume?: InputMaybe<Scalars['Upload']>;
  searchFullTimeAt?: InputMaybe<Scalars['AdvisorDateTime']>;
  searchInternships?: InputMaybe<Scalars['Boolean']>;
  searchOpen?: InputMaybe<Scalars['Boolean']>;
  underrepresentedEthnicity?: InputMaybe<Scalars['Boolean']>;
  underrepresentedGender?: InputMaybe<Scalars['Boolean']>;
  urlGithub?: InputMaybe<Scalars['String']>;
  urlLinkedIn?: InputMaybe<Scalars['String']>;
  urlWebsite?: InputMaybe<Scalars['String']>;
  workFteAt?: InputMaybe<Scalars['AdvisorDateTime']>;
  workInternAt?: InputMaybe<Scalars['AdvisorDateTime']>;
};

export type AdvisorProfileEditInput = {
  bio?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  experience?: InputMaybe<Array<Scalars['String']>>;
  familyName?: InputMaybe<Scalars['String']>;
  givenName?: InputMaybe<Scalars['String']>;
  gradHighSchoolAt?: InputMaybe<Scalars['AdvisorDateTime']>;
  gradUniversityAt?: InputMaybe<Scalars['AdvisorDateTime']>;
  resume?: InputMaybe<Scalars['Upload']>;
  searchFullTimeAt?: InputMaybe<Scalars['AdvisorDateTime']>;
  searchInternships?: InputMaybe<Scalars['Boolean']>;
  searchOpen?: InputMaybe<Scalars['Boolean']>;
  underrepresentedEthnicity?: InputMaybe<Scalars['Boolean']>;
  underrepresentedGender?: InputMaybe<Scalars['Boolean']>;
  urlGithub?: InputMaybe<Scalars['String']>;
  urlLinkedIn?: InputMaybe<Scalars['String']>;
  urlWebsite?: InputMaybe<Scalars['String']>;
  workFteAt?: InputMaybe<Scalars['AdvisorDateTime']>;
  workInternAt?: InputMaybe<Scalars['AdvisorDateTime']>;
};

export type AdvisorQuery = {
  __typename?: 'AdvisorQuery';
  buildResumePackage: Scalars['String'];
  getRequest: AdvisorRequest;
  getRequestAssignment: AdvisorRequestAssignment;
  pendingRequests: Array<AdvisorPendingRequests>;
  profile: AdvisorProfile;
  remainingRequests: Array<AdvisorRemainingRequestsType>;
  servedRequests: Array<AdvisorRequestCount>;
  submittedRequests: Array<AdvisorRequestCount>;
  tags: Array<AdvisorTag>;
};


export type AdvisorQueryBuildResumePackageArgs = {
  username: Scalars['String'];
};


export type AdvisorQueryGetRequestArgs = {
  request: Scalars['String'];
};


export type AdvisorQueryGetRequestAssignmentArgs = {
  request: Scalars['String'];
};


export type AdvisorQueryProfileArgs = {
  username?: InputMaybe<Scalars['String']>;
};


export type AdvisorQueryServedRequestsArgs = {
  where?: InputMaybe<AdvisorRequestCountWhereInput>;
};


export type AdvisorQuerySubmittedRequestsArgs = {
  where?: InputMaybe<AdvisorRequestCountWhereInput>;
};


export type AdvisorQueryTagsArgs = {
  type?: InputMaybe<AdvisorTagType>;
};

export type AdvisorRecommendation = {
  __typename?: 'AdvisorRecommendation';
  createdAt: Scalars['AdvisorDateTime'];
  employer: Scalars['String'];
  familyName: Scalars['String'];
  givenName: Scalars['String'];
  id: Scalars['String'];
  profile: AdvisorProfile;
  recommendation?: Maybe<Scalars['String']>;
  relation: Scalars['String'];
  skillEngineering?: Maybe<AdvisorRecommendationRating>;
  skillInterpersonal?: Maybe<AdvisorRecommendationRating>;
  skillTechnical?: Maybe<AdvisorRecommendationRating>;
  title: Scalars['String'];
  updatedAt: Scalars['AdvisorDateTime'];
  username?: Maybe<Scalars['String']>;
};

export type AdvisorRecommendationCreateInput = {
  employer: Scalars['String'];
  familyName: Scalars['String'];
  givenName: Scalars['String'];
  recommendation?: InputMaybe<Scalars['String']>;
  relation: Scalars['String'];
  skillEngineering?: InputMaybe<AdvisorRecommendationRating>;
  skillInterpersonal?: InputMaybe<AdvisorRecommendationRating>;
  skillTechnical?: InputMaybe<AdvisorRecommendationRating>;
  title: Scalars['String'];
};

export type AdvisorRecommendationEditInput = {
  employer?: InputMaybe<Scalars['String']>;
  familyName?: InputMaybe<Scalars['String']>;
  givenName?: InputMaybe<Scalars['String']>;
  recommendation?: InputMaybe<Scalars['String']>;
  relation?: InputMaybe<Scalars['String']>;
  skillEngineering?: InputMaybe<AdvisorRecommendationRating>;
  skillInterpersonal?: InputMaybe<AdvisorRecommendationRating>;
  skillTechnical?: InputMaybe<AdvisorRecommendationRating>;
  title?: InputMaybe<Scalars['String']>;
};

export enum AdvisorRecommendationRating {
  InternBelow = 'INTERN_BELOW',
  InternExceeds = 'INTERN_EXCEEDS',
  InternMeets = 'INTERN_MEETS',
  NewGrad = 'NEW_GRAD',
  NewGradExceeds = 'NEW_GRAD_EXCEEDS'
}

export type AdvisorRemainingRequestsByAdvisorType = {
  __typename?: 'AdvisorRemainingRequestsByAdvisorType';
  advisorType: AdvisorAdvisorType;
  remainingRequests: Scalars['Float'];
};

export type AdvisorRemainingRequestsType = {
  __typename?: 'AdvisorRemainingRequestsType';
  advisorTypes: Array<AdvisorRemainingRequestsByAdvisorType>;
  requestType: AdvisorRequestType;
  totalRemainingRequests: Scalars['Float'];
};

export type AdvisorRequest = {
  __typename?: 'AdvisorRequest';
  email: Scalars['String'];
  familyName: Scalars['String'];
  givenName: Scalars['String'];
  resumeUrl?: Maybe<Scalars['String']>;
  type: AdvisorRequestType;
  username: Scalars['String'];
};

export type AdvisorRequestAssignment = {
  __typename?: 'AdvisorRequestAssignment';
  request: AdvisorRequest;
  response?: Maybe<Scalars['AdvisorJSONObject']>;
  responseFile?: Maybe<Scalars['String']>;
};

export type AdvisorRequestCount = {
  __typename?: 'AdvisorRequestCount';
  email: Scalars['String'];
  familyName: Scalars['String'];
  givenName: Scalars['String'];
  practiceInterviews: Scalars['Float'];
  resumeReviews: Scalars['Float'];
  username?: Maybe<Scalars['String']>;
};

export type AdvisorRequestCountWhereInput = {
  domain?: InputMaybe<Scalars['String']>;
  emails?: InputMaybe<Array<Scalars['String']>>;
  usernames?: InputMaybe<Array<Scalars['String']>>;
};

export enum AdvisorRequestType {
  Interview = 'INTERVIEW',
  Resume = 'RESUME'
}

export type AdvisorTag = {
  __typename?: 'AdvisorTag';
  displayName: Scalars['String'];
  id: Scalars['String'];
  profiles: Array<AdvisorProfile>;
  type: AdvisorTagType;
};

export type AdvisorTagCreateInput = {
  displayName: Scalars['String'];
  id: Scalars['String'];
  type: AdvisorTagType;
};

export enum AdvisorTagType {
  Interest = 'INTEREST',
  Technology = 'TECHNOLOGY'
}

/** A Field Group registered by ACF */
export type BlogAcfFieldGroup = {
  /** The name of the ACF Field Group */
  fieldGroupName?: Maybe<Scalars['String']>;
};

/** Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from. */
export type BlogAvatar = {
  __typename?: 'BlogAvatar';
  /** URL for the default image or a default type. Accepts &#039;404&#039; (return a 404 instead of a default image), &#039;retro&#039; (8bit), &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face), &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;, &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039; (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo). */
  default?: Maybe<Scalars['String']>;
  /** HTML attributes to insert in the IMG element. Is not sanitized. */
  extraAttr?: Maybe<Scalars['String']>;
  /** Whether to always show the default image, never the Gravatar. */
  forceDefault?: Maybe<Scalars['Boolean']>;
  /** Whether the avatar was successfully found. */
  foundAvatar?: Maybe<Scalars['Boolean']>;
  /** Height of the avatar image. */
  height?: Maybe<Scalars['Int']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;, &#039;R&#039;, &#039;X&#039;, and are judged in that order. */
  rating?: Maybe<Scalars['String']>;
  /** Type of url scheme to use. Typically HTTP vs. HTTPS. */
  scheme?: Maybe<Scalars['String']>;
  /** The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image. */
  size?: Maybe<Scalars['Int']>;
  /** URL for the gravatar image source. */
  url?: Maybe<Scalars['String']>;
  /** Width of the avatar image. */
  width?: Maybe<Scalars['Int']>;
};

/** What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option */
export enum BlogAvatarRatingEnum {
  /** Indicates a G level avatar rating level. */
  G = 'G',
  /** Indicates a PG level avatar rating level. */
  Pg = 'PG',
  /** Indicates an R level avatar rating level. */
  R = 'R',
  /** Indicates an X level avatar rating level. */
  X = 'X'
}

/** The category type */
export type BlogCategory = BlogDatabaseIdentifier & BlogHierarchicalTermNode & BlogMenuItemLinkable & BlogNode & BlogTermNode & BlogUniformResourceIdentifiable & {
  __typename?: 'BlogCategory';
  /** The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<BlogCategoryToAncestorsCategoryConnection>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of databaseId
   */
  categoryId?: Maybe<Scalars['Int']>;
  /** Connection between the category type and the category type */
  children?: Maybe<BlogCategoryToCategoryConnection>;
  /** Connection between the category type and the ContentNode type */
  contentNodes?: Maybe<BlogCategoryToContentNodeConnection>;
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  databaseId: Scalars['Int'];
  /** The description of the object */
  description?: Maybe<Scalars['String']>;
  /** Added to the GraphQL Schema because the ACF Field Group &quot;Display&quot; was set to Show in GraphQL. */
  display?: Maybe<BlogCategory_Display>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<BlogTermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<BlogTermNodeToEnqueuedStylesheetConnection>;
  /** The unique resource identifier path */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The link to the term */
  link?: Maybe<Scalars['String']>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']>;
  /** Connection between the category type and the category type */
  parent?: Maybe<BlogCategoryToParentCategoryConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']>;
  /** Connection between the category type and the post type */
  posts?: Maybe<BlogCategoryToPostConnection>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']>;
  /** Connection between the category type and the Taxonomy type */
  taxonomy?: Maybe<BlogCategoryToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};


/** The category type */
export type BlogCategoryAncestorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The category type */
export type BlogCategoryChildrenArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogCategoryToCategoryConnectionWhereArgs>;
};


/** The category type */
export type BlogCategoryContentNodesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogCategoryToContentNodeConnectionWhereArgs>;
};


/** The category type */
export type BlogCategoryEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The category type */
export type BlogCategoryEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The category type */
export type BlogCategoryPostsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogCategoryToPostConnectionWhereArgs>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum BlogCategoryIdType {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}

/** Connection between the category type and the category type */
export type BlogCategoryToAncestorsCategoryConnection = {
  __typename?: 'BlogCategoryToAncestorsCategoryConnection';
  /** Edges for the CategoryToAncestorsCategoryConnection connection */
  edges?: Maybe<Array<Maybe<BlogCategoryToAncestorsCategoryConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogCategory>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogCategoryToAncestorsCategoryConnectionEdge = {
  __typename?: 'BlogCategoryToAncestorsCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogCategory>;
};

/** Connection between the category type and the category type */
export type BlogCategoryToCategoryConnection = {
  __typename?: 'BlogCategoryToCategoryConnection';
  /** Edges for the CategoryToCategoryConnection connection */
  edges?: Maybe<Array<Maybe<BlogCategoryToCategoryConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogCategory>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogCategoryToCategoryConnectionEdge = {
  __typename?: 'BlogCategoryToCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogCategory>;
};

/** Arguments for filtering the CategoryToCategoryConnection connection */
export type BlogCategoryToCategoryConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<BlogOrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<BlogTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']>;
};

/** Connection between the category type and the ContentNode type */
export type BlogCategoryToContentNodeConnection = {
  __typename?: 'BlogCategoryToContentNodeConnection';
  /** Edges for the CategoryToContentNodeConnection connection */
  edges?: Maybe<Array<Maybe<BlogCategoryToContentNodeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogContentNode>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogCategoryToContentNodeConnectionEdge = {
  __typename?: 'BlogCategoryToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogContentNode>;
};

/** Arguments for filtering the CategoryToContentNodeConnection connection */
export type BlogCategoryToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<BlogContentTypesOfCategoryEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the category type and the category type */
export type BlogCategoryToParentCategoryConnectionEdge = {
  __typename?: 'BlogCategoryToParentCategoryConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<BlogCategory>;
};

/** Connection between the category type and the post type */
export type BlogCategoryToPostConnection = {
  __typename?: 'BlogCategoryToPostConnection';
  /** Edges for the CategoryToPostConnection connection */
  edges?: Maybe<Array<Maybe<BlogCategoryToPostConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogPost>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogCategoryToPostConnectionEdge = {
  __typename?: 'BlogCategoryToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogPost>;
};

/** Arguments for filtering the CategoryToPostConnection connection */
export type BlogCategoryToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the category type and the Taxonomy type */
export type BlogCategoryToTaxonomyConnectionEdge = {
  __typename?: 'BlogCategoryToTaxonomyConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<BlogTaxonomy>;
};

/** Field Group */
export type BlogCategory_Display = BlogAcfFieldGroup & {
  __typename?: 'BlogCategory_Display';
  color?: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  fieldGroupName?: Maybe<Scalars['String']>;
};

/** A Comment object */
export type BlogComment = BlogDatabaseIdentifier & BlogNode & {
  __typename?: 'BlogComment';
  /** User agent used to post the comment. This field is equivalent to WP_Comment-&gt;comment_agent and the value matching the &quot;comment_agent&quot; column in SQL. */
  agent?: Maybe<Scalars['String']>;
  /** The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL. */
  approved?: Maybe<Scalars['Boolean']>;
  /** The author of the comment */
  author?: Maybe<BlogCommentToCommenterConnectionEdge>;
  /** IP address for the author. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL. */
  authorIp?: Maybe<Scalars['String']>;
  /**
   * ID for the comment, unique among comments.
   * @deprecated Deprecated in favor of databaseId
   */
  commentId?: Maybe<Scalars['Int']>;
  /** Connection between the Comment type and the ContentNode type */
  commentedOn?: Maybe<BlogCommentToContentNodeConnectionEdge>;
  /** Content of the comment. This field is equivalent to WP_Comment-&gt;comment_content and the value matching the &quot;comment_content&quot; column in SQL. */
  content?: Maybe<Scalars['String']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int'];
  /** Date the comment was posted in local time. This field is equivalent to WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL. */
  date?: Maybe<Scalars['String']>;
  /** Date the comment was posted in GMT. This field is equivalent to WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL. */
  dateGmt?: Maybe<Scalars['String']>;
  /** The globally unique identifier for the comment object */
  id: Scalars['ID'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Karma value for the comment. This field is equivalent to WP_Comment-&gt;comment_karma and the value matching the &quot;comment_karma&quot; column in SQL. */
  karma?: Maybe<Scalars['Int']>;
  /** Connection between the Comment type and the Comment type */
  parent?: Maybe<BlogCommentToParentCommentConnectionEdge>;
  /** The database id of the parent comment node or null if it is the root comment */
  parentDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent comment node. */
  parentId?: Maybe<Scalars['ID']>;
  /** Connection between the Comment type and the Comment type */
  replies?: Maybe<BlogCommentToCommentConnection>;
  /** Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and the value matching the &quot;comment_type&quot; column in SQL. */
  type?: Maybe<Scalars['String']>;
};


/** A Comment object */
export type BlogCommentContentArgs = {
  format?: InputMaybe<BlogPostObjectFieldFormatEnum>;
};


/** A Comment object */
export type BlogCommentParentArgs = {
  where?: InputMaybe<BlogCommentToParentCommentConnectionWhereArgs>;
};


/** A Comment object */
export type BlogCommentRepliesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogCommentToCommentConnectionWhereArgs>;
};

/** A Comment Author object */
export type BlogCommentAuthor = BlogCommenter & BlogNode & {
  __typename?: 'BlogCommentAuthor';
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'];
  /** The email for the comment author */
  email?: Maybe<Scalars['String']>;
  /** The globally unique identifier for the comment author object */
  id: Scalars['ID'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** The name for the comment author. */
  name?: Maybe<Scalars['String']>;
  /** The url the comment author. */
  url?: Maybe<Scalars['String']>;
};

/** Connection between the Comment type and the Comment type */
export type BlogCommentToCommentConnection = {
  __typename?: 'BlogCommentToCommentConnection';
  /** Edges for the CommentToCommentConnection connection */
  edges?: Maybe<Array<Maybe<BlogCommentToCommentConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogComment>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogCommentToCommentConnectionEdge = {
  __typename?: 'BlogCommentToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogComment>;
};

/** Arguments for filtering the CommentToCommentConnection connection */
export type BlogCommentToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<BlogContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<BlogOrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<BlogCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']>;
};

/** Connection between the Comment type and the Commenter type */
export type BlogCommentToCommenterConnectionEdge = {
  __typename?: 'BlogCommentToCommenterConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<BlogCommenter>;
};

/** Connection between the Comment type and the ContentNode type */
export type BlogCommentToContentNodeConnectionEdge = {
  __typename?: 'BlogCommentToContentNodeConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<BlogContentNode>;
};

/** Connection between the Comment type and the Comment type */
export type BlogCommentToParentCommentConnectionEdge = {
  __typename?: 'BlogCommentToParentCommentConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<BlogComment>;
};

/** Arguments for filtering the CommentToParentCommentConnection connection */
export type BlogCommentToParentCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<BlogContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<BlogOrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<BlogCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']>;
};

/** The author of a comment */
export type BlogCommenter = {
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'];
  /** The email address of the author of a comment. */
  email?: Maybe<Scalars['String']>;
  /** The globally unique identifier for the comment author. */
  id: Scalars['ID'];
  /** Whether the author information is considered restricted. (not fully public) */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** The name of the author of a comment. */
  name?: Maybe<Scalars['String']>;
  /** The url of the author of a comment. */
  url?: Maybe<Scalars['String']>;
};

/** Options for ordering the connection */
export enum BlogCommentsConnectionOrderbyEnum {
  /** Order by browser user agent of the commenter. */
  CommentAgent = 'COMMENT_AGENT',
  /** Order by true/false approval of the comment. */
  CommentApproved = 'COMMENT_APPROVED',
  /** Order by name of the comment author. */
  CommentAuthor = 'COMMENT_AUTHOR',
  /** Order by e-mail of the comment author. */
  CommentAuthorEmail = 'COMMENT_AUTHOR_EMAIL',
  /** Order by IP address of the comment author. */
  CommentAuthorIp = 'COMMENT_AUTHOR_IP',
  /** Order by URL address of the comment author. */
  CommentAuthorUrl = 'COMMENT_AUTHOR_URL',
  /** Order by the comment contents. */
  CommentContent = 'COMMENT_CONTENT',
  /** Order by date/time timestamp of the comment. */
  CommentDate = 'COMMENT_DATE',
  /** Order by GMT timezone date/time timestamp of the comment. */
  CommentDateGmt = 'COMMENT_DATE_GMT',
  /** Order by the globally unique identifier for the comment object */
  CommentId = 'COMMENT_ID',
  /** Order by the array list of comment IDs listed in the where clause. */
  CommentIn = 'COMMENT_IN',
  /** Order by the comment karma score. */
  CommentKarma = 'COMMENT_KARMA',
  /** Order by the comment parent ID. */
  CommentParent = 'COMMENT_PARENT',
  /** Order by the post object ID. */
  CommentPostId = 'COMMENT_POST_ID',
  /** Order by the the type of comment, such as 'comment', 'pingback', or 'trackback'. */
  CommentType = 'COMMENT_TYPE',
  /** Order by the user ID. */
  UserId = 'USER_ID'
}

/** Nodes used to manage content */
export type BlogContentNode = {
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<BlogContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String'];
  /** The ID of the node in the database. */
  databaseId: Scalars['Int'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<BlogContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<BlogContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<BlogContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']>;
  /** The unique resource identifier path */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<BlogContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']>;
  /** The template assigned to a node of content */
  template?: Maybe<BlogContentTemplate>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};


/** Nodes used to manage content */
export type BlogContentNodeEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** Nodes used to manage content */
export type BlogContentNodeEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum BlogContentNodeIdTypeEnum {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the ContentNode type and the ContentType type */
export type BlogContentNodeToContentTypeConnectionEdge = {
  __typename?: 'BlogContentNodeToContentTypeConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<BlogContentType>;
};

/** Connection between the ContentNode type and the User type */
export type BlogContentNodeToEditLastConnectionEdge = {
  __typename?: 'BlogContentNodeToEditLastConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<BlogUser>;
};

/** Connection between the ContentNode type and the User type */
export type BlogContentNodeToEditLockConnectionEdge = {
  __typename?: 'BlogContentNodeToEditLockConnectionEdge';
  /** The timestamp for when the node was last edited */
  lockTimestamp?: Maybe<Scalars['String']>;
  /** The node of the connection, without the edges */
  node?: Maybe<BlogUser>;
};

/** Connection between the ContentNode type and the EnqueuedScript type */
export type BlogContentNodeToEnqueuedScriptConnection = {
  __typename?: 'BlogContentNodeToEnqueuedScriptConnection';
  /** Edges for the ContentNodeToEnqueuedScriptConnection connection */
  edges?: Maybe<Array<Maybe<BlogContentNodeToEnqueuedScriptConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogEnqueuedScript>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogContentNodeToEnqueuedScriptConnectionEdge = {
  __typename?: 'BlogContentNodeToEnqueuedScriptConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogEnqueuedScript>;
};

/** Connection between the ContentNode type and the EnqueuedStylesheet type */
export type BlogContentNodeToEnqueuedStylesheetConnection = {
  __typename?: 'BlogContentNodeToEnqueuedStylesheetConnection';
  /** Edges for the ContentNodeToEnqueuedStylesheetConnection connection */
  edges?: Maybe<Array<Maybe<BlogContentNodeToEnqueuedStylesheetConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogEnqueuedStylesheet>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogContentNodeToEnqueuedStylesheetConnectionEdge = {
  __typename?: 'BlogContentNodeToEnqueuedStylesheetConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogEnqueuedStylesheet>;
};

/** A union of Content Node Types that support revisions */
export type BlogContentRevisionUnion = BlogPage | BlogPost;

/** The template assigned to a node of content */
export type BlogContentTemplate = {
  /** The name of the template */
  templateName?: Maybe<Scalars['String']>;
};

/** An Post Type object */
export type BlogContentType = BlogNode & BlogUniformResourceIdentifiable & {
  __typename?: 'BlogContentType';
  /** Whether this content type should can be exported. */
  canExport?: Maybe<Scalars['Boolean']>;
  /** Connection between the ContentType type and the Taxonomy type */
  connectedTaxonomies?: Maybe<BlogContentTypeToTaxonomyConnection>;
  /** Connection between the ContentType type and the ContentNode type */
  contentNodes?: Maybe<BlogContentTypeToContentNodeConnection>;
  /** Whether content of this type should be deleted when the author of it is deleted from the system. */
  deleteWithUser?: Maybe<Scalars['Boolean']>;
  /** Description of the content type. */
  description?: Maybe<Scalars['String']>;
  /** Whether to exclude nodes of this content type from front end search results. */
  excludeFromSearch?: Maybe<Scalars['Boolean']>;
  /** The plural name of the content type within the GraphQL Schema. */
  graphqlPluralName?: Maybe<Scalars['String']>;
  /** The singular name of the content type within the GraphQL Schema. */
  graphqlSingleName?: Maybe<Scalars['String']>;
  /** Whether this content type should have archives. Content archives are generated by type and by date. */
  hasArchive?: Maybe<Scalars['Boolean']>;
  /** Whether the content type is hierarchical, for example pages. */
  hierarchical?: Maybe<Scalars['Boolean']>;
  /** The globally unique identifier of the post-type object. */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether this page is set to the static front page. */
  isFrontPage: Scalars['Boolean'];
  /** Whether this page is set to the blog posts page. */
  isPostsPage: Scalars['Boolean'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** Display name of the content type. */
  label?: Maybe<Scalars['String']>;
  /** Details about the content type labels. */
  labels?: Maybe<BlogPostTypeLabelDetails>;
  /** The name of the icon file to display as a menu icon. */
  menuIcon?: Maybe<Scalars['String']>;
  /** The position of this post type in the menu. Only applies if show_in_menu is true. */
  menuPosition?: Maybe<Scalars['Int']>;
  /** The internal name of the post type. This should not be used for display purposes. */
  name?: Maybe<Scalars['String']>;
  /** Whether a content type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention. */
  public?: Maybe<Scalars['Boolean']>;
  /** Whether queries can be performed on the front end for the content type as part of parse_request(). */
  publiclyQueryable?: Maybe<Scalars['Boolean']>;
  /** Name of content type to display in REST API &quot;wp/v2&quot; namespace. */
  restBase?: Maybe<Scalars['String']>;
  /** The REST Controller class assigned to handling this content type. */
  restControllerClass?: Maybe<Scalars['String']>;
  /** Makes this content type available via the admin bar. */
  showInAdminBar?: Maybe<Scalars['Boolean']>;
  /** Whether to add the content type to the GraphQL Schema. */
  showInGraphql?: Maybe<Scalars['Boolean']>;
  /** Where to show the content type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type will be placed as a sub-menu of that. */
  showInMenu?: Maybe<Scalars['Boolean']>;
  /** Makes this content type available for selection in navigation menus. */
  showInNavMenus?: Maybe<Scalars['Boolean']>;
  /** Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace. */
  showInRest?: Maybe<Scalars['Boolean']>;
  /** Whether to generate and allow a UI for managing this content type in the admin. */
  showUi?: Maybe<Scalars['Boolean']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};


/** An Post Type object */
export type BlogContentTypeConnectedTaxonomiesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** An Post Type object */
export type BlogContentTypeContentNodesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogContentTypeToContentNodeConnectionWhereArgs>;
};

/** Allowed Content Types */
export enum BlogContentTypeEnum {
  /** The Type of Content object */
  Attachment = 'ATTACHMENT',
  /** The Type of Content object */
  Page = 'PAGE',
  /** The Type of Content object */
  Post = 'POST'
}

/** The Type of Identifier used to fetch a single Content Type node. To be used along with the "id" field. Default is "ID". */
export enum BlogContentTypeIdTypeEnum {
  /** The globally unique ID */
  Id = 'ID',
  /** The name of the content type. */
  Name = 'NAME'
}

/** Connection between the ContentType type and the ContentNode type */
export type BlogContentTypeToContentNodeConnection = {
  __typename?: 'BlogContentTypeToContentNodeConnection';
  /** Edges for the ContentTypeToContentNodeConnection connection */
  edges?: Maybe<Array<Maybe<BlogContentTypeToContentNodeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogContentNode>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogContentTypeToContentNodeConnectionEdge = {
  __typename?: 'BlogContentTypeToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogContentNode>;
};

/** Arguments for filtering the ContentTypeToContentNodeConnection connection */
export type BlogContentTypeToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<BlogContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the ContentType type and the Taxonomy type */
export type BlogContentTypeToTaxonomyConnection = {
  __typename?: 'BlogContentTypeToTaxonomyConnection';
  /** Edges for the ContentTypeToTaxonomyConnection connection */
  edges?: Maybe<Array<Maybe<BlogContentTypeToTaxonomyConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogTaxonomy>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogContentTypeToTaxonomyConnectionEdge = {
  __typename?: 'BlogContentTypeToTaxonomyConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogTaxonomy>;
};

/** Allowed Content Types of the Category taxonomy. */
export enum BlogContentTypesOfCategoryEnum {
  /** The Type of Content object */
  Post = 'POST'
}

/** Allowed Content Types of the PostFormat taxonomy. */
export enum BlogContentTypesOfPostFormatEnum {
  /** The Type of Content object */
  Post = 'POST'
}

/** Allowed Content Types of the Tag taxonomy. */
export enum BlogContentTypesOfTagEnum {
  /** The Type of Content object */
  Post = 'POST'
}

/** Input for the createCategory mutation */
export type BlogCreateCategoryInput = {
  /** The slug that the category will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The description of the category object */
  description?: InputMaybe<Scalars['String']>;
  /** The name of the category object to mutate */
  name: Scalars['String'];
  /** The ID of the category that should be set as the parent */
  parentId?: InputMaybe<Scalars['ID']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']>;
};

/** The payload for the createCategory mutation */
export type BlogCreateCategoryPayload = {
  __typename?: 'BlogCreateCategoryPayload';
  /** The created category */
  category?: Maybe<BlogCategory>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Input for the createComment mutation */
export type BlogCreateCommentInput = {
  /** The approval status of the comment. */
  approved?: InputMaybe<Scalars['String']>;
  /** The name of the comment's author. */
  author?: InputMaybe<Scalars['String']>;
  /** The email of the comment's author. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** The url of the comment's author. */
  authorUrl?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the post object the comment belongs to. */
  commentOn?: InputMaybe<Scalars['Int']>;
  /** Content of the comment. */
  content?: InputMaybe<Scalars['String']>;
  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']>;
  /** Parent comment of current comment. */
  parent?: InputMaybe<Scalars['ID']>;
  /** Type of comment. */
  type?: InputMaybe<Scalars['String']>;
};

/** The payload for the createComment mutation */
export type BlogCreateCommentPayload = {
  __typename?: 'BlogCreateCommentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The comment that was created */
  comment?: Maybe<BlogComment>;
  /** Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache */
  success?: Maybe<Scalars['Boolean']>;
};

/** Input for the createMediaItem mutation */
export type BlogCreateMediaItemInput = {
  /** Alternative text to display when mediaItem is not displayed */
  altText?: InputMaybe<Scalars['String']>;
  /** The userId to assign as the author of the mediaItem */
  authorId?: InputMaybe<Scalars['ID']>;
  /** The caption for the mediaItem */
  caption?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The comment status for the mediaItem */
  commentStatus?: InputMaybe<Scalars['String']>;
  /** The date of the mediaItem */
  date?: InputMaybe<Scalars['String']>;
  /** The date (in GMT zone) of the mediaItem */
  dateGmt?: InputMaybe<Scalars['String']>;
  /** Description of the mediaItem */
  description?: InputMaybe<Scalars['String']>;
  /** The file name of the mediaItem */
  filePath?: InputMaybe<Scalars['String']>;
  /** The file type of the mediaItem */
  fileType?: InputMaybe<BlogMimeTypeEnum>;
  /** The WordPress post ID or the graphQL postId of the parent object */
  parentId?: InputMaybe<Scalars['ID']>;
  /** The ping status for the mediaItem */
  pingStatus?: InputMaybe<Scalars['String']>;
  /** The slug of the mediaItem */
  slug?: InputMaybe<Scalars['String']>;
  /** The status of the mediaItem */
  status?: InputMaybe<BlogMediaItemStatusEnum>;
  /** The title of the mediaItem */
  title?: InputMaybe<Scalars['String']>;
};

/** The payload for the createMediaItem mutation */
export type BlogCreateMediaItemPayload = {
  __typename?: 'BlogCreateMediaItemPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The MediaItem object mutation type. */
  mediaItem?: Maybe<BlogMediaItem>;
};

/** Input for the createPage mutation */
export type BlogCreatePageInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars['String']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** The payload for the createPage mutation */
export type BlogCreatePagePayload = {
  __typename?: 'BlogCreatePagePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The Post object mutation type. */
  page?: Maybe<BlogPage>;
};

/** Input for the createPostFormat mutation */
export type BlogCreatePostFormatInput = {
  /** The slug that the post_format will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The description of the post_format object */
  description?: InputMaybe<Scalars['String']>;
  /** The name of the post_format object to mutate */
  name: Scalars['String'];
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']>;
};

/** The payload for the createPostFormat mutation */
export type BlogCreatePostFormatPayload = {
  __typename?: 'BlogCreatePostFormatPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The created post_format */
  postFormat?: Maybe<BlogPostFormat>;
};

/** Input for the createPost mutation */
export type BlogCreatePostInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']>;
  /** Set connections between the post and categories */
  categories?: InputMaybe<BlogPostCategoriesInput>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars['String']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']>;
  /** The excerpt of the object */
  excerpt?: InputMaybe<Scalars['String']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']>;
  /** The ping status for the object */
  pingStatus?: InputMaybe<Scalars['String']>;
  /** URLs that have been pinged. */
  pinged?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Set connections between the post and postFormats */
  postFormats?: InputMaybe<BlogPostPostFormatsInput>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']>;
  /** Set connections between the post and tags */
  tags?: InputMaybe<BlogPostTagsInput>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']>;
  /** URLs queued to be pinged. */
  toPing?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

/** The payload for the createPost mutation */
export type BlogCreatePostPayload = {
  __typename?: 'BlogCreatePostPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The Post object mutation type. */
  post?: Maybe<BlogPost>;
};

/** Input for the createTag mutation */
export type BlogCreateTagInput = {
  /** The slug that the post_tag will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The description of the post_tag object */
  description?: InputMaybe<Scalars['String']>;
  /** The name of the post_tag object to mutate */
  name: Scalars['String'];
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']>;
};

/** The payload for the createTag mutation */
export type BlogCreateTagPayload = {
  __typename?: 'BlogCreateTagPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The created post_tag */
  tag?: Maybe<BlogTag>;
};

/** Input for the createUser mutation */
export type BlogCreateUserInput = {
  /** User's AOL IM account. */
  aim?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** A string containing content about the user. */
  description?: InputMaybe<Scalars['String']>;
  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */
  displayName?: InputMaybe<Scalars['String']>;
  /** A string containing the user's email address. */
  email?: InputMaybe<Scalars['String']>;
  /** 	The user's first name. */
  firstName?: InputMaybe<Scalars['String']>;
  /** User's Jabber account. */
  jabber?: InputMaybe<Scalars['String']>;
  /** The user's last name. */
  lastName?: InputMaybe<Scalars['String']>;
  /** User's locale. */
  locale?: InputMaybe<Scalars['String']>;
  /** A string that contains a URL-friendly name for the user. The default is the user's username. */
  nicename?: InputMaybe<Scalars['String']>;
  /** The user's nickname, defaults to the user's username. */
  nickname?: InputMaybe<Scalars['String']>;
  /** A string that contains the plain text password for the user. */
  password?: InputMaybe<Scalars['String']>;
  /** The date the user registered. Format is Y-m-d H:i:s. */
  registered?: InputMaybe<Scalars['String']>;
  /** A string for whether to enable the rich editor or not. False if not empty. */
  richEditing?: InputMaybe<Scalars['String']>;
  /** An array of roles to be assigned to the user. */
  roles?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** A string that contains the user's username for logging in. */
  username: Scalars['String'];
  /** A string containing the user's URL for the user's web site. */
  websiteUrl?: InputMaybe<Scalars['String']>;
  /** User's Yahoo IM account. */
  yim?: InputMaybe<Scalars['String']>;
};

/** The payload for the createUser mutation */
export type BlogCreateUserPayload = {
  __typename?: 'BlogCreateUserPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The User object mutation type. */
  user?: Maybe<BlogUser>;
};

/** Object that can be identified with a Database ID */
export type BlogDatabaseIdentifier = {
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int'];
};

/** Date values */
export type BlogDateInput = {
  /** Day of the month (from 1 to 31) */
  day?: InputMaybe<Scalars['Int']>;
  /** Month number (from 1 to 12) */
  month?: InputMaybe<Scalars['Int']>;
  /** 4 digit year (e.g. 2017) */
  year?: InputMaybe<Scalars['Int']>;
};

/** Filter the connection based on input */
export type BlogDateQueryInput = {
  /** Nodes should be returned after this date */
  after?: InputMaybe<BlogDateInput>;
  /** Nodes should be returned before this date */
  before?: InputMaybe<BlogDateInput>;
  /** Column to query against */
  column?: InputMaybe<BlogPostObjectsConnectionDateColumnEnum>;
  /** For after/before, whether exact value should be matched or not */
  compare?: InputMaybe<Scalars['String']>;
  /** Day of the month (from 1 to 31) */
  day?: InputMaybe<Scalars['Int']>;
  /** Hour (from 0 to 23) */
  hour?: InputMaybe<Scalars['Int']>;
  /** For after/before, whether exact value should be matched or not */
  inclusive?: InputMaybe<Scalars['Boolean']>;
  /** Minute (from 0 to 59) */
  minute?: InputMaybe<Scalars['Int']>;
  /** Month number (from 1 to 12) */
  month?: InputMaybe<Scalars['Int']>;
  /** OR or AND, how the sub-arrays should be compared */
  relation?: InputMaybe<BlogRelationEnum>;
  /** Second (0 to 59) */
  second?: InputMaybe<Scalars['Int']>;
  /** Week of the year (from 0 to 53) */
  week?: InputMaybe<Scalars['Int']>;
  /** 4 digit year (e.g. 2017) */
  year?: InputMaybe<Scalars['Int']>;
};

/** The template assigned to the node */
export type BlogDefaultTemplate = BlogContentTemplate & {
  __typename?: 'BlogDefaultTemplate';
  /** The name of the template */
  templateName?: Maybe<Scalars['String']>;
};

/** Input for the deleteCategory mutation */
export type BlogDeleteCategoryInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the category to delete */
  id: Scalars['ID'];
};

/** The payload for the deleteCategory mutation */
export type BlogDeleteCategoryPayload = {
  __typename?: 'BlogDeleteCategoryPayload';
  /** The deteted term object */
  category?: Maybe<BlogCategory>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']>;
};

/** Input for the deleteComment mutation */
export type BlogDeleteCommentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Whether the comment should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']>;
  /** The deleted comment ID */
  id: Scalars['ID'];
};

/** The payload for the deleteComment mutation */
export type BlogDeleteCommentPayload = {
  __typename?: 'BlogDeleteCommentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The deleted comment object */
  comment?: Maybe<BlogComment>;
  /** The deleted comment ID */
  deletedId?: Maybe<Scalars['ID']>;
};

/** Input for the deleteMediaItem mutation */
export type BlogDeleteMediaItemInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Whether the mediaItem should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the mediaItem to delete */
  id: Scalars['ID'];
};

/** The payload for the deleteMediaItem mutation */
export type BlogDeleteMediaItemPayload = {
  __typename?: 'BlogDeleteMediaItemPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the deleted mediaItem */
  deletedId?: Maybe<Scalars['ID']>;
  /** The mediaItem before it was deleted */
  mediaItem?: Maybe<BlogMediaItem>;
};

/** Input for the deletePage mutation */
export type BlogDeletePageInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the page to delete */
  id: Scalars['ID'];
};

/** The payload for the deletePage mutation */
export type BlogDeletePagePayload = {
  __typename?: 'BlogDeletePagePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']>;
  /** The object before it was deleted */
  page?: Maybe<BlogPage>;
};

/** Input for the deletePostFormat mutation */
export type BlogDeletePostFormatInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the postFormat to delete */
  id: Scalars['ID'];
};

/** The payload for the deletePostFormat mutation */
export type BlogDeletePostFormatPayload = {
  __typename?: 'BlogDeletePostFormatPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']>;
  /** The deteted term object */
  postFormat?: Maybe<BlogPostFormat>;
};

/** Input for the deletePost mutation */
export type BlogDeletePostInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the post to delete */
  id: Scalars['ID'];
};

/** The payload for the deletePost mutation */
export type BlogDeletePostPayload = {
  __typename?: 'BlogDeletePostPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']>;
  /** The object before it was deleted */
  post?: Maybe<BlogPost>;
};

/** Input for the deleteTag mutation */
export type BlogDeleteTagInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the tag to delete */
  id: Scalars['ID'];
};

/** The payload for the deleteTag mutation */
export type BlogDeleteTagPayload = {
  __typename?: 'BlogDeleteTagPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']>;
  /** The deteted term object */
  tag?: Maybe<BlogTag>;
};

/** Input for the deleteUser mutation */
export type BlogDeleteUserInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the user you want to delete */
  id: Scalars['ID'];
  /** Reassign posts and links to new User ID. */
  reassignId?: InputMaybe<Scalars['ID']>;
};

/** The payload for the deleteUser mutation */
export type BlogDeleteUserPayload = {
  __typename?: 'BlogDeleteUserPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the user that you just deleted */
  deletedId?: Maybe<Scalars['ID']>;
  /** The deleted user object */
  user?: Maybe<BlogUser>;
};

/** The discussion setting type */
export type BlogDiscussionSettings = {
  __typename?: 'BlogDiscussionSettings';
  /** Allow people to submit comments on new posts. */
  defaultCommentStatus?: Maybe<Scalars['String']>;
  /** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */
  defaultPingStatus?: Maybe<Scalars['String']>;
};

/** Asset enqueued by the CMS */
export type BlogEnqueuedAsset = {
  /** @todo */
  args?: Maybe<Scalars['Boolean']>;
  /** Dependencies needed to use this asset */
  dependencies?: Maybe<Array<Maybe<BlogEnqueuedScript>>>;
  /** Extra information needed for the script */
  extra?: Maybe<Scalars['String']>;
  /** The handle of the enqueued asset */
  handle?: Maybe<Scalars['String']>;
  /** The ID of the enqueued asset */
  id: Scalars['ID'];
  /** The source of the asset */
  src?: Maybe<Scalars['String']>;
  /** The version of the enqueued asset */
  version?: Maybe<Scalars['String']>;
};

/** Script enqueued by the CMS */
export type BlogEnqueuedScript = BlogEnqueuedAsset & BlogNode & {
  __typename?: 'BlogEnqueuedScript';
  /** @todo */
  args?: Maybe<Scalars['Boolean']>;
  /** Dependencies needed to use this asset */
  dependencies?: Maybe<Array<Maybe<BlogEnqueuedScript>>>;
  /** Extra information needed for the script */
  extra?: Maybe<Scalars['String']>;
  /** The handle of the enqueued asset */
  handle?: Maybe<Scalars['String']>;
  /** The ID of the enqueued asset */
  id: Scalars['ID'];
  /** The source of the asset */
  src?: Maybe<Scalars['String']>;
  /** The version of the enqueued asset */
  version?: Maybe<Scalars['String']>;
};

/** Stylesheet enqueued by the CMS */
export type BlogEnqueuedStylesheet = BlogEnqueuedAsset & BlogNode & {
  __typename?: 'BlogEnqueuedStylesheet';
  /** @todo */
  args?: Maybe<Scalars['Boolean']>;
  /** Dependencies needed to use this asset */
  dependencies?: Maybe<Array<Maybe<BlogEnqueuedScript>>>;
  /** Extra information needed for the script */
  extra?: Maybe<Scalars['String']>;
  /** The handle of the enqueued asset */
  handle?: Maybe<Scalars['String']>;
  /** The ID of the enqueued asset */
  id: Scalars['ID'];
  /** The source of the asset */
  src?: Maybe<Scalars['String']>;
  /** The version of the enqueued asset */
  version?: Maybe<Scalars['String']>;
};

/** The general setting type */
export type BlogGeneralSettings = {
  __typename?: 'BlogGeneralSettings';
  /** A date format for all date strings. */
  dateFormat?: Maybe<Scalars['String']>;
  /** Site tagline. */
  description?: Maybe<Scalars['String']>;
  /** This address is used for admin purposes, like new user notification. */
  email?: Maybe<Scalars['String']>;
  /** WordPress locale code. */
  language?: Maybe<Scalars['String']>;
  /** A day number of the week that the week should start on. */
  startOfWeek?: Maybe<Scalars['Int']>;
  /** A time format for all time strings. */
  timeFormat?: Maybe<Scalars['String']>;
  /** A city in the same timezone as you. */
  timezone?: Maybe<Scalars['String']>;
  /** Site title. */
  title?: Maybe<Scalars['String']>;
  /** Site URL. */
  url?: Maybe<Scalars['String']>;
};

/** Content node with hierarchical (parent/child) relationships */
export type BlogHierarchicalContentNode = {
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<BlogHierarchicalContentNodeToContentNodeAncestorsConnection>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  children?: Maybe<BlogHierarchicalContentNodeToContentNodeChildrenConnection>;
  /** The parent of the node. The parent object can be of various types */
  parent?: Maybe<BlogHierarchicalContentNodeToParentContentNodeConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']>;
};


/** Content node with hierarchical (parent/child) relationships */
export type BlogHierarchicalContentNodeAncestorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogHierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
};


/** Content node with hierarchical (parent/child) relationships */
export type BlogHierarchicalContentNodeChildrenArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogHierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
};

/** Connection between the HierarchicalContentNode type and the ContentNode type */
export type BlogHierarchicalContentNodeToContentNodeAncestorsConnection = {
  __typename?: 'BlogHierarchicalContentNodeToContentNodeAncestorsConnection';
  /** Edges for the HierarchicalContentNodeToContentNodeAncestorsConnection connection */
  edges?: Maybe<Array<Maybe<BlogHierarchicalContentNodeToContentNodeAncestorsConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogContentNode>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogHierarchicalContentNodeToContentNodeAncestorsConnectionEdge = {
  __typename?: 'BlogHierarchicalContentNodeToContentNodeAncestorsConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogContentNode>;
};

/** Arguments for filtering the HierarchicalContentNodeToContentNodeAncestorsConnection connection */
export type BlogHierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<BlogContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the HierarchicalContentNode type and the ContentNode type */
export type BlogHierarchicalContentNodeToContentNodeChildrenConnection = {
  __typename?: 'BlogHierarchicalContentNodeToContentNodeChildrenConnection';
  /** Edges for the HierarchicalContentNodeToContentNodeChildrenConnection connection */
  edges?: Maybe<Array<Maybe<BlogHierarchicalContentNodeToContentNodeChildrenConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogContentNode>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogHierarchicalContentNodeToContentNodeChildrenConnectionEdge = {
  __typename?: 'BlogHierarchicalContentNodeToContentNodeChildrenConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogContentNode>;
};

/** Arguments for filtering the HierarchicalContentNodeToContentNodeChildrenConnection connection */
export type BlogHierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<BlogContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the HierarchicalContentNode type and the ContentNode type */
export type BlogHierarchicalContentNodeToParentContentNodeConnectionEdge = {
  __typename?: 'BlogHierarchicalContentNodeToParentContentNodeConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<BlogContentNode>;
};

/** Term node with hierarchical (parent/child) relationships */
export type BlogHierarchicalTermNode = {
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']>;
};

/** File details for a Media Item */
export type BlogMediaDetails = {
  __typename?: 'BlogMediaDetails';
  /** The filename of the mediaItem */
  file?: Maybe<Scalars['String']>;
  /** The height of the mediaItem */
  height?: Maybe<Scalars['Int']>;
  /** Meta information associated with the mediaItem */
  meta?: Maybe<BlogMediaItemMeta>;
  /** The available sizes of the mediaItem */
  sizes?: Maybe<Array<Maybe<BlogMediaSize>>>;
  /** The width of the mediaItem */
  width?: Maybe<Scalars['Int']>;
};

/** The mediaItem type */
export type BlogMediaItem = BlogContentNode & BlogDatabaseIdentifier & BlogHierarchicalContentNode & BlogNode & BlogNodeWithAuthor & BlogNodeWithComments & BlogNodeWithTemplate & BlogNodeWithTitle & BlogUniformResourceIdentifiable & {
  __typename?: 'BlogMediaItem';
  /** Alternative text to display when resource is not displayed */
  altText?: Maybe<Scalars['String']>;
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<BlogHierarchicalContentNodeToContentNodeAncestorsConnection>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']>;
  /** The caption for the resource */
  caption?: Maybe<Scalars['String']>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  children?: Maybe<BlogHierarchicalContentNodeToContentNodeChildrenConnection>;
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  commentCount?: Maybe<Scalars['Int']>;
  /** Whether the comments are open or closed for this particular post. */
  commentStatus?: Maybe<Scalars['String']>;
  /** Connection between the mediaItem type and the Comment type */
  comments?: Maybe<BlogMediaItemToCommentConnection>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<BlogContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']>;
  /** Description of the image (stored as post_content) */
  description?: Maybe<Scalars['String']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<BlogContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<BlogContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<BlogContentNodeToEnqueuedStylesheetConnection>;
  /** The filesize in bytes of the resource */
  fileSize?: Maybe<Scalars['Int']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']>;
  /** The globally unique identifier of the attachment object. */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<BlogContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']>;
  /** Details about the mediaItem */
  mediaDetails?: Maybe<BlogMediaDetails>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  mediaItemId: Scalars['Int'];
  /** Url of the mediaItem */
  mediaItemUrl?: Maybe<Scalars['String']>;
  /** Type of resource */
  mediaType?: Maybe<Scalars['String']>;
  /** The mime type of the mediaItem */
  mimeType?: Maybe<Scalars['String']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']>;
  /** The parent of the node. The parent object can be of various types */
  parent?: Maybe<BlogHierarchicalContentNodeToParentContentNodeConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']>;
  /** The sizes attribute value for an image. */
  sizes?: Maybe<Scalars['String']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']>;
  /** Url of the mediaItem */
  sourceUrl?: Maybe<Scalars['String']>;
  /** The srcset attribute specifies the URL of the image to use in different situations. It is a comma separated string of urls and their widths. */
  srcSet?: Maybe<Scalars['String']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']>;
  /** The template assigned to the node */
  template?: Maybe<BlogContentTemplate>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
  /** Connection between the NodeWithAuthor type and the User type */
  wpAuthor?: Maybe<BlogNodeWithAuthorToUserConnectionEdge>;
};


/** The mediaItem type */
export type BlogMediaItemAncestorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogHierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
};


/** The mediaItem type */
export type BlogMediaItemCaptionArgs = {
  format?: InputMaybe<BlogPostObjectFieldFormatEnum>;
};


/** The mediaItem type */
export type BlogMediaItemChildrenArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogHierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
};


/** The mediaItem type */
export type BlogMediaItemCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogMediaItemToCommentConnectionWhereArgs>;
};


/** The mediaItem type */
export type BlogMediaItemDescriptionArgs = {
  format?: InputMaybe<BlogPostObjectFieldFormatEnum>;
};


/** The mediaItem type */
export type BlogMediaItemEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The mediaItem type */
export type BlogMediaItemEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The mediaItem type */
export type BlogMediaItemFileSizeArgs = {
  size?: InputMaybe<BlogMediaItemSizeEnum>;
};


/** The mediaItem type */
export type BlogMediaItemSizesArgs = {
  size?: InputMaybe<BlogMediaItemSizeEnum>;
};


/** The mediaItem type */
export type BlogMediaItemSourceUrlArgs = {
  size?: InputMaybe<BlogMediaItemSizeEnum>;
};


/** The mediaItem type */
export type BlogMediaItemSrcSetArgs = {
  size?: InputMaybe<BlogMediaItemSizeEnum>;
};


/** The mediaItem type */
export type BlogMediaItemTitleArgs = {
  format?: InputMaybe<BlogPostObjectFieldFormatEnum>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum BlogMediaItemIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a media item by its source url */
  SourceUrl = 'SOURCE_URL',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Meta connected to a MediaItem */
export type BlogMediaItemMeta = {
  __typename?: 'BlogMediaItemMeta';
  /** Aperture measurement of the media item. */
  aperture?: Maybe<Scalars['Float']>;
  /** Information about the camera used to create the media item. */
  camera?: Maybe<Scalars['String']>;
  /** The text string description associated with the media item. */
  caption?: Maybe<Scalars['String']>;
  /** Copyright information associated with the media item. */
  copyright?: Maybe<Scalars['String']>;
  /** The date/time when the media was created. */
  createdTimestamp?: Maybe<Scalars['Int']>;
  /** The original creator of the media item. */
  credit?: Maybe<Scalars['String']>;
  /** The focal length value of the media item. */
  focalLength?: Maybe<Scalars['Float']>;
  /** The ISO (International Organization for Standardization) value of the media item. */
  iso?: Maybe<Scalars['Int']>;
  /** List of keywords used to describe or identfy the media item. */
  keywords?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The vertical or horizontal aspect of the media item. */
  orientation?: Maybe<Scalars['String']>;
  /** The shutter speed information of the media item. */
  shutterSpeed?: Maybe<Scalars['Float']>;
  /** A useful title for the media item. */
  title?: Maybe<Scalars['String']>;
};

/** The size of the media item object. */
export enum BlogMediaItemSizeEnum {
  /** MediaItem with the large size */
  Large = 'LARGE',
  /** MediaItem with the medium size */
  Medium = 'MEDIUM',
  /** MediaItem with the medium_large size */
  MediumLarge = 'MEDIUM_LARGE',
  /** MediaItem with the thumbnail size */
  Thumbnail = 'THUMBNAIL',
  /** MediaItem with the 1536x1536 size */
  '1536X1536' = '_1536X1536',
  /** MediaItem with the 2048x2048 size */
  '2048X2048' = '_2048X2048'
}

/** The status of the media item object. */
export enum BlogMediaItemStatusEnum {
  /** Objects with the auto-draft status */
  AutoDraft = 'AUTO_DRAFT',
  /** Objects with the inherit status */
  Inherit = 'INHERIT',
  /** Objects with the private status */
  Private = 'PRIVATE',
  /** Objects with the trash status */
  Trash = 'TRASH'
}

/** Connection between the mediaItem type and the Comment type */
export type BlogMediaItemToCommentConnection = {
  __typename?: 'BlogMediaItemToCommentConnection';
  /** Edges for the MediaItemToCommentConnection connection */
  edges?: Maybe<Array<Maybe<BlogMediaItemToCommentConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogComment>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogMediaItemToCommentConnectionEdge = {
  __typename?: 'BlogMediaItemToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogComment>;
};

/** Arguments for filtering the MediaItemToCommentConnection connection */
export type BlogMediaItemToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<BlogContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<BlogOrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<BlogCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']>;
};

/** Details of an available size for a media item */
export type BlogMediaSize = {
  __typename?: 'BlogMediaSize';
  /** The filename of the referenced size */
  file?: Maybe<Scalars['String']>;
  /** The filesize of the resource */
  fileSize?: Maybe<Scalars['Int']>;
  /** The height of the referenced size */
  height?: Maybe<Scalars['String']>;
  /** The mime type of the referenced size */
  mimeType?: Maybe<Scalars['String']>;
  /** The referenced size name */
  name?: Maybe<Scalars['String']>;
  /** The url of the referenced size */
  sourceUrl?: Maybe<Scalars['String']>;
  /** The width of the referenced size */
  width?: Maybe<Scalars['String']>;
};

/** Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme. */
export type BlogMenu = BlogDatabaseIdentifier & BlogNode & {
  __typename?: 'BlogMenu';
  /** The number of items in the menu */
  count?: Maybe<Scalars['Int']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int'];
  /** The globally unique identifier of the nav menu object. */
  id: Scalars['ID'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** The locations a menu is assigned to */
  locations?: Maybe<Array<Maybe<BlogMenuLocationEnum>>>;
  /**
   * WP ID of the nav menu.
   * @deprecated Deprecated in favor of the databaseId field
   */
  menuId?: Maybe<Scalars['Int']>;
  /** Connection between the Menu type and the MenuItem type */
  menuItems?: Maybe<BlogMenuToMenuItemConnection>;
  /** Display name of the menu. Equivalent to WP_Term-&gt;name. */
  name?: Maybe<Scalars['String']>;
  /** The url friendly name of the menu. Equivalent to WP_Term-&gt;slug */
  slug?: Maybe<Scalars['String']>;
};


/** Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme. */
export type BlogMenuMenuItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogMenuToMenuItemConnectionWhereArgs>;
};

/** Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu. */
export type BlogMenuItem = BlogDatabaseIdentifier & BlogNode & {
  __typename?: 'BlogMenuItem';
  /** Connection between the MenuItem type and the MenuItem type */
  childItems?: Maybe<BlogMenuItemToMenuItemConnection>;
  /** Connection from MenuItem to it&#039;s connected node */
  connectedNode?: Maybe<BlogMenuItemToMenuItemLinkableConnectionEdge>;
  /**
   * The object connected to this menu item.
   * @deprecated Deprecated in favor of the connectedNode field
   */
  connectedObject?: Maybe<BlogMenuItemObjectUnion>;
  /** Class attribute for the menu item link */
  cssClasses?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int'];
  /** Description of the menu item. */
  description?: Maybe<Scalars['String']>;
  /** The globally unique identifier of the nav menu item object. */
  id: Scalars['ID'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Label or title of the menu item. */
  label?: Maybe<Scalars['String']>;
  /** Link relationship (XFN) of the menu item. */
  linkRelationship?: Maybe<Scalars['String']>;
  /** The locations the menu item&#039;s Menu is assigned to */
  locations?: Maybe<Array<Maybe<BlogMenuLocationEnum>>>;
  /** The Menu a MenuItem is part of */
  menu?: Maybe<BlogMenuItemToMenuConnectionEdge>;
  /**
   * WP ID of the menu item.
   * @deprecated Deprecated in favor of the databaseId field
   */
  menuItemId?: Maybe<Scalars['Int']>;
  /** Menu item order */
  order?: Maybe<Scalars['Int']>;
  /** The database id of the parent menu item or null if it is the root */
  parentDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent nav menu item object. */
  parentId?: Maybe<Scalars['ID']>;
  /** Path for the resource. Relative path for internal resources. Absolute path for external resources. */
  path?: Maybe<Scalars['String']>;
  /** Target attribute for the menu item link. */
  target?: Maybe<Scalars['String']>;
  /** Title attribute for the menu item link */
  title?: Maybe<Scalars['String']>;
  /** URL or destination of the menu item. */
  url?: Maybe<Scalars['String']>;
};


/** Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu. */
export type BlogMenuItemChildItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogMenuItemToMenuItemConnectionWhereArgs>;
};

/** Nodes that can be linked to as Menu Items */
export type BlogMenuItemLinkable = {
  /** The unique resource identifier path */
  databaseId: Scalars['Int'];
  /** The unique resource identifier path */
  id: Scalars['ID'];
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};

/** The Type of Identifier used to fetch a single node. Default is "ID". To be used along with the "id" field. */
export enum BlogMenuItemNodeIdTypeEnum {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID'
}

/** Deprecated in favor of MenuItemLinkeable Interface */
export type BlogMenuItemObjectUnion = BlogCategory | BlogPage | BlogPost | BlogTag;

/** Connection between the MenuItem type and the Menu type */
export type BlogMenuItemToMenuConnectionEdge = {
  __typename?: 'BlogMenuItemToMenuConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<BlogMenu>;
};

/** Connection between the MenuItem type and the MenuItem type */
export type BlogMenuItemToMenuItemConnection = {
  __typename?: 'BlogMenuItemToMenuItemConnection';
  /** Edges for the MenuItemToMenuItemConnection connection */
  edges?: Maybe<Array<Maybe<BlogMenuItemToMenuItemConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogMenuItem>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogMenuItemToMenuItemConnectionEdge = {
  __typename?: 'BlogMenuItemToMenuItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogMenuItem>;
};

/** Arguments for filtering the MenuItemToMenuItemConnection connection */
export type BlogMenuItemToMenuItemConnectionWhereArgs = {
  /** The ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<BlogMenuLocationEnum>;
  /** The database ID of the parent menu object */
  parentDatabaseId?: InputMaybe<Scalars['Int']>;
  /** The ID of the parent menu object */
  parentId?: InputMaybe<Scalars['ID']>;
};

/** Connection between the MenuItem type and the MenuItemLinkable type */
export type BlogMenuItemToMenuItemLinkableConnectionEdge = {
  __typename?: 'BlogMenuItemToMenuItemLinkableConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<BlogMenuItemLinkable>;
};

/** Registered menu locations */
export enum BlogMenuLocationEnum {
  /** Empty menu location */
  Empty = 'EMPTY'
}

/** The Type of Identifier used to fetch a single node. Default is "ID". To be used along with the "id" field. */
export enum BlogMenuNodeIdTypeEnum {
  /** Identify a menu node by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a menu node by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a menu node by it's name */
  Name = 'NAME'
}

/** Connection between the Menu type and the MenuItem type */
export type BlogMenuToMenuItemConnection = {
  __typename?: 'BlogMenuToMenuItemConnection';
  /** Edges for the MenuToMenuItemConnection connection */
  edges?: Maybe<Array<Maybe<BlogMenuToMenuItemConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogMenuItem>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogMenuToMenuItemConnectionEdge = {
  __typename?: 'BlogMenuToMenuItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogMenuItem>;
};

/** Arguments for filtering the MenuToMenuItemConnection connection */
export type BlogMenuToMenuItemConnectionWhereArgs = {
  /** The ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<BlogMenuLocationEnum>;
  /** The database ID of the parent menu object */
  parentDatabaseId?: InputMaybe<Scalars['Int']>;
  /** The ID of the parent menu object */
  parentId?: InputMaybe<Scalars['ID']>;
};

/** The MimeType of the object */
export enum BlogMimeTypeEnum {
  /** MimeType application/java */
  ApplicationJava = 'APPLICATION_JAVA',
  /** MimeType application/msword */
  ApplicationMsword = 'APPLICATION_MSWORD',
  /** MimeType application/octet-stream */
  ApplicationOctetStream = 'APPLICATION_OCTET_STREAM',
  /** MimeType application/onenote */
  ApplicationOnenote = 'APPLICATION_ONENOTE',
  /** MimeType application/oxps */
  ApplicationOxps = 'APPLICATION_OXPS',
  /** MimeType application/pdf */
  ApplicationPdf = 'APPLICATION_PDF',
  /** MimeType application/rar */
  ApplicationRar = 'APPLICATION_RAR',
  /** MimeType application/rtf */
  ApplicationRtf = 'APPLICATION_RTF',
  /** MimeType application/ttaf+xml */
  ApplicationTtafXml = 'APPLICATION_TTAF_XML',
  /** MimeType application/vnd.apple.keynote */
  ApplicationVndAppleKeynote = 'APPLICATION_VND_APPLE_KEYNOTE',
  /** MimeType application/vnd.apple.numbers */
  ApplicationVndAppleNumbers = 'APPLICATION_VND_APPLE_NUMBERS',
  /** MimeType application/vnd.apple.pages */
  ApplicationVndApplePages = 'APPLICATION_VND_APPLE_PAGES',
  /** MimeType application/vnd.ms-access */
  ApplicationVndMsAccess = 'APPLICATION_VND_MS_ACCESS',
  /** MimeType application/vnd.ms-excel */
  ApplicationVndMsExcel = 'APPLICATION_VND_MS_EXCEL',
  /** MimeType application/vnd.ms-excel.addin.macroEnabled.12 */
  ApplicationVndMsExcelAddinMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12',
  /** MimeType application/vnd.ms-excel.sheet.binary.macroEnabled.12 */
  ApplicationVndMsExcelSheetBinaryMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12',
  /** MimeType application/vnd.ms-excel.sheet.macroEnabled.12 */
  ApplicationVndMsExcelSheetMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12',
  /** MimeType application/vnd.ms-excel.template.macroEnabled.12 */
  ApplicationVndMsExcelTemplateMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12',
  /** MimeType application/vnd.ms-powerpoint */
  ApplicationVndMsPowerpoint = 'APPLICATION_VND_MS_POWERPOINT',
  /** MimeType application/vnd.ms-powerpoint.addin.macroEnabled.12 */
  ApplicationVndMsPowerpointAddinMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12',
  /** MimeType application/vnd.ms-powerpoint.presentation.macroEnabled.12 */
  ApplicationVndMsPowerpointPresentationMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12',
  /** MimeType application/vnd.ms-powerpoint.slideshow.macroEnabled.12 */
  ApplicationVndMsPowerpointSlideshowMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12',
  /** MimeType application/vnd.ms-powerpoint.slide.macroEnabled.12 */
  ApplicationVndMsPowerpointSlideMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12',
  /** MimeType application/vnd.ms-powerpoint.template.macroEnabled.12 */
  ApplicationVndMsPowerpointTemplateMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12',
  /** MimeType application/vnd.ms-project */
  ApplicationVndMsProject = 'APPLICATION_VND_MS_PROJECT',
  /** MimeType application/vnd.ms-word.document.macroEnabled.12 */
  ApplicationVndMsWordDocumentMacroenabled_12 = 'APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12',
  /** MimeType application/vnd.ms-word.template.macroEnabled.12 */
  ApplicationVndMsWordTemplateMacroenabled_12 = 'APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12',
  /** MimeType application/vnd.ms-write */
  ApplicationVndMsWrite = 'APPLICATION_VND_MS_WRITE',
  /** MimeType application/vnd.ms-xpsdocument */
  ApplicationVndMsXpsdocument = 'APPLICATION_VND_MS_XPSDOCUMENT',
  /** MimeType application/vnd.oasis.opendocument.chart */
  ApplicationVndOasisOpendocumentChart = 'APPLICATION_VND_OASIS_OPENDOCUMENT_CHART',
  /** MimeType application/vnd.oasis.opendocument.database */
  ApplicationVndOasisOpendocumentDatabase = 'APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE',
  /** MimeType application/vnd.oasis.opendocument.formula */
  ApplicationVndOasisOpendocumentFormula = 'APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA',
  /** MimeType application/vnd.oasis.opendocument.graphics */
  ApplicationVndOasisOpendocumentGraphics = 'APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS',
  /** MimeType application/vnd.oasis.opendocument.presentation */
  ApplicationVndOasisOpendocumentPresentation = 'APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION',
  /** MimeType application/vnd.oasis.opendocument.spreadsheet */
  ApplicationVndOasisOpendocumentSpreadsheet = 'APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET',
  /** MimeType application/vnd.oasis.opendocument.text */
  ApplicationVndOasisOpendocumentText = 'APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT',
  /** MimeType application/vnd.openxmlformats-officedocument.presentationml.presentation */
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlPresentation = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION',
  /** MimeType application/vnd.openxmlformats-officedocument.presentationml.slide */
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlSlide = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE',
  /** MimeType application/vnd.openxmlformats-officedocument.presentationml.slideshow */
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlSlideshow = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW',
  /** MimeType application/vnd.openxmlformats-officedocument.presentationml.template */
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE',
  /** MimeType application/vnd.openxmlformats-officedocument.spreadsheetml.sheet */
  ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET',
  /** MimeType application/vnd.openxmlformats-officedocument.spreadsheetml.template */
  ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE',
  /** MimeType application/vnd.openxmlformats-officedocument.wordprocessingml.document */
  ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlDocument = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT',
  /** MimeType application/vnd.openxmlformats-officedocument.wordprocessingml.template */
  ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE',
  /** MimeType application/wordperfect */
  ApplicationWordperfect = 'APPLICATION_WORDPERFECT',
  /** MimeType application/x-7z-compressed */
  ApplicationX_7ZCompressed = 'APPLICATION_X_7Z_COMPRESSED',
  /** MimeType application/x-gzip */
  ApplicationXGzip = 'APPLICATION_X_GZIP',
  /** MimeType application/x-tar */
  ApplicationXTar = 'APPLICATION_X_TAR',
  /** MimeType application/zip */
  ApplicationZip = 'APPLICATION_ZIP',
  /** MimeType audio/aac */
  AudioAac = 'AUDIO_AAC',
  /** MimeType audio/flac */
  AudioFlac = 'AUDIO_FLAC',
  /** MimeType audio/midi */
  AudioMidi = 'AUDIO_MIDI',
  /** MimeType audio/mpeg */
  AudioMpeg = 'AUDIO_MPEG',
  /** MimeType audio/ogg */
  AudioOgg = 'AUDIO_OGG',
  /** MimeType audio/wav */
  AudioWav = 'AUDIO_WAV',
  /** MimeType audio/x-matroska */
  AudioXMatroska = 'AUDIO_X_MATROSKA',
  /** MimeType audio/x-ms-wax */
  AudioXMsWax = 'AUDIO_X_MS_WAX',
  /** MimeType audio/x-ms-wma */
  AudioXMsWma = 'AUDIO_X_MS_WMA',
  /** MimeType audio/x-realaudio */
  AudioXRealaudio = 'AUDIO_X_REALAUDIO',
  /** MimeType image/bmp */
  ImageBmp = 'IMAGE_BMP',
  /** MimeType image/gif */
  ImageGif = 'IMAGE_GIF',
  /** MimeType image/heic */
  ImageHeic = 'IMAGE_HEIC',
  /** MimeType image/jpeg */
  ImageJpeg = 'IMAGE_JPEG',
  /** MimeType image/png */
  ImagePng = 'IMAGE_PNG',
  /** MimeType image/tiff */
  ImageTiff = 'IMAGE_TIFF',
  /** MimeType image/webp */
  ImageWebp = 'IMAGE_WEBP',
  /** MimeType image/x-icon */
  ImageXIcon = 'IMAGE_X_ICON',
  /** MimeType text/calendar */
  TextCalendar = 'TEXT_CALENDAR',
  /** MimeType text/css */
  TextCss = 'TEXT_CSS',
  /** MimeType text/csv */
  TextCsv = 'TEXT_CSV',
  /** MimeType text/plain */
  TextPlain = 'TEXT_PLAIN',
  /** MimeType text/richtext */
  TextRichtext = 'TEXT_RICHTEXT',
  /** MimeType text/tab-separated-values */
  TextTabSeparatedValues = 'TEXT_TAB_SEPARATED_VALUES',
  /** MimeType text/vtt */
  TextVtt = 'TEXT_VTT',
  /** MimeType video/3gpp */
  Video_3Gpp = 'VIDEO_3GPP',
  /** MimeType video/3gpp2 */
  Video_3Gpp2 = 'VIDEO_3GPP2',
  /** MimeType video/avi */
  VideoAvi = 'VIDEO_AVI',
  /** MimeType video/divx */
  VideoDivx = 'VIDEO_DIVX',
  /** MimeType video/mp4 */
  VideoMp4 = 'VIDEO_MP4',
  /** MimeType video/mpeg */
  VideoMpeg = 'VIDEO_MPEG',
  /** MimeType video/ogg */
  VideoOgg = 'VIDEO_OGG',
  /** MimeType video/quicktime */
  VideoQuicktime = 'VIDEO_QUICKTIME',
  /** MimeType video/webm */
  VideoWebm = 'VIDEO_WEBM',
  /** MimeType video/x-flv */
  VideoXFlv = 'VIDEO_X_FLV',
  /** MimeType video/x-matroska */
  VideoXMatroska = 'VIDEO_X_MATROSKA',
  /** MimeType video/x-ms-asf */
  VideoXMsAsf = 'VIDEO_X_MS_ASF',
  /** MimeType video/x-ms-wm */
  VideoXMsWm = 'VIDEO_X_MS_WM',
  /** MimeType video/x-ms-wmv */
  VideoXMsWmv = 'VIDEO_X_MS_WMV',
  /** MimeType video/x-ms-wmx */
  VideoXMsWmx = 'VIDEO_X_MS_WMX'
}

/** An object with an ID */
export type BlogNode = {
  /** The globally unique ID for the object */
  id: Scalars['ID'];
};

/** A node that can have an author assigned to it */
export type BlogNodeWithAuthor = {
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']>;
  /** Connection between the NodeWithAuthor type and the User type */
  wpAuthor?: Maybe<BlogNodeWithAuthorToUserConnectionEdge>;
};

/** Connection between the NodeWithAuthor type and the User type */
export type BlogNodeWithAuthorToUserConnectionEdge = {
  __typename?: 'BlogNodeWithAuthorToUserConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<BlogUser>;
};

/** A node that can have comments associated with it */
export type BlogNodeWithComments = {
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  commentCount?: Maybe<Scalars['Int']>;
  /** Whether the comments are open or closed for this particular post. */
  commentStatus?: Maybe<Scalars['String']>;
};

/** A node that supports the content editor */
export type BlogNodeWithContentEditor = {
  /** The content of the post. */
  content?: Maybe<Scalars['String']>;
};


/** A node that supports the content editor */
export type BlogNodeWithContentEditorContentArgs = {
  format?: InputMaybe<BlogPostObjectFieldFormatEnum>;
};

/** A node that can have an excerpt */
export type BlogNodeWithExcerpt = {
  /** The excerpt of the post. */
  excerpt?: Maybe<Scalars['String']>;
};


/** A node that can have an excerpt */
export type BlogNodeWithExcerptExcerptArgs = {
  format?: InputMaybe<BlogPostObjectFieldFormatEnum>;
};

/** A node that can have a featured image set */
export type BlogNodeWithFeaturedImage = {
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<BlogContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<BlogContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<BlogContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<BlogContentNodeToEnqueuedStylesheetConnection>;
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  featuredImage?: Maybe<BlogNodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  featuredImageDatabaseId?: Maybe<Scalars['Int']>;
  /** Globally unique ID of the featured image assigned to the node */
  featuredImageId?: Maybe<Scalars['ID']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']>;
  /** The unique resource identifier path */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<BlogContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']>;
  /** The template assigned to a node of content */
  template?: Maybe<BlogContentTemplate>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};


/** A node that can have a featured image set */
export type BlogNodeWithFeaturedImageEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A node that can have a featured image set */
export type BlogNodeWithFeaturedImageEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Connection between the NodeWithFeaturedImage type and the MediaItem type */
export type BlogNodeWithFeaturedImageToMediaItemConnectionEdge = {
  __typename?: 'BlogNodeWithFeaturedImageToMediaItemConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<BlogMediaItem>;
};

/** A node that can have page attributes */
export type BlogNodeWithPageAttributes = {
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: Maybe<Scalars['Int']>;
};

/** A node that can have revisions */
export type BlogNodeWithRevisions = {
  /** True if the node is a revision of another node */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */
  revisionOf?: Maybe<BlogNodeWithRevisionsToContentNodeConnectionEdge>;
};

/** Connection between the NodeWithRevisions type and the ContentNode type */
export type BlogNodeWithRevisionsToContentNodeConnectionEdge = {
  __typename?: 'BlogNodeWithRevisionsToContentNodeConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<BlogContentNode>;
};

/** A node that can have a template associated with it */
export type BlogNodeWithTemplate = {
  /** The template assigned to the node */
  template?: Maybe<BlogContentTemplate>;
};

/** A node that NodeWith a title */
export type BlogNodeWithTitle = {
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']>;
};


/** A node that NodeWith a title */
export type BlogNodeWithTitleTitleArgs = {
  format?: InputMaybe<BlogPostObjectFieldFormatEnum>;
};

/** A node that can have trackbacks and pingbacks */
export type BlogNodeWithTrackbacks = {
  /** Whether the pings are open or closed for this particular post. */
  pingStatus?: Maybe<Scalars['String']>;
  /** URLs that have been pinged. */
  pinged?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** URLs queued to be pinged. */
  toPing?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** The cardinality of the connection order */
export enum BlogOrderEnum {
  /** Sort the query result set in an ascending order */
  Asc = 'ASC',
  /** Sort the query result set in a descending order */
  Desc = 'DESC'
}

/** The page type */
export type BlogPage = BlogContentNode & BlogDatabaseIdentifier & BlogHierarchicalContentNode & BlogMenuItemLinkable & BlogNode & BlogNodeWithAuthor & BlogNodeWithComments & BlogNodeWithContentEditor & BlogNodeWithFeaturedImage & BlogNodeWithPageAttributes & BlogNodeWithRevisions & BlogNodeWithTemplate & BlogNodeWithTitle & BlogUniformResourceIdentifiable & {
  __typename?: 'BlogPage';
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<BlogHierarchicalContentNodeToContentNodeAncestorsConnection>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  children?: Maybe<BlogHierarchicalContentNodeToContentNodeChildrenConnection>;
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  commentCount?: Maybe<Scalars['Int']>;
  /** Whether the comments are open or closed for this particular post. */
  commentStatus?: Maybe<Scalars['String']>;
  /** Connection between the page type and the Comment type */
  comments?: Maybe<BlogPageToCommentConnection>;
  /** The content of the post. */
  content?: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<BlogContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String'];
  /** The unique resource identifier path */
  databaseId: Scalars['Int'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<BlogContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<BlogContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<BlogContentNodeToEnqueuedStylesheetConnection>;
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  featuredImage?: Maybe<BlogNodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  featuredImageDatabaseId?: Maybe<Scalars['Int']>;
  /** Globally unique ID of the featured image assigned to the node */
  featuredImageId?: Maybe<Scalars['ID']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']>;
  /** The globally unique identifier of the page object. */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether this page is set to the static front page. */
  isFrontPage: Scalars['Boolean'];
  /** Whether this page is set to the blog posts page. */
  isPostsPage: Scalars['Boolean'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']>;
  /** Whether this page is set to the privacy page. */
  isPrivacyPage: Scalars['Boolean'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** True if the node is a revision of another node */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<BlogContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: Maybe<Scalars['Int']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  pageId: Scalars['Int'];
  /** The parent of the node. The parent object can be of various types */
  parent?: Maybe<BlogHierarchicalContentNodeToParentContentNodeConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']>;
  /** Connection between the page type and the page type */
  preview?: Maybe<BlogPageToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']>;
  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */
  revisionOf?: Maybe<BlogNodeWithRevisionsToContentNodeConnectionEdge>;
  /** Connection between the page type and the page type */
  revisions?: Maybe<BlogPageToRevisionConnection>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']>;
  /** The template assigned to a node of content */
  template?: Maybe<BlogContentTemplate>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
  /** Connection between the NodeWithAuthor type and the User type */
  wpAuthor?: Maybe<BlogNodeWithAuthorToUserConnectionEdge>;
};


/** The page type */
export type BlogPageAncestorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogHierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
};


/** The page type */
export type BlogPageChildrenArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogHierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
};


/** The page type */
export type BlogPageCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogPageToCommentConnectionWhereArgs>;
};


/** The page type */
export type BlogPageContentArgs = {
  format?: InputMaybe<BlogPostObjectFieldFormatEnum>;
};


/** The page type */
export type BlogPageEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The page type */
export type BlogPageEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The page type */
export type BlogPageRevisionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogPageToRevisionConnectionWhereArgs>;
};


/** The page type */
export type BlogPageTitleArgs = {
  format?: InputMaybe<BlogPostObjectFieldFormatEnum>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum BlogPageIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the page type and the Comment type */
export type BlogPageToCommentConnection = {
  __typename?: 'BlogPageToCommentConnection';
  /** Edges for the PageToCommentConnection connection */
  edges?: Maybe<Array<Maybe<BlogPageToCommentConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogComment>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogPageToCommentConnectionEdge = {
  __typename?: 'BlogPageToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogComment>;
};

/** Arguments for filtering the PageToCommentConnection connection */
export type BlogPageToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<BlogContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<BlogOrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<BlogCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']>;
};

/** Connection between the page type and the page type */
export type BlogPageToPreviewConnectionEdge = {
  __typename?: 'BlogPageToPreviewConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<BlogPage>;
};

/** Connection between the page type and the page type */
export type BlogPageToRevisionConnection = {
  __typename?: 'BlogPageToRevisionConnection';
  /** Edges for the pageToRevisionConnection connection */
  edges?: Maybe<Array<Maybe<BlogPageToRevisionConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogPage>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogPageToRevisionConnectionEdge = {
  __typename?: 'BlogPageToRevisionConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogPage>;
};

/** Arguments for filtering the pageToRevisionConnection connection */
export type BlogPageToRevisionConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** An plugin object */
export type BlogPlugin = BlogNode & {
  __typename?: 'BlogPlugin';
  /** Name of the plugin author(s), may also be a company name. */
  author?: Maybe<Scalars['String']>;
  /** URI for the related author(s)/company website. */
  authorUri?: Maybe<Scalars['String']>;
  /** Description of the plugin. */
  description?: Maybe<Scalars['String']>;
  /** The globally unique identifier of the plugin object. */
  id: Scalars['ID'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Display name of the plugin. */
  name?: Maybe<Scalars['String']>;
  /** Plugin path. */
  path?: Maybe<Scalars['String']>;
  /** URI for the plugin website. This is useful for directing users for support requests etc. */
  pluginUri?: Maybe<Scalars['String']>;
  /** Current version of the plugin. */
  version?: Maybe<Scalars['String']>;
};

/** The post type */
export type BlogPost = BlogContentNode & BlogDatabaseIdentifier & BlogMenuItemLinkable & BlogNode & BlogNodeWithAuthor & BlogNodeWithComments & BlogNodeWithContentEditor & BlogNodeWithExcerpt & BlogNodeWithFeaturedImage & BlogNodeWithRevisions & BlogNodeWithTemplate & BlogNodeWithTitle & BlogNodeWithTrackbacks & BlogUniformResourceIdentifiable & {
  __typename?: 'BlogPost';
  author?: Maybe<AccountUser>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']>;
  /** This will change the author and/or title which is displayed on the blog to be different from the actual author. | Added to the GraphQL Schema because the ACF Field Group &quot;Author Override&quot; was set to Show in GraphQL. */
  authorOverride?: Maybe<BlogPost_Authoroverride>;
  /** Connection between the post type and the category type */
  categories?: Maybe<BlogPostToCategoryConnection>;
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  commentCount?: Maybe<Scalars['Int']>;
  /** Whether the comments are open or closed for this particular post. */
  commentStatus?: Maybe<Scalars['String']>;
  /** Connection between the post type and the Comment type */
  comments?: Maybe<BlogPostToCommentConnection>;
  /** The content of the post. */
  content?: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<BlogContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String'];
  /** The unique resource identifier path */
  databaseId: Scalars['Int'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<BlogContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<BlogContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<BlogContentNodeToEnqueuedStylesheetConnection>;
  /** The excerpt of the post. */
  excerpt?: Maybe<Scalars['String']>;
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  featuredImage?: Maybe<BlogNodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  featuredImageDatabaseId?: Maybe<Scalars['Int']>;
  /** Globally unique ID of the featured image assigned to the node */
  featuredImageId?: Maybe<Scalars['ID']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']>;
  /** The globally unique identifier of the post object. */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** True if the node is a revision of another node */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** Whether this page is sticky */
  isSticky: Scalars['Boolean'];
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<BlogContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']>;
  /** Added to the GraphQL Schema because the ACF Field Group &quot;Marketing&quot; was set to Show in GraphQL. */
  marketing?: Maybe<BlogPost_Marketing>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']>;
  /** Whether the pings are open or closed for this particular post. */
  pingStatus?: Maybe<Scalars['String']>;
  /** URLs that have been pinged. */
  pinged?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Connection between the post type and the postFormat type */
  postFormats?: Maybe<BlogPostToPostFormatConnection>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  postId: Scalars['Int'];
  /** Connection between the post type and the post type */
  preview?: Maybe<BlogPostToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']>;
  /** Added to the GraphQL Schema because the ACF Field Group &quot;Press Release&quot; was set to Show in GraphQL. */
  release?: Maybe<BlogPost_Release>;
  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */
  revisionOf?: Maybe<BlogNodeWithRevisionsToContentNodeConnectionEdge>;
  /** Connection between the post type and the post type */
  revisions?: Maybe<BlogPostToRevisionConnection>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']>;
  /** Connection between the post type and the tag type */
  tags?: Maybe<BlogPostToTagConnection>;
  /** The template assigned to a node of content */
  template?: Maybe<BlogContentTemplate>;
  /** Connection between the post type and the TermNode type */
  terms?: Maybe<BlogPostToTermNodeConnection>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']>;
  /** URLs queued to be pinged. */
  toPing?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
  /** Connection between the NodeWithAuthor type and the User type */
  wpAuthor?: Maybe<BlogNodeWithAuthorToUserConnectionEdge>;
};


/** The post type */
export type BlogPostCategoriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogPostToCategoryConnectionWhereArgs>;
};


/** The post type */
export type BlogPostCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogPostToCommentConnectionWhereArgs>;
};


/** The post type */
export type BlogPostContentArgs = {
  format?: InputMaybe<BlogPostObjectFieldFormatEnum>;
};


/** The post type */
export type BlogPostEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The post type */
export type BlogPostEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The post type */
export type BlogPostExcerptArgs = {
  format?: InputMaybe<BlogPostObjectFieldFormatEnum>;
};


/** The post type */
export type BlogPostPostFormatsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogPostToPostFormatConnectionWhereArgs>;
};


/** The post type */
export type BlogPostRevisionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogPostToRevisionConnectionWhereArgs>;
};


/** The post type */
export type BlogPostTagsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogPostToTagConnectionWhereArgs>;
};


/** The post type */
export type BlogPostTermsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogPostToTermNodeConnectionWhereArgs>;
};


/** The post type */
export type BlogPostTitleArgs = {
  format?: InputMaybe<BlogPostObjectFieldFormatEnum>;
};

/** Set relationships between the post to categories */
export type BlogPostCategoriesInput = {
  /** If true, this will append the category to existing related categories. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars['Boolean']>;
  /** The input list of items to set. */
  nodes?: InputMaybe<Array<InputMaybe<BlogPostCategoriesNodeInput>>>;
};

/** List of categories to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export type BlogPostCategoriesNodeInput = {
  /** The description of the category. This field is used to set a description of the category if a new one is created during the mutation. */
  description?: InputMaybe<Scalars['String']>;
  /** The ID of the category. If present, this will be used to connect to the post. If no existing category exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars['ID']>;
  /** The name of the category. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars['String']>;
  /** The slug of the category. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars['String']>;
};

/** The postFormat type */
export type BlogPostFormat = BlogDatabaseIdentifier & BlogNode & BlogTermNode & BlogUniformResourceIdentifiable & {
  __typename?: 'BlogPostFormat';
  /** Connection between the postFormat type and the ContentNode type */
  contentNodes?: Maybe<BlogPostFormatToContentNodeConnection>;
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int'];
  /** The description of the object */
  description?: Maybe<Scalars['String']>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<BlogTermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<BlogTermNodeToEnqueuedStylesheetConnection>;
  /** The unique resource identifier path */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The link to the term */
  link?: Maybe<Scalars['String']>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of databaseId
   */
  postFormatId?: Maybe<Scalars['Int']>;
  /** Connection between the postFormat type and the post type */
  posts?: Maybe<BlogPostFormatToPostConnection>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']>;
  /** Connection between the postFormat type and the Taxonomy type */
  taxonomy?: Maybe<BlogPostFormatToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};


/** The postFormat type */
export type BlogPostFormatContentNodesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogPostFormatToContentNodeConnectionWhereArgs>;
};


/** The postFormat type */
export type BlogPostFormatEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The postFormat type */
export type BlogPostFormatEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The postFormat type */
export type BlogPostFormatPostsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogPostFormatToPostConnectionWhereArgs>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum BlogPostFormatIdType {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}

/** Connection between the postFormat type and the ContentNode type */
export type BlogPostFormatToContentNodeConnection = {
  __typename?: 'BlogPostFormatToContentNodeConnection';
  /** Edges for the PostFormatToContentNodeConnection connection */
  edges?: Maybe<Array<Maybe<BlogPostFormatToContentNodeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogContentNode>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogPostFormatToContentNodeConnectionEdge = {
  __typename?: 'BlogPostFormatToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogContentNode>;
};

/** Arguments for filtering the PostFormatToContentNodeConnection connection */
export type BlogPostFormatToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<BlogContentTypesOfPostFormatEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the postFormat type and the post type */
export type BlogPostFormatToPostConnection = {
  __typename?: 'BlogPostFormatToPostConnection';
  /** Edges for the PostFormatToPostConnection connection */
  edges?: Maybe<Array<Maybe<BlogPostFormatToPostConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogPost>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogPostFormatToPostConnectionEdge = {
  __typename?: 'BlogPostFormatToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogPost>;
};

/** Arguments for filtering the PostFormatToPostConnection connection */
export type BlogPostFormatToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the postFormat type and the Taxonomy type */
export type BlogPostFormatToTaxonomyConnectionEdge = {
  __typename?: 'BlogPostFormatToTaxonomyConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<BlogTaxonomy>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum BlogPostIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** The format of post field data. */
export enum BlogPostObjectFieldFormatEnum {
  /** Provide the field value directly from database */
  Raw = 'RAW',
  /** Apply the default WordPress rendering */
  Rendered = 'RENDERED'
}

/** The column to use when filtering by date */
export enum BlogPostObjectsConnectionDateColumnEnum {
  /** The date the comment was created in local time. */
  Date = 'DATE',
  /** The most recent modification date of the comment. */
  Modified = 'MODIFIED'
}

/** Field to order the connection by */
export enum BlogPostObjectsConnectionOrderbyEnum {
  /** Order by author */
  Author = 'AUTHOR',
  /** Order by the number of comments it has acquired */
  CommentCount = 'COMMENT_COUNT',
  /** Order by publish date */
  Date = 'DATE',
  /** Preserve the ID order given in the IN array */
  In = 'IN',
  /** Order by the menu order value */
  MenuOrder = 'MENU_ORDER',
  /** Order by last modified date */
  Modified = 'MODIFIED',
  /** Preserve slug order given in the NAME_IN array */
  NameIn = 'NAME_IN',
  /** Order by parent ID */
  Parent = 'PARENT',
  /** Order by slug */
  Slug = 'SLUG',
  /** Order by title */
  Title = 'TITLE'
}

/** Options for ordering the connection */
export type BlogPostObjectsConnectionOrderbyInput = {
  /** The field to order the connection by */
  field: BlogPostObjectsConnectionOrderbyEnum;
  /** Possible directions in which to order a list of items */
  order: BlogOrderEnum;
};

/** Set relationships between the post to postFormats */
export type BlogPostPostFormatsInput = {
  /** If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars['Boolean']>;
  /** The input list of items to set. */
  nodes?: InputMaybe<Array<InputMaybe<BlogPostPostFormatsNodeInput>>>;
};

/** List of postFormats to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export type BlogPostPostFormatsNodeInput = {
  /** The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation. */
  description?: InputMaybe<Scalars['String']>;
  /** The ID of the postFormat. If present, this will be used to connect to the post. If no existing postFormat exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars['ID']>;
  /** The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars['String']>;
  /** The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars['String']>;
};

/** The status of the object. */
export enum BlogPostStatusEnum {
  /** Objects with the acf-disabled status */
  AcfDisabled = 'ACF_DISABLED',
  /** Objects with the auto-draft status */
  AutoDraft = 'AUTO_DRAFT',
  /** Objects with the draft status */
  Draft = 'DRAFT',
  /** Objects with the future status */
  Future = 'FUTURE',
  /** Objects with the inherit status */
  Inherit = 'INHERIT',
  /** Objects with the pending status */
  Pending = 'PENDING',
  /** Objects with the private status */
  Private = 'PRIVATE',
  /** Objects with the publish status */
  Publish = 'PUBLISH',
  /** Objects with the request-completed status */
  RequestCompleted = 'REQUEST_COMPLETED',
  /** Objects with the request-confirmed status */
  RequestConfirmed = 'REQUEST_CONFIRMED',
  /** Objects with the request-failed status */
  RequestFailed = 'REQUEST_FAILED',
  /** Objects with the request-pending status */
  RequestPending = 'REQUEST_PENDING',
  /** Objects with the trash status */
  Trash = 'TRASH'
}

/** Set relationships between the post to tags */
export type BlogPostTagsInput = {
  /** If true, this will append the tag to existing related tags. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars['Boolean']>;
  /** The input list of items to set. */
  nodes?: InputMaybe<Array<InputMaybe<BlogPostTagsNodeInput>>>;
};

/** List of tags to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export type BlogPostTagsNodeInput = {
  /** The description of the tag. This field is used to set a description of the tag if a new one is created during the mutation. */
  description?: InputMaybe<Scalars['String']>;
  /** The ID of the tag. If present, this will be used to connect to the post. If no existing tag exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars['ID']>;
  /** The name of the tag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars['String']>;
  /** The slug of the tag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars['String']>;
};

/** Connection between the post type and the category type */
export type BlogPostToCategoryConnection = {
  __typename?: 'BlogPostToCategoryConnection';
  /** Edges for the PostToCategoryConnection connection */
  edges?: Maybe<Array<Maybe<BlogPostToCategoryConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogCategory>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogPostToCategoryConnectionEdge = {
  __typename?: 'BlogPostToCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogCategory>;
};

/** Arguments for filtering the PostToCategoryConnection connection */
export type BlogPostToCategoryConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<BlogOrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<BlogTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']>;
};

/** Connection between the post type and the Comment type */
export type BlogPostToCommentConnection = {
  __typename?: 'BlogPostToCommentConnection';
  /** Edges for the PostToCommentConnection connection */
  edges?: Maybe<Array<Maybe<BlogPostToCommentConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogComment>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogPostToCommentConnectionEdge = {
  __typename?: 'BlogPostToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogComment>;
};

/** Arguments for filtering the PostToCommentConnection connection */
export type BlogPostToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<BlogContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<BlogOrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<BlogCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']>;
};

/** Connection between the post type and the postFormat type */
export type BlogPostToPostFormatConnection = {
  __typename?: 'BlogPostToPostFormatConnection';
  /** Edges for the PostToPostFormatConnection connection */
  edges?: Maybe<Array<Maybe<BlogPostToPostFormatConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogPostFormat>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogPostToPostFormatConnectionEdge = {
  __typename?: 'BlogPostToPostFormatConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogPostFormat>;
};

/** Arguments for filtering the PostToPostFormatConnection connection */
export type BlogPostToPostFormatConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<BlogOrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<BlogTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']>;
};

/** Connection between the post type and the post type */
export type BlogPostToPreviewConnectionEdge = {
  __typename?: 'BlogPostToPreviewConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<BlogPost>;
};

/** Connection between the post type and the post type */
export type BlogPostToRevisionConnection = {
  __typename?: 'BlogPostToRevisionConnection';
  /** Edges for the postToRevisionConnection connection */
  edges?: Maybe<Array<Maybe<BlogPostToRevisionConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogPost>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogPostToRevisionConnectionEdge = {
  __typename?: 'BlogPostToRevisionConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogPost>;
};

/** Arguments for filtering the postToRevisionConnection connection */
export type BlogPostToRevisionConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the post type and the tag type */
export type BlogPostToTagConnection = {
  __typename?: 'BlogPostToTagConnection';
  /** Edges for the PostToTagConnection connection */
  edges?: Maybe<Array<Maybe<BlogPostToTagConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogTag>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogPostToTagConnectionEdge = {
  __typename?: 'BlogPostToTagConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogTag>;
};

/** Arguments for filtering the PostToTagConnection connection */
export type BlogPostToTagConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<BlogOrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<BlogTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']>;
};

/** Connection between the post type and the TermNode type */
export type BlogPostToTermNodeConnection = {
  __typename?: 'BlogPostToTermNodeConnection';
  /** Edges for the PostToTermNodeConnection connection */
  edges?: Maybe<Array<Maybe<BlogPostToTermNodeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogTermNode>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogPostToTermNodeConnectionEdge = {
  __typename?: 'BlogPostToTermNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogTermNode>;
};

/** Arguments for filtering the PostToTermNodeConnection connection */
export type BlogPostToTermNodeConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<BlogOrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<BlogTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** The Taxonomy to filter terms by */
  taxonomies?: InputMaybe<Array<InputMaybe<BlogTaxonomyEnum>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']>;
};

/** Details for labels of the PostType */
export type BlogPostTypeLabelDetails = {
  __typename?: 'BlogPostTypeLabelDetails';
  /** Default is ‘Add New’ for both hierarchical and non-hierarchical types. */
  addNew?: Maybe<Scalars['String']>;
  /** Label for adding a new singular item. */
  addNewItem?: Maybe<Scalars['String']>;
  /** Label to signify all items in a submenu link. */
  allItems?: Maybe<Scalars['String']>;
  /** Label for archives in nav menus */
  archives?: Maybe<Scalars['String']>;
  /** Label for the attributes meta box. */
  attributes?: Maybe<Scalars['String']>;
  /** Label for editing a singular item. */
  editItem?: Maybe<Scalars['String']>;
  /** Label for the Featured Image meta box title. */
  featuredImage?: Maybe<Scalars['String']>;
  /** Label for the table views hidden heading. */
  filterItemsList?: Maybe<Scalars['String']>;
  /** Label for the media frame button. */
  insertIntoItem?: Maybe<Scalars['String']>;
  /** Label for the table hidden heading. */
  itemsList?: Maybe<Scalars['String']>;
  /** Label for the table pagination hidden heading. */
  itemsListNavigation?: Maybe<Scalars['String']>;
  /** Label for the menu name. */
  menuName?: Maybe<Scalars['String']>;
  /** General name for the post type, usually plural. */
  name?: Maybe<Scalars['String']>;
  /** Label for the new item page title. */
  newItem?: Maybe<Scalars['String']>;
  /** Label used when no items are found. */
  notFound?: Maybe<Scalars['String']>;
  /** Label used when no items are in the trash. */
  notFoundInTrash?: Maybe<Scalars['String']>;
  /** Label used to prefix parents of hierarchical items. */
  parentItemColon?: Maybe<Scalars['String']>;
  /** Label for removing the featured image. */
  removeFeaturedImage?: Maybe<Scalars['String']>;
  /** Label for searching plural items. */
  searchItems?: Maybe<Scalars['String']>;
  /** Label for setting the featured image. */
  setFeaturedImage?: Maybe<Scalars['String']>;
  /** Name for one object of this post type. */
  singularName?: Maybe<Scalars['String']>;
  /** Label for the media frame filter. */
  uploadedToThisItem?: Maybe<Scalars['String']>;
  /** Label in the media frame for using a featured image. */
  useFeaturedImage?: Maybe<Scalars['String']>;
  /** Label for viewing a singular item. */
  viewItem?: Maybe<Scalars['String']>;
  /** Label for viewing post type archives. */
  viewItems?: Maybe<Scalars['String']>;
};

/** Field Group */
export type BlogPost_Authoroverride = BlogAcfFieldGroup & {
  __typename?: 'BlogPost_Authoroverride';
  /** The name of the ACF Field Group */
  fieldGroupName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};

/** Field Group */
export type BlogPost_Marketing = BlogAcfFieldGroup & {
  __typename?: 'BlogPost_Marketing';
  /** Who does this post most target? */
  audience?: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  fieldGroupName?: Maybe<Scalars['String']>;
};

/** Field Group */
export type BlogPost_Release = BlogAcfFieldGroup & {
  __typename?: 'BlogPost_Release';
  /** Who to contact with questions about this release. */
  contact?: Maybe<Scalars['String']>;
  /** Phone number for the release contact. */
  email?: Maybe<Scalars['String']>;
  /** The name of the ACF Field Group */
  fieldGroupName?: Maybe<Scalars['String']>;
  /** The press release&#039;s primary geography, in the format &quot;City Name, WA&quot;. */
  location?: Maybe<Scalars['String']>;
  /** Phone number for the release contact. */
  phone?: Maybe<Scalars['String']>;
  /** Primary takeaway. */
  quote?: Maybe<Scalars['String']>;
};

/** The reading setting type */
export type BlogReadingSettings = {
  __typename?: 'BlogReadingSettings';
  /** Blog pages show at most. */
  postsPerPage?: Maybe<Scalars['Int']>;
};

/** Input for the registerUser mutation */
export type BlogRegisterUserInput = {
  /** User's AOL IM account. */
  aim?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** A string containing content about the user. */
  description?: InputMaybe<Scalars['String']>;
  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */
  displayName?: InputMaybe<Scalars['String']>;
  /** A string containing the user's email address. */
  email?: InputMaybe<Scalars['String']>;
  /** 	The user's first name. */
  firstName?: InputMaybe<Scalars['String']>;
  /** User's Jabber account. */
  jabber?: InputMaybe<Scalars['String']>;
  /** The user's last name. */
  lastName?: InputMaybe<Scalars['String']>;
  /** User's locale. */
  locale?: InputMaybe<Scalars['String']>;
  /** A string that contains a URL-friendly name for the user. The default is the user's username. */
  nicename?: InputMaybe<Scalars['String']>;
  /** The user's nickname, defaults to the user's username. */
  nickname?: InputMaybe<Scalars['String']>;
  /** A string that contains the plain text password for the user. */
  password?: InputMaybe<Scalars['String']>;
  /** The date the user registered. Format is Y-m-d H:i:s. */
  registered?: InputMaybe<Scalars['String']>;
  /** A string for whether to enable the rich editor or not. False if not empty. */
  richEditing?: InputMaybe<Scalars['String']>;
  /** A string that contains the user's username. */
  username: Scalars['String'];
  /** A string containing the user's URL for the user's web site. */
  websiteUrl?: InputMaybe<Scalars['String']>;
  /** User's Yahoo IM account. */
  yim?: InputMaybe<Scalars['String']>;
};

/** The payload for the registerUser mutation */
export type BlogRegisterUserPayload = {
  __typename?: 'BlogRegisterUserPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The User object mutation type. */
  user?: Maybe<BlogUser>;
};

/** The logical relation between each item in the array when there are more than one. */
export enum BlogRelationEnum {
  /** The logical AND condition returns true if both operands are true, otherwise, it returns false. */
  And = 'AND',
  /** The logical OR condition returns false if both operands are false, otherwise, it returns true. */
  Or = 'OR'
}

/** Input for the resetUserPassword mutation */
export type BlogResetUserPasswordInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Password reset key */
  key?: InputMaybe<Scalars['String']>;
  /** The user's login (username). */
  login?: InputMaybe<Scalars['String']>;
  /** The new password. */
  password?: InputMaybe<Scalars['String']>;
};

/** The payload for the resetUserPassword mutation */
export type BlogResetUserPasswordPayload = {
  __typename?: 'BlogResetUserPasswordPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The User object mutation type. */
  user?: Maybe<BlogUser>;
};

/** Input for the restoreComment mutation */
export type BlogRestoreCommentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the comment to be restored */
  id: Scalars['ID'];
};

/** The payload for the restoreComment mutation */
export type BlogRestoreCommentPayload = {
  __typename?: 'BlogRestoreCommentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The restored comment object */
  comment?: Maybe<BlogComment>;
  /** The ID of the restored comment */
  restoredId?: Maybe<Scalars['ID']>;
};

export type BlogRootMutation = {
  __typename?: 'BlogRootMutation';
  /** The payload for the createComment mutation */
  createComment?: Maybe<BlogCreateCommentPayload>;
};


export type BlogRootMutationCreateCommentArgs = {
  input: BlogCreateCommentInput;
};

export type BlogRootQuery = {
  __typename?: 'BlogRootQuery';
  /** An object of the post Type.  */
  post?: Maybe<BlogPost>;
  /** Connection between the RootQuery type and the post type */
  posts?: Maybe<BlogRootQueryToPostConnection>;
};


export type BlogRootQueryPostArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  idType?: InputMaybe<BlogPostIdType>;
};


export type BlogRootQueryPostsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogRootQueryToPostConnectionWhereArgs>;
};

/** Connection between the RootQuery type and the category type */
export type BlogRootQueryToCategoryConnection = {
  __typename?: 'BlogRootQueryToCategoryConnection';
  /** Edges for the RootQueryToCategoryConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToCategoryConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogCategory>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToCategoryConnectionEdge = {
  __typename?: 'BlogRootQueryToCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogCategory>;
};

/** Arguments for filtering the RootQueryToCategoryConnection connection */
export type BlogRootQueryToCategoryConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<BlogOrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<BlogTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']>;
};

/** Connection between the RootQuery type and the Comment type */
export type BlogRootQueryToCommentConnection = {
  __typename?: 'BlogRootQueryToCommentConnection';
  /** Edges for the RootQueryToCommentConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToCommentConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogComment>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToCommentConnectionEdge = {
  __typename?: 'BlogRootQueryToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogComment>;
};

/** Arguments for filtering the RootQueryToCommentConnection connection */
export type BlogRootQueryToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<BlogContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<BlogOrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<BlogCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']>;
};

/** Connection between the RootQuery type and the ContentNode type */
export type BlogRootQueryToContentNodeConnection = {
  __typename?: 'BlogRootQueryToContentNodeConnection';
  /** Edges for the RootQueryToContentNodeConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToContentNodeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogContentNode>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToContentNodeConnectionEdge = {
  __typename?: 'BlogRootQueryToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogContentNode>;
};

/** Arguments for filtering the RootQueryToContentNodeConnection connection */
export type BlogRootQueryToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<BlogContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the RootQuery type and the ContentRevisionUnion type */
export type BlogRootQueryToContentRevisionUnionConnection = {
  __typename?: 'BlogRootQueryToContentRevisionUnionConnection';
  /** Edges for the RootQueryToContentRevisionUnionConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToContentRevisionUnionConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogContentRevisionUnion>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToContentRevisionUnionConnectionEdge = {
  __typename?: 'BlogRootQueryToContentRevisionUnionConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogContentRevisionUnion>;
};

/** Arguments for filtering the RootQueryToContentRevisionUnionConnection connection */
export type BlogRootQueryToContentRevisionUnionConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<BlogContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the RootQuery type and the ContentType type */
export type BlogRootQueryToContentTypeConnection = {
  __typename?: 'BlogRootQueryToContentTypeConnection';
  /** Edges for the RootQueryToContentTypeConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToContentTypeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogContentType>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToContentTypeConnectionEdge = {
  __typename?: 'BlogRootQueryToContentTypeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogContentType>;
};

/** Connection between the RootQuery type and the EnqueuedScript type */
export type BlogRootQueryToEnqueuedScriptConnection = {
  __typename?: 'BlogRootQueryToEnqueuedScriptConnection';
  /** Edges for the RootQueryToEnqueuedScriptConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToEnqueuedScriptConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogEnqueuedScript>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToEnqueuedScriptConnectionEdge = {
  __typename?: 'BlogRootQueryToEnqueuedScriptConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogEnqueuedScript>;
};

/** Connection between the RootQuery type and the EnqueuedStylesheet type */
export type BlogRootQueryToEnqueuedStylesheetConnection = {
  __typename?: 'BlogRootQueryToEnqueuedStylesheetConnection';
  /** Edges for the RootQueryToEnqueuedStylesheetConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToEnqueuedStylesheetConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogEnqueuedStylesheet>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToEnqueuedStylesheetConnectionEdge = {
  __typename?: 'BlogRootQueryToEnqueuedStylesheetConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogEnqueuedStylesheet>;
};

/** Connection between the RootQuery type and the mediaItem type */
export type BlogRootQueryToMediaItemConnection = {
  __typename?: 'BlogRootQueryToMediaItemConnection';
  /** Edges for the RootQueryToMediaItemConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToMediaItemConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogMediaItem>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToMediaItemConnectionEdge = {
  __typename?: 'BlogRootQueryToMediaItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogMediaItem>;
};

/** Arguments for filtering the RootQueryToMediaItemConnection connection */
export type BlogRootQueryToMediaItemConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the RootQuery type and the Menu type */
export type BlogRootQueryToMenuConnection = {
  __typename?: 'BlogRootQueryToMenuConnection';
  /** Edges for the RootQueryToMenuConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToMenuConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogMenu>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToMenuConnectionEdge = {
  __typename?: 'BlogRootQueryToMenuConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogMenu>;
};

/** Arguments for filtering the RootQueryToMenuConnection connection */
export type BlogRootQueryToMenuConnectionWhereArgs = {
  /** The ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<BlogMenuLocationEnum>;
  /** The slug of the menu to query items for */
  slug?: InputMaybe<Scalars['String']>;
};

/** Connection between the RootQuery type and the MenuItem type */
export type BlogRootQueryToMenuItemConnection = {
  __typename?: 'BlogRootQueryToMenuItemConnection';
  /** Edges for the RootQueryToMenuItemConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToMenuItemConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogMenuItem>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToMenuItemConnectionEdge = {
  __typename?: 'BlogRootQueryToMenuItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogMenuItem>;
};

/** Arguments for filtering the RootQueryToMenuItemConnection connection */
export type BlogRootQueryToMenuItemConnectionWhereArgs = {
  /** The ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<BlogMenuLocationEnum>;
  /** The database ID of the parent menu object */
  parentDatabaseId?: InputMaybe<Scalars['Int']>;
  /** The ID of the parent menu object */
  parentId?: InputMaybe<Scalars['ID']>;
};

/** Connection between the RootQuery type and the page type */
export type BlogRootQueryToPageConnection = {
  __typename?: 'BlogRootQueryToPageConnection';
  /** Edges for the RootQueryToPageConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToPageConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogPage>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToPageConnectionEdge = {
  __typename?: 'BlogRootQueryToPageConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogPage>;
};

/** Arguments for filtering the RootQueryToPageConnection connection */
export type BlogRootQueryToPageConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the RootQuery type and the Plugin type */
export type BlogRootQueryToPluginConnection = {
  __typename?: 'BlogRootQueryToPluginConnection';
  /** Edges for the RootQueryToPluginConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToPluginConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogPlugin>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToPluginConnectionEdge = {
  __typename?: 'BlogRootQueryToPluginConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogPlugin>;
};

/** Connection between the RootQuery type and the post type */
export type BlogRootQueryToPostConnection = {
  __typename?: 'BlogRootQueryToPostConnection';
  /** Edges for the RootQueryToPostConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToPostConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogPost>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToPostConnectionEdge = {
  __typename?: 'BlogRootQueryToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogPost>;
};

/** Arguments for filtering the RootQueryToPostConnection connection */
export type BlogRootQueryToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the RootQuery type and the postFormat type */
export type BlogRootQueryToPostFormatConnection = {
  __typename?: 'BlogRootQueryToPostFormatConnection';
  /** Edges for the RootQueryToPostFormatConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToPostFormatConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogPostFormat>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToPostFormatConnectionEdge = {
  __typename?: 'BlogRootQueryToPostFormatConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogPostFormat>;
};

/** Arguments for filtering the RootQueryToPostFormatConnection connection */
export type BlogRootQueryToPostFormatConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<BlogOrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<BlogTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']>;
};

/** Connection between the RootQuery type and the tag type */
export type BlogRootQueryToTagConnection = {
  __typename?: 'BlogRootQueryToTagConnection';
  /** Edges for the RootQueryToTagConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToTagConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogTag>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToTagConnectionEdge = {
  __typename?: 'BlogRootQueryToTagConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogTag>;
};

/** Arguments for filtering the RootQueryToTagConnection connection */
export type BlogRootQueryToTagConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<BlogOrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<BlogTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']>;
};

/** Connection between the RootQuery type and the Taxonomy type */
export type BlogRootQueryToTaxonomyConnection = {
  __typename?: 'BlogRootQueryToTaxonomyConnection';
  /** Edges for the RootQueryToTaxonomyConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToTaxonomyConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogTaxonomy>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToTaxonomyConnectionEdge = {
  __typename?: 'BlogRootQueryToTaxonomyConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogTaxonomy>;
};

/** Connection between the RootQuery type and the TermNode type */
export type BlogRootQueryToTermNodeConnection = {
  __typename?: 'BlogRootQueryToTermNodeConnection';
  /** Edges for the RootQueryToTermNodeConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToTermNodeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogTermNode>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToTermNodeConnectionEdge = {
  __typename?: 'BlogRootQueryToTermNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogTermNode>;
};

/** Arguments for filtering the RootQueryToTermNodeConnection connection */
export type BlogRootQueryToTermNodeConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<BlogOrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<BlogTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** The Taxonomy to filter terms by */
  taxonomies?: InputMaybe<Array<InputMaybe<BlogTaxonomyEnum>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']>;
};

/** Connection between the RootQuery type and the Theme type */
export type BlogRootQueryToThemeConnection = {
  __typename?: 'BlogRootQueryToThemeConnection';
  /** Edges for the RootQueryToThemeConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToThemeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogTheme>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToThemeConnectionEdge = {
  __typename?: 'BlogRootQueryToThemeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogTheme>;
};

/** Connection between the RootQuery type and the User type */
export type BlogRootQueryToUserConnection = {
  __typename?: 'BlogRootQueryToUserConnection';
  /** Edges for the RootQueryToUserConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToUserConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogUser>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToUserConnectionEdge = {
  __typename?: 'BlogRootQueryToUserConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogUser>;
};

/** Arguments for filtering the RootQueryToUserConnection connection */
export type BlogRootQueryToUserConnectionWhereArgs = {
  /** Array of userIds to exclude. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** Pass an array of post types to filter results to users who have published posts in those post types. */
  hasPublishedPosts?: InputMaybe<Array<InputMaybe<BlogContentTypeEnum>>>;
  /** Array of userIds to include. */
  include?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** The user login. */
  login?: InputMaybe<Scalars['String']>;
  /** An array of logins to include. Users matching one of these logins will be included in results. */
  loginIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** An array of logins to exclude. Users matching one of these logins will not be included in results. */
  loginNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** The user nicename. */
  nicename?: InputMaybe<Scalars['String']>;
  /** An array of nicenames to include. Users matching one of these nicenames will be included in results. */
  nicenameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** An array of nicenames to exclude. Users matching one of these nicenames will not be included in results. */
  nicenameNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogUsersConnectionOrderbyInput>>>;
  /** An array of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role. */
  role?: InputMaybe<BlogUserRoleEnum>;
  /** An array of role names. Matched users must have at least one of these roles. */
  roleIn?: InputMaybe<Array<InputMaybe<BlogUserRoleEnum>>>;
  /** An array of role names to exclude. Users matching one or more of these roles will not be included in results. */
  roleNotIn?: InputMaybe<Array<InputMaybe<BlogUserRoleEnum>>>;
  /** Search keyword. Searches for possible string matches on columns. When "searchColumns" is left empty, it tries to determine which column to search in based on search string. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'. */
  searchColumns?: InputMaybe<Array<InputMaybe<BlogUsersConnectionSearchColumnEnum>>>;
};

/** Connection between the RootQuery type and the UserRole type */
export type BlogRootQueryToUserRoleConnection = {
  __typename?: 'BlogRootQueryToUserRoleConnection';
  /** Edges for the RootQueryToUserRoleConnection connection */
  edges?: Maybe<Array<Maybe<BlogRootQueryToUserRoleConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogUserRole>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogRootQueryToUserRoleConnectionEdge = {
  __typename?: 'BlogRootQueryToUserRoleConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogUserRole>;
};

/** Input for the sendPasswordResetEmail mutation */
export type BlogSendPasswordResetEmailInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** A string that contains the user's username or email address. */
  username: Scalars['String'];
};

/** The payload for the sendPasswordResetEmail mutation */
export type BlogSendPasswordResetEmailPayload = {
  __typename?: 'BlogSendPasswordResetEmailPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The user that the password reset email was sent to */
  user?: Maybe<BlogUser>;
};

/** All of the registered settings */
export type BlogSettings = {
  __typename?: 'BlogSettings';
  /** Settings of the the string Settings Group */
  discussionSettingsDefaultCommentStatus?: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  discussionSettingsDefaultPingStatus?: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  generalSettingsDateFormat?: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  generalSettingsDescription?: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  generalSettingsEmail?: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  generalSettingsLanguage?: Maybe<Scalars['String']>;
  /** Settings of the the integer Settings Group */
  generalSettingsStartOfWeek?: Maybe<Scalars['Int']>;
  /** Settings of the the string Settings Group */
  generalSettingsTimeFormat?: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  generalSettingsTimezone?: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  generalSettingsTitle?: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  generalSettingsUrl?: Maybe<Scalars['String']>;
  /** Settings of the the integer Settings Group */
  readingSettingsPostsPerPage?: Maybe<Scalars['Int']>;
  /** Settings of the the integer Settings Group */
  writingSettingsDefaultCategory?: Maybe<Scalars['Int']>;
  /** Settings of the the string Settings Group */
  writingSettingsDefaultPostFormat?: Maybe<Scalars['String']>;
  /** Settings of the the boolean Settings Group */
  writingSettingsUseSmilies?: Maybe<Scalars['Boolean']>;
};

/** The tag type */
export type BlogTag = BlogDatabaseIdentifier & BlogMenuItemLinkable & BlogNode & BlogTermNode & BlogUniformResourceIdentifiable & {
  __typename?: 'BlogTag';
  /** Connection between the tag type and the ContentNode type */
  contentNodes?: Maybe<BlogTagToContentNodeConnection>;
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  databaseId: Scalars['Int'];
  /** The description of the object */
  description?: Maybe<Scalars['String']>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<BlogTermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<BlogTermNodeToEnqueuedStylesheetConnection>;
  /** The unique resource identifier path */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The link to the term */
  link?: Maybe<Scalars['String']>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']>;
  /** Connection between the tag type and the post type */
  posts?: Maybe<BlogTagToPostConnection>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of databaseId
   */
  tagId?: Maybe<Scalars['Int']>;
  /** Connection between the tag type and the Taxonomy type */
  taxonomy?: Maybe<BlogTagToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};


/** The tag type */
export type BlogTagContentNodesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogTagToContentNodeConnectionWhereArgs>;
};


/** The tag type */
export type BlogTagEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The tag type */
export type BlogTagEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The tag type */
export type BlogTagPostsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogTagToPostConnectionWhereArgs>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum BlogTagIdType {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}

/** Connection between the tag type and the ContentNode type */
export type BlogTagToContentNodeConnection = {
  __typename?: 'BlogTagToContentNodeConnection';
  /** Edges for the TagToContentNodeConnection connection */
  edges?: Maybe<Array<Maybe<BlogTagToContentNodeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogContentNode>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogTagToContentNodeConnectionEdge = {
  __typename?: 'BlogTagToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogContentNode>;
};

/** Arguments for filtering the TagToContentNodeConnection connection */
export type BlogTagToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<BlogContentTypesOfTagEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the tag type and the post type */
export type BlogTagToPostConnection = {
  __typename?: 'BlogTagToPostConnection';
  /** Edges for the TagToPostConnection connection */
  edges?: Maybe<Array<Maybe<BlogTagToPostConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogPost>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogTagToPostConnectionEdge = {
  __typename?: 'BlogTagToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogPost>;
};

/** Arguments for filtering the TagToPostConnection connection */
export type BlogTagToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the tag type and the Taxonomy type */
export type BlogTagToTaxonomyConnectionEdge = {
  __typename?: 'BlogTagToTaxonomyConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<BlogTaxonomy>;
};

/** A taxonomy object */
export type BlogTaxonomy = BlogNode & {
  __typename?: 'BlogTaxonomy';
  /** List of Content Types associated with the Taxonomy */
  connectedContentTypes?: Maybe<BlogTaxonomyToContentTypeConnection>;
  /** Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description */
  description?: Maybe<Scalars['String']>;
  /** The plural name of the post type within the GraphQL Schema. */
  graphqlPluralName?: Maybe<Scalars['String']>;
  /** The singular name of the post type within the GraphQL Schema. */
  graphqlSingleName?: Maybe<Scalars['String']>;
  /** Whether the taxonomy is hierarchical */
  hierarchical?: Maybe<Scalars['Boolean']>;
  /** The globally unique identifier of the taxonomy object. */
  id: Scalars['ID'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Name of the taxonomy shown in the menu. Usually plural. */
  label?: Maybe<Scalars['String']>;
  /** The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label */
  name?: Maybe<Scalars['String']>;
  /** Whether the taxonomy is publicly queryable */
  public?: Maybe<Scalars['Boolean']>;
  /** Name of content type to diplay in REST API &quot;wp/v2&quot; namespace. */
  restBase?: Maybe<Scalars['String']>;
  /** The REST Controller class assigned to handling this content type. */
  restControllerClass?: Maybe<Scalars['String']>;
  /** Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud */
  showCloud?: Maybe<Scalars['Boolean']>;
  /** Whether to display a column for the taxonomy on its post type listing screens. */
  showInAdminColumn?: Maybe<Scalars['Boolean']>;
  /** Whether to add the post type to the GraphQL Schema. */
  showInGraphql?: Maybe<Scalars['Boolean']>;
  /** Whether to show the taxonomy in the admin menu */
  showInMenu?: Maybe<Scalars['Boolean']>;
  /** Whether the taxonomy is available for selection in navigation menus. */
  showInNavMenus?: Maybe<Scalars['Boolean']>;
  /** Whether to show the taxonomy in the quick/bulk edit panel. */
  showInQuickEdit?: Maybe<Scalars['Boolean']>;
  /** Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace. */
  showInRest?: Maybe<Scalars['Boolean']>;
  /** Whether to generate and allow a UI for managing terms in this taxonomy in the admin */
  showUi?: Maybe<Scalars['Boolean']>;
};


/** A taxonomy object */
export type BlogTaxonomyConnectedContentTypesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Allowed taxonomies */
export enum BlogTaxonomyEnum {
  /** Taxonomy enum category */
  Category = 'CATEGORY',
  /** Taxonomy enum post_format */
  Postformat = 'POSTFORMAT',
  /** Taxonomy enum post_tag */
  Tag = 'TAG'
}

/** The Type of Identifier used to fetch a single Taxonomy node. To be used along with the "id" field. Default is "ID". */
export enum BlogTaxonomyIdTypeEnum {
  /** The globally unique ID */
  Id = 'ID',
  /** The name of the taxonomy */
  Name = 'NAME'
}

/** Connection between the Taxonomy type and the ContentType type */
export type BlogTaxonomyToContentTypeConnection = {
  __typename?: 'BlogTaxonomyToContentTypeConnection';
  /** Edges for the TaxonomyToContentTypeConnection connection */
  edges?: Maybe<Array<Maybe<BlogTaxonomyToContentTypeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogContentType>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogTaxonomyToContentTypeConnectionEdge = {
  __typename?: 'BlogTaxonomyToContentTypeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogContentType>;
};

/** Terms are nodes within a Taxonomy, used to group and relate other nodes. */
export type BlogTermNode = {
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']>;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'];
  /** The description of the object */
  description?: Maybe<Scalars['String']>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<BlogTermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<BlogTermNodeToEnqueuedStylesheetConnection>;
  /** The unique resource identifier path */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The link to the term */
  link?: Maybe<Scalars['String']>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};


/** Terms are nodes within a Taxonomy, used to group and relate other nodes. */
export type BlogTermNodeEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** Terms are nodes within a Taxonomy, used to group and relate other nodes. */
export type BlogTermNodeEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The Type of Identifier used to fetch a single resource. Default is "ID". To be used along with the "id" field. */
export enum BlogTermNodeIdTypeEnum {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}

/** Connection between the TermNode type and the EnqueuedScript type */
export type BlogTermNodeToEnqueuedScriptConnection = {
  __typename?: 'BlogTermNodeToEnqueuedScriptConnection';
  /** Edges for the TermNodeToEnqueuedScriptConnection connection */
  edges?: Maybe<Array<Maybe<BlogTermNodeToEnqueuedScriptConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogEnqueuedScript>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogTermNodeToEnqueuedScriptConnectionEdge = {
  __typename?: 'BlogTermNodeToEnqueuedScriptConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogEnqueuedScript>;
};

/** Connection between the TermNode type and the EnqueuedStylesheet type */
export type BlogTermNodeToEnqueuedStylesheetConnection = {
  __typename?: 'BlogTermNodeToEnqueuedStylesheetConnection';
  /** Edges for the TermNodeToEnqueuedStylesheetConnection connection */
  edges?: Maybe<Array<Maybe<BlogTermNodeToEnqueuedStylesheetConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogEnqueuedStylesheet>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogTermNodeToEnqueuedStylesheetConnectionEdge = {
  __typename?: 'BlogTermNodeToEnqueuedStylesheetConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogEnqueuedStylesheet>;
};

/** Options for ordering the connection by */
export enum BlogTermObjectsConnectionOrderbyEnum {
  /** Order the connection by item count. */
  Count = 'COUNT',
  /** Order the connection by description. */
  Description = 'DESCRIPTION',
  /** Order the connection by name. */
  Name = 'NAME',
  /** Order the connection by slug. */
  Slug = 'SLUG',
  /** Order the connection by term group. */
  TermGroup = 'TERM_GROUP',
  /** Order the connection by term id. */
  TermId = 'TERM_ID',
  /** Order the connection by term order. */
  TermOrder = 'TERM_ORDER'
}

/** A theme object */
export type BlogTheme = BlogNode & {
  __typename?: 'BlogTheme';
  /** Name of the theme author(s), could also be a company name. This field is equivalent to WP_Theme-&gt;get( &quot;Author&quot; ). */
  author?: Maybe<Scalars['String']>;
  /** URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;AuthorURI&quot; ). */
  authorUri?: Maybe<Scalars['String']>;
  /** The description of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Description&quot; ). */
  description?: Maybe<Scalars['String']>;
  /** The globally unique identifier of the theme object. */
  id: Scalars['ID'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Display name of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Name&quot; ). */
  name?: Maybe<Scalars['String']>;
  /** The URL of the screenshot for the theme. The screenshot is intended to give an overview of what the theme looks like. This field is equivalent to WP_Theme-&gt;get_screenshot(). */
  screenshot?: Maybe<Scalars['String']>;
  /** The theme slug is used to internally match themes. Theme slugs can have subdirectories like: my-theme/sub-theme. This field is equivalent to WP_Theme-&gt;get_stylesheet(). */
  slug?: Maybe<Scalars['String']>;
  /** URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;Tags&quot; ). */
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A URI if the theme has a website associated with it. The Theme URI is handy for directing users to a theme site for support etc. This field is equivalent to WP_Theme-&gt;get( &quot;ThemeURI&quot; ). */
  themeUri?: Maybe<Scalars['String']>;
  /** The current version of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Version&quot; ). */
  version?: Maybe<Scalars['String']>;
};

/** Any node that has a URI */
export type BlogUniformResourceIdentifiable = {
  /** The unique resource identifier path */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};

/** Input for the UpdateCategory mutation */
export type BlogUpdateCategoryInput = {
  /** The slug that the category will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The description of the category object */
  description?: InputMaybe<Scalars['String']>;
  /** The ID of the category object to update */
  id: Scalars['ID'];
  /** The name of the category object to mutate */
  name?: InputMaybe<Scalars['String']>;
  /** The ID of the category that should be set as the parent */
  parentId?: InputMaybe<Scalars['ID']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']>;
};

/** The payload for the UpdateCategory mutation */
export type BlogUpdateCategoryPayload = {
  __typename?: 'BlogUpdateCategoryPayload';
  /** The created category */
  category?: Maybe<BlogCategory>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Input for the updateComment mutation */
export type BlogUpdateCommentInput = {
  /** The approval status of the comment. */
  approved?: InputMaybe<Scalars['String']>;
  /** The name of the comment's author. */
  author?: InputMaybe<Scalars['String']>;
  /** The email of the comment's author. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** The url of the comment's author. */
  authorUrl?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the post object the comment belongs to. */
  commentOn?: InputMaybe<Scalars['Int']>;
  /** Content of the comment. */
  content?: InputMaybe<Scalars['String']>;
  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']>;
  /** The ID of the comment being updated. */
  id: Scalars['ID'];
  /** Parent comment of current comment. */
  parent?: InputMaybe<Scalars['ID']>;
  /** Type of comment. */
  type?: InputMaybe<Scalars['String']>;
};

/** The payload for the updateComment mutation */
export type BlogUpdateCommentPayload = {
  __typename?: 'BlogUpdateCommentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The comment that was created */
  comment?: Maybe<BlogComment>;
  /** Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache */
  success?: Maybe<Scalars['Boolean']>;
};

/** Input for the updateMediaItem mutation */
export type BlogUpdateMediaItemInput = {
  /** Alternative text to display when mediaItem is not displayed */
  altText?: InputMaybe<Scalars['String']>;
  /** The userId to assign as the author of the mediaItem */
  authorId?: InputMaybe<Scalars['ID']>;
  /** The caption for the mediaItem */
  caption?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The comment status for the mediaItem */
  commentStatus?: InputMaybe<Scalars['String']>;
  /** The date of the mediaItem */
  date?: InputMaybe<Scalars['String']>;
  /** The date (in GMT zone) of the mediaItem */
  dateGmt?: InputMaybe<Scalars['String']>;
  /** Description of the mediaItem */
  description?: InputMaybe<Scalars['String']>;
  /** The file name of the mediaItem */
  filePath?: InputMaybe<Scalars['String']>;
  /** The file type of the mediaItem */
  fileType?: InputMaybe<BlogMimeTypeEnum>;
  /** The ID of the mediaItem object */
  id: Scalars['ID'];
  /** The WordPress post ID or the graphQL postId of the parent object */
  parentId?: InputMaybe<Scalars['ID']>;
  /** The ping status for the mediaItem */
  pingStatus?: InputMaybe<Scalars['String']>;
  /** The slug of the mediaItem */
  slug?: InputMaybe<Scalars['String']>;
  /** The status of the mediaItem */
  status?: InputMaybe<BlogMediaItemStatusEnum>;
  /** The title of the mediaItem */
  title?: InputMaybe<Scalars['String']>;
};

/** The payload for the updateMediaItem mutation */
export type BlogUpdateMediaItemPayload = {
  __typename?: 'BlogUpdateMediaItemPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The MediaItem object mutation type. */
  mediaItem?: Maybe<BlogMediaItem>;
};

/** Input for the updatePage mutation */
export type BlogUpdatePageInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars['String']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']>;
  /** The ID of the page object */
  id: Scalars['ID'];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** The payload for the updatePage mutation */
export type BlogUpdatePagePayload = {
  __typename?: 'BlogUpdatePagePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The Post object mutation type. */
  page?: Maybe<BlogPage>;
};

/** Input for the UpdatePostFormat mutation */
export type BlogUpdatePostFormatInput = {
  /** The slug that the post_format will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The description of the post_format object */
  description?: InputMaybe<Scalars['String']>;
  /** The ID of the postFormat object to update */
  id: Scalars['ID'];
  /** The name of the post_format object to mutate */
  name?: InputMaybe<Scalars['String']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']>;
};

/** The payload for the UpdatePostFormat mutation */
export type BlogUpdatePostFormatPayload = {
  __typename?: 'BlogUpdatePostFormatPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The created post_format */
  postFormat?: Maybe<BlogPostFormat>;
};

/** Input for the updatePost mutation */
export type BlogUpdatePostInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']>;
  /** Set connections between the post and categories */
  categories?: InputMaybe<BlogPostCategoriesInput>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars['String']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']>;
  /** The excerpt of the object */
  excerpt?: InputMaybe<Scalars['String']>;
  /** The ID of the post object */
  id: Scalars['ID'];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']>;
  /** The ping status for the object */
  pingStatus?: InputMaybe<Scalars['String']>;
  /** URLs that have been pinged. */
  pinged?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Set connections between the post and postFormats */
  postFormats?: InputMaybe<BlogPostPostFormatsInput>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']>;
  /** Set connections between the post and tags */
  tags?: InputMaybe<BlogPostTagsInput>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']>;
  /** URLs queued to be pinged. */
  toPing?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

/** The payload for the updatePost mutation */
export type BlogUpdatePostPayload = {
  __typename?: 'BlogUpdatePostPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The Post object mutation type. */
  post?: Maybe<BlogPost>;
};

/** Input for the updateSettings mutation */
export type BlogUpdateSettingsInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Allow people to submit comments on new posts. */
  discussionSettingsDefaultCommentStatus?: InputMaybe<Scalars['String']>;
  /** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */
  discussionSettingsDefaultPingStatus?: InputMaybe<Scalars['String']>;
  /** A date format for all date strings. */
  generalSettingsDateFormat?: InputMaybe<Scalars['String']>;
  /** Site tagline. */
  generalSettingsDescription?: InputMaybe<Scalars['String']>;
  /** This address is used for admin purposes, like new user notification. */
  generalSettingsEmail?: InputMaybe<Scalars['String']>;
  /** WordPress locale code. */
  generalSettingsLanguage?: InputMaybe<Scalars['String']>;
  /** A day number of the week that the week should start on. */
  generalSettingsStartOfWeek?: InputMaybe<Scalars['Int']>;
  /** A time format for all time strings. */
  generalSettingsTimeFormat?: InputMaybe<Scalars['String']>;
  /** A city in the same timezone as you. */
  generalSettingsTimezone?: InputMaybe<Scalars['String']>;
  /** Site title. */
  generalSettingsTitle?: InputMaybe<Scalars['String']>;
  /** Site URL. */
  generalSettingsUrl?: InputMaybe<Scalars['String']>;
  /** Blog pages show at most. */
  readingSettingsPostsPerPage?: InputMaybe<Scalars['Int']>;
  /** Default post category. */
  writingSettingsDefaultCategory?: InputMaybe<Scalars['Int']>;
  /** Default post format. */
  writingSettingsDefaultPostFormat?: InputMaybe<Scalars['String']>;
  /** Convert emoticons like :-) and :-P to graphics on display. */
  writingSettingsUseSmilies?: InputMaybe<Scalars['Boolean']>;
};

/** The payload for the updateSettings mutation */
export type BlogUpdateSettingsPayload = {
  __typename?: 'BlogUpdateSettingsPayload';
  /** Update all settings. */
  allSettings?: Maybe<BlogSettings>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Update the discussion setting. */
  discussionSettings?: Maybe<BlogDiscussionSettings>;
  /** Update the general setting. */
  generalSettings?: Maybe<BlogGeneralSettings>;
  /** Update the reading setting. */
  readingSettings?: Maybe<BlogReadingSettings>;
  /** Update the writing setting. */
  writingSettings?: Maybe<BlogWritingSettings>;
};

/** Input for the UpdateTag mutation */
export type BlogUpdateTagInput = {
  /** The slug that the post_tag will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The description of the post_tag object */
  description?: InputMaybe<Scalars['String']>;
  /** The ID of the tag object to update */
  id: Scalars['ID'];
  /** The name of the post_tag object to mutate */
  name?: InputMaybe<Scalars['String']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']>;
};

/** The payload for the UpdateTag mutation */
export type BlogUpdateTagPayload = {
  __typename?: 'BlogUpdateTagPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The created post_tag */
  tag?: Maybe<BlogTag>;
};

/** Input for the updateUser mutation */
export type BlogUpdateUserInput = {
  /** User's AOL IM account. */
  aim?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** A string containing content about the user. */
  description?: InputMaybe<Scalars['String']>;
  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */
  displayName?: InputMaybe<Scalars['String']>;
  /** A string containing the user's email address. */
  email?: InputMaybe<Scalars['String']>;
  /** 	The user's first name. */
  firstName?: InputMaybe<Scalars['String']>;
  /** The ID of the user */
  id: Scalars['ID'];
  /** User's Jabber account. */
  jabber?: InputMaybe<Scalars['String']>;
  /** The user's last name. */
  lastName?: InputMaybe<Scalars['String']>;
  /** User's locale. */
  locale?: InputMaybe<Scalars['String']>;
  /** A string that contains a URL-friendly name for the user. The default is the user's username. */
  nicename?: InputMaybe<Scalars['String']>;
  /** The user's nickname, defaults to the user's username. */
  nickname?: InputMaybe<Scalars['String']>;
  /** A string that contains the plain text password for the user. */
  password?: InputMaybe<Scalars['String']>;
  /** The date the user registered. Format is Y-m-d H:i:s. */
  registered?: InputMaybe<Scalars['String']>;
  /** A string for whether to enable the rich editor or not. False if not empty. */
  richEditing?: InputMaybe<Scalars['String']>;
  /** An array of roles to be assigned to the user. */
  roles?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** A string containing the user's URL for the user's web site. */
  websiteUrl?: InputMaybe<Scalars['String']>;
  /** User's Yahoo IM account. */
  yim?: InputMaybe<Scalars['String']>;
};

/** The payload for the updateUser mutation */
export type BlogUpdateUserPayload = {
  __typename?: 'BlogUpdateUserPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The User object mutation type. */
  user?: Maybe<BlogUser>;
};

/** A User object */
export type BlogUser = BlogCommenter & BlogDatabaseIdentifier & BlogNode & BlogUniformResourceIdentifiable & {
  __typename?: 'BlogUser';
  /** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */
  avatar?: Maybe<BlogAvatar>;
  /** User metadata option name. Usually it will be &quot;wp_capabilities&quot;. */
  capKey?: Maybe<Scalars['String']>;
  /** A list of capabilities (permissions) granted to the user */
  capabilities?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Connection between the User type and the Comment type */
  comments?: Maybe<BlogUserToCommentConnection>;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'];
  /** Description of the user. */
  description?: Maybe<Scalars['String']>;
  /** Email address of the user. This is equivalent to the WP_User-&gt;user_email property. */
  email?: Maybe<Scalars['String']>;
  /** Connection between the User type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<BlogUserToEnqueuedScriptConnection>;
  /** Connection between the User type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<BlogUserToEnqueuedStylesheetConnection>;
  /** A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP_User-&gt;allcaps. */
  extraCapabilities?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** First name of the user. This is equivalent to the WP_User-&gt;user_first_name property. */
  firstName?: Maybe<Scalars['String']>;
  /** The globally unique identifier for the user object. */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property. */
  lastName?: Maybe<Scalars['String']>;
  /** The preferred language locale set for the user. Value derived from get_user_locale(). */
  locale?: Maybe<Scalars['String']>;
  /** Connection between the User type and the mediaItem type */
  mediaItems?: Maybe<BlogUserToMediaItemConnection>;
  /** Display name of the user. This is equivalent to the WP_User-&gt;dispaly_name property. */
  name?: Maybe<Scalars['String']>;
  /** The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename */
  nicename?: Maybe<Scalars['String']>;
  /** Nickname of the user. */
  nickname?: Maybe<Scalars['String']>;
  /** Connection between the User type and the page type */
  pages?: Maybe<BlogUserToPageConnection>;
  /** Connection between the User type and the post type */
  posts?: Maybe<BlogUserToPostConnection>;
  /** The date the user registered or was created. The field follows a full ISO8601 date string format. */
  registeredDate?: Maybe<Scalars['String']>;
  /** Connection between the User and Revisions authored by the user */
  revisions?: Maybe<BlogUserToContentRevisionUnionConnection>;
  /** Connection between the User type and the UserRole type */
  roles?: Maybe<BlogUserToUserRoleConnection>;
  /** The slug for the user. This field is equivalent to WP_User-&gt;user_nicename */
  slug?: Maybe<Scalars['String']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
  /** A website url that is associated with the user. */
  url?: Maybe<Scalars['String']>;
  /**
   * The Id of the user. Equivalent to WP_User-&gt;ID
   * @deprecated Deprecated in favor of the databaseId field
   */
  userId?: Maybe<Scalars['Int']>;
  /** Username for the user. This field is equivalent to WP_User-&gt;user_login. */
  username?: Maybe<Scalars['String']>;
};


/** A User object */
export type BlogUserAvatarArgs = {
  forceDefault?: InputMaybe<Scalars['Boolean']>;
  rating?: InputMaybe<BlogAvatarRatingEnum>;
  size?: InputMaybe<Scalars['Int']>;
};


/** A User object */
export type BlogUserCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogUserToCommentConnectionWhereArgs>;
};


/** A User object */
export type BlogUserEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A User object */
export type BlogUserEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A User object */
export type BlogUserMediaItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogUserToMediaItemConnectionWhereArgs>;
};


/** A User object */
export type BlogUserPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogUserToPageConnectionWhereArgs>;
};


/** A User object */
export type BlogUserPostsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogUserToPostConnectionWhereArgs>;
};


/** A User object */
export type BlogUserRevisionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogUserToContentRevisionUnionConnectionWhereArgs>;
};


/** A User object */
export type BlogUserRolesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The Type of Identifier used to fetch a single User node. To be used along with the "id" field. Default is "ID". */
export enum BlogUserNodeIdTypeEnum {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The Email of the User */
  Email = 'EMAIL',
  /** The hashed Global ID */
  Id = 'ID',
  /** The slug of the User */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI',
  /** The username the User uses to login with */
  Username = 'USERNAME'
}

/** A user role object */
export type BlogUserRole = BlogNode & {
  __typename?: 'BlogUserRole';
  /** The capabilities that belong to this role */
  capabilities?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The display name of the role */
  displayName?: Maybe<Scalars['String']>;
  /** The globally unique identifier for the user role object. */
  id: Scalars['ID'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** The registered name of the role */
  name?: Maybe<Scalars['String']>;
};

/** Names of available user roles */
export enum BlogUserRoleEnum {
  /** User role with specific capabilities */
  Administrator = 'ADMINISTRATOR',
  /** User role with specific capabilities */
  Author = 'AUTHOR',
  /** User role with specific capabilities */
  Contributor = 'CONTRIBUTOR',
  /** User role with specific capabilities */
  Editor = 'EDITOR',
  /** User role with specific capabilities */
  Subscriber = 'SUBSCRIBER'
}

/** Connection between the User type and the Comment type */
export type BlogUserToCommentConnection = {
  __typename?: 'BlogUserToCommentConnection';
  /** Edges for the UserToCommentConnection connection */
  edges?: Maybe<Array<Maybe<BlogUserToCommentConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogComment>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogUserToCommentConnectionEdge = {
  __typename?: 'BlogUserToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogComment>;
};

/** Arguments for filtering the UserToCommentConnection connection */
export type BlogUserToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<BlogContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<BlogOrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<BlogCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']>;
};

/** Connection between the User type and the ContentRevisionUnion type */
export type BlogUserToContentRevisionUnionConnection = {
  __typename?: 'BlogUserToContentRevisionUnionConnection';
  /** Edges for the UserToContentRevisionUnionConnection connection */
  edges?: Maybe<Array<Maybe<BlogUserToContentRevisionUnionConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogContentRevisionUnion>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogUserToContentRevisionUnionConnectionEdge = {
  __typename?: 'BlogUserToContentRevisionUnionConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogContentRevisionUnion>;
};

/** Arguments for filtering the UserToContentRevisionUnionConnection connection */
export type BlogUserToContentRevisionUnionConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<BlogContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the User type and the EnqueuedScript type */
export type BlogUserToEnqueuedScriptConnection = {
  __typename?: 'BlogUserToEnqueuedScriptConnection';
  /** Edges for the UserToEnqueuedScriptConnection connection */
  edges?: Maybe<Array<Maybe<BlogUserToEnqueuedScriptConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogEnqueuedScript>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogUserToEnqueuedScriptConnectionEdge = {
  __typename?: 'BlogUserToEnqueuedScriptConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogEnqueuedScript>;
};

/** Connection between the User type and the EnqueuedStylesheet type */
export type BlogUserToEnqueuedStylesheetConnection = {
  __typename?: 'BlogUserToEnqueuedStylesheetConnection';
  /** Edges for the UserToEnqueuedStylesheetConnection connection */
  edges?: Maybe<Array<Maybe<BlogUserToEnqueuedStylesheetConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogEnqueuedStylesheet>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogUserToEnqueuedStylesheetConnectionEdge = {
  __typename?: 'BlogUserToEnqueuedStylesheetConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogEnqueuedStylesheet>;
};

/** Connection between the User type and the mediaItem type */
export type BlogUserToMediaItemConnection = {
  __typename?: 'BlogUserToMediaItemConnection';
  /** Edges for the UserToMediaItemConnection connection */
  edges?: Maybe<Array<Maybe<BlogUserToMediaItemConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogMediaItem>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogUserToMediaItemConnectionEdge = {
  __typename?: 'BlogUserToMediaItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogMediaItem>;
};

/** Arguments for filtering the UserToMediaItemConnection connection */
export type BlogUserToMediaItemConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the User type and the page type */
export type BlogUserToPageConnection = {
  __typename?: 'BlogUserToPageConnection';
  /** Edges for the UserToPageConnection connection */
  edges?: Maybe<Array<Maybe<BlogUserToPageConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogPage>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogUserToPageConnectionEdge = {
  __typename?: 'BlogUserToPageConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogPage>;
};

/** Arguments for filtering the UserToPageConnection connection */
export type BlogUserToPageConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the User type and the post type */
export type BlogUserToPostConnection = {
  __typename?: 'BlogUserToPostConnection';
  /** Edges for the UserToPostConnection connection */
  edges?: Maybe<Array<Maybe<BlogUserToPostConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogPost>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogUserToPostConnectionEdge = {
  __typename?: 'BlogUserToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogPost>;
};

/** Arguments for filtering the UserToPostConnection connection */
export type BlogUserToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<BlogDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<BlogMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<BlogPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the User type and the UserRole type */
export type BlogUserToUserRoleConnection = {
  __typename?: 'BlogUserToUserRoleConnection';
  /** Edges for the UserToUserRoleConnection connection */
  edges?: Maybe<Array<Maybe<BlogUserToUserRoleConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<BlogUserRole>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<BlogWpPageInfo>;
};

/** An edge in a connection */
export type BlogUserToUserRoleConnectionEdge = {
  __typename?: 'BlogUserToUserRoleConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<BlogUserRole>;
};

/** Field to order the connection by */
export enum BlogUsersConnectionOrderbyEnum {
  /** Order by display name */
  DisplayName = 'DISPLAY_NAME',
  /** Order by email address */
  Email = 'EMAIL',
  /** Order by login */
  Login = 'LOGIN',
  /** Preserve the login order given in the LOGIN_IN array */
  LoginIn = 'LOGIN_IN',
  /** Order by nice name */
  NiceName = 'NICE_NAME',
  /** Preserve the nice name order given in the NICE_NAME_IN array */
  NiceNameIn = 'NICE_NAME_IN',
  /** Order by registration date */
  Registered = 'REGISTERED',
  /** Order by URL */
  Url = 'URL'
}

/** Options for ordering the connection */
export type BlogUsersConnectionOrderbyInput = {
  /** The field name used to sort the results. */
  field: BlogUsersConnectionOrderbyEnum;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<BlogOrderEnum>;
};

/** Column used for searching for users. */
export enum BlogUsersConnectionSearchColumnEnum {
  /** The user's email address. */
  Email = 'EMAIL',
  /** The globally unique ID. */
  Id = 'ID',
  /** The username the User uses to login with. */
  Login = 'LOGIN',
  /** A URL-friendly name for the user. The default is the user's username. */
  Nicename = 'NICENAME',
  /** The URL of the user\s website. */
  Url = 'URL'
}

/** Information about pagination in a connection. */
export type BlogWpPageInfo = {
  __typename?: 'BlogWPPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

/** The writing setting type */
export type BlogWritingSettings = {
  __typename?: 'BlogWritingSettings';
  /** Default post category. */
  defaultCategory?: Maybe<Scalars['Int']>;
  /** Default post format. */
  defaultPostFormat?: Maybe<Scalars['String']>;
  /** Convert emoticons like :-) and :-P to graphics on display. */
  useSmilies?: Maybe<Scalars['Boolean']>;
};

export type CalendarCalendarEvent = {
  __typename?: 'CalendarCalendarEvent';
  calendarId: Scalars['String'];
  calendarName: Scalars['String'];
  description: Scalars['String'];
  end: Scalars['CalendarDateTime'];
  id: Scalars['ID'];
  location: Scalars['String'];
  metadata: Scalars['CalendarJSONObject'];
  start: Scalars['CalendarDateTime'];
  subscriberCount: Scalars['Float'];
  title: Scalars['String'];
};

export enum CalendarFormat {
  Discord = 'DISCORD',
  Html = 'HTML',
  Markdown = 'MARKDOWN'
}

export type CalendarMutation = {
  __typename?: 'CalendarMutation';
  subscribe: Scalars['Boolean'];
};


export type CalendarMutationSubscribeArgs = {
  calendarId: Scalars['String'];
  destination: Scalars['String'];
  eventId: Scalars['String'];
};

export enum CalendarOrder {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type CalendarQuery = {
  __typename?: 'CalendarQuery';
  event?: Maybe<CalendarCalendarEvent>;
  events: Array<CalendarCalendarEvent>;
};


export type CalendarQueryEventArgs = {
  calendars?: InputMaybe<Array<Scalars['String']>>;
  format?: InputMaybe<CalendarFormat>;
  id: Scalars['ID'];
};


export type CalendarQueryEventsArgs = {
  after: Scalars['CalendarDateTime'];
  before: Scalars['CalendarDateTime'];
  calendars?: InputMaybe<Array<Scalars['String']>>;
  exceptCalendars?: InputMaybe<Array<Scalars['String']>>;
  format?: InputMaybe<CalendarFormat>;
  order?: InputMaybe<CalendarOrder>;
  skip?: InputMaybe<Scalars['Float']>;
  take?: InputMaybe<Scalars['Float']>;
};

export type ClearAffectedRowsOutput = {
  __typename?: 'ClearAffectedRowsOutput';
  count: Scalars['Int'];
};

export type ClearAggregateEmailTemplate = {
  __typename?: 'ClearAggregateEmailTemplate';
  _count?: Maybe<ClearEmailTemplateCountAggregate>;
  _max?: Maybe<ClearEmailTemplateMaxAggregate>;
  _min?: Maybe<ClearEmailTemplateMinAggregate>;
};

export type ClearAggregateEvent = {
  __typename?: 'ClearAggregateEvent';
  _avg?: Maybe<ClearEventAvgAggregate>;
  _count?: Maybe<ClearEventCountAggregate>;
  _max?: Maybe<ClearEventMaxAggregate>;
  _min?: Maybe<ClearEventMinAggregate>;
  _sum?: Maybe<ClearEventSumAggregate>;
};

export type ClearAggregateEventGroup = {
  __typename?: 'ClearAggregateEventGroup';
  _avg?: Maybe<ClearEventGroupAvgAggregate>;
  _count?: Maybe<ClearEventGroupCountAggregate>;
  _max?: Maybe<ClearEventGroupMaxAggregate>;
  _min?: Maybe<ClearEventGroupMinAggregate>;
  _sum?: Maybe<ClearEventGroupSumAggregate>;
};

export type ClearAggregateEventRestriction = {
  __typename?: 'ClearAggregateEventRestriction';
  _count?: Maybe<ClearEventRestrictionCountAggregate>;
  _max?: Maybe<ClearEventRestrictionMaxAggregate>;
  _min?: Maybe<ClearEventRestrictionMinAggregate>;
};

export type ClearAggregateMailingListMember = {
  __typename?: 'ClearAggregateMailingListMember';
  _count?: Maybe<ClearMailingListMemberCountAggregate>;
  _max?: Maybe<ClearMailingListMemberMaxAggregate>;
  _min?: Maybe<ClearMailingListMemberMinAggregate>;
};

export type ClearAggregatePayment = {
  __typename?: 'ClearAggregatePayment';
  _count?: Maybe<ClearPaymentCountAggregate>;
  _max?: Maybe<ClearPaymentMaxAggregate>;
  _min?: Maybe<ClearPaymentMinAggregate>;
};

export type ClearAggregatePerson = {
  __typename?: 'ClearAggregatePerson';
  _avg?: Maybe<ClearPersonAvgAggregate>;
  _count?: Maybe<ClearPersonCountAggregate>;
  _max?: Maybe<ClearPersonMaxAggregate>;
  _min?: Maybe<ClearPersonMinAggregate>;
  _sum?: Maybe<ClearPersonSumAggregate>;
};

export type ClearAggregatePromoCode = {
  __typename?: 'ClearAggregatePromoCode';
  _avg?: Maybe<ClearPromoCodeAvgAggregate>;
  _count?: Maybe<ClearPromoCodeCountAggregate>;
  _max?: Maybe<ClearPromoCodeMaxAggregate>;
  _min?: Maybe<ClearPromoCodeMinAggregate>;
  _sum?: Maybe<ClearPromoCodeSumAggregate>;
};

export type ClearAggregateScheduleItem = {
  __typename?: 'ClearAggregateScheduleItem';
  _count?: Maybe<ClearScheduleItemCountAggregate>;
  _max?: Maybe<ClearScheduleItemMaxAggregate>;
  _min?: Maybe<ClearScheduleItemMinAggregate>;
};

export type ClearAggregateSponsor = {
  __typename?: 'ClearAggregateSponsor';
  _avg?: Maybe<ClearSponsorAvgAggregate>;
  _count?: Maybe<ClearSponsorCountAggregate>;
  _max?: Maybe<ClearSponsorMaxAggregate>;
  _min?: Maybe<ClearSponsorMinAggregate>;
  _sum?: Maybe<ClearSponsorSumAggregate>;
};

export type ClearAggregateTicket = {
  __typename?: 'ClearAggregateTicket';
  _avg?: Maybe<ClearTicketAvgAggregate>;
  _count?: Maybe<ClearTicketCountAggregate>;
  _max?: Maybe<ClearTicketMaxAggregate>;
  _min?: Maybe<ClearTicketMinAggregate>;
  _sum?: Maybe<ClearTicketSumAggregate>;
};

export type ClearAggregateVenue = {
  __typename?: 'ClearAggregateVenue';
  _avg?: Maybe<ClearVenueAvgAggregate>;
  _count?: Maybe<ClearVenueCountAggregate>;
  _max?: Maybe<ClearVenueMaxAggregate>;
  _min?: Maybe<ClearVenueMinAggregate>;
  _sum?: Maybe<ClearVenueSumAggregate>;
};

export type ClearAggregateWebhook = {
  __typename?: 'ClearAggregateWebhook';
  _count?: Maybe<ClearWebhookCountAggregate>;
  _max?: Maybe<ClearWebhookMaxAggregate>;
  _min?: Maybe<ClearWebhookMinAggregate>;
};

export type ClearBoolFieldUpdateOperationsInput = {
  set?: InputMaybe<Scalars['Boolean']>;
};

export type ClearBoolFilter = {
  equals?: InputMaybe<Scalars['Boolean']>;
  not?: InputMaybe<ClearNestedBoolFilter>;
};

export type ClearBoolWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedBoolFilter>;
  _min?: InputMaybe<ClearNestedBoolFilter>;
  equals?: InputMaybe<Scalars['Boolean']>;
  not?: InputMaybe<ClearNestedBoolWithAggregatesFilter>;
};

export type ClearDateTimeFieldUpdateOperationsInput = {
  set?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearDateTimeFilter = {
  equals?: InputMaybe<Scalars['ClearDateTime']>;
  gt?: InputMaybe<Scalars['ClearDateTime']>;
  gte?: InputMaybe<Scalars['ClearDateTime']>;
  in?: InputMaybe<Array<Scalars['ClearDateTime']>>;
  lt?: InputMaybe<Scalars['ClearDateTime']>;
  lte?: InputMaybe<Scalars['ClearDateTime']>;
  not?: InputMaybe<ClearNestedDateTimeFilter>;
  notIn?: InputMaybe<Array<Scalars['ClearDateTime']>>;
};

export type ClearDateTimeNullableFilter = {
  equals?: InputMaybe<Scalars['ClearDateTime']>;
  gt?: InputMaybe<Scalars['ClearDateTime']>;
  gte?: InputMaybe<Scalars['ClearDateTime']>;
  in?: InputMaybe<Array<Scalars['ClearDateTime']>>;
  lt?: InputMaybe<Scalars['ClearDateTime']>;
  lte?: InputMaybe<Scalars['ClearDateTime']>;
  not?: InputMaybe<ClearNestedDateTimeNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['ClearDateTime']>>;
};

export type ClearDateTimeNullableWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntNullableFilter>;
  _max?: InputMaybe<ClearNestedDateTimeNullableFilter>;
  _min?: InputMaybe<ClearNestedDateTimeNullableFilter>;
  equals?: InputMaybe<Scalars['ClearDateTime']>;
  gt?: InputMaybe<Scalars['ClearDateTime']>;
  gte?: InputMaybe<Scalars['ClearDateTime']>;
  in?: InputMaybe<Array<Scalars['ClearDateTime']>>;
  lt?: InputMaybe<Scalars['ClearDateTime']>;
  lte?: InputMaybe<Scalars['ClearDateTime']>;
  not?: InputMaybe<ClearNestedDateTimeNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['ClearDateTime']>>;
};

export type ClearDateTimeWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedDateTimeFilter>;
  _min?: InputMaybe<ClearNestedDateTimeFilter>;
  equals?: InputMaybe<Scalars['ClearDateTime']>;
  gt?: InputMaybe<Scalars['ClearDateTime']>;
  gte?: InputMaybe<Scalars['ClearDateTime']>;
  in?: InputMaybe<Array<Scalars['ClearDateTime']>>;
  lt?: InputMaybe<Scalars['ClearDateTime']>;
  lte?: InputMaybe<Scalars['ClearDateTime']>;
  not?: InputMaybe<ClearNestedDateTimeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['ClearDateTime']>>;
};

export enum ClearDiscountType {
  Percent = 'PERCENT',
  Subtract = 'SUBTRACT'
}

export type ClearEmailTemplate = {
  __typename?: 'ClearEmailTemplate';
  _count?: Maybe<ClearEmailTemplateCount>;
  automatic: Scalars['Boolean'];
  createdAt: Scalars['ClearDateTime'];
  extraFilters?: Maybe<Scalars['ClearJSON']>;
  fromEmail: Scalars['String'];
  fromName: Scalars['String'];
  getMetadata?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  marketing: Scalars['Boolean'];
  metadata?: Maybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  previewEmailBody: Scalars['String'];
  replyTo: Scalars['String'];
  sendAfterEvent: Scalars['Boolean'];
  sendInWorkHours: Scalars['Boolean'];
  sendLate: Scalars['Boolean'];
  sendParent: Scalars['Boolean'];
  sendText: Scalars['Boolean'];
  sendTo: ClearTicketType;
  sentTo: Array<ClearTicket>;
  subject: Scalars['String'];
  template: Scalars['String'];
  textMsg?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ClearDateTime'];
  when: Scalars['String'];
  whenFrom: ClearEmailWhenFrom;
};


export type ClearEmailTemplateGetMetadataArgs = {
  key: Scalars['String'];
};


export type ClearEmailTemplateSentToArgs = {
  cursor?: InputMaybe<ClearTicketWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearTicketScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearTicketOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearTicketWhereInput>;
};

export type ClearEmailTemplateCount = {
  __typename?: 'ClearEmailTemplateCount';
  sentTo: Scalars['Int'];
};

export type ClearEmailTemplateCountAggregate = {
  __typename?: 'ClearEmailTemplateCountAggregate';
  _all: Scalars['Int'];
  automatic: Scalars['Int'];
  createdAt: Scalars['Int'];
  extraFilters: Scalars['Int'];
  fromEmail: Scalars['Int'];
  fromName: Scalars['Int'];
  id: Scalars['Int'];
  marketing: Scalars['Int'];
  metadata: Scalars['Int'];
  name: Scalars['Int'];
  replyTo: Scalars['Int'];
  sendAfterEvent: Scalars['Int'];
  sendInWorkHours: Scalars['Int'];
  sendLate: Scalars['Int'];
  sendParent: Scalars['Int'];
  sendText: Scalars['Int'];
  sendTo: Scalars['Int'];
  subject: Scalars['Int'];
  template: Scalars['Int'];
  textMsg: Scalars['Int'];
  updatedAt: Scalars['Int'];
  when: Scalars['Int'];
  whenFrom: Scalars['Int'];
};

export type ClearEmailTemplateCountOrderByAggregateInput = {
  automatic?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  extraFilters?: InputMaybe<ClearSortOrder>;
  fromEmail?: InputMaybe<ClearSortOrder>;
  fromName?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  marketing?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  replyTo?: InputMaybe<ClearSortOrder>;
  sendAfterEvent?: InputMaybe<ClearSortOrder>;
  sendInWorkHours?: InputMaybe<ClearSortOrder>;
  sendLate?: InputMaybe<ClearSortOrder>;
  sendParent?: InputMaybe<ClearSortOrder>;
  sendText?: InputMaybe<ClearSortOrder>;
  sendTo?: InputMaybe<ClearSortOrder>;
  subject?: InputMaybe<ClearSortOrder>;
  template?: InputMaybe<ClearSortOrder>;
  textMsg?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  when?: InputMaybe<ClearSortOrder>;
  whenFrom?: InputMaybe<ClearSortOrder>;
};

export type ClearEmailTemplateCreateInput = {
  automatic?: InputMaybe<Scalars['Boolean']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  extraFilters?: InputMaybe<Scalars['ClearJSON']>;
  fromEmail?: InputMaybe<Scalars['String']>;
  fromName?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  marketing?: InputMaybe<Scalars['Boolean']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  replyTo?: InputMaybe<Scalars['String']>;
  sendAfterEvent?: InputMaybe<Scalars['Boolean']>;
  sendInWorkHours?: InputMaybe<Scalars['Boolean']>;
  sendLate?: InputMaybe<Scalars['Boolean']>;
  sendParent?: InputMaybe<Scalars['Boolean']>;
  sendText?: InputMaybe<Scalars['Boolean']>;
  sendTo: ClearTicketType;
  sentTo?: InputMaybe<ClearTicketCreateNestedManyWithoutSentEmailsInput>;
  subject: Scalars['String'];
  template: Scalars['String'];
  textMsg?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  when: Scalars['String'];
  whenFrom: ClearEmailWhenFrom;
};

export type ClearEmailTemplateCreateManyInput = {
  automatic?: InputMaybe<Scalars['Boolean']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  extraFilters?: InputMaybe<Scalars['ClearJSON']>;
  fromEmail?: InputMaybe<Scalars['String']>;
  fromName?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  marketing?: InputMaybe<Scalars['Boolean']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  replyTo?: InputMaybe<Scalars['String']>;
  sendAfterEvent?: InputMaybe<Scalars['Boolean']>;
  sendInWorkHours?: InputMaybe<Scalars['Boolean']>;
  sendLate?: InputMaybe<Scalars['Boolean']>;
  sendParent?: InputMaybe<Scalars['Boolean']>;
  sendText?: InputMaybe<Scalars['Boolean']>;
  sendTo: ClearTicketType;
  subject: Scalars['String'];
  template: Scalars['String'];
  textMsg?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  when: Scalars['String'];
  whenFrom: ClearEmailWhenFrom;
};

export type ClearEmailTemplateCreateNestedManyWithoutSentToInput = {
  connect?: InputMaybe<Array<ClearEmailTemplateWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearEmailTemplateCreateOrConnectWithoutSentToInput>>;
  create?: InputMaybe<Array<ClearEmailTemplateCreateWithoutSentToInput>>;
};

export type ClearEmailTemplateCreateOrConnectWithoutSentToInput = {
  create: ClearEmailTemplateCreateWithoutSentToInput;
  where: ClearEmailTemplateWhereUniqueInput;
};

export type ClearEmailTemplateCreateWithoutSentToInput = {
  automatic?: InputMaybe<Scalars['Boolean']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  extraFilters?: InputMaybe<Scalars['ClearJSON']>;
  fromEmail?: InputMaybe<Scalars['String']>;
  fromName?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  marketing?: InputMaybe<Scalars['Boolean']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  replyTo?: InputMaybe<Scalars['String']>;
  sendAfterEvent?: InputMaybe<Scalars['Boolean']>;
  sendInWorkHours?: InputMaybe<Scalars['Boolean']>;
  sendLate?: InputMaybe<Scalars['Boolean']>;
  sendParent?: InputMaybe<Scalars['Boolean']>;
  sendText?: InputMaybe<Scalars['Boolean']>;
  sendTo: ClearTicketType;
  subject: Scalars['String'];
  template: Scalars['String'];
  textMsg?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  when: Scalars['String'];
  whenFrom: ClearEmailWhenFrom;
};

export type ClearEmailTemplateGroupBy = {
  __typename?: 'ClearEmailTemplateGroupBy';
  _count?: Maybe<ClearEmailTemplateCountAggregate>;
  _max?: Maybe<ClearEmailTemplateMaxAggregate>;
  _min?: Maybe<ClearEmailTemplateMinAggregate>;
  automatic: Scalars['Boolean'];
  createdAt: Scalars['ClearDateTime'];
  extraFilters?: Maybe<Scalars['ClearJSON']>;
  fromEmail: Scalars['String'];
  fromName: Scalars['String'];
  id: Scalars['String'];
  marketing: Scalars['Boolean'];
  metadata?: Maybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  replyTo: Scalars['String'];
  sendAfterEvent: Scalars['Boolean'];
  sendInWorkHours: Scalars['Boolean'];
  sendLate: Scalars['Boolean'];
  sendParent: Scalars['Boolean'];
  sendText: Scalars['Boolean'];
  sendTo: ClearTicketType;
  subject: Scalars['String'];
  template: Scalars['String'];
  textMsg?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ClearDateTime'];
  when: Scalars['String'];
  whenFrom: ClearEmailWhenFrom;
};

export type ClearEmailTemplateListRelationFilter = {
  every?: InputMaybe<ClearEmailTemplateWhereInput>;
  none?: InputMaybe<ClearEmailTemplateWhereInput>;
  some?: InputMaybe<ClearEmailTemplateWhereInput>;
};

export type ClearEmailTemplateMaxAggregate = {
  __typename?: 'ClearEmailTemplateMaxAggregate';
  automatic?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  fromEmail?: Maybe<Scalars['String']>;
  fromName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  marketing?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  replyTo?: Maybe<Scalars['String']>;
  sendAfterEvent?: Maybe<Scalars['Boolean']>;
  sendInWorkHours?: Maybe<Scalars['Boolean']>;
  sendLate?: Maybe<Scalars['Boolean']>;
  sendParent?: Maybe<Scalars['Boolean']>;
  sendText?: Maybe<Scalars['Boolean']>;
  sendTo?: Maybe<ClearTicketType>;
  subject?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['String']>;
  textMsg?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
  when?: Maybe<Scalars['String']>;
  whenFrom?: Maybe<ClearEmailWhenFrom>;
};

export type ClearEmailTemplateMaxOrderByAggregateInput = {
  automatic?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  fromEmail?: InputMaybe<ClearSortOrder>;
  fromName?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  marketing?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  replyTo?: InputMaybe<ClearSortOrder>;
  sendAfterEvent?: InputMaybe<ClearSortOrder>;
  sendInWorkHours?: InputMaybe<ClearSortOrder>;
  sendLate?: InputMaybe<ClearSortOrder>;
  sendParent?: InputMaybe<ClearSortOrder>;
  sendText?: InputMaybe<ClearSortOrder>;
  sendTo?: InputMaybe<ClearSortOrder>;
  subject?: InputMaybe<ClearSortOrder>;
  template?: InputMaybe<ClearSortOrder>;
  textMsg?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  when?: InputMaybe<ClearSortOrder>;
  whenFrom?: InputMaybe<ClearSortOrder>;
};

export type ClearEmailTemplateMinAggregate = {
  __typename?: 'ClearEmailTemplateMinAggregate';
  automatic?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  fromEmail?: Maybe<Scalars['String']>;
  fromName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  marketing?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  replyTo?: Maybe<Scalars['String']>;
  sendAfterEvent?: Maybe<Scalars['Boolean']>;
  sendInWorkHours?: Maybe<Scalars['Boolean']>;
  sendLate?: Maybe<Scalars['Boolean']>;
  sendParent?: Maybe<Scalars['Boolean']>;
  sendText?: Maybe<Scalars['Boolean']>;
  sendTo?: Maybe<ClearTicketType>;
  subject?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['String']>;
  textMsg?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
  when?: Maybe<Scalars['String']>;
  whenFrom?: Maybe<ClearEmailWhenFrom>;
};

export type ClearEmailTemplateMinOrderByAggregateInput = {
  automatic?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  fromEmail?: InputMaybe<ClearSortOrder>;
  fromName?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  marketing?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  replyTo?: InputMaybe<ClearSortOrder>;
  sendAfterEvent?: InputMaybe<ClearSortOrder>;
  sendInWorkHours?: InputMaybe<ClearSortOrder>;
  sendLate?: InputMaybe<ClearSortOrder>;
  sendParent?: InputMaybe<ClearSortOrder>;
  sendText?: InputMaybe<ClearSortOrder>;
  sendTo?: InputMaybe<ClearSortOrder>;
  subject?: InputMaybe<ClearSortOrder>;
  template?: InputMaybe<ClearSortOrder>;
  textMsg?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  when?: InputMaybe<ClearSortOrder>;
  whenFrom?: InputMaybe<ClearSortOrder>;
};

export type ClearEmailTemplateOrderByRelationAggregateInput = {
  _count?: InputMaybe<ClearSortOrder>;
};

export type ClearEmailTemplateOrderByWithAggregationInput = {
  _count?: InputMaybe<ClearEmailTemplateCountOrderByAggregateInput>;
  _max?: InputMaybe<ClearEmailTemplateMaxOrderByAggregateInput>;
  _min?: InputMaybe<ClearEmailTemplateMinOrderByAggregateInput>;
  automatic?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  extraFilters?: InputMaybe<ClearSortOrder>;
  fromEmail?: InputMaybe<ClearSortOrder>;
  fromName?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  marketing?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  replyTo?: InputMaybe<ClearSortOrder>;
  sendAfterEvent?: InputMaybe<ClearSortOrder>;
  sendInWorkHours?: InputMaybe<ClearSortOrder>;
  sendLate?: InputMaybe<ClearSortOrder>;
  sendParent?: InputMaybe<ClearSortOrder>;
  sendText?: InputMaybe<ClearSortOrder>;
  sendTo?: InputMaybe<ClearSortOrder>;
  subject?: InputMaybe<ClearSortOrder>;
  template?: InputMaybe<ClearSortOrder>;
  textMsg?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  when?: InputMaybe<ClearSortOrder>;
  whenFrom?: InputMaybe<ClearSortOrder>;
};

export type ClearEmailTemplateOrderByWithRelationInput = {
  automatic?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  extraFilters?: InputMaybe<ClearSortOrder>;
  fromEmail?: InputMaybe<ClearSortOrder>;
  fromName?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  marketing?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  replyTo?: InputMaybe<ClearSortOrder>;
  sendAfterEvent?: InputMaybe<ClearSortOrder>;
  sendInWorkHours?: InputMaybe<ClearSortOrder>;
  sendLate?: InputMaybe<ClearSortOrder>;
  sendParent?: InputMaybe<ClearSortOrder>;
  sendText?: InputMaybe<ClearSortOrder>;
  sendTo?: InputMaybe<ClearSortOrder>;
  sentTo?: InputMaybe<ClearTicketOrderByRelationAggregateInput>;
  subject?: InputMaybe<ClearSortOrder>;
  template?: InputMaybe<ClearSortOrder>;
  textMsg?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  when?: InputMaybe<ClearSortOrder>;
  whenFrom?: InputMaybe<ClearSortOrder>;
};

export enum ClearEmailTemplateScalarFieldEnum {
  Automatic = 'automatic',
  CreatedAt = 'createdAt',
  ExtraFilters = 'extraFilters',
  FromEmail = 'fromEmail',
  FromName = 'fromName',
  Id = 'id',
  Marketing = 'marketing',
  Metadata = 'metadata',
  Name = 'name',
  ReplyTo = 'replyTo',
  SendAfterEvent = 'sendAfterEvent',
  SendInWorkHours = 'sendInWorkHours',
  SendLate = 'sendLate',
  SendParent = 'sendParent',
  SendText = 'sendText',
  SendTo = 'sendTo',
  Subject = 'subject',
  Template = 'template',
  TextMsg = 'textMsg',
  UpdatedAt = 'updatedAt',
  When = 'when',
  WhenFrom = 'whenFrom'
}

export type ClearEmailTemplateScalarWhereInput = {
  AND?: InputMaybe<Array<ClearEmailTemplateScalarWhereInput>>;
  NOT?: InputMaybe<Array<ClearEmailTemplateScalarWhereInput>>;
  OR?: InputMaybe<Array<ClearEmailTemplateScalarWhereInput>>;
  automatic?: InputMaybe<ClearBoolFilter>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  extraFilters?: InputMaybe<ClearJsonNullableFilter>;
  fromEmail?: InputMaybe<ClearStringFilter>;
  fromName?: InputMaybe<ClearStringFilter>;
  id?: InputMaybe<ClearStringFilter>;
  marketing?: InputMaybe<ClearBoolFilter>;
  name?: InputMaybe<ClearStringFilter>;
  replyTo?: InputMaybe<ClearStringFilter>;
  sendAfterEvent?: InputMaybe<ClearBoolFilter>;
  sendInWorkHours?: InputMaybe<ClearBoolFilter>;
  sendLate?: InputMaybe<ClearBoolFilter>;
  sendParent?: InputMaybe<ClearBoolFilter>;
  sendText?: InputMaybe<ClearBoolFilter>;
  sendTo?: InputMaybe<ClearEnumTicketTypeFilter>;
  subject?: InputMaybe<ClearStringFilter>;
  template?: InputMaybe<ClearStringFilter>;
  textMsg?: InputMaybe<ClearStringNullableFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
  when?: InputMaybe<ClearStringFilter>;
  whenFrom?: InputMaybe<ClearEnumEmailWhenFromFilter>;
};

export type ClearEmailTemplateScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ClearEmailTemplateScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ClearEmailTemplateScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ClearEmailTemplateScalarWhereWithAggregatesInput>>;
  automatic?: InputMaybe<ClearBoolWithAggregatesFilter>;
  createdAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  extraFilters?: InputMaybe<ClearJsonNullableWithAggregatesFilter>;
  fromEmail?: InputMaybe<ClearStringWithAggregatesFilter>;
  fromName?: InputMaybe<ClearStringWithAggregatesFilter>;
  id?: InputMaybe<ClearStringWithAggregatesFilter>;
  marketing?: InputMaybe<ClearBoolWithAggregatesFilter>;
  name?: InputMaybe<ClearStringWithAggregatesFilter>;
  replyTo?: InputMaybe<ClearStringWithAggregatesFilter>;
  sendAfterEvent?: InputMaybe<ClearBoolWithAggregatesFilter>;
  sendInWorkHours?: InputMaybe<ClearBoolWithAggregatesFilter>;
  sendLate?: InputMaybe<ClearBoolWithAggregatesFilter>;
  sendParent?: InputMaybe<ClearBoolWithAggregatesFilter>;
  sendText?: InputMaybe<ClearBoolWithAggregatesFilter>;
  sendTo?: InputMaybe<ClearEnumTicketTypeWithAggregatesFilter>;
  subject?: InputMaybe<ClearStringWithAggregatesFilter>;
  template?: InputMaybe<ClearStringWithAggregatesFilter>;
  textMsg?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  updatedAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  when?: InputMaybe<ClearStringWithAggregatesFilter>;
  whenFrom?: InputMaybe<ClearEnumEmailWhenFromWithAggregatesFilter>;
};

export type ClearEmailTemplateUpdateInput = {
  automatic?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  extraFilters?: InputMaybe<Scalars['ClearJSON']>;
  fromEmail?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  fromName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  marketing?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  replyTo?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  sendAfterEvent?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  sendInWorkHours?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  sendLate?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  sendParent?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  sendText?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  sendTo?: InputMaybe<ClearEnumTicketTypeFieldUpdateOperationsInput>;
  sentTo?: InputMaybe<ClearTicketUpdateManyWithoutSentEmailsInput>;
  subject?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  template?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  textMsg?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  when?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  whenFrom?: InputMaybe<ClearEnumEmailWhenFromFieldUpdateOperationsInput>;
};

export type ClearEmailTemplateUpdateManyMutationInput = {
  automatic?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  extraFilters?: InputMaybe<Scalars['ClearJSON']>;
  fromEmail?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  fromName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  marketing?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  replyTo?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  sendAfterEvent?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  sendInWorkHours?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  sendLate?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  sendParent?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  sendText?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  sendTo?: InputMaybe<ClearEnumTicketTypeFieldUpdateOperationsInput>;
  subject?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  template?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  textMsg?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  when?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  whenFrom?: InputMaybe<ClearEnumEmailWhenFromFieldUpdateOperationsInput>;
};

export type ClearEmailTemplateUpdateManyWithWhereWithoutSentToInput = {
  data: ClearEmailTemplateUpdateManyMutationInput;
  where: ClearEmailTemplateScalarWhereInput;
};

export type ClearEmailTemplateUpdateManyWithoutSentToInput = {
  connect?: InputMaybe<Array<ClearEmailTemplateWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearEmailTemplateCreateOrConnectWithoutSentToInput>>;
  create?: InputMaybe<Array<ClearEmailTemplateCreateWithoutSentToInput>>;
  delete?: InputMaybe<Array<ClearEmailTemplateWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClearEmailTemplateScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClearEmailTemplateWhereUniqueInput>>;
  set?: InputMaybe<Array<ClearEmailTemplateWhereUniqueInput>>;
  update?: InputMaybe<Array<ClearEmailTemplateUpdateWithWhereUniqueWithoutSentToInput>>;
  updateMany?: InputMaybe<Array<ClearEmailTemplateUpdateManyWithWhereWithoutSentToInput>>;
  upsert?: InputMaybe<Array<ClearEmailTemplateUpsertWithWhereUniqueWithoutSentToInput>>;
};

export type ClearEmailTemplateUpdateWithWhereUniqueWithoutSentToInput = {
  data: ClearEmailTemplateUpdateWithoutSentToInput;
  where: ClearEmailTemplateWhereUniqueInput;
};

export type ClearEmailTemplateUpdateWithoutSentToInput = {
  automatic?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  extraFilters?: InputMaybe<Scalars['ClearJSON']>;
  fromEmail?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  fromName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  marketing?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  replyTo?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  sendAfterEvent?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  sendInWorkHours?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  sendLate?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  sendParent?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  sendText?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  sendTo?: InputMaybe<ClearEnumTicketTypeFieldUpdateOperationsInput>;
  subject?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  template?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  textMsg?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  when?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  whenFrom?: InputMaybe<ClearEnumEmailWhenFromFieldUpdateOperationsInput>;
};

export type ClearEmailTemplateUpsertWithWhereUniqueWithoutSentToInput = {
  create: ClearEmailTemplateCreateWithoutSentToInput;
  update: ClearEmailTemplateUpdateWithoutSentToInput;
  where: ClearEmailTemplateWhereUniqueInput;
};

export type ClearEmailTemplateWhereInput = {
  AND?: InputMaybe<Array<ClearEmailTemplateWhereInput>>;
  NOT?: InputMaybe<Array<ClearEmailTemplateWhereInput>>;
  OR?: InputMaybe<Array<ClearEmailTemplateWhereInput>>;
  automatic?: InputMaybe<ClearBoolFilter>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  extraFilters?: InputMaybe<ClearJsonNullableFilter>;
  fromEmail?: InputMaybe<ClearStringFilter>;
  fromName?: InputMaybe<ClearStringFilter>;
  id?: InputMaybe<ClearStringFilter>;
  marketing?: InputMaybe<ClearBoolFilter>;
  name?: InputMaybe<ClearStringFilter>;
  replyTo?: InputMaybe<ClearStringFilter>;
  sendAfterEvent?: InputMaybe<ClearBoolFilter>;
  sendInWorkHours?: InputMaybe<ClearBoolFilter>;
  sendLate?: InputMaybe<ClearBoolFilter>;
  sendParent?: InputMaybe<ClearBoolFilter>;
  sendText?: InputMaybe<ClearBoolFilter>;
  sendTo?: InputMaybe<ClearEnumTicketTypeFilter>;
  sentTo?: InputMaybe<ClearTicketListRelationFilter>;
  subject?: InputMaybe<ClearStringFilter>;
  template?: InputMaybe<ClearStringFilter>;
  textMsg?: InputMaybe<ClearStringNullableFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
  when?: InputMaybe<ClearStringFilter>;
  whenFrom?: InputMaybe<ClearEnumEmailWhenFromFilter>;
};

export type ClearEmailTemplateWhereUniqueInput = {
  id?: InputMaybe<Scalars['String']>;
};

export enum ClearEmailWhenFrom {
  Eventend = 'EVENTEND',
  Eventstart = 'EVENTSTART',
  Register = 'REGISTER'
}

export type ClearEnumDiscountTypeFieldUpdateOperationsInput = {
  set?: InputMaybe<ClearDiscountType>;
};

export type ClearEnumDiscountTypeFilter = {
  equals?: InputMaybe<ClearDiscountType>;
  in?: InputMaybe<Array<ClearDiscountType>>;
  not?: InputMaybe<ClearNestedEnumDiscountTypeFilter>;
  notIn?: InputMaybe<Array<ClearDiscountType>>;
};

export type ClearEnumDiscountTypeWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedEnumDiscountTypeFilter>;
  _min?: InputMaybe<ClearNestedEnumDiscountTypeFilter>;
  equals?: InputMaybe<ClearDiscountType>;
  in?: InputMaybe<Array<ClearDiscountType>>;
  not?: InputMaybe<ClearNestedEnumDiscountTypeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<ClearDiscountType>>;
};

export type ClearEnumEmailWhenFromFieldUpdateOperationsInput = {
  set?: InputMaybe<ClearEmailWhenFrom>;
};

export type ClearEnumEmailWhenFromFilter = {
  equals?: InputMaybe<ClearEmailWhenFrom>;
  in?: InputMaybe<Array<ClearEmailWhenFrom>>;
  not?: InputMaybe<ClearNestedEnumEmailWhenFromFilter>;
  notIn?: InputMaybe<Array<ClearEmailWhenFrom>>;
};

export type ClearEnumEmailWhenFromWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedEnumEmailWhenFromFilter>;
  _min?: InputMaybe<ClearNestedEnumEmailWhenFromFilter>;
  equals?: InputMaybe<ClearEmailWhenFrom>;
  in?: InputMaybe<Array<ClearEmailWhenFrom>>;
  not?: InputMaybe<ClearNestedEnumEmailWhenFromWithAggregatesFilter>;
  notIn?: InputMaybe<Array<ClearEmailWhenFrom>>;
};

export type ClearEnumTicketTypeFieldUpdateOperationsInput = {
  set?: InputMaybe<ClearTicketType>;
};

export type ClearEnumTicketTypeFilter = {
  equals?: InputMaybe<ClearTicketType>;
  in?: InputMaybe<Array<ClearTicketType>>;
  not?: InputMaybe<ClearNestedEnumTicketTypeFilter>;
  notIn?: InputMaybe<Array<ClearTicketType>>;
};

export type ClearEnumTicketTypeWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedEnumTicketTypeFilter>;
  _min?: InputMaybe<ClearNestedEnumTicketTypeFilter>;
  equals?: InputMaybe<ClearTicketType>;
  in?: InputMaybe<Array<ClearTicketType>>;
  not?: InputMaybe<ClearNestedEnumTicketTypeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<ClearTicketType>>;
};

export type ClearEnumWebhookServiceFieldUpdateOperationsInput = {
  set?: InputMaybe<ClearWebhookService>;
};

export type ClearEnumWebhookServiceFilter = {
  equals?: InputMaybe<ClearWebhookService>;
  in?: InputMaybe<Array<ClearWebhookService>>;
  not?: InputMaybe<ClearNestedEnumWebhookServiceFilter>;
  notIn?: InputMaybe<Array<ClearWebhookService>>;
};

export type ClearEnumWebhookServiceWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedEnumWebhookServiceFilter>;
  _min?: InputMaybe<ClearNestedEnumWebhookServiceFilter>;
  equals?: InputMaybe<ClearWebhookService>;
  in?: InputMaybe<Array<ClearWebhookService>>;
  not?: InputMaybe<ClearNestedEnumWebhookServiceWithAggregatesFilter>;
  notIn?: InputMaybe<Array<ClearWebhookService>>;
};

export type ClearEnumWebhookTypeFieldUpdateOperationsInput = {
  set?: InputMaybe<ClearWebhookType>;
};

export type ClearEnumWebhookTypeFilter = {
  equals?: InputMaybe<ClearWebhookType>;
  in?: InputMaybe<Array<ClearWebhookType>>;
  not?: InputMaybe<ClearNestedEnumWebhookTypeFilter>;
  notIn?: InputMaybe<Array<ClearWebhookType>>;
};

export type ClearEnumWebhookTypeWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedEnumWebhookTypeFilter>;
  _min?: InputMaybe<ClearNestedEnumWebhookTypeFilter>;
  equals?: InputMaybe<ClearWebhookType>;
  in?: InputMaybe<Array<ClearWebhookType>>;
  not?: InputMaybe<ClearNestedEnumWebhookTypeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<ClearWebhookType>>;
};

export type ClearEvent = {
  __typename?: 'ClearEvent';
  _count?: Maybe<ClearEventCount>;
  activeTicketPrice?: Maybe<Scalars['Float']>;
  adultWaiverId?: Maybe<Scalars['String']>;
  canEarlyBirdRegister: Scalars['Boolean'];
  canRegister: Scalars['Boolean'];
  checkPromoCode: Scalars['ClearJSONObject'];
  cmsEventRestrictions: Array<CmsEventRestriction>;
  contentfulEventRestrictions: Array<Scalars['String']>;
  contentfulWebname?: Maybe<Scalars['String']>;
  createdAt: Scalars['ClearDateTime'];
  displayDate: Scalars['String'];
  displayTime: Scalars['String'];
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  eventGroup: ClearEventGroup;
  eventGroupId: Scalars['String'];
  eventRestrictions: Array<ClearEventRestriction>;
  getMetadata?: Maybe<Scalars['String']>;
  groupPrice?: Maybe<Scalars['Float']>;
  id: Scalars['String'];
  interestedEmails: Array<ClearMailingListMember>;
  majorityAge: Scalars['Int'];
  managers: Array<Scalars['String']>;
  maxAge?: Maybe<Scalars['Int']>;
  metadata?: Maybe<Scalars['ClearJSON']>;
  minAge?: Maybe<Scalars['Int']>;
  minorWaiverId?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  overnightMinAge?: Maybe<Scalars['Int']>;
  promoCodes: Array<ClearPromoCode>;
  region?: Maybe<CmsRegion>;
  registrationCutoff: Scalars['ClearDateTime'];
  registrationsOpen: Scalars['Boolean'];
  remainingTickets?: Maybe<Scalars['Float']>;
  requiresPromoCode: Scalars['Boolean'];
  schedule: Array<ClearScheduleItem>;
  showcaseId?: Maybe<Scalars['String']>;
  soldTickets: Scalars['Float'];
  sponsors: Array<ClearSponsor>;
  startDate: Scalars['ClearDateTime'];
  team: ClearTeam;
  ticketPrice: Scalars['Float'];
  tickets: Array<ClearTicket>;
  timezone?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ClearDateTime'];
  venue?: Maybe<ClearVenue>;
  venueId?: Maybe<Scalars['String']>;
  waiverBook: Scalars['String'];
  webhooks: Array<ClearWebhook>;
};


export type ClearEventCheckPromoCodeArgs = {
  code: Scalars['String'];
};


export type ClearEventCmsEventRestrictionsArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


export type ClearEventEventRestrictionsArgs = {
  cursor?: InputMaybe<ClearEventRestrictionWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearEventRestrictionScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearEventRestrictionOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEventRestrictionWhereInput>;
};


export type ClearEventGetMetadataArgs = {
  key: Scalars['String'];
};


export type ClearEventInterestedEmailsArgs = {
  cursor?: InputMaybe<ClearMailingListMemberWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearMailingListMemberScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearMailingListMemberOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearMailingListMemberWhereInput>;
};


export type ClearEventPromoCodesArgs = {
  cursor?: InputMaybe<ClearPromoCodeWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearPromoCodeScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearPromoCodeOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearPromoCodeWhereInput>;
};


export type ClearEventRegionArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


export type ClearEventScheduleArgs = {
  cursor?: InputMaybe<ClearScheduleItemWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearScheduleItemScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearScheduleItemOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearScheduleItemWhereInput>;
};


export type ClearEventSoldTicketsArgs = {
  onlyStudents?: InputMaybe<Scalars['Boolean']>;
};


export type ClearEventSponsorsArgs = {
  cursor?: InputMaybe<ClearSponsorWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearSponsorScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearSponsorOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearSponsorWhereInput>;
};


export type ClearEventTicketsArgs = {
  cursor?: InputMaybe<ClearTicketWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearTicketScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearTicketOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearTicketWhereInput>;
};


export type ClearEventWebhooksArgs = {
  cursor?: InputMaybe<ClearWebhookWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearWebhookScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearWebhookOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearWebhookWhereInput>;
};

export type ClearEventAvgAggregate = {
  __typename?: 'ClearEventAvgAggregate';
  earlyBirdPrice?: Maybe<Scalars['Float']>;
  groupPrice?: Maybe<Scalars['Float']>;
  majorityAge?: Maybe<Scalars['Float']>;
  maxAge?: Maybe<Scalars['Float']>;
  minAge?: Maybe<Scalars['Float']>;
  overnightMinAge?: Maybe<Scalars['Float']>;
  ticketPrice?: Maybe<Scalars['Float']>;
};

export type ClearEventAvgOrderByAggregateInput = {
  earlyBirdPrice?: InputMaybe<ClearSortOrder>;
  groupPrice?: InputMaybe<ClearSortOrder>;
  majorityAge?: InputMaybe<ClearSortOrder>;
  maxAge?: InputMaybe<ClearSortOrder>;
  minAge?: InputMaybe<ClearSortOrder>;
  overnightMinAge?: InputMaybe<ClearSortOrder>;
  ticketPrice?: InputMaybe<ClearSortOrder>;
};

export type ClearEventCount = {
  __typename?: 'ClearEventCount';
  eventRestrictions: Scalars['Int'];
  interestedEmails: Scalars['Int'];
  promoCodes: Scalars['Int'];
  schedule: Scalars['Int'];
  sponsors: Scalars['Int'];
  tickets: Scalars['Int'];
  webhooks: Scalars['Int'];
};

export type ClearEventCountAggregate = {
  __typename?: 'ClearEventCountAggregate';
  _all: Scalars['Int'];
  adultWaiverId: Scalars['Int'];
  contentfulEventRestrictions: Scalars['Int'];
  contentfulWebname: Scalars['Int'];
  createdAt: Scalars['Int'];
  earlyBirdCutoff: Scalars['Int'];
  earlyBirdPrice: Scalars['Int'];
  endDate: Scalars['Int'];
  eventGroupId: Scalars['Int'];
  groupPrice: Scalars['Int'];
  id: Scalars['Int'];
  majorityAge: Scalars['Int'];
  managers: Scalars['Int'];
  maxAge: Scalars['Int'];
  metadata: Scalars['Int'];
  minAge: Scalars['Int'];
  minorWaiverId: Scalars['Int'];
  name: Scalars['Int'];
  overnightMinAge: Scalars['Int'];
  registrationCutoff: Scalars['Int'];
  registrationsOpen: Scalars['Int'];
  requiresPromoCode: Scalars['Int'];
  showcaseId: Scalars['Int'];
  startDate: Scalars['Int'];
  ticketPrice: Scalars['Int'];
  timezone: Scalars['Int'];
  updatedAt: Scalars['Int'];
  venueId: Scalars['Int'];
};

export type ClearEventCountOrderByAggregateInput = {
  adultWaiverId?: InputMaybe<ClearSortOrder>;
  contentfulEventRestrictions?: InputMaybe<ClearSortOrder>;
  contentfulWebname?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  earlyBirdCutoff?: InputMaybe<ClearSortOrder>;
  earlyBirdPrice?: InputMaybe<ClearSortOrder>;
  endDate?: InputMaybe<ClearSortOrder>;
  eventGroupId?: InputMaybe<ClearSortOrder>;
  groupPrice?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  majorityAge?: InputMaybe<ClearSortOrder>;
  managers?: InputMaybe<ClearSortOrder>;
  maxAge?: InputMaybe<ClearSortOrder>;
  minAge?: InputMaybe<ClearSortOrder>;
  minorWaiverId?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  overnightMinAge?: InputMaybe<ClearSortOrder>;
  registrationCutoff?: InputMaybe<ClearSortOrder>;
  registrationsOpen?: InputMaybe<ClearSortOrder>;
  requiresPromoCode?: InputMaybe<ClearSortOrder>;
  showcaseId?: InputMaybe<ClearSortOrder>;
  startDate?: InputMaybe<ClearSortOrder>;
  ticketPrice?: InputMaybe<ClearSortOrder>;
  timezone?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  venueId?: InputMaybe<ClearSortOrder>;
};

export type ClearEventCreateInput = {
  adultWaiverId?: InputMaybe<Scalars['String']>;
  contentfulEventRestrictions?: InputMaybe<ClearEventCreatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  eventGroup: ClearEventGroupCreateNestedOneWithoutEventsInput;
  eventRestrictions?: InputMaybe<ClearEventRestrictionCreateNestedManyWithoutEventsInput>;
  groupPrice?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  interestedEmails?: InputMaybe<ClearMailingListMemberCreateNestedManyWithoutInterestedInEventsInput>;
  majorityAge?: InputMaybe<Scalars['Int']>;
  managers?: InputMaybe<ClearEventCreatemanagersInput>;
  maxAge?: InputMaybe<Scalars['Int']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minorWaiverId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  overnightMinAge?: InputMaybe<Scalars['Int']>;
  promoCodes?: InputMaybe<ClearPromoCodeCreateNestedManyWithoutEventInput>;
  registrationCutoff: Scalars['ClearDateTime'];
  registrationsOpen?: InputMaybe<Scalars['Boolean']>;
  requiresPromoCode?: InputMaybe<Scalars['Boolean']>;
  schedule?: InputMaybe<ClearScheduleItemCreateNestedManyWithoutEventInput>;
  showcaseId?: InputMaybe<Scalars['String']>;
  sponsors?: InputMaybe<ClearSponsorCreateNestedManyWithoutEventInput>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  tickets?: InputMaybe<ClearTicketCreateNestedManyWithoutEventInput>;
  timezone?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  venue?: InputMaybe<ClearVenueCreateNestedOneWithoutEventsInput>;
  webhooks?: InputMaybe<ClearWebhookCreateNestedManyWithoutEventInput>;
};

export type ClearEventCreateManyEventGroupInput = {
  adultWaiverId?: InputMaybe<Scalars['String']>;
  contentfulEventRestrictions?: InputMaybe<ClearEventCreatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  groupPrice?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  majorityAge?: InputMaybe<Scalars['Int']>;
  managers?: InputMaybe<ClearEventCreatemanagersInput>;
  maxAge?: InputMaybe<Scalars['Int']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minorWaiverId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  overnightMinAge?: InputMaybe<Scalars['Int']>;
  registrationCutoff: Scalars['ClearDateTime'];
  registrationsOpen?: InputMaybe<Scalars['Boolean']>;
  requiresPromoCode?: InputMaybe<Scalars['Boolean']>;
  showcaseId?: InputMaybe<Scalars['String']>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  timezone?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  venueId?: InputMaybe<Scalars['String']>;
};

export type ClearEventCreateManyEventGroupInputEnvelope = {
  data: Array<ClearEventCreateManyEventGroupInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};

export type ClearEventCreateManyInput = {
  adultWaiverId?: InputMaybe<Scalars['String']>;
  contentfulEventRestrictions?: InputMaybe<ClearEventCreatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  eventGroupId: Scalars['String'];
  groupPrice?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  majorityAge?: InputMaybe<Scalars['Int']>;
  managers?: InputMaybe<ClearEventCreatemanagersInput>;
  maxAge?: InputMaybe<Scalars['Int']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minorWaiverId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  overnightMinAge?: InputMaybe<Scalars['Int']>;
  registrationCutoff: Scalars['ClearDateTime'];
  registrationsOpen?: InputMaybe<Scalars['Boolean']>;
  requiresPromoCode?: InputMaybe<Scalars['Boolean']>;
  showcaseId?: InputMaybe<Scalars['String']>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  timezone?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  venueId?: InputMaybe<Scalars['String']>;
};

export type ClearEventCreateManyVenueInput = {
  adultWaiverId?: InputMaybe<Scalars['String']>;
  contentfulEventRestrictions?: InputMaybe<ClearEventCreatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  eventGroupId: Scalars['String'];
  groupPrice?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  majorityAge?: InputMaybe<Scalars['Int']>;
  managers?: InputMaybe<ClearEventCreatemanagersInput>;
  maxAge?: InputMaybe<Scalars['Int']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minorWaiverId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  overnightMinAge?: InputMaybe<Scalars['Int']>;
  registrationCutoff: Scalars['ClearDateTime'];
  registrationsOpen?: InputMaybe<Scalars['Boolean']>;
  requiresPromoCode?: InputMaybe<Scalars['Boolean']>;
  showcaseId?: InputMaybe<Scalars['String']>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  timezone?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearEventCreateManyVenueInputEnvelope = {
  data: Array<ClearEventCreateManyVenueInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};

export type ClearEventCreateNestedManyWithoutEventGroupInput = {
  connect?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearEventCreateOrConnectWithoutEventGroupInput>>;
  create?: InputMaybe<Array<ClearEventCreateWithoutEventGroupInput>>;
  createMany?: InputMaybe<ClearEventCreateManyEventGroupInputEnvelope>;
};

export type ClearEventCreateNestedManyWithoutEventRestrictionsInput = {
  connect?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearEventCreateOrConnectWithoutEventRestrictionsInput>>;
  create?: InputMaybe<Array<ClearEventCreateWithoutEventRestrictionsInput>>;
};

export type ClearEventCreateNestedManyWithoutInterestedEmailsInput = {
  connect?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearEventCreateOrConnectWithoutInterestedEmailsInput>>;
  create?: InputMaybe<Array<ClearEventCreateWithoutInterestedEmailsInput>>;
};

export type ClearEventCreateNestedManyWithoutVenueInput = {
  connect?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearEventCreateOrConnectWithoutVenueInput>>;
  create?: InputMaybe<Array<ClearEventCreateWithoutVenueInput>>;
  createMany?: InputMaybe<ClearEventCreateManyVenueInputEnvelope>;
};

export type ClearEventCreateNestedOneWithoutPromoCodesInput = {
  connect?: InputMaybe<ClearEventWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearEventCreateOrConnectWithoutPromoCodesInput>;
  create?: InputMaybe<ClearEventCreateWithoutPromoCodesInput>;
};

export type ClearEventCreateNestedOneWithoutScheduleInput = {
  connect?: InputMaybe<ClearEventWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearEventCreateOrConnectWithoutScheduleInput>;
  create?: InputMaybe<ClearEventCreateWithoutScheduleInput>;
};

export type ClearEventCreateNestedOneWithoutSponsorsInput = {
  connect?: InputMaybe<ClearEventWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearEventCreateOrConnectWithoutSponsorsInput>;
  create?: InputMaybe<ClearEventCreateWithoutSponsorsInput>;
};

export type ClearEventCreateNestedOneWithoutTicketsInput = {
  connect?: InputMaybe<ClearEventWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearEventCreateOrConnectWithoutTicketsInput>;
  create?: InputMaybe<ClearEventCreateWithoutTicketsInput>;
};

export type ClearEventCreateNestedOneWithoutWebhooksInput = {
  connect?: InputMaybe<ClearEventWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearEventCreateOrConnectWithoutWebhooksInput>;
  create?: InputMaybe<ClearEventCreateWithoutWebhooksInput>;
};

export type ClearEventCreateOrConnectWithoutEventGroupInput = {
  create: ClearEventCreateWithoutEventGroupInput;
  where: ClearEventWhereUniqueInput;
};

export type ClearEventCreateOrConnectWithoutEventRestrictionsInput = {
  create: ClearEventCreateWithoutEventRestrictionsInput;
  where: ClearEventWhereUniqueInput;
};

export type ClearEventCreateOrConnectWithoutInterestedEmailsInput = {
  create: ClearEventCreateWithoutInterestedEmailsInput;
  where: ClearEventWhereUniqueInput;
};

export type ClearEventCreateOrConnectWithoutPromoCodesInput = {
  create: ClearEventCreateWithoutPromoCodesInput;
  where: ClearEventWhereUniqueInput;
};

export type ClearEventCreateOrConnectWithoutScheduleInput = {
  create: ClearEventCreateWithoutScheduleInput;
  where: ClearEventWhereUniqueInput;
};

export type ClearEventCreateOrConnectWithoutSponsorsInput = {
  create: ClearEventCreateWithoutSponsorsInput;
  where: ClearEventWhereUniqueInput;
};

export type ClearEventCreateOrConnectWithoutTicketsInput = {
  create: ClearEventCreateWithoutTicketsInput;
  where: ClearEventWhereUniqueInput;
};

export type ClearEventCreateOrConnectWithoutVenueInput = {
  create: ClearEventCreateWithoutVenueInput;
  where: ClearEventWhereUniqueInput;
};

export type ClearEventCreateOrConnectWithoutWebhooksInput = {
  create: ClearEventCreateWithoutWebhooksInput;
  where: ClearEventWhereUniqueInput;
};

export type ClearEventCreateWithoutEventGroupInput = {
  adultWaiverId?: InputMaybe<Scalars['String']>;
  contentfulEventRestrictions?: InputMaybe<ClearEventCreatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  eventRestrictions?: InputMaybe<ClearEventRestrictionCreateNestedManyWithoutEventsInput>;
  groupPrice?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  interestedEmails?: InputMaybe<ClearMailingListMemberCreateNestedManyWithoutInterestedInEventsInput>;
  majorityAge?: InputMaybe<Scalars['Int']>;
  managers?: InputMaybe<ClearEventCreatemanagersInput>;
  maxAge?: InputMaybe<Scalars['Int']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minorWaiverId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  overnightMinAge?: InputMaybe<Scalars['Int']>;
  promoCodes?: InputMaybe<ClearPromoCodeCreateNestedManyWithoutEventInput>;
  registrationCutoff: Scalars['ClearDateTime'];
  registrationsOpen?: InputMaybe<Scalars['Boolean']>;
  requiresPromoCode?: InputMaybe<Scalars['Boolean']>;
  schedule?: InputMaybe<ClearScheduleItemCreateNestedManyWithoutEventInput>;
  showcaseId?: InputMaybe<Scalars['String']>;
  sponsors?: InputMaybe<ClearSponsorCreateNestedManyWithoutEventInput>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  tickets?: InputMaybe<ClearTicketCreateNestedManyWithoutEventInput>;
  timezone?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  venue?: InputMaybe<ClearVenueCreateNestedOneWithoutEventsInput>;
  webhooks?: InputMaybe<ClearWebhookCreateNestedManyWithoutEventInput>;
};

export type ClearEventCreateWithoutEventRestrictionsInput = {
  adultWaiverId?: InputMaybe<Scalars['String']>;
  contentfulEventRestrictions?: InputMaybe<ClearEventCreatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  eventGroup: ClearEventGroupCreateNestedOneWithoutEventsInput;
  groupPrice?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  interestedEmails?: InputMaybe<ClearMailingListMemberCreateNestedManyWithoutInterestedInEventsInput>;
  majorityAge?: InputMaybe<Scalars['Int']>;
  managers?: InputMaybe<ClearEventCreatemanagersInput>;
  maxAge?: InputMaybe<Scalars['Int']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minorWaiverId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  overnightMinAge?: InputMaybe<Scalars['Int']>;
  promoCodes?: InputMaybe<ClearPromoCodeCreateNestedManyWithoutEventInput>;
  registrationCutoff: Scalars['ClearDateTime'];
  registrationsOpen?: InputMaybe<Scalars['Boolean']>;
  requiresPromoCode?: InputMaybe<Scalars['Boolean']>;
  schedule?: InputMaybe<ClearScheduleItemCreateNestedManyWithoutEventInput>;
  showcaseId?: InputMaybe<Scalars['String']>;
  sponsors?: InputMaybe<ClearSponsorCreateNestedManyWithoutEventInput>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  tickets?: InputMaybe<ClearTicketCreateNestedManyWithoutEventInput>;
  timezone?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  venue?: InputMaybe<ClearVenueCreateNestedOneWithoutEventsInput>;
  webhooks?: InputMaybe<ClearWebhookCreateNestedManyWithoutEventInput>;
};

export type ClearEventCreateWithoutInterestedEmailsInput = {
  adultWaiverId?: InputMaybe<Scalars['String']>;
  contentfulEventRestrictions?: InputMaybe<ClearEventCreatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  eventGroup: ClearEventGroupCreateNestedOneWithoutEventsInput;
  eventRestrictions?: InputMaybe<ClearEventRestrictionCreateNestedManyWithoutEventsInput>;
  groupPrice?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  majorityAge?: InputMaybe<Scalars['Int']>;
  managers?: InputMaybe<ClearEventCreatemanagersInput>;
  maxAge?: InputMaybe<Scalars['Int']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minorWaiverId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  overnightMinAge?: InputMaybe<Scalars['Int']>;
  promoCodes?: InputMaybe<ClearPromoCodeCreateNestedManyWithoutEventInput>;
  registrationCutoff: Scalars['ClearDateTime'];
  registrationsOpen?: InputMaybe<Scalars['Boolean']>;
  requiresPromoCode?: InputMaybe<Scalars['Boolean']>;
  schedule?: InputMaybe<ClearScheduleItemCreateNestedManyWithoutEventInput>;
  showcaseId?: InputMaybe<Scalars['String']>;
  sponsors?: InputMaybe<ClearSponsorCreateNestedManyWithoutEventInput>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  tickets?: InputMaybe<ClearTicketCreateNestedManyWithoutEventInput>;
  timezone?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  venue?: InputMaybe<ClearVenueCreateNestedOneWithoutEventsInput>;
  webhooks?: InputMaybe<ClearWebhookCreateNestedManyWithoutEventInput>;
};

export type ClearEventCreateWithoutPromoCodesInput = {
  adultWaiverId?: InputMaybe<Scalars['String']>;
  contentfulEventRestrictions?: InputMaybe<ClearEventCreatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  eventGroup: ClearEventGroupCreateNestedOneWithoutEventsInput;
  eventRestrictions?: InputMaybe<ClearEventRestrictionCreateNestedManyWithoutEventsInput>;
  groupPrice?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  interestedEmails?: InputMaybe<ClearMailingListMemberCreateNestedManyWithoutInterestedInEventsInput>;
  majorityAge?: InputMaybe<Scalars['Int']>;
  managers?: InputMaybe<ClearEventCreatemanagersInput>;
  maxAge?: InputMaybe<Scalars['Int']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minorWaiverId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  overnightMinAge?: InputMaybe<Scalars['Int']>;
  registrationCutoff: Scalars['ClearDateTime'];
  registrationsOpen?: InputMaybe<Scalars['Boolean']>;
  requiresPromoCode?: InputMaybe<Scalars['Boolean']>;
  schedule?: InputMaybe<ClearScheduleItemCreateNestedManyWithoutEventInput>;
  showcaseId?: InputMaybe<Scalars['String']>;
  sponsors?: InputMaybe<ClearSponsorCreateNestedManyWithoutEventInput>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  tickets?: InputMaybe<ClearTicketCreateNestedManyWithoutEventInput>;
  timezone?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  venue?: InputMaybe<ClearVenueCreateNestedOneWithoutEventsInput>;
  webhooks?: InputMaybe<ClearWebhookCreateNestedManyWithoutEventInput>;
};

export type ClearEventCreateWithoutScheduleInput = {
  adultWaiverId?: InputMaybe<Scalars['String']>;
  contentfulEventRestrictions?: InputMaybe<ClearEventCreatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  eventGroup: ClearEventGroupCreateNestedOneWithoutEventsInput;
  eventRestrictions?: InputMaybe<ClearEventRestrictionCreateNestedManyWithoutEventsInput>;
  groupPrice?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  interestedEmails?: InputMaybe<ClearMailingListMemberCreateNestedManyWithoutInterestedInEventsInput>;
  majorityAge?: InputMaybe<Scalars['Int']>;
  managers?: InputMaybe<ClearEventCreatemanagersInput>;
  maxAge?: InputMaybe<Scalars['Int']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minorWaiverId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  overnightMinAge?: InputMaybe<Scalars['Int']>;
  promoCodes?: InputMaybe<ClearPromoCodeCreateNestedManyWithoutEventInput>;
  registrationCutoff: Scalars['ClearDateTime'];
  registrationsOpen?: InputMaybe<Scalars['Boolean']>;
  requiresPromoCode?: InputMaybe<Scalars['Boolean']>;
  showcaseId?: InputMaybe<Scalars['String']>;
  sponsors?: InputMaybe<ClearSponsorCreateNestedManyWithoutEventInput>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  tickets?: InputMaybe<ClearTicketCreateNestedManyWithoutEventInput>;
  timezone?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  venue?: InputMaybe<ClearVenueCreateNestedOneWithoutEventsInput>;
  webhooks?: InputMaybe<ClearWebhookCreateNestedManyWithoutEventInput>;
};

export type ClearEventCreateWithoutSponsorsInput = {
  adultWaiverId?: InputMaybe<Scalars['String']>;
  contentfulEventRestrictions?: InputMaybe<ClearEventCreatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  eventGroup: ClearEventGroupCreateNestedOneWithoutEventsInput;
  eventRestrictions?: InputMaybe<ClearEventRestrictionCreateNestedManyWithoutEventsInput>;
  groupPrice?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  interestedEmails?: InputMaybe<ClearMailingListMemberCreateNestedManyWithoutInterestedInEventsInput>;
  majorityAge?: InputMaybe<Scalars['Int']>;
  managers?: InputMaybe<ClearEventCreatemanagersInput>;
  maxAge?: InputMaybe<Scalars['Int']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minorWaiverId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  overnightMinAge?: InputMaybe<Scalars['Int']>;
  promoCodes?: InputMaybe<ClearPromoCodeCreateNestedManyWithoutEventInput>;
  registrationCutoff: Scalars['ClearDateTime'];
  registrationsOpen?: InputMaybe<Scalars['Boolean']>;
  requiresPromoCode?: InputMaybe<Scalars['Boolean']>;
  schedule?: InputMaybe<ClearScheduleItemCreateNestedManyWithoutEventInput>;
  showcaseId?: InputMaybe<Scalars['String']>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  tickets?: InputMaybe<ClearTicketCreateNestedManyWithoutEventInput>;
  timezone?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  venue?: InputMaybe<ClearVenueCreateNestedOneWithoutEventsInput>;
  webhooks?: InputMaybe<ClearWebhookCreateNestedManyWithoutEventInput>;
};

export type ClearEventCreateWithoutTicketsInput = {
  adultWaiverId?: InputMaybe<Scalars['String']>;
  contentfulEventRestrictions?: InputMaybe<ClearEventCreatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  eventGroup: ClearEventGroupCreateNestedOneWithoutEventsInput;
  eventRestrictions?: InputMaybe<ClearEventRestrictionCreateNestedManyWithoutEventsInput>;
  groupPrice?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  interestedEmails?: InputMaybe<ClearMailingListMemberCreateNestedManyWithoutInterestedInEventsInput>;
  majorityAge?: InputMaybe<Scalars['Int']>;
  managers?: InputMaybe<ClearEventCreatemanagersInput>;
  maxAge?: InputMaybe<Scalars['Int']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minorWaiverId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  overnightMinAge?: InputMaybe<Scalars['Int']>;
  promoCodes?: InputMaybe<ClearPromoCodeCreateNestedManyWithoutEventInput>;
  registrationCutoff: Scalars['ClearDateTime'];
  registrationsOpen?: InputMaybe<Scalars['Boolean']>;
  requiresPromoCode?: InputMaybe<Scalars['Boolean']>;
  schedule?: InputMaybe<ClearScheduleItemCreateNestedManyWithoutEventInput>;
  showcaseId?: InputMaybe<Scalars['String']>;
  sponsors?: InputMaybe<ClearSponsorCreateNestedManyWithoutEventInput>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  timezone?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  venue?: InputMaybe<ClearVenueCreateNestedOneWithoutEventsInput>;
  webhooks?: InputMaybe<ClearWebhookCreateNestedManyWithoutEventInput>;
};

export type ClearEventCreateWithoutVenueInput = {
  adultWaiverId?: InputMaybe<Scalars['String']>;
  contentfulEventRestrictions?: InputMaybe<ClearEventCreatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  eventGroup: ClearEventGroupCreateNestedOneWithoutEventsInput;
  eventRestrictions?: InputMaybe<ClearEventRestrictionCreateNestedManyWithoutEventsInput>;
  groupPrice?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  interestedEmails?: InputMaybe<ClearMailingListMemberCreateNestedManyWithoutInterestedInEventsInput>;
  majorityAge?: InputMaybe<Scalars['Int']>;
  managers?: InputMaybe<ClearEventCreatemanagersInput>;
  maxAge?: InputMaybe<Scalars['Int']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minorWaiverId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  overnightMinAge?: InputMaybe<Scalars['Int']>;
  promoCodes?: InputMaybe<ClearPromoCodeCreateNestedManyWithoutEventInput>;
  registrationCutoff: Scalars['ClearDateTime'];
  registrationsOpen?: InputMaybe<Scalars['Boolean']>;
  requiresPromoCode?: InputMaybe<Scalars['Boolean']>;
  schedule?: InputMaybe<ClearScheduleItemCreateNestedManyWithoutEventInput>;
  showcaseId?: InputMaybe<Scalars['String']>;
  sponsors?: InputMaybe<ClearSponsorCreateNestedManyWithoutEventInput>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  tickets?: InputMaybe<ClearTicketCreateNestedManyWithoutEventInput>;
  timezone?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  webhooks?: InputMaybe<ClearWebhookCreateNestedManyWithoutEventInput>;
};

export type ClearEventCreateWithoutWebhooksInput = {
  adultWaiverId?: InputMaybe<Scalars['String']>;
  contentfulEventRestrictions?: InputMaybe<ClearEventCreatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  eventGroup: ClearEventGroupCreateNestedOneWithoutEventsInput;
  eventRestrictions?: InputMaybe<ClearEventRestrictionCreateNestedManyWithoutEventsInput>;
  groupPrice?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  interestedEmails?: InputMaybe<ClearMailingListMemberCreateNestedManyWithoutInterestedInEventsInput>;
  majorityAge?: InputMaybe<Scalars['Int']>;
  managers?: InputMaybe<ClearEventCreatemanagersInput>;
  maxAge?: InputMaybe<Scalars['Int']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  minAge?: InputMaybe<Scalars['Int']>;
  minorWaiverId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  overnightMinAge?: InputMaybe<Scalars['Int']>;
  promoCodes?: InputMaybe<ClearPromoCodeCreateNestedManyWithoutEventInput>;
  registrationCutoff: Scalars['ClearDateTime'];
  registrationsOpen?: InputMaybe<Scalars['Boolean']>;
  requiresPromoCode?: InputMaybe<Scalars['Boolean']>;
  schedule?: InputMaybe<ClearScheduleItemCreateNestedManyWithoutEventInput>;
  showcaseId?: InputMaybe<Scalars['String']>;
  sponsors?: InputMaybe<ClearSponsorCreateNestedManyWithoutEventInput>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  tickets?: InputMaybe<ClearTicketCreateNestedManyWithoutEventInput>;
  timezone?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  venue?: InputMaybe<ClearVenueCreateNestedOneWithoutEventsInput>;
};

export type ClearEventCreatecontentfulEventRestrictionsInput = {
  set: Array<Scalars['String']>;
};

export type ClearEventCreatemanagersInput = {
  set: Array<Scalars['String']>;
};

export type ClearEventGroup = {
  __typename?: 'ClearEventGroup';
  _count?: Maybe<ClearEventGroupCount>;
  cmsEventGroup?: Maybe<CmsEvent>;
  contentfulId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ClearDateTime'];
  displayDate: Scalars['String'];
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  events: Array<ClearEvent>;
  getMetadata?: Maybe<Scalars['String']>;
  groupPrice?: Maybe<Scalars['Float']>;
  id: Scalars['String'];
  metadata?: Maybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  promoCodes: Array<ClearPromoCode>;
  registrationCutoff: Scalars['ClearDateTime'];
  schedule: Array<ClearScheduleItem>;
  showcaseId?: Maybe<Scalars['String']>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  updatedAt: Scalars['ClearDateTime'];
  webhooks: Array<ClearWebhook>;
};


export type ClearEventGroupCmsEventGroupArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


export type ClearEventGroupEventsArgs = {
  cursor?: InputMaybe<ClearEventWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearEventScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearEventOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEventWhereInput>;
};


export type ClearEventGroupGetMetadataArgs = {
  key: Scalars['String'];
};


export type ClearEventGroupPromoCodesArgs = {
  cursor?: InputMaybe<ClearPromoCodeWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearPromoCodeScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearPromoCodeOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearPromoCodeWhereInput>;
};


export type ClearEventGroupScheduleArgs = {
  cursor?: InputMaybe<ClearScheduleItemWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearScheduleItemScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearScheduleItemOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearScheduleItemWhereInput>;
};


export type ClearEventGroupWebhooksArgs = {
  cursor?: InputMaybe<ClearWebhookWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearWebhookScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearWebhookOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearWebhookWhereInput>;
};

export type ClearEventGroupAvgAggregate = {
  __typename?: 'ClearEventGroupAvgAggregate';
  earlyBirdPrice?: Maybe<Scalars['Float']>;
  groupPrice?: Maybe<Scalars['Float']>;
  ticketPrice?: Maybe<Scalars['Float']>;
};

export type ClearEventGroupAvgOrderByAggregateInput = {
  earlyBirdPrice?: InputMaybe<ClearSortOrder>;
  groupPrice?: InputMaybe<ClearSortOrder>;
  ticketPrice?: InputMaybe<ClearSortOrder>;
};

export type ClearEventGroupBy = {
  __typename?: 'ClearEventGroupBy';
  _avg?: Maybe<ClearEventAvgAggregate>;
  _count?: Maybe<ClearEventCountAggregate>;
  _max?: Maybe<ClearEventMaxAggregate>;
  _min?: Maybe<ClearEventMinAggregate>;
  _sum?: Maybe<ClearEventSumAggregate>;
  adultWaiverId?: Maybe<Scalars['String']>;
  contentfulEventRestrictions?: Maybe<Array<Scalars['String']>>;
  contentfulWebname?: Maybe<Scalars['String']>;
  createdAt: Scalars['ClearDateTime'];
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  eventGroupId: Scalars['String'];
  groupPrice?: Maybe<Scalars['Float']>;
  id: Scalars['String'];
  majorityAge: Scalars['Int'];
  managers?: Maybe<Array<Scalars['String']>>;
  maxAge?: Maybe<Scalars['Int']>;
  metadata?: Maybe<Scalars['ClearJSON']>;
  minAge?: Maybe<Scalars['Int']>;
  minorWaiverId?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  overnightMinAge?: Maybe<Scalars['Int']>;
  registrationCutoff: Scalars['ClearDateTime'];
  registrationsOpen: Scalars['Boolean'];
  requiresPromoCode: Scalars['Boolean'];
  showcaseId?: Maybe<Scalars['String']>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  timezone?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ClearDateTime'];
  venueId?: Maybe<Scalars['String']>;
};

export type ClearEventGroupCount = {
  __typename?: 'ClearEventGroupCount';
  events: Scalars['Int'];
  promoCodes: Scalars['Int'];
  schedule: Scalars['Int'];
  webhooks: Scalars['Int'];
};

export type ClearEventGroupCountAggregate = {
  __typename?: 'ClearEventGroupCountAggregate';
  _all: Scalars['Int'];
  contentfulId: Scalars['Int'];
  createdAt: Scalars['Int'];
  earlyBirdCutoff: Scalars['Int'];
  earlyBirdPrice: Scalars['Int'];
  endDate: Scalars['Int'];
  groupPrice: Scalars['Int'];
  id: Scalars['Int'];
  metadata: Scalars['Int'];
  name: Scalars['Int'];
  registrationCutoff: Scalars['Int'];
  showcaseId: Scalars['Int'];
  startDate: Scalars['Int'];
  ticketPrice: Scalars['Int'];
  updatedAt: Scalars['Int'];
};

export type ClearEventGroupCountOrderByAggregateInput = {
  contentfulId?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  earlyBirdCutoff?: InputMaybe<ClearSortOrder>;
  earlyBirdPrice?: InputMaybe<ClearSortOrder>;
  endDate?: InputMaybe<ClearSortOrder>;
  groupPrice?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  registrationCutoff?: InputMaybe<ClearSortOrder>;
  showcaseId?: InputMaybe<ClearSortOrder>;
  startDate?: InputMaybe<ClearSortOrder>;
  ticketPrice?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearEventGroupCreateInput = {
  contentfulId?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  events?: InputMaybe<ClearEventCreateNestedManyWithoutEventGroupInput>;
  groupPrice?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  promoCodes?: InputMaybe<ClearPromoCodeCreateNestedManyWithoutEventGroupInput>;
  registrationCutoff: Scalars['ClearDateTime'];
  schedule?: InputMaybe<ClearScheduleItemCreateNestedManyWithoutEventGroupInput>;
  showcaseId?: InputMaybe<Scalars['String']>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  webhooks?: InputMaybe<ClearWebhookCreateNestedManyWithoutEventGroupInput>;
};

export type ClearEventGroupCreateManyInput = {
  contentfulId?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  groupPrice?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  registrationCutoff: Scalars['ClearDateTime'];
  showcaseId?: InputMaybe<Scalars['String']>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearEventGroupCreateNestedOneWithoutEventsInput = {
  connect?: InputMaybe<ClearEventGroupWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearEventGroupCreateOrConnectWithoutEventsInput>;
  create?: InputMaybe<ClearEventGroupCreateWithoutEventsInput>;
};

export type ClearEventGroupCreateNestedOneWithoutPromoCodesInput = {
  connect?: InputMaybe<ClearEventGroupWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearEventGroupCreateOrConnectWithoutPromoCodesInput>;
  create?: InputMaybe<ClearEventGroupCreateWithoutPromoCodesInput>;
};

export type ClearEventGroupCreateNestedOneWithoutScheduleInput = {
  connect?: InputMaybe<ClearEventGroupWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearEventGroupCreateOrConnectWithoutScheduleInput>;
  create?: InputMaybe<ClearEventGroupCreateWithoutScheduleInput>;
};

export type ClearEventGroupCreateNestedOneWithoutWebhooksInput = {
  connect?: InputMaybe<ClearEventGroupWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearEventGroupCreateOrConnectWithoutWebhooksInput>;
  create?: InputMaybe<ClearEventGroupCreateWithoutWebhooksInput>;
};

export type ClearEventGroupCreateOrConnectWithoutEventsInput = {
  create: ClearEventGroupCreateWithoutEventsInput;
  where: ClearEventGroupWhereUniqueInput;
};

export type ClearEventGroupCreateOrConnectWithoutPromoCodesInput = {
  create: ClearEventGroupCreateWithoutPromoCodesInput;
  where: ClearEventGroupWhereUniqueInput;
};

export type ClearEventGroupCreateOrConnectWithoutScheduleInput = {
  create: ClearEventGroupCreateWithoutScheduleInput;
  where: ClearEventGroupWhereUniqueInput;
};

export type ClearEventGroupCreateOrConnectWithoutWebhooksInput = {
  create: ClearEventGroupCreateWithoutWebhooksInput;
  where: ClearEventGroupWhereUniqueInput;
};

export type ClearEventGroupCreateWithoutEventsInput = {
  contentfulId?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  groupPrice?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  promoCodes?: InputMaybe<ClearPromoCodeCreateNestedManyWithoutEventGroupInput>;
  registrationCutoff: Scalars['ClearDateTime'];
  schedule?: InputMaybe<ClearScheduleItemCreateNestedManyWithoutEventGroupInput>;
  showcaseId?: InputMaybe<Scalars['String']>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  webhooks?: InputMaybe<ClearWebhookCreateNestedManyWithoutEventGroupInput>;
};

export type ClearEventGroupCreateWithoutPromoCodesInput = {
  contentfulId?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  events?: InputMaybe<ClearEventCreateNestedManyWithoutEventGroupInput>;
  groupPrice?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  registrationCutoff: Scalars['ClearDateTime'];
  schedule?: InputMaybe<ClearScheduleItemCreateNestedManyWithoutEventGroupInput>;
  showcaseId?: InputMaybe<Scalars['String']>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  webhooks?: InputMaybe<ClearWebhookCreateNestedManyWithoutEventGroupInput>;
};

export type ClearEventGroupCreateWithoutScheduleInput = {
  contentfulId?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  events?: InputMaybe<ClearEventCreateNestedManyWithoutEventGroupInput>;
  groupPrice?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  promoCodes?: InputMaybe<ClearPromoCodeCreateNestedManyWithoutEventGroupInput>;
  registrationCutoff: Scalars['ClearDateTime'];
  showcaseId?: InputMaybe<Scalars['String']>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  webhooks?: InputMaybe<ClearWebhookCreateNestedManyWithoutEventGroupInput>;
};

export type ClearEventGroupCreateWithoutWebhooksInput = {
  contentfulId?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  events?: InputMaybe<ClearEventCreateNestedManyWithoutEventGroupInput>;
  groupPrice?: InputMaybe<Scalars['Float']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  promoCodes?: InputMaybe<ClearPromoCodeCreateNestedManyWithoutEventGroupInput>;
  registrationCutoff: Scalars['ClearDateTime'];
  schedule?: InputMaybe<ClearScheduleItemCreateNestedManyWithoutEventGroupInput>;
  showcaseId?: InputMaybe<Scalars['String']>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearEventGroupGroupBy = {
  __typename?: 'ClearEventGroupGroupBy';
  _avg?: Maybe<ClearEventGroupAvgAggregate>;
  _count?: Maybe<ClearEventGroupCountAggregate>;
  _max?: Maybe<ClearEventGroupMaxAggregate>;
  _min?: Maybe<ClearEventGroupMinAggregate>;
  _sum?: Maybe<ClearEventGroupSumAggregate>;
  contentfulId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ClearDateTime'];
  earlyBirdCutoff: Scalars['ClearDateTime'];
  earlyBirdPrice: Scalars['Float'];
  endDate: Scalars['ClearDateTime'];
  groupPrice?: Maybe<Scalars['Float']>;
  id: Scalars['String'];
  metadata?: Maybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  registrationCutoff: Scalars['ClearDateTime'];
  showcaseId?: Maybe<Scalars['String']>;
  startDate: Scalars['ClearDateTime'];
  ticketPrice: Scalars['Float'];
  updatedAt: Scalars['ClearDateTime'];
};

export type ClearEventGroupMaxAggregate = {
  __typename?: 'ClearEventGroupMaxAggregate';
  contentfulId?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff?: Maybe<Scalars['ClearDateTime']>;
  earlyBirdPrice?: Maybe<Scalars['Float']>;
  endDate?: Maybe<Scalars['ClearDateTime']>;
  groupPrice?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  registrationCutoff?: Maybe<Scalars['ClearDateTime']>;
  showcaseId?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['ClearDateTime']>;
  ticketPrice?: Maybe<Scalars['Float']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
};

export type ClearEventGroupMaxOrderByAggregateInput = {
  contentfulId?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  earlyBirdCutoff?: InputMaybe<ClearSortOrder>;
  earlyBirdPrice?: InputMaybe<ClearSortOrder>;
  endDate?: InputMaybe<ClearSortOrder>;
  groupPrice?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  registrationCutoff?: InputMaybe<ClearSortOrder>;
  showcaseId?: InputMaybe<ClearSortOrder>;
  startDate?: InputMaybe<ClearSortOrder>;
  ticketPrice?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearEventGroupMinAggregate = {
  __typename?: 'ClearEventGroupMinAggregate';
  contentfulId?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff?: Maybe<Scalars['ClearDateTime']>;
  earlyBirdPrice?: Maybe<Scalars['Float']>;
  endDate?: Maybe<Scalars['ClearDateTime']>;
  groupPrice?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  registrationCutoff?: Maybe<Scalars['ClearDateTime']>;
  showcaseId?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['ClearDateTime']>;
  ticketPrice?: Maybe<Scalars['Float']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
};

export type ClearEventGroupMinOrderByAggregateInput = {
  contentfulId?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  earlyBirdCutoff?: InputMaybe<ClearSortOrder>;
  earlyBirdPrice?: InputMaybe<ClearSortOrder>;
  endDate?: InputMaybe<ClearSortOrder>;
  groupPrice?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  registrationCutoff?: InputMaybe<ClearSortOrder>;
  showcaseId?: InputMaybe<ClearSortOrder>;
  startDate?: InputMaybe<ClearSortOrder>;
  ticketPrice?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearEventGroupOrderByWithAggregationInput = {
  _avg?: InputMaybe<ClearEventGroupAvgOrderByAggregateInput>;
  _count?: InputMaybe<ClearEventGroupCountOrderByAggregateInput>;
  _max?: InputMaybe<ClearEventGroupMaxOrderByAggregateInput>;
  _min?: InputMaybe<ClearEventGroupMinOrderByAggregateInput>;
  _sum?: InputMaybe<ClearEventGroupSumOrderByAggregateInput>;
  contentfulId?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  earlyBirdCutoff?: InputMaybe<ClearSortOrder>;
  earlyBirdPrice?: InputMaybe<ClearSortOrder>;
  endDate?: InputMaybe<ClearSortOrder>;
  groupPrice?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  registrationCutoff?: InputMaybe<ClearSortOrder>;
  showcaseId?: InputMaybe<ClearSortOrder>;
  startDate?: InputMaybe<ClearSortOrder>;
  ticketPrice?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearEventGroupOrderByWithRelationInput = {
  contentfulId?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  earlyBirdCutoff?: InputMaybe<ClearSortOrder>;
  earlyBirdPrice?: InputMaybe<ClearSortOrder>;
  endDate?: InputMaybe<ClearSortOrder>;
  events?: InputMaybe<ClearEventOrderByRelationAggregateInput>;
  groupPrice?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  promoCodes?: InputMaybe<ClearPromoCodeOrderByRelationAggregateInput>;
  registrationCutoff?: InputMaybe<ClearSortOrder>;
  schedule?: InputMaybe<ClearScheduleItemOrderByRelationAggregateInput>;
  showcaseId?: InputMaybe<ClearSortOrder>;
  startDate?: InputMaybe<ClearSortOrder>;
  ticketPrice?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  webhooks?: InputMaybe<ClearWebhookOrderByRelationAggregateInput>;
};

export type ClearEventGroupRelationFilter = {
  is?: InputMaybe<ClearEventGroupWhereInput>;
  isNot?: InputMaybe<ClearEventGroupWhereInput>;
};

export enum ClearEventGroupScalarFieldEnum {
  ContentfulId = 'contentfulId',
  CreatedAt = 'createdAt',
  EarlyBirdCutoff = 'earlyBirdCutoff',
  EarlyBirdPrice = 'earlyBirdPrice',
  EndDate = 'endDate',
  GroupPrice = 'groupPrice',
  Id = 'id',
  Metadata = 'metadata',
  Name = 'name',
  RegistrationCutoff = 'registrationCutoff',
  ShowcaseId = 'showcaseId',
  StartDate = 'startDate',
  TicketPrice = 'ticketPrice',
  UpdatedAt = 'updatedAt'
}

export type ClearEventGroupScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ClearEventGroupScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ClearEventGroupScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ClearEventGroupScalarWhereWithAggregatesInput>>;
  contentfulId?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  createdAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  earlyBirdPrice?: InputMaybe<ClearFloatWithAggregatesFilter>;
  endDate?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  groupPrice?: InputMaybe<ClearFloatNullableWithAggregatesFilter>;
  id?: InputMaybe<ClearStringWithAggregatesFilter>;
  name?: InputMaybe<ClearStringWithAggregatesFilter>;
  registrationCutoff?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  showcaseId?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  startDate?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  ticketPrice?: InputMaybe<ClearFloatWithAggregatesFilter>;
  updatedAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
};

export type ClearEventGroupSumAggregate = {
  __typename?: 'ClearEventGroupSumAggregate';
  earlyBirdPrice?: Maybe<Scalars['Float']>;
  groupPrice?: Maybe<Scalars['Float']>;
  ticketPrice?: Maybe<Scalars['Float']>;
};

export type ClearEventGroupSumOrderByAggregateInput = {
  earlyBirdPrice?: InputMaybe<ClearSortOrder>;
  groupPrice?: InputMaybe<ClearSortOrder>;
  ticketPrice?: InputMaybe<ClearSortOrder>;
};

export type ClearEventGroupUpdateInput = {
  contentfulId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  endDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  events?: InputMaybe<ClearEventUpdateManyWithoutEventGroupInput>;
  groupPrice?: InputMaybe<ClearNullableFloatFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  promoCodes?: InputMaybe<ClearPromoCodeUpdateManyWithoutEventGroupInput>;
  registrationCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  schedule?: InputMaybe<ClearScheduleItemUpdateManyWithoutEventGroupInput>;
  showcaseId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  startDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  ticketPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  webhooks?: InputMaybe<ClearWebhookUpdateManyWithoutEventGroupInput>;
};

export type ClearEventGroupUpdateManyMutationInput = {
  contentfulId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  endDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  groupPrice?: InputMaybe<ClearNullableFloatFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  registrationCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  showcaseId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  startDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  ticketPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
};

export type ClearEventGroupUpdateOneRequiredWithoutEventsInput = {
  connect?: InputMaybe<ClearEventGroupWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearEventGroupCreateOrConnectWithoutEventsInput>;
  create?: InputMaybe<ClearEventGroupCreateWithoutEventsInput>;
  update?: InputMaybe<ClearEventGroupUpdateWithoutEventsInput>;
  upsert?: InputMaybe<ClearEventGroupUpsertWithoutEventsInput>;
};

export type ClearEventGroupUpdateOneWithoutPromoCodesInput = {
  connect?: InputMaybe<ClearEventGroupWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearEventGroupCreateOrConnectWithoutPromoCodesInput>;
  create?: InputMaybe<ClearEventGroupCreateWithoutPromoCodesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<ClearEventGroupUpdateWithoutPromoCodesInput>;
  upsert?: InputMaybe<ClearEventGroupUpsertWithoutPromoCodesInput>;
};

export type ClearEventGroupUpdateOneWithoutScheduleInput = {
  connect?: InputMaybe<ClearEventGroupWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearEventGroupCreateOrConnectWithoutScheduleInput>;
  create?: InputMaybe<ClearEventGroupCreateWithoutScheduleInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<ClearEventGroupUpdateWithoutScheduleInput>;
  upsert?: InputMaybe<ClearEventGroupUpsertWithoutScheduleInput>;
};

export type ClearEventGroupUpdateOneWithoutWebhooksInput = {
  connect?: InputMaybe<ClearEventGroupWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearEventGroupCreateOrConnectWithoutWebhooksInput>;
  create?: InputMaybe<ClearEventGroupCreateWithoutWebhooksInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<ClearEventGroupUpdateWithoutWebhooksInput>;
  upsert?: InputMaybe<ClearEventGroupUpsertWithoutWebhooksInput>;
};

export type ClearEventGroupUpdateWithoutEventsInput = {
  contentfulId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  endDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  groupPrice?: InputMaybe<ClearNullableFloatFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  promoCodes?: InputMaybe<ClearPromoCodeUpdateManyWithoutEventGroupInput>;
  registrationCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  schedule?: InputMaybe<ClearScheduleItemUpdateManyWithoutEventGroupInput>;
  showcaseId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  startDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  ticketPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  webhooks?: InputMaybe<ClearWebhookUpdateManyWithoutEventGroupInput>;
};

export type ClearEventGroupUpdateWithoutPromoCodesInput = {
  contentfulId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  endDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  events?: InputMaybe<ClearEventUpdateManyWithoutEventGroupInput>;
  groupPrice?: InputMaybe<ClearNullableFloatFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  registrationCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  schedule?: InputMaybe<ClearScheduleItemUpdateManyWithoutEventGroupInput>;
  showcaseId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  startDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  ticketPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  webhooks?: InputMaybe<ClearWebhookUpdateManyWithoutEventGroupInput>;
};

export type ClearEventGroupUpdateWithoutScheduleInput = {
  contentfulId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  endDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  events?: InputMaybe<ClearEventUpdateManyWithoutEventGroupInput>;
  groupPrice?: InputMaybe<ClearNullableFloatFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  promoCodes?: InputMaybe<ClearPromoCodeUpdateManyWithoutEventGroupInput>;
  registrationCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  showcaseId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  startDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  ticketPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  webhooks?: InputMaybe<ClearWebhookUpdateManyWithoutEventGroupInput>;
};

export type ClearEventGroupUpdateWithoutWebhooksInput = {
  contentfulId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  endDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  events?: InputMaybe<ClearEventUpdateManyWithoutEventGroupInput>;
  groupPrice?: InputMaybe<ClearNullableFloatFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  promoCodes?: InputMaybe<ClearPromoCodeUpdateManyWithoutEventGroupInput>;
  registrationCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  schedule?: InputMaybe<ClearScheduleItemUpdateManyWithoutEventGroupInput>;
  showcaseId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  startDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  ticketPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
};

export type ClearEventGroupUpsertWithoutEventsInput = {
  create: ClearEventGroupCreateWithoutEventsInput;
  update: ClearEventGroupUpdateWithoutEventsInput;
};

export type ClearEventGroupUpsertWithoutPromoCodesInput = {
  create: ClearEventGroupCreateWithoutPromoCodesInput;
  update: ClearEventGroupUpdateWithoutPromoCodesInput;
};

export type ClearEventGroupUpsertWithoutScheduleInput = {
  create: ClearEventGroupCreateWithoutScheduleInput;
  update: ClearEventGroupUpdateWithoutScheduleInput;
};

export type ClearEventGroupUpsertWithoutWebhooksInput = {
  create: ClearEventGroupCreateWithoutWebhooksInput;
  update: ClearEventGroupUpdateWithoutWebhooksInput;
};

export type ClearEventGroupWhereInput = {
  AND?: InputMaybe<Array<ClearEventGroupWhereInput>>;
  NOT?: InputMaybe<Array<ClearEventGroupWhereInput>>;
  OR?: InputMaybe<Array<ClearEventGroupWhereInput>>;
  contentfulId?: InputMaybe<ClearStringNullableFilter>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFilter>;
  earlyBirdPrice?: InputMaybe<ClearFloatFilter>;
  endDate?: InputMaybe<ClearDateTimeFilter>;
  events?: InputMaybe<ClearEventListRelationFilter>;
  groupPrice?: InputMaybe<ClearFloatNullableFilter>;
  id?: InputMaybe<ClearStringFilter>;
  name?: InputMaybe<ClearStringFilter>;
  promoCodes?: InputMaybe<ClearPromoCodeListRelationFilter>;
  registrationCutoff?: InputMaybe<ClearDateTimeFilter>;
  schedule?: InputMaybe<ClearScheduleItemListRelationFilter>;
  showcaseId?: InputMaybe<ClearStringNullableFilter>;
  startDate?: InputMaybe<ClearDateTimeFilter>;
  ticketPrice?: InputMaybe<ClearFloatFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
  webhooks?: InputMaybe<ClearWebhookListRelationFilter>;
};

export type ClearEventGroupWhereUniqueInput = {
  id?: InputMaybe<Scalars['String']>;
};

export type ClearEventListRelationFilter = {
  every?: InputMaybe<ClearEventWhereInput>;
  none?: InputMaybe<ClearEventWhereInput>;
  some?: InputMaybe<ClearEventWhereInput>;
};

export type ClearEventMaxAggregate = {
  __typename?: 'ClearEventMaxAggregate';
  adultWaiverId?: Maybe<Scalars['String']>;
  contentfulWebname?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff?: Maybe<Scalars['ClearDateTime']>;
  earlyBirdPrice?: Maybe<Scalars['Float']>;
  endDate?: Maybe<Scalars['ClearDateTime']>;
  eventGroupId?: Maybe<Scalars['String']>;
  groupPrice?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['String']>;
  majorityAge?: Maybe<Scalars['Int']>;
  maxAge?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  minorWaiverId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  overnightMinAge?: Maybe<Scalars['Int']>;
  registrationCutoff?: Maybe<Scalars['ClearDateTime']>;
  registrationsOpen?: Maybe<Scalars['Boolean']>;
  requiresPromoCode?: Maybe<Scalars['Boolean']>;
  showcaseId?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['ClearDateTime']>;
  ticketPrice?: Maybe<Scalars['Float']>;
  timezone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
  venueId?: Maybe<Scalars['String']>;
};

export type ClearEventMaxOrderByAggregateInput = {
  adultWaiverId?: InputMaybe<ClearSortOrder>;
  contentfulWebname?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  earlyBirdCutoff?: InputMaybe<ClearSortOrder>;
  earlyBirdPrice?: InputMaybe<ClearSortOrder>;
  endDate?: InputMaybe<ClearSortOrder>;
  eventGroupId?: InputMaybe<ClearSortOrder>;
  groupPrice?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  majorityAge?: InputMaybe<ClearSortOrder>;
  maxAge?: InputMaybe<ClearSortOrder>;
  minAge?: InputMaybe<ClearSortOrder>;
  minorWaiverId?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  overnightMinAge?: InputMaybe<ClearSortOrder>;
  registrationCutoff?: InputMaybe<ClearSortOrder>;
  registrationsOpen?: InputMaybe<ClearSortOrder>;
  requiresPromoCode?: InputMaybe<ClearSortOrder>;
  showcaseId?: InputMaybe<ClearSortOrder>;
  startDate?: InputMaybe<ClearSortOrder>;
  ticketPrice?: InputMaybe<ClearSortOrder>;
  timezone?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  venueId?: InputMaybe<ClearSortOrder>;
};

export type ClearEventMinAggregate = {
  __typename?: 'ClearEventMinAggregate';
  adultWaiverId?: Maybe<Scalars['String']>;
  contentfulWebname?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  earlyBirdCutoff?: Maybe<Scalars['ClearDateTime']>;
  earlyBirdPrice?: Maybe<Scalars['Float']>;
  endDate?: Maybe<Scalars['ClearDateTime']>;
  eventGroupId?: Maybe<Scalars['String']>;
  groupPrice?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['String']>;
  majorityAge?: Maybe<Scalars['Int']>;
  maxAge?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  minorWaiverId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  overnightMinAge?: Maybe<Scalars['Int']>;
  registrationCutoff?: Maybe<Scalars['ClearDateTime']>;
  registrationsOpen?: Maybe<Scalars['Boolean']>;
  requiresPromoCode?: Maybe<Scalars['Boolean']>;
  showcaseId?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['ClearDateTime']>;
  ticketPrice?: Maybe<Scalars['Float']>;
  timezone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
  venueId?: Maybe<Scalars['String']>;
};

export type ClearEventMinOrderByAggregateInput = {
  adultWaiverId?: InputMaybe<ClearSortOrder>;
  contentfulWebname?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  earlyBirdCutoff?: InputMaybe<ClearSortOrder>;
  earlyBirdPrice?: InputMaybe<ClearSortOrder>;
  endDate?: InputMaybe<ClearSortOrder>;
  eventGroupId?: InputMaybe<ClearSortOrder>;
  groupPrice?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  majorityAge?: InputMaybe<ClearSortOrder>;
  maxAge?: InputMaybe<ClearSortOrder>;
  minAge?: InputMaybe<ClearSortOrder>;
  minorWaiverId?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  overnightMinAge?: InputMaybe<ClearSortOrder>;
  registrationCutoff?: InputMaybe<ClearSortOrder>;
  registrationsOpen?: InputMaybe<ClearSortOrder>;
  requiresPromoCode?: InputMaybe<ClearSortOrder>;
  showcaseId?: InputMaybe<ClearSortOrder>;
  startDate?: InputMaybe<ClearSortOrder>;
  ticketPrice?: InputMaybe<ClearSortOrder>;
  timezone?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  venueId?: InputMaybe<ClearSortOrder>;
};

export type ClearEventOrderByRelationAggregateInput = {
  _count?: InputMaybe<ClearSortOrder>;
};

export type ClearEventOrderByWithAggregationInput = {
  _avg?: InputMaybe<ClearEventAvgOrderByAggregateInput>;
  _count?: InputMaybe<ClearEventCountOrderByAggregateInput>;
  _max?: InputMaybe<ClearEventMaxOrderByAggregateInput>;
  _min?: InputMaybe<ClearEventMinOrderByAggregateInput>;
  _sum?: InputMaybe<ClearEventSumOrderByAggregateInput>;
  adultWaiverId?: InputMaybe<ClearSortOrder>;
  contentfulEventRestrictions?: InputMaybe<ClearSortOrder>;
  contentfulWebname?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  earlyBirdCutoff?: InputMaybe<ClearSortOrder>;
  earlyBirdPrice?: InputMaybe<ClearSortOrder>;
  endDate?: InputMaybe<ClearSortOrder>;
  eventGroupId?: InputMaybe<ClearSortOrder>;
  groupPrice?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  majorityAge?: InputMaybe<ClearSortOrder>;
  managers?: InputMaybe<ClearSortOrder>;
  maxAge?: InputMaybe<ClearSortOrder>;
  minAge?: InputMaybe<ClearSortOrder>;
  minorWaiverId?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  overnightMinAge?: InputMaybe<ClearSortOrder>;
  registrationCutoff?: InputMaybe<ClearSortOrder>;
  registrationsOpen?: InputMaybe<ClearSortOrder>;
  requiresPromoCode?: InputMaybe<ClearSortOrder>;
  showcaseId?: InputMaybe<ClearSortOrder>;
  startDate?: InputMaybe<ClearSortOrder>;
  ticketPrice?: InputMaybe<ClearSortOrder>;
  timezone?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  venueId?: InputMaybe<ClearSortOrder>;
};

export type ClearEventOrderByWithRelationInput = {
  adultWaiverId?: InputMaybe<ClearSortOrder>;
  contentfulEventRestrictions?: InputMaybe<ClearSortOrder>;
  contentfulWebname?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  earlyBirdCutoff?: InputMaybe<ClearSortOrder>;
  earlyBirdPrice?: InputMaybe<ClearSortOrder>;
  endDate?: InputMaybe<ClearSortOrder>;
  eventGroup?: InputMaybe<ClearEventGroupOrderByWithRelationInput>;
  eventGroupId?: InputMaybe<ClearSortOrder>;
  eventRestrictions?: InputMaybe<ClearEventRestrictionOrderByRelationAggregateInput>;
  groupPrice?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  interestedEmails?: InputMaybe<ClearMailingListMemberOrderByRelationAggregateInput>;
  majorityAge?: InputMaybe<ClearSortOrder>;
  managers?: InputMaybe<ClearSortOrder>;
  maxAge?: InputMaybe<ClearSortOrder>;
  minAge?: InputMaybe<ClearSortOrder>;
  minorWaiverId?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  overnightMinAge?: InputMaybe<ClearSortOrder>;
  promoCodes?: InputMaybe<ClearPromoCodeOrderByRelationAggregateInput>;
  registrationCutoff?: InputMaybe<ClearSortOrder>;
  registrationsOpen?: InputMaybe<ClearSortOrder>;
  requiresPromoCode?: InputMaybe<ClearSortOrder>;
  schedule?: InputMaybe<ClearScheduleItemOrderByRelationAggregateInput>;
  showcaseId?: InputMaybe<ClearSortOrder>;
  sponsors?: InputMaybe<ClearSponsorOrderByRelationAggregateInput>;
  startDate?: InputMaybe<ClearSortOrder>;
  ticketPrice?: InputMaybe<ClearSortOrder>;
  tickets?: InputMaybe<ClearTicketOrderByRelationAggregateInput>;
  timezone?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  venue?: InputMaybe<ClearVenueOrderByWithRelationInput>;
  venueId?: InputMaybe<ClearSortOrder>;
  webhooks?: InputMaybe<ClearWebhookOrderByRelationAggregateInput>;
};

export type ClearEventRelationFilter = {
  is?: InputMaybe<ClearEventWhereInput>;
  isNot?: InputMaybe<ClearEventWhereInput>;
};

export type ClearEventRestriction = {
  __typename?: 'ClearEventRestriction';
  Events: Array<ClearEvent>;
  _count?: Maybe<ClearEventRestrictionCount>;
  createdAt: Scalars['ClearDateTime'];
  details?: Maybe<Scalars['String']>;
  getMetadata?: Maybe<Scalars['String']>;
  iconUri?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  metadata?: Maybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  title: Scalars['String'];
  updatedAt: Scalars['ClearDateTime'];
};


export type ClearEventRestrictionEventsArgs = {
  cursor?: InputMaybe<ClearEventWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearEventScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearEventOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEventWhereInput>;
};


export type ClearEventRestrictionGetMetadataArgs = {
  key: Scalars['String'];
};

export type ClearEventRestrictionCount = {
  __typename?: 'ClearEventRestrictionCount';
  Events: Scalars['Int'];
};

export type ClearEventRestrictionCountAggregate = {
  __typename?: 'ClearEventRestrictionCountAggregate';
  _all: Scalars['Int'];
  createdAt: Scalars['Int'];
  details: Scalars['Int'];
  iconUri: Scalars['Int'];
  id: Scalars['Int'];
  metadata: Scalars['Int'];
  name: Scalars['Int'];
  title: Scalars['Int'];
  updatedAt: Scalars['Int'];
};

export type ClearEventRestrictionCountOrderByAggregateInput = {
  createdAt?: InputMaybe<ClearSortOrder>;
  details?: InputMaybe<ClearSortOrder>;
  iconUri?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  title?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearEventRestrictionCreateInput = {
  Events?: InputMaybe<ClearEventCreateNestedManyWithoutEventRestrictionsInput>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  details?: InputMaybe<Scalars['String']>;
  iconUri?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearEventRestrictionCreateManyInput = {
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  details?: InputMaybe<Scalars['String']>;
  iconUri?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearEventRestrictionCreateNestedManyWithoutEventsInput = {
  connect?: InputMaybe<Array<ClearEventRestrictionWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearEventRestrictionCreateOrConnectWithoutEventsInput>>;
  create?: InputMaybe<Array<ClearEventRestrictionCreateWithoutEventsInput>>;
};

export type ClearEventRestrictionCreateOrConnectWithoutEventsInput = {
  create: ClearEventRestrictionCreateWithoutEventsInput;
  where: ClearEventRestrictionWhereUniqueInput;
};

export type ClearEventRestrictionCreateWithoutEventsInput = {
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  details?: InputMaybe<Scalars['String']>;
  iconUri?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearEventRestrictionGroupBy = {
  __typename?: 'ClearEventRestrictionGroupBy';
  _count?: Maybe<ClearEventRestrictionCountAggregate>;
  _max?: Maybe<ClearEventRestrictionMaxAggregate>;
  _min?: Maybe<ClearEventRestrictionMinAggregate>;
  createdAt: Scalars['ClearDateTime'];
  details?: Maybe<Scalars['String']>;
  iconUri?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  metadata?: Maybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  title: Scalars['String'];
  updatedAt: Scalars['ClearDateTime'];
};

export type ClearEventRestrictionListRelationFilter = {
  every?: InputMaybe<ClearEventRestrictionWhereInput>;
  none?: InputMaybe<ClearEventRestrictionWhereInput>;
  some?: InputMaybe<ClearEventRestrictionWhereInput>;
};

export type ClearEventRestrictionMaxAggregate = {
  __typename?: 'ClearEventRestrictionMaxAggregate';
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  details?: Maybe<Scalars['String']>;
  iconUri?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
};

export type ClearEventRestrictionMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<ClearSortOrder>;
  details?: InputMaybe<ClearSortOrder>;
  iconUri?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  title?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearEventRestrictionMinAggregate = {
  __typename?: 'ClearEventRestrictionMinAggregate';
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  details?: Maybe<Scalars['String']>;
  iconUri?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
};

export type ClearEventRestrictionMinOrderByAggregateInput = {
  createdAt?: InputMaybe<ClearSortOrder>;
  details?: InputMaybe<ClearSortOrder>;
  iconUri?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  title?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearEventRestrictionOrderByRelationAggregateInput = {
  _count?: InputMaybe<ClearSortOrder>;
};

export type ClearEventRestrictionOrderByWithAggregationInput = {
  _count?: InputMaybe<ClearEventRestrictionCountOrderByAggregateInput>;
  _max?: InputMaybe<ClearEventRestrictionMaxOrderByAggregateInput>;
  _min?: InputMaybe<ClearEventRestrictionMinOrderByAggregateInput>;
  createdAt?: InputMaybe<ClearSortOrder>;
  details?: InputMaybe<ClearSortOrder>;
  iconUri?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  title?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearEventRestrictionOrderByWithRelationInput = {
  Events?: InputMaybe<ClearEventOrderByRelationAggregateInput>;
  createdAt?: InputMaybe<ClearSortOrder>;
  details?: InputMaybe<ClearSortOrder>;
  iconUri?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  title?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export enum ClearEventRestrictionScalarFieldEnum {
  CreatedAt = 'createdAt',
  Details = 'details',
  IconUri = 'iconUri',
  Id = 'id',
  Metadata = 'metadata',
  Name = 'name',
  Title = 'title',
  UpdatedAt = 'updatedAt'
}

export type ClearEventRestrictionScalarWhereInput = {
  AND?: InputMaybe<Array<ClearEventRestrictionScalarWhereInput>>;
  NOT?: InputMaybe<Array<ClearEventRestrictionScalarWhereInput>>;
  OR?: InputMaybe<Array<ClearEventRestrictionScalarWhereInput>>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  details?: InputMaybe<ClearStringNullableFilter>;
  iconUri?: InputMaybe<ClearStringNullableFilter>;
  id?: InputMaybe<ClearStringFilter>;
  name?: InputMaybe<ClearStringFilter>;
  title?: InputMaybe<ClearStringFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
};

export type ClearEventRestrictionScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ClearEventRestrictionScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ClearEventRestrictionScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ClearEventRestrictionScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  details?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  iconUri?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  id?: InputMaybe<ClearStringWithAggregatesFilter>;
  name?: InputMaybe<ClearStringWithAggregatesFilter>;
  title?: InputMaybe<ClearStringWithAggregatesFilter>;
  updatedAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
};

export type ClearEventRestrictionUpdateInput = {
  Events?: InputMaybe<ClearEventUpdateManyWithoutEventRestrictionsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  details?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  iconUri?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  title?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
};

export type ClearEventRestrictionUpdateManyMutationInput = {
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  details?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  iconUri?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  title?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
};

export type ClearEventRestrictionUpdateManyWithWhereWithoutEventsInput = {
  data: ClearEventRestrictionUpdateManyMutationInput;
  where: ClearEventRestrictionScalarWhereInput;
};

export type ClearEventRestrictionUpdateManyWithoutEventsInput = {
  connect?: InputMaybe<Array<ClearEventRestrictionWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearEventRestrictionCreateOrConnectWithoutEventsInput>>;
  create?: InputMaybe<Array<ClearEventRestrictionCreateWithoutEventsInput>>;
  delete?: InputMaybe<Array<ClearEventRestrictionWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClearEventRestrictionScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClearEventRestrictionWhereUniqueInput>>;
  set?: InputMaybe<Array<ClearEventRestrictionWhereUniqueInput>>;
  update?: InputMaybe<Array<ClearEventRestrictionUpdateWithWhereUniqueWithoutEventsInput>>;
  updateMany?: InputMaybe<Array<ClearEventRestrictionUpdateManyWithWhereWithoutEventsInput>>;
  upsert?: InputMaybe<Array<ClearEventRestrictionUpsertWithWhereUniqueWithoutEventsInput>>;
};

export type ClearEventRestrictionUpdateWithWhereUniqueWithoutEventsInput = {
  data: ClearEventRestrictionUpdateWithoutEventsInput;
  where: ClearEventRestrictionWhereUniqueInput;
};

export type ClearEventRestrictionUpdateWithoutEventsInput = {
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  details?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  iconUri?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  title?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
};

export type ClearEventRestrictionUpsertWithWhereUniqueWithoutEventsInput = {
  create: ClearEventRestrictionCreateWithoutEventsInput;
  update: ClearEventRestrictionUpdateWithoutEventsInput;
  where: ClearEventRestrictionWhereUniqueInput;
};

export type ClearEventRestrictionWhereInput = {
  AND?: InputMaybe<Array<ClearEventRestrictionWhereInput>>;
  Events?: InputMaybe<ClearEventListRelationFilter>;
  NOT?: InputMaybe<Array<ClearEventRestrictionWhereInput>>;
  OR?: InputMaybe<Array<ClearEventRestrictionWhereInput>>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  details?: InputMaybe<ClearStringNullableFilter>;
  iconUri?: InputMaybe<ClearStringNullableFilter>;
  id?: InputMaybe<ClearStringFilter>;
  name?: InputMaybe<ClearStringFilter>;
  title?: InputMaybe<ClearStringFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
};

export type ClearEventRestrictionWhereUniqueInput = {
  id?: InputMaybe<Scalars['String']>;
};

export enum ClearEventScalarFieldEnum {
  AdultWaiverId = 'adultWaiverId',
  ContentfulEventRestrictions = 'contentfulEventRestrictions',
  ContentfulWebname = 'contentfulWebname',
  CreatedAt = 'createdAt',
  EarlyBirdCutoff = 'earlyBirdCutoff',
  EarlyBirdPrice = 'earlyBirdPrice',
  EndDate = 'endDate',
  EventGroupId = 'eventGroupId',
  GroupPrice = 'groupPrice',
  Id = 'id',
  MajorityAge = 'majorityAge',
  Managers = 'managers',
  MaxAge = 'maxAge',
  Metadata = 'metadata',
  MinAge = 'minAge',
  MinorWaiverId = 'minorWaiverId',
  Name = 'name',
  OvernightMinAge = 'overnightMinAge',
  RegistrationCutoff = 'registrationCutoff',
  RegistrationsOpen = 'registrationsOpen',
  RequiresPromoCode = 'requiresPromoCode',
  ShowcaseId = 'showcaseId',
  StartDate = 'startDate',
  TicketPrice = 'ticketPrice',
  Timezone = 'timezone',
  UpdatedAt = 'updatedAt',
  VenueId = 'venueId'
}

export type ClearEventScalarWhereInput = {
  AND?: InputMaybe<Array<ClearEventScalarWhereInput>>;
  NOT?: InputMaybe<Array<ClearEventScalarWhereInput>>;
  OR?: InputMaybe<Array<ClearEventScalarWhereInput>>;
  adultWaiverId?: InputMaybe<ClearStringNullableFilter>;
  contentfulEventRestrictions?: InputMaybe<ClearStringNullableListFilter>;
  contentfulWebname?: InputMaybe<ClearStringNullableFilter>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFilter>;
  earlyBirdPrice?: InputMaybe<ClearFloatFilter>;
  endDate?: InputMaybe<ClearDateTimeFilter>;
  eventGroupId?: InputMaybe<ClearStringFilter>;
  groupPrice?: InputMaybe<ClearFloatNullableFilter>;
  id?: InputMaybe<ClearStringFilter>;
  majorityAge?: InputMaybe<ClearIntFilter>;
  managers?: InputMaybe<ClearStringNullableListFilter>;
  maxAge?: InputMaybe<ClearIntNullableFilter>;
  minAge?: InputMaybe<ClearIntNullableFilter>;
  minorWaiverId?: InputMaybe<ClearStringNullableFilter>;
  name?: InputMaybe<ClearStringFilter>;
  overnightMinAge?: InputMaybe<ClearIntNullableFilter>;
  registrationCutoff?: InputMaybe<ClearDateTimeFilter>;
  registrationsOpen?: InputMaybe<ClearBoolFilter>;
  requiresPromoCode?: InputMaybe<ClearBoolFilter>;
  showcaseId?: InputMaybe<ClearStringNullableFilter>;
  startDate?: InputMaybe<ClearDateTimeFilter>;
  ticketPrice?: InputMaybe<ClearFloatFilter>;
  timezone?: InputMaybe<ClearStringNullableFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
  venueId?: InputMaybe<ClearStringNullableFilter>;
};

export type ClearEventScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ClearEventScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ClearEventScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ClearEventScalarWhereWithAggregatesInput>>;
  adultWaiverId?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  contentfulEventRestrictions?: InputMaybe<ClearStringNullableListFilter>;
  contentfulWebname?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  createdAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  earlyBirdPrice?: InputMaybe<ClearFloatWithAggregatesFilter>;
  endDate?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  eventGroupId?: InputMaybe<ClearStringWithAggregatesFilter>;
  groupPrice?: InputMaybe<ClearFloatNullableWithAggregatesFilter>;
  id?: InputMaybe<ClearStringWithAggregatesFilter>;
  majorityAge?: InputMaybe<ClearIntWithAggregatesFilter>;
  managers?: InputMaybe<ClearStringNullableListFilter>;
  maxAge?: InputMaybe<ClearIntNullableWithAggregatesFilter>;
  minAge?: InputMaybe<ClearIntNullableWithAggregatesFilter>;
  minorWaiverId?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  name?: InputMaybe<ClearStringWithAggregatesFilter>;
  overnightMinAge?: InputMaybe<ClearIntNullableWithAggregatesFilter>;
  registrationCutoff?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  registrationsOpen?: InputMaybe<ClearBoolWithAggregatesFilter>;
  requiresPromoCode?: InputMaybe<ClearBoolWithAggregatesFilter>;
  showcaseId?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  startDate?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  ticketPrice?: InputMaybe<ClearFloatWithAggregatesFilter>;
  timezone?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  updatedAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  venueId?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
};

export type ClearEventSumAggregate = {
  __typename?: 'ClearEventSumAggregate';
  earlyBirdPrice?: Maybe<Scalars['Float']>;
  groupPrice?: Maybe<Scalars['Float']>;
  majorityAge?: Maybe<Scalars['Int']>;
  maxAge?: Maybe<Scalars['Int']>;
  minAge?: Maybe<Scalars['Int']>;
  overnightMinAge?: Maybe<Scalars['Int']>;
  ticketPrice?: Maybe<Scalars['Float']>;
};

export type ClearEventSumOrderByAggregateInput = {
  earlyBirdPrice?: InputMaybe<ClearSortOrder>;
  groupPrice?: InputMaybe<ClearSortOrder>;
  majorityAge?: InputMaybe<ClearSortOrder>;
  maxAge?: InputMaybe<ClearSortOrder>;
  minAge?: InputMaybe<ClearSortOrder>;
  overnightMinAge?: InputMaybe<ClearSortOrder>;
  ticketPrice?: InputMaybe<ClearSortOrder>;
};

export type ClearEventUpdateInput = {
  adultWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contentfulEventRestrictions?: InputMaybe<ClearEventUpdatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  endDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  eventGroup?: InputMaybe<ClearEventGroupUpdateOneRequiredWithoutEventsInput>;
  eventRestrictions?: InputMaybe<ClearEventRestrictionUpdateManyWithoutEventsInput>;
  groupPrice?: InputMaybe<ClearNullableFloatFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  interestedEmails?: InputMaybe<ClearMailingListMemberUpdateManyWithoutInterestedInEventsInput>;
  majorityAge?: InputMaybe<ClearIntFieldUpdateOperationsInput>;
  managers?: InputMaybe<ClearEventUpdatemanagersInput>;
  maxAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minorWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  overnightMinAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  promoCodes?: InputMaybe<ClearPromoCodeUpdateManyWithoutEventInput>;
  registrationCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  registrationsOpen?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  requiresPromoCode?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  schedule?: InputMaybe<ClearScheduleItemUpdateManyWithoutEventInput>;
  showcaseId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  sponsors?: InputMaybe<ClearSponsorUpdateManyWithoutEventInput>;
  startDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  ticketPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  tickets?: InputMaybe<ClearTicketUpdateManyWithoutEventInput>;
  timezone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  venue?: InputMaybe<ClearVenueUpdateOneWithoutEventsInput>;
  webhooks?: InputMaybe<ClearWebhookUpdateManyWithoutEventInput>;
};

export type ClearEventUpdateManyMutationInput = {
  adultWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contentfulEventRestrictions?: InputMaybe<ClearEventUpdatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  endDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  groupPrice?: InputMaybe<ClearNullableFloatFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  majorityAge?: InputMaybe<ClearIntFieldUpdateOperationsInput>;
  managers?: InputMaybe<ClearEventUpdatemanagersInput>;
  maxAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minorWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  overnightMinAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  registrationCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  registrationsOpen?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  requiresPromoCode?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  showcaseId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  startDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  ticketPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  timezone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
};

export type ClearEventUpdateManyWithWhereWithoutEventGroupInput = {
  data: ClearEventUpdateManyMutationInput;
  where: ClearEventScalarWhereInput;
};

export type ClearEventUpdateManyWithWhereWithoutEventRestrictionsInput = {
  data: ClearEventUpdateManyMutationInput;
  where: ClearEventScalarWhereInput;
};

export type ClearEventUpdateManyWithWhereWithoutInterestedEmailsInput = {
  data: ClearEventUpdateManyMutationInput;
  where: ClearEventScalarWhereInput;
};

export type ClearEventUpdateManyWithWhereWithoutVenueInput = {
  data: ClearEventUpdateManyMutationInput;
  where: ClearEventScalarWhereInput;
};

export type ClearEventUpdateManyWithoutEventGroupInput = {
  connect?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearEventCreateOrConnectWithoutEventGroupInput>>;
  create?: InputMaybe<Array<ClearEventCreateWithoutEventGroupInput>>;
  createMany?: InputMaybe<ClearEventCreateManyEventGroupInputEnvelope>;
  delete?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClearEventScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  set?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  update?: InputMaybe<Array<ClearEventUpdateWithWhereUniqueWithoutEventGroupInput>>;
  updateMany?: InputMaybe<Array<ClearEventUpdateManyWithWhereWithoutEventGroupInput>>;
  upsert?: InputMaybe<Array<ClearEventUpsertWithWhereUniqueWithoutEventGroupInput>>;
};

export type ClearEventUpdateManyWithoutEventRestrictionsInput = {
  connect?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearEventCreateOrConnectWithoutEventRestrictionsInput>>;
  create?: InputMaybe<Array<ClearEventCreateWithoutEventRestrictionsInput>>;
  delete?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClearEventScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  set?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  update?: InputMaybe<Array<ClearEventUpdateWithWhereUniqueWithoutEventRestrictionsInput>>;
  updateMany?: InputMaybe<Array<ClearEventUpdateManyWithWhereWithoutEventRestrictionsInput>>;
  upsert?: InputMaybe<Array<ClearEventUpsertWithWhereUniqueWithoutEventRestrictionsInput>>;
};

export type ClearEventUpdateManyWithoutInterestedEmailsInput = {
  connect?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearEventCreateOrConnectWithoutInterestedEmailsInput>>;
  create?: InputMaybe<Array<ClearEventCreateWithoutInterestedEmailsInput>>;
  delete?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClearEventScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  set?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  update?: InputMaybe<Array<ClearEventUpdateWithWhereUniqueWithoutInterestedEmailsInput>>;
  updateMany?: InputMaybe<Array<ClearEventUpdateManyWithWhereWithoutInterestedEmailsInput>>;
  upsert?: InputMaybe<Array<ClearEventUpsertWithWhereUniqueWithoutInterestedEmailsInput>>;
};

export type ClearEventUpdateManyWithoutVenueInput = {
  connect?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearEventCreateOrConnectWithoutVenueInput>>;
  create?: InputMaybe<Array<ClearEventCreateWithoutVenueInput>>;
  createMany?: InputMaybe<ClearEventCreateManyVenueInputEnvelope>;
  delete?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClearEventScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  set?: InputMaybe<Array<ClearEventWhereUniqueInput>>;
  update?: InputMaybe<Array<ClearEventUpdateWithWhereUniqueWithoutVenueInput>>;
  updateMany?: InputMaybe<Array<ClearEventUpdateManyWithWhereWithoutVenueInput>>;
  upsert?: InputMaybe<Array<ClearEventUpsertWithWhereUniqueWithoutVenueInput>>;
};

export type ClearEventUpdateOneRequiredWithoutTicketsInput = {
  connect?: InputMaybe<ClearEventWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearEventCreateOrConnectWithoutTicketsInput>;
  create?: InputMaybe<ClearEventCreateWithoutTicketsInput>;
  update?: InputMaybe<ClearEventUpdateWithoutTicketsInput>;
  upsert?: InputMaybe<ClearEventUpsertWithoutTicketsInput>;
};

export type ClearEventUpdateOneWithoutPromoCodesInput = {
  connect?: InputMaybe<ClearEventWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearEventCreateOrConnectWithoutPromoCodesInput>;
  create?: InputMaybe<ClearEventCreateWithoutPromoCodesInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<ClearEventUpdateWithoutPromoCodesInput>;
  upsert?: InputMaybe<ClearEventUpsertWithoutPromoCodesInput>;
};

export type ClearEventUpdateOneWithoutScheduleInput = {
  connect?: InputMaybe<ClearEventWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearEventCreateOrConnectWithoutScheduleInput>;
  create?: InputMaybe<ClearEventCreateWithoutScheduleInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<ClearEventUpdateWithoutScheduleInput>;
  upsert?: InputMaybe<ClearEventUpsertWithoutScheduleInput>;
};

export type ClearEventUpdateOneWithoutSponsorsInput = {
  connect?: InputMaybe<ClearEventWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearEventCreateOrConnectWithoutSponsorsInput>;
  create?: InputMaybe<ClearEventCreateWithoutSponsorsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<ClearEventUpdateWithoutSponsorsInput>;
  upsert?: InputMaybe<ClearEventUpsertWithoutSponsorsInput>;
};

export type ClearEventUpdateOneWithoutWebhooksInput = {
  connect?: InputMaybe<ClearEventWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearEventCreateOrConnectWithoutWebhooksInput>;
  create?: InputMaybe<ClearEventCreateWithoutWebhooksInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<ClearEventUpdateWithoutWebhooksInput>;
  upsert?: InputMaybe<ClearEventUpsertWithoutWebhooksInput>;
};

export type ClearEventUpdateWithWhereUniqueWithoutEventGroupInput = {
  data: ClearEventUpdateWithoutEventGroupInput;
  where: ClearEventWhereUniqueInput;
};

export type ClearEventUpdateWithWhereUniqueWithoutEventRestrictionsInput = {
  data: ClearEventUpdateWithoutEventRestrictionsInput;
  where: ClearEventWhereUniqueInput;
};

export type ClearEventUpdateWithWhereUniqueWithoutInterestedEmailsInput = {
  data: ClearEventUpdateWithoutInterestedEmailsInput;
  where: ClearEventWhereUniqueInput;
};

export type ClearEventUpdateWithWhereUniqueWithoutVenueInput = {
  data: ClearEventUpdateWithoutVenueInput;
  where: ClearEventWhereUniqueInput;
};

export type ClearEventUpdateWithoutEventGroupInput = {
  adultWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contentfulEventRestrictions?: InputMaybe<ClearEventUpdatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  endDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  eventRestrictions?: InputMaybe<ClearEventRestrictionUpdateManyWithoutEventsInput>;
  groupPrice?: InputMaybe<ClearNullableFloatFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  interestedEmails?: InputMaybe<ClearMailingListMemberUpdateManyWithoutInterestedInEventsInput>;
  majorityAge?: InputMaybe<ClearIntFieldUpdateOperationsInput>;
  managers?: InputMaybe<ClearEventUpdatemanagersInput>;
  maxAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minorWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  overnightMinAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  promoCodes?: InputMaybe<ClearPromoCodeUpdateManyWithoutEventInput>;
  registrationCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  registrationsOpen?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  requiresPromoCode?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  schedule?: InputMaybe<ClearScheduleItemUpdateManyWithoutEventInput>;
  showcaseId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  sponsors?: InputMaybe<ClearSponsorUpdateManyWithoutEventInput>;
  startDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  ticketPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  tickets?: InputMaybe<ClearTicketUpdateManyWithoutEventInput>;
  timezone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  venue?: InputMaybe<ClearVenueUpdateOneWithoutEventsInput>;
  webhooks?: InputMaybe<ClearWebhookUpdateManyWithoutEventInput>;
};

export type ClearEventUpdateWithoutEventRestrictionsInput = {
  adultWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contentfulEventRestrictions?: InputMaybe<ClearEventUpdatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  endDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  eventGroup?: InputMaybe<ClearEventGroupUpdateOneRequiredWithoutEventsInput>;
  groupPrice?: InputMaybe<ClearNullableFloatFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  interestedEmails?: InputMaybe<ClearMailingListMemberUpdateManyWithoutInterestedInEventsInput>;
  majorityAge?: InputMaybe<ClearIntFieldUpdateOperationsInput>;
  managers?: InputMaybe<ClearEventUpdatemanagersInput>;
  maxAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minorWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  overnightMinAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  promoCodes?: InputMaybe<ClearPromoCodeUpdateManyWithoutEventInput>;
  registrationCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  registrationsOpen?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  requiresPromoCode?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  schedule?: InputMaybe<ClearScheduleItemUpdateManyWithoutEventInput>;
  showcaseId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  sponsors?: InputMaybe<ClearSponsorUpdateManyWithoutEventInput>;
  startDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  ticketPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  tickets?: InputMaybe<ClearTicketUpdateManyWithoutEventInput>;
  timezone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  venue?: InputMaybe<ClearVenueUpdateOneWithoutEventsInput>;
  webhooks?: InputMaybe<ClearWebhookUpdateManyWithoutEventInput>;
};

export type ClearEventUpdateWithoutInterestedEmailsInput = {
  adultWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contentfulEventRestrictions?: InputMaybe<ClearEventUpdatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  endDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  eventGroup?: InputMaybe<ClearEventGroupUpdateOneRequiredWithoutEventsInput>;
  eventRestrictions?: InputMaybe<ClearEventRestrictionUpdateManyWithoutEventsInput>;
  groupPrice?: InputMaybe<ClearNullableFloatFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  majorityAge?: InputMaybe<ClearIntFieldUpdateOperationsInput>;
  managers?: InputMaybe<ClearEventUpdatemanagersInput>;
  maxAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minorWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  overnightMinAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  promoCodes?: InputMaybe<ClearPromoCodeUpdateManyWithoutEventInput>;
  registrationCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  registrationsOpen?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  requiresPromoCode?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  schedule?: InputMaybe<ClearScheduleItemUpdateManyWithoutEventInput>;
  showcaseId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  sponsors?: InputMaybe<ClearSponsorUpdateManyWithoutEventInput>;
  startDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  ticketPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  tickets?: InputMaybe<ClearTicketUpdateManyWithoutEventInput>;
  timezone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  venue?: InputMaybe<ClearVenueUpdateOneWithoutEventsInput>;
  webhooks?: InputMaybe<ClearWebhookUpdateManyWithoutEventInput>;
};

export type ClearEventUpdateWithoutPromoCodesInput = {
  adultWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contentfulEventRestrictions?: InputMaybe<ClearEventUpdatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  endDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  eventGroup?: InputMaybe<ClearEventGroupUpdateOneRequiredWithoutEventsInput>;
  eventRestrictions?: InputMaybe<ClearEventRestrictionUpdateManyWithoutEventsInput>;
  groupPrice?: InputMaybe<ClearNullableFloatFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  interestedEmails?: InputMaybe<ClearMailingListMemberUpdateManyWithoutInterestedInEventsInput>;
  majorityAge?: InputMaybe<ClearIntFieldUpdateOperationsInput>;
  managers?: InputMaybe<ClearEventUpdatemanagersInput>;
  maxAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minorWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  overnightMinAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  registrationCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  registrationsOpen?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  requiresPromoCode?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  schedule?: InputMaybe<ClearScheduleItemUpdateManyWithoutEventInput>;
  showcaseId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  sponsors?: InputMaybe<ClearSponsorUpdateManyWithoutEventInput>;
  startDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  ticketPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  tickets?: InputMaybe<ClearTicketUpdateManyWithoutEventInput>;
  timezone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  venue?: InputMaybe<ClearVenueUpdateOneWithoutEventsInput>;
  webhooks?: InputMaybe<ClearWebhookUpdateManyWithoutEventInput>;
};

export type ClearEventUpdateWithoutScheduleInput = {
  adultWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contentfulEventRestrictions?: InputMaybe<ClearEventUpdatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  endDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  eventGroup?: InputMaybe<ClearEventGroupUpdateOneRequiredWithoutEventsInput>;
  eventRestrictions?: InputMaybe<ClearEventRestrictionUpdateManyWithoutEventsInput>;
  groupPrice?: InputMaybe<ClearNullableFloatFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  interestedEmails?: InputMaybe<ClearMailingListMemberUpdateManyWithoutInterestedInEventsInput>;
  majorityAge?: InputMaybe<ClearIntFieldUpdateOperationsInput>;
  managers?: InputMaybe<ClearEventUpdatemanagersInput>;
  maxAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minorWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  overnightMinAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  promoCodes?: InputMaybe<ClearPromoCodeUpdateManyWithoutEventInput>;
  registrationCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  registrationsOpen?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  requiresPromoCode?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  showcaseId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  sponsors?: InputMaybe<ClearSponsorUpdateManyWithoutEventInput>;
  startDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  ticketPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  tickets?: InputMaybe<ClearTicketUpdateManyWithoutEventInput>;
  timezone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  venue?: InputMaybe<ClearVenueUpdateOneWithoutEventsInput>;
  webhooks?: InputMaybe<ClearWebhookUpdateManyWithoutEventInput>;
};

export type ClearEventUpdateWithoutSponsorsInput = {
  adultWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contentfulEventRestrictions?: InputMaybe<ClearEventUpdatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  endDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  eventGroup?: InputMaybe<ClearEventGroupUpdateOneRequiredWithoutEventsInput>;
  eventRestrictions?: InputMaybe<ClearEventRestrictionUpdateManyWithoutEventsInput>;
  groupPrice?: InputMaybe<ClearNullableFloatFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  interestedEmails?: InputMaybe<ClearMailingListMemberUpdateManyWithoutInterestedInEventsInput>;
  majorityAge?: InputMaybe<ClearIntFieldUpdateOperationsInput>;
  managers?: InputMaybe<ClearEventUpdatemanagersInput>;
  maxAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minorWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  overnightMinAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  promoCodes?: InputMaybe<ClearPromoCodeUpdateManyWithoutEventInput>;
  registrationCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  registrationsOpen?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  requiresPromoCode?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  schedule?: InputMaybe<ClearScheduleItemUpdateManyWithoutEventInput>;
  showcaseId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  startDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  ticketPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  tickets?: InputMaybe<ClearTicketUpdateManyWithoutEventInput>;
  timezone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  venue?: InputMaybe<ClearVenueUpdateOneWithoutEventsInput>;
  webhooks?: InputMaybe<ClearWebhookUpdateManyWithoutEventInput>;
};

export type ClearEventUpdateWithoutTicketsInput = {
  adultWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contentfulEventRestrictions?: InputMaybe<ClearEventUpdatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  endDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  eventGroup?: InputMaybe<ClearEventGroupUpdateOneRequiredWithoutEventsInput>;
  eventRestrictions?: InputMaybe<ClearEventRestrictionUpdateManyWithoutEventsInput>;
  groupPrice?: InputMaybe<ClearNullableFloatFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  interestedEmails?: InputMaybe<ClearMailingListMemberUpdateManyWithoutInterestedInEventsInput>;
  majorityAge?: InputMaybe<ClearIntFieldUpdateOperationsInput>;
  managers?: InputMaybe<ClearEventUpdatemanagersInput>;
  maxAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minorWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  overnightMinAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  promoCodes?: InputMaybe<ClearPromoCodeUpdateManyWithoutEventInput>;
  registrationCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  registrationsOpen?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  requiresPromoCode?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  schedule?: InputMaybe<ClearScheduleItemUpdateManyWithoutEventInput>;
  showcaseId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  sponsors?: InputMaybe<ClearSponsorUpdateManyWithoutEventInput>;
  startDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  ticketPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  timezone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  venue?: InputMaybe<ClearVenueUpdateOneWithoutEventsInput>;
  webhooks?: InputMaybe<ClearWebhookUpdateManyWithoutEventInput>;
};

export type ClearEventUpdateWithoutVenueInput = {
  adultWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contentfulEventRestrictions?: InputMaybe<ClearEventUpdatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  endDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  eventGroup?: InputMaybe<ClearEventGroupUpdateOneRequiredWithoutEventsInput>;
  eventRestrictions?: InputMaybe<ClearEventRestrictionUpdateManyWithoutEventsInput>;
  groupPrice?: InputMaybe<ClearNullableFloatFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  interestedEmails?: InputMaybe<ClearMailingListMemberUpdateManyWithoutInterestedInEventsInput>;
  majorityAge?: InputMaybe<ClearIntFieldUpdateOperationsInput>;
  managers?: InputMaybe<ClearEventUpdatemanagersInput>;
  maxAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minorWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  overnightMinAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  promoCodes?: InputMaybe<ClearPromoCodeUpdateManyWithoutEventInput>;
  registrationCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  registrationsOpen?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  requiresPromoCode?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  schedule?: InputMaybe<ClearScheduleItemUpdateManyWithoutEventInput>;
  showcaseId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  sponsors?: InputMaybe<ClearSponsorUpdateManyWithoutEventInput>;
  startDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  ticketPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  tickets?: InputMaybe<ClearTicketUpdateManyWithoutEventInput>;
  timezone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  webhooks?: InputMaybe<ClearWebhookUpdateManyWithoutEventInput>;
};

export type ClearEventUpdateWithoutWebhooksInput = {
  adultWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contentfulEventRestrictions?: InputMaybe<ClearEventUpdatecontentfulEventRestrictionsInput>;
  contentfulWebname?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  earlyBirdPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  endDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  eventGroup?: InputMaybe<ClearEventGroupUpdateOneRequiredWithoutEventsInput>;
  eventRestrictions?: InputMaybe<ClearEventRestrictionUpdateManyWithoutEventsInput>;
  groupPrice?: InputMaybe<ClearNullableFloatFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  interestedEmails?: InputMaybe<ClearMailingListMemberUpdateManyWithoutInterestedInEventsInput>;
  majorityAge?: InputMaybe<ClearIntFieldUpdateOperationsInput>;
  managers?: InputMaybe<ClearEventUpdatemanagersInput>;
  maxAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  minorWaiverId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  overnightMinAge?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  promoCodes?: InputMaybe<ClearPromoCodeUpdateManyWithoutEventInput>;
  registrationCutoff?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  registrationsOpen?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  requiresPromoCode?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  schedule?: InputMaybe<ClearScheduleItemUpdateManyWithoutEventInput>;
  showcaseId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  sponsors?: InputMaybe<ClearSponsorUpdateManyWithoutEventInput>;
  startDate?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  ticketPrice?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  tickets?: InputMaybe<ClearTicketUpdateManyWithoutEventInput>;
  timezone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  venue?: InputMaybe<ClearVenueUpdateOneWithoutEventsInput>;
};

export type ClearEventUpdatecontentfulEventRestrictionsInput = {
  push?: InputMaybe<Array<Scalars['String']>>;
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type ClearEventUpdatemanagersInput = {
  push?: InputMaybe<Array<Scalars['String']>>;
  set?: InputMaybe<Array<Scalars['String']>>;
};

export type ClearEventUpsertWithWhereUniqueWithoutEventGroupInput = {
  create: ClearEventCreateWithoutEventGroupInput;
  update: ClearEventUpdateWithoutEventGroupInput;
  where: ClearEventWhereUniqueInput;
};

export type ClearEventUpsertWithWhereUniqueWithoutEventRestrictionsInput = {
  create: ClearEventCreateWithoutEventRestrictionsInput;
  update: ClearEventUpdateWithoutEventRestrictionsInput;
  where: ClearEventWhereUniqueInput;
};

export type ClearEventUpsertWithWhereUniqueWithoutInterestedEmailsInput = {
  create: ClearEventCreateWithoutInterestedEmailsInput;
  update: ClearEventUpdateWithoutInterestedEmailsInput;
  where: ClearEventWhereUniqueInput;
};

export type ClearEventUpsertWithWhereUniqueWithoutVenueInput = {
  create: ClearEventCreateWithoutVenueInput;
  update: ClearEventUpdateWithoutVenueInput;
  where: ClearEventWhereUniqueInput;
};

export type ClearEventUpsertWithoutPromoCodesInput = {
  create: ClearEventCreateWithoutPromoCodesInput;
  update: ClearEventUpdateWithoutPromoCodesInput;
};

export type ClearEventUpsertWithoutScheduleInput = {
  create: ClearEventCreateWithoutScheduleInput;
  update: ClearEventUpdateWithoutScheduleInput;
};

export type ClearEventUpsertWithoutSponsorsInput = {
  create: ClearEventCreateWithoutSponsorsInput;
  update: ClearEventUpdateWithoutSponsorsInput;
};

export type ClearEventUpsertWithoutTicketsInput = {
  create: ClearEventCreateWithoutTicketsInput;
  update: ClearEventUpdateWithoutTicketsInput;
};

export type ClearEventUpsertWithoutWebhooksInput = {
  create: ClearEventCreateWithoutWebhooksInput;
  update: ClearEventUpdateWithoutWebhooksInput;
};

export type ClearEventWhereInput = {
  AND?: InputMaybe<Array<ClearEventWhereInput>>;
  NOT?: InputMaybe<Array<ClearEventWhereInput>>;
  OR?: InputMaybe<Array<ClearEventWhereInput>>;
  adultWaiverId?: InputMaybe<ClearStringNullableFilter>;
  contentfulEventRestrictions?: InputMaybe<ClearStringNullableListFilter>;
  contentfulWebname?: InputMaybe<ClearStringNullableFilter>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  earlyBirdCutoff?: InputMaybe<ClearDateTimeFilter>;
  earlyBirdPrice?: InputMaybe<ClearFloatFilter>;
  endDate?: InputMaybe<ClearDateTimeFilter>;
  eventGroup?: InputMaybe<ClearEventGroupRelationFilter>;
  eventGroupId?: InputMaybe<ClearStringFilter>;
  eventRestrictions?: InputMaybe<ClearEventRestrictionListRelationFilter>;
  groupPrice?: InputMaybe<ClearFloatNullableFilter>;
  id?: InputMaybe<ClearStringFilter>;
  interestedEmails?: InputMaybe<ClearMailingListMemberListRelationFilter>;
  majorityAge?: InputMaybe<ClearIntFilter>;
  managers?: InputMaybe<ClearStringNullableListFilter>;
  maxAge?: InputMaybe<ClearIntNullableFilter>;
  minAge?: InputMaybe<ClearIntNullableFilter>;
  minorWaiverId?: InputMaybe<ClearStringNullableFilter>;
  name?: InputMaybe<ClearStringFilter>;
  overnightMinAge?: InputMaybe<ClearIntNullableFilter>;
  promoCodes?: InputMaybe<ClearPromoCodeListRelationFilter>;
  registrationCutoff?: InputMaybe<ClearDateTimeFilter>;
  registrationsOpen?: InputMaybe<ClearBoolFilter>;
  requiresPromoCode?: InputMaybe<ClearBoolFilter>;
  schedule?: InputMaybe<ClearScheduleItemListRelationFilter>;
  showcaseId?: InputMaybe<ClearStringNullableFilter>;
  sponsors?: InputMaybe<ClearSponsorListRelationFilter>;
  startDate?: InputMaybe<ClearDateTimeFilter>;
  ticketPrice?: InputMaybe<ClearFloatFilter>;
  tickets?: InputMaybe<ClearTicketListRelationFilter>;
  timezone?: InputMaybe<ClearStringNullableFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
  venue?: InputMaybe<ClearVenueRelationFilter>;
  venueId?: InputMaybe<ClearStringNullableFilter>;
  webhooks?: InputMaybe<ClearWebhookListRelationFilter>;
};

export type ClearEventWhereUniqueInput = {
  id?: InputMaybe<Scalars['String']>;
};

export type ClearFloatFieldUpdateOperationsInput = {
  decrement?: InputMaybe<Scalars['Float']>;
  divide?: InputMaybe<Scalars['Float']>;
  increment?: InputMaybe<Scalars['Float']>;
  multiply?: InputMaybe<Scalars['Float']>;
  set?: InputMaybe<Scalars['Float']>;
};

export type ClearFloatFilter = {
  equals?: InputMaybe<Scalars['Float']>;
  gt?: InputMaybe<Scalars['Float']>;
  gte?: InputMaybe<Scalars['Float']>;
  in?: InputMaybe<Array<Scalars['Float']>>;
  lt?: InputMaybe<Scalars['Float']>;
  lte?: InputMaybe<Scalars['Float']>;
  not?: InputMaybe<ClearNestedFloatFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']>>;
};

export type ClearFloatNullableFilter = {
  equals?: InputMaybe<Scalars['Float']>;
  gt?: InputMaybe<Scalars['Float']>;
  gte?: InputMaybe<Scalars['Float']>;
  in?: InputMaybe<Array<Scalars['Float']>>;
  lt?: InputMaybe<Scalars['Float']>;
  lte?: InputMaybe<Scalars['Float']>;
  not?: InputMaybe<ClearNestedFloatNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']>>;
};

export type ClearFloatNullableWithAggregatesFilter = {
  _avg?: InputMaybe<ClearNestedFloatNullableFilter>;
  _count?: InputMaybe<ClearNestedIntNullableFilter>;
  _max?: InputMaybe<ClearNestedFloatNullableFilter>;
  _min?: InputMaybe<ClearNestedFloatNullableFilter>;
  _sum?: InputMaybe<ClearNestedFloatNullableFilter>;
  equals?: InputMaybe<Scalars['Float']>;
  gt?: InputMaybe<Scalars['Float']>;
  gte?: InputMaybe<Scalars['Float']>;
  in?: InputMaybe<Array<Scalars['Float']>>;
  lt?: InputMaybe<Scalars['Float']>;
  lte?: InputMaybe<Scalars['Float']>;
  not?: InputMaybe<ClearNestedFloatNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']>>;
};

export type ClearFloatWithAggregatesFilter = {
  _avg?: InputMaybe<ClearNestedFloatFilter>;
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedFloatFilter>;
  _min?: InputMaybe<ClearNestedFloatFilter>;
  _sum?: InputMaybe<ClearNestedFloatFilter>;
  equals?: InputMaybe<Scalars['Float']>;
  gt?: InputMaybe<Scalars['Float']>;
  gte?: InputMaybe<Scalars['Float']>;
  in?: InputMaybe<Array<Scalars['Float']>>;
  lt?: InputMaybe<Scalars['Float']>;
  lte?: InputMaybe<Scalars['Float']>;
  not?: InputMaybe<ClearNestedFloatWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']>>;
};

export type ClearIntFieldUpdateOperationsInput = {
  decrement?: InputMaybe<Scalars['Int']>;
  divide?: InputMaybe<Scalars['Int']>;
  increment?: InputMaybe<Scalars['Int']>;
  multiply?: InputMaybe<Scalars['Int']>;
  set?: InputMaybe<Scalars['Int']>;
};

export type ClearIntFilter = {
  equals?: InputMaybe<Scalars['Int']>;
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  in?: InputMaybe<Array<Scalars['Int']>>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
  not?: InputMaybe<ClearNestedIntFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']>>;
};

export type ClearIntNullableFilter = {
  equals?: InputMaybe<Scalars['Int']>;
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  in?: InputMaybe<Array<Scalars['Int']>>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
  not?: InputMaybe<ClearNestedIntNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']>>;
};

export type ClearIntNullableWithAggregatesFilter = {
  _avg?: InputMaybe<ClearNestedFloatNullableFilter>;
  _count?: InputMaybe<ClearNestedIntNullableFilter>;
  _max?: InputMaybe<ClearNestedIntNullableFilter>;
  _min?: InputMaybe<ClearNestedIntNullableFilter>;
  _sum?: InputMaybe<ClearNestedIntNullableFilter>;
  equals?: InputMaybe<Scalars['Int']>;
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  in?: InputMaybe<Array<Scalars['Int']>>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
  not?: InputMaybe<ClearNestedIntNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']>>;
};

export type ClearIntWithAggregatesFilter = {
  _avg?: InputMaybe<ClearNestedFloatFilter>;
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedIntFilter>;
  _min?: InputMaybe<ClearNestedIntFilter>;
  _sum?: InputMaybe<ClearNestedIntFilter>;
  equals?: InputMaybe<Scalars['Int']>;
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  in?: InputMaybe<Array<Scalars['Int']>>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
  not?: InputMaybe<ClearNestedIntWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']>>;
};

export type ClearJsonNullableFilter = {
  equals?: InputMaybe<Scalars['ClearJSON']>;
  not?: InputMaybe<Scalars['ClearJSON']>;
};

export type ClearJsonNullableWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntNullableFilter>;
  _max?: InputMaybe<ClearNestedJsonNullableFilter>;
  _min?: InputMaybe<ClearNestedJsonNullableFilter>;
  equals?: InputMaybe<Scalars['ClearJSON']>;
  not?: InputMaybe<Scalars['ClearJSON']>;
};

export type ClearMailingListMember = {
  __typename?: 'ClearMailingListMember';
  _count?: Maybe<ClearMailingListMemberCount>;
  createdAt: Scalars['ClearDateTime'];
  email: Scalars['String'];
  getMetadata?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  interestedInEvents: Array<ClearEvent>;
  lastEmailed?: Maybe<Scalars['ClearDateTime']>;
  metadata?: Maybe<Scalars['ClearJSON']>;
  updatedAt: Scalars['ClearDateTime'];
};


export type ClearMailingListMemberGetMetadataArgs = {
  key: Scalars['String'];
};


export type ClearMailingListMemberInterestedInEventsArgs = {
  cursor?: InputMaybe<ClearEventWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearEventScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearEventOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEventWhereInput>;
};

export type ClearMailingListMemberCount = {
  __typename?: 'ClearMailingListMemberCount';
  interestedInEvents: Scalars['Int'];
};

export type ClearMailingListMemberCountAggregate = {
  __typename?: 'ClearMailingListMemberCountAggregate';
  _all: Scalars['Int'];
  createdAt: Scalars['Int'];
  email: Scalars['Int'];
  id: Scalars['Int'];
  lastEmailed: Scalars['Int'];
  metadata: Scalars['Int'];
  updatedAt: Scalars['Int'];
};

export type ClearMailingListMemberCountOrderByAggregateInput = {
  createdAt?: InputMaybe<ClearSortOrder>;
  email?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  lastEmailed?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearMailingListMemberCreateInput = {
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  email: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  interestedInEvents?: InputMaybe<ClearEventCreateNestedManyWithoutInterestedEmailsInput>;
  lastEmailed?: InputMaybe<Scalars['ClearDateTime']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearMailingListMemberCreateManyInput = {
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  email: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  lastEmailed?: InputMaybe<Scalars['ClearDateTime']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearMailingListMemberCreateNestedManyWithoutInterestedInEventsInput = {
  connect?: InputMaybe<Array<ClearMailingListMemberWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearMailingListMemberCreateOrConnectWithoutInterestedInEventsInput>>;
  create?: InputMaybe<Array<ClearMailingListMemberCreateWithoutInterestedInEventsInput>>;
};

export type ClearMailingListMemberCreateOrConnectWithoutInterestedInEventsInput = {
  create: ClearMailingListMemberCreateWithoutInterestedInEventsInput;
  where: ClearMailingListMemberWhereUniqueInput;
};

export type ClearMailingListMemberCreateWithoutInterestedInEventsInput = {
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  email: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  lastEmailed?: InputMaybe<Scalars['ClearDateTime']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearMailingListMemberGroupBy = {
  __typename?: 'ClearMailingListMemberGroupBy';
  _count?: Maybe<ClearMailingListMemberCountAggregate>;
  _max?: Maybe<ClearMailingListMemberMaxAggregate>;
  _min?: Maybe<ClearMailingListMemberMinAggregate>;
  createdAt: Scalars['ClearDateTime'];
  email: Scalars['String'];
  id: Scalars['String'];
  lastEmailed?: Maybe<Scalars['ClearDateTime']>;
  metadata?: Maybe<Scalars['ClearJSON']>;
  updatedAt: Scalars['ClearDateTime'];
};

export type ClearMailingListMemberListRelationFilter = {
  every?: InputMaybe<ClearMailingListMemberWhereInput>;
  none?: InputMaybe<ClearMailingListMemberWhereInput>;
  some?: InputMaybe<ClearMailingListMemberWhereInput>;
};

export type ClearMailingListMemberMaxAggregate = {
  __typename?: 'ClearMailingListMemberMaxAggregate';
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  lastEmailed?: Maybe<Scalars['ClearDateTime']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
};

export type ClearMailingListMemberMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<ClearSortOrder>;
  email?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  lastEmailed?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearMailingListMemberMinAggregate = {
  __typename?: 'ClearMailingListMemberMinAggregate';
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  lastEmailed?: Maybe<Scalars['ClearDateTime']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
};

export type ClearMailingListMemberMinOrderByAggregateInput = {
  createdAt?: InputMaybe<ClearSortOrder>;
  email?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  lastEmailed?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearMailingListMemberOrderByRelationAggregateInput = {
  _count?: InputMaybe<ClearSortOrder>;
};

export type ClearMailingListMemberOrderByWithAggregationInput = {
  _count?: InputMaybe<ClearMailingListMemberCountOrderByAggregateInput>;
  _max?: InputMaybe<ClearMailingListMemberMaxOrderByAggregateInput>;
  _min?: InputMaybe<ClearMailingListMemberMinOrderByAggregateInput>;
  createdAt?: InputMaybe<ClearSortOrder>;
  email?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  lastEmailed?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearMailingListMemberOrderByWithRelationInput = {
  createdAt?: InputMaybe<ClearSortOrder>;
  email?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  interestedInEvents?: InputMaybe<ClearEventOrderByRelationAggregateInput>;
  lastEmailed?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export enum ClearMailingListMemberScalarFieldEnum {
  CreatedAt = 'createdAt',
  Email = 'email',
  Id = 'id',
  LastEmailed = 'lastEmailed',
  Metadata = 'metadata',
  UpdatedAt = 'updatedAt'
}

export type ClearMailingListMemberScalarWhereInput = {
  AND?: InputMaybe<Array<ClearMailingListMemberScalarWhereInput>>;
  NOT?: InputMaybe<Array<ClearMailingListMemberScalarWhereInput>>;
  OR?: InputMaybe<Array<ClearMailingListMemberScalarWhereInput>>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  email?: InputMaybe<ClearStringFilter>;
  id?: InputMaybe<ClearStringFilter>;
  lastEmailed?: InputMaybe<ClearDateTimeNullableFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
};

export type ClearMailingListMemberScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ClearMailingListMemberScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ClearMailingListMemberScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ClearMailingListMemberScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  email?: InputMaybe<ClearStringWithAggregatesFilter>;
  id?: InputMaybe<ClearStringWithAggregatesFilter>;
  lastEmailed?: InputMaybe<ClearDateTimeNullableWithAggregatesFilter>;
  updatedAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
};

export type ClearMailingListMemberUpdateInput = {
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  interestedInEvents?: InputMaybe<ClearEventUpdateManyWithoutInterestedEmailsInput>;
  lastEmailed?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
};

export type ClearMailingListMemberUpdateManyMutationInput = {
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  lastEmailed?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
};

export type ClearMailingListMemberUpdateManyWithWhereWithoutInterestedInEventsInput = {
  data: ClearMailingListMemberUpdateManyMutationInput;
  where: ClearMailingListMemberScalarWhereInput;
};

export type ClearMailingListMemberUpdateManyWithoutInterestedInEventsInput = {
  connect?: InputMaybe<Array<ClearMailingListMemberWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearMailingListMemberCreateOrConnectWithoutInterestedInEventsInput>>;
  create?: InputMaybe<Array<ClearMailingListMemberCreateWithoutInterestedInEventsInput>>;
  delete?: InputMaybe<Array<ClearMailingListMemberWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClearMailingListMemberScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClearMailingListMemberWhereUniqueInput>>;
  set?: InputMaybe<Array<ClearMailingListMemberWhereUniqueInput>>;
  update?: InputMaybe<Array<ClearMailingListMemberUpdateWithWhereUniqueWithoutInterestedInEventsInput>>;
  updateMany?: InputMaybe<Array<ClearMailingListMemberUpdateManyWithWhereWithoutInterestedInEventsInput>>;
  upsert?: InputMaybe<Array<ClearMailingListMemberUpsertWithWhereUniqueWithoutInterestedInEventsInput>>;
};

export type ClearMailingListMemberUpdateWithWhereUniqueWithoutInterestedInEventsInput = {
  data: ClearMailingListMemberUpdateWithoutInterestedInEventsInput;
  where: ClearMailingListMemberWhereUniqueInput;
};

export type ClearMailingListMemberUpdateWithoutInterestedInEventsInput = {
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  lastEmailed?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
};

export type ClearMailingListMemberUpsertWithWhereUniqueWithoutInterestedInEventsInput = {
  create: ClearMailingListMemberCreateWithoutInterestedInEventsInput;
  update: ClearMailingListMemberUpdateWithoutInterestedInEventsInput;
  where: ClearMailingListMemberWhereUniqueInput;
};

export type ClearMailingListMemberWhereInput = {
  AND?: InputMaybe<Array<ClearMailingListMemberWhereInput>>;
  NOT?: InputMaybe<Array<ClearMailingListMemberWhereInput>>;
  OR?: InputMaybe<Array<ClearMailingListMemberWhereInput>>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  email?: InputMaybe<ClearStringFilter>;
  id?: InputMaybe<ClearStringFilter>;
  interestedInEvents?: InputMaybe<ClearEventListRelationFilter>;
  lastEmailed?: InputMaybe<ClearDateTimeNullableFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
};

export type ClearMailingListMemberWhereUniqueInput = {
  email?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
};

export type ClearMutation = {
  __typename?: 'ClearMutation';
  applyForWorkshop: Scalars['Boolean'];
  checkin?: Maybe<ClearTicket>;
  checkout?: Maybe<ClearTicket>;
  contactEventOrganizers: Scalars['Boolean'];
  createEmailTemplate: ClearEmailTemplate;
  createEvent: ClearEvent;
  createEventGroup: ClearEventGroup;
  createEventRestriction: ClearEventRestriction;
  createMailingListMember: ClearMailingListMember;
  createManyEmailTemplate: ClearAffectedRowsOutput;
  createManyEvent: ClearAffectedRowsOutput;
  createManyEventGroup: ClearAffectedRowsOutput;
  createManyEventRestriction: ClearAffectedRowsOutput;
  createManyMailingListMember: ClearAffectedRowsOutput;
  createManyPayment: ClearAffectedRowsOutput;
  createManyPerson: ClearAffectedRowsOutput;
  createManyPromoCode: ClearAffectedRowsOutput;
  createManyScheduleItem: ClearAffectedRowsOutput;
  createManySponsor: ClearAffectedRowsOutput;
  createManyTicket: ClearAffectedRowsOutput;
  createManyVenue: ClearAffectedRowsOutput;
  createManyWebhook: ClearAffectedRowsOutput;
  createPayment: ClearPayment;
  createPerson: ClearPerson;
  createPromoCode: ClearPromoCode;
  createScheduleItem: ClearScheduleItem;
  createSponsor: ClearSponsor;
  createTicket: ClearTicket;
  createVenue: ClearVenue;
  createWebhook: ClearWebhook;
  deleteEmailTemplate?: Maybe<ClearEmailTemplate>;
  deleteEvent?: Maybe<ClearEvent>;
  deleteEventGroup?: Maybe<ClearEventGroup>;
  deleteEventRestriction?: Maybe<ClearEventRestriction>;
  deleteMailingListMember?: Maybe<ClearMailingListMember>;
  deleteManyEmailTemplate: ClearAffectedRowsOutput;
  deleteManyEvent: ClearAffectedRowsOutput;
  deleteManyEventGroup: ClearAffectedRowsOutput;
  deleteManyEventRestriction: ClearAffectedRowsOutput;
  deleteManyMailingListMember: ClearAffectedRowsOutput;
  deleteManyPayment: ClearAffectedRowsOutput;
  deleteManyPerson: ClearAffectedRowsOutput;
  deleteManyPromoCode: ClearAffectedRowsOutput;
  deleteManyScheduleItem: ClearAffectedRowsOutput;
  deleteManySponsor: ClearAffectedRowsOutput;
  deleteManyTicket: ClearAffectedRowsOutput;
  deleteManyVenue: ClearAffectedRowsOutput;
  deleteManyWebhook: ClearAffectedRowsOutput;
  deletePayment?: Maybe<ClearPayment>;
  deletePerson?: Maybe<ClearPerson>;
  deletePromoCode?: Maybe<ClearPromoCode>;
  deleteScheduleItem?: Maybe<ClearScheduleItem>;
  deleteSponsor?: Maybe<ClearSponsor>;
  deleteTicket?: Maybe<ClearTicket>;
  deleteVenue?: Maybe<ClearVenue>;
  deleteWebhook?: Maybe<ClearWebhook>;
  finalizePayment: Array<Scalars['String']>;
  registerForEvent?: Maybe<Scalars['String']>;
  requestEventScholarship: Scalars['Boolean'];
  sendInterestedEmail: Scalars['Boolean'];
  sendNotification: Scalars['Boolean'];
  sendWaiverReminder?: Maybe<Scalars['Boolean']>;
  setEmailTemplateMetadata?: Maybe<ClearEmailTemplate>;
  setEventGroupMetadata?: Maybe<ClearEventGroup>;
  setEventMetadata?: Maybe<ClearEvent>;
  setEventRestrictionMetadata?: Maybe<ClearEventRestriction>;
  setMailingListMemberMetadata?: Maybe<ClearMailingListMember>;
  setPaymentMetadata?: Maybe<ClearPayment>;
  setPersonMetadata?: Maybe<ClearPerson>;
  setPromoCodeMetadata?: Maybe<ClearPromoCode>;
  setScheduleItemMetadata?: Maybe<ClearScheduleItem>;
  setSponsorMetadata?: Maybe<ClearSponsor>;
  setTicketMetadata?: Maybe<ClearTicket>;
  setVenueMetadata?: Maybe<ClearVenue>;
  subscribeToMailingList?: Maybe<ClearMailingListMember>;
  updateEmailTemplate?: Maybe<ClearEmailTemplate>;
  updateEvent?: Maybe<ClearEvent>;
  updateEventGroup?: Maybe<ClearEventGroup>;
  updateEventRestriction?: Maybe<ClearEventRestriction>;
  updateMailingListMember?: Maybe<ClearMailingListMember>;
  updateManyEmailTemplate: ClearAffectedRowsOutput;
  updateManyEvent: ClearAffectedRowsOutput;
  updateManyEventGroup: ClearAffectedRowsOutput;
  updateManyEventRestriction: ClearAffectedRowsOutput;
  updateManyMailingListMember: ClearAffectedRowsOutput;
  updateManyPayment: ClearAffectedRowsOutput;
  updateManyPerson: ClearAffectedRowsOutput;
  updateManyPromoCode: ClearAffectedRowsOutput;
  updateManyScheduleItem: ClearAffectedRowsOutput;
  updateManySponsor: ClearAffectedRowsOutput;
  updateManyTicket: ClearAffectedRowsOutput;
  updateManyVenue: ClearAffectedRowsOutput;
  updateManyWebhook: ClearAffectedRowsOutput;
  updatePayment?: Maybe<ClearPayment>;
  updatePerson?: Maybe<ClearPerson>;
  updatePromoCode?: Maybe<ClearPromoCode>;
  updateScheduleItem?: Maybe<ClearScheduleItem>;
  updateSponsor?: Maybe<ClearSponsor>;
  updateTicket?: Maybe<ClearTicket>;
  updateVenue?: Maybe<ClearVenue>;
  updateWebhook?: Maybe<ClearWebhook>;
  uploadDarkSponsorLogo?: Maybe<ClearSponsor>;
  uploadEventRestrictionIcon?: Maybe<ClearEventRestriction>;
  uploadSponsorLogo?: Maybe<ClearSponsor>;
  upsertEmailTemplate: ClearEmailTemplate;
  upsertEvent: ClearEvent;
  upsertEventGroup: ClearEventGroup;
  upsertEventRestriction: ClearEventRestriction;
  upsertMailingListMember: ClearMailingListMember;
  upsertPayment: ClearPayment;
  upsertPerson: ClearPerson;
  upsertPromoCode: ClearPromoCode;
  upsertScheduleItem: ClearScheduleItem;
  upsertSponsor: ClearSponsor;
  upsertTicket: ClearTicket;
  upsertVenue: ClearVenue;
  upsertWebhook: ClearWebhook;
  withdrawFailedPayment: Scalars['Boolean'];
};


export type ClearMutationApplyForWorkshopArgs = {
  bio: Scalars['String'];
  description: Scalars['String'];
  email: Scalars['String'];
  eventWhere: ClearEventWhereUniqueInput;
  firstName: Scalars['String'];
  lastName: Scalars['String'];
};


export type ClearMutationCheckinArgs = {
  where: ClearTicketWhereUniqueInput;
};


export type ClearMutationCheckoutArgs = {
  where: ClearTicketWhereUniqueInput;
};


export type ClearMutationContactEventOrganizersArgs = {
  body: Scalars['String'];
  eventWhere: ClearEventWhereUniqueInput;
  replyTo?: InputMaybe<Scalars['String']>;
  subject: Scalars['String'];
};


export type ClearMutationCreateEmailTemplateArgs = {
  data: ClearEmailTemplateCreateInput;
};


export type ClearMutationCreateEventArgs = {
  data: ClearEventCreateInput;
};


export type ClearMutationCreateEventGroupArgs = {
  data: ClearEventGroupCreateInput;
};


export type ClearMutationCreateEventRestrictionArgs = {
  data: ClearEventRestrictionCreateInput;
};


export type ClearMutationCreateMailingListMemberArgs = {
  data: ClearMailingListMemberCreateInput;
};


export type ClearMutationCreateManyEmailTemplateArgs = {
  data: Array<ClearEmailTemplateCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};


export type ClearMutationCreateManyEventArgs = {
  data: Array<ClearEventCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};


export type ClearMutationCreateManyEventGroupArgs = {
  data: Array<ClearEventGroupCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};


export type ClearMutationCreateManyEventRestrictionArgs = {
  data: Array<ClearEventRestrictionCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};


export type ClearMutationCreateManyMailingListMemberArgs = {
  data: Array<ClearMailingListMemberCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};


export type ClearMutationCreateManyPaymentArgs = {
  data: Array<ClearPaymentCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};


export type ClearMutationCreateManyPersonArgs = {
  data: Array<ClearPersonCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};


export type ClearMutationCreateManyPromoCodeArgs = {
  data: Array<ClearPromoCodeCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};


export type ClearMutationCreateManyScheduleItemArgs = {
  data: Array<ClearScheduleItemCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};


export type ClearMutationCreateManySponsorArgs = {
  data: Array<ClearSponsorCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};


export type ClearMutationCreateManyTicketArgs = {
  data: Array<ClearTicketCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};


export type ClearMutationCreateManyVenueArgs = {
  data: Array<ClearVenueCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};


export type ClearMutationCreateManyWebhookArgs = {
  data: Array<ClearWebhookCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};


export type ClearMutationCreatePaymentArgs = {
  data: ClearPaymentCreateInput;
};


export type ClearMutationCreatePersonArgs = {
  data: ClearPersonCreateInput;
};


export type ClearMutationCreatePromoCodeArgs = {
  data: ClearPromoCodeCreateInput;
};


export type ClearMutationCreateScheduleItemArgs = {
  data: ClearScheduleItemCreateInput;
};


export type ClearMutationCreateSponsorArgs = {
  data: ClearSponsorCreateInput;
};


export type ClearMutationCreateTicketArgs = {
  data: ClearTicketCreateInput;
};


export type ClearMutationCreateVenueArgs = {
  data: ClearVenueCreateInput;
};


export type ClearMutationCreateWebhookArgs = {
  data: ClearWebhookCreateInput;
};


export type ClearMutationDeleteEmailTemplateArgs = {
  where: ClearEmailTemplateWhereUniqueInput;
};


export type ClearMutationDeleteEventArgs = {
  where: ClearEventWhereUniqueInput;
};


export type ClearMutationDeleteEventGroupArgs = {
  where: ClearEventGroupWhereUniqueInput;
};


export type ClearMutationDeleteEventRestrictionArgs = {
  where: ClearEventRestrictionWhereUniqueInput;
};


export type ClearMutationDeleteMailingListMemberArgs = {
  where: ClearMailingListMemberWhereUniqueInput;
};


export type ClearMutationDeleteManyEmailTemplateArgs = {
  where?: InputMaybe<ClearEmailTemplateWhereInput>;
};


export type ClearMutationDeleteManyEventArgs = {
  where?: InputMaybe<ClearEventWhereInput>;
};


export type ClearMutationDeleteManyEventGroupArgs = {
  where?: InputMaybe<ClearEventGroupWhereInput>;
};


export type ClearMutationDeleteManyEventRestrictionArgs = {
  where?: InputMaybe<ClearEventRestrictionWhereInput>;
};


export type ClearMutationDeleteManyMailingListMemberArgs = {
  where?: InputMaybe<ClearMailingListMemberWhereInput>;
};


export type ClearMutationDeleteManyPaymentArgs = {
  where?: InputMaybe<ClearPaymentWhereInput>;
};


export type ClearMutationDeleteManyPersonArgs = {
  where?: InputMaybe<ClearPersonWhereInput>;
};


export type ClearMutationDeleteManyPromoCodeArgs = {
  where?: InputMaybe<ClearPromoCodeWhereInput>;
};


export type ClearMutationDeleteManyScheduleItemArgs = {
  where?: InputMaybe<ClearScheduleItemWhereInput>;
};


export type ClearMutationDeleteManySponsorArgs = {
  where?: InputMaybe<ClearSponsorWhereInput>;
};


export type ClearMutationDeleteManyTicketArgs = {
  where?: InputMaybe<ClearTicketWhereInput>;
};


export type ClearMutationDeleteManyVenueArgs = {
  where?: InputMaybe<ClearVenueWhereInput>;
};


export type ClearMutationDeleteManyWebhookArgs = {
  where?: InputMaybe<ClearWebhookWhereInput>;
};


export type ClearMutationDeletePaymentArgs = {
  where: ClearPaymentWhereUniqueInput;
};


export type ClearMutationDeletePersonArgs = {
  where: ClearPersonWhereUniqueInput;
};


export type ClearMutationDeletePromoCodeArgs = {
  where: ClearPromoCodeWhereUniqueInput;
};


export type ClearMutationDeleteScheduleItemArgs = {
  where: ClearScheduleItemWhereUniqueInput;
};


export type ClearMutationDeleteSponsorArgs = {
  where: ClearSponsorWhereUniqueInput;
};


export type ClearMutationDeleteTicketArgs = {
  where: ClearTicketWhereUniqueInput;
};


export type ClearMutationDeleteVenueArgs = {
  where: ClearVenueWhereUniqueInput;
};


export type ClearMutationDeleteWebhookArgs = {
  where: ClearWebhookWhereUniqueInput;
};


export type ClearMutationFinalizePaymentArgs = {
  paymentIntentId: Scalars['String'];
  paymentProvider?: InputMaybe<ClearPaymentProvider>;
};


export type ClearMutationRegisterForEventArgs = {
  eventWhere: ClearEventWhereUniqueInput;
  guardianData?: InputMaybe<ClearPersonCreateInput>;
  paymentProvider?: InputMaybe<ClearPaymentProvider>;
  promoCode?: InputMaybe<Scalars['String']>;
  ticketData?: InputMaybe<ClearTicketCreateWithoutEventInput>;
  ticketsData?: InputMaybe<Array<ClearTicketCreateWithoutEventInput>>;
};


export type ClearMutationRequestEventScholarshipArgs = {
  eventWhere: ClearEventWhereUniqueInput;
  guardianData?: InputMaybe<ClearPersonCreateInput>;
  scholarshipReason: ClearScholarshipReason;
  scholarshipReasonOther?: InputMaybe<Scalars['String']>;
  ticketData?: InputMaybe<ClearTicketCreateWithoutEventInput>;
  ticketsData?: InputMaybe<Array<ClearTicketCreateWithoutEventInput>>;
};


export type ClearMutationSendInterestedEmailArgs = {
  body?: InputMaybe<Scalars['String']>;
  eventWhere: ClearEventWhereUniqueInput;
  subject?: InputMaybe<Scalars['String']>;
};


export type ClearMutationSendNotificationArgs = {
  emailBody?: InputMaybe<Scalars['String']>;
  emailSubject?: InputMaybe<Scalars['String']>;
  eventWhere: ClearEventWhereUniqueInput;
  guardian?: InputMaybe<Scalars['Boolean']>;
  smsBody?: InputMaybe<Scalars['String']>;
};


export type ClearMutationSendWaiverReminderArgs = {
  regenerate?: InputMaybe<Scalars['Boolean']>;
  where: ClearTicketWhereUniqueInput;
};


export type ClearMutationSetEmailTemplateMetadataArgs = {
  key: Scalars['String'];
  value: Scalars['String'];
  where: ClearEmailTemplateWhereUniqueInput;
};


export type ClearMutationSetEventGroupMetadataArgs = {
  key: Scalars['String'];
  value: Scalars['String'];
  where: ClearEventGroupWhereUniqueInput;
};


export type ClearMutationSetEventMetadataArgs = {
  key: Scalars['String'];
  value: Scalars['String'];
  where: ClearEventWhereUniqueInput;
};


export type ClearMutationSetEventRestrictionMetadataArgs = {
  key: Scalars['String'];
  value: Scalars['String'];
  where: ClearEventRestrictionWhereUniqueInput;
};


export type ClearMutationSetMailingListMemberMetadataArgs = {
  key: Scalars['String'];
  value: Scalars['String'];
  where: ClearMailingListMemberWhereUniqueInput;
};


export type ClearMutationSetPaymentMetadataArgs = {
  key: Scalars['String'];
  value: Scalars['String'];
  where: ClearPaymentWhereUniqueInput;
};


export type ClearMutationSetPersonMetadataArgs = {
  key: Scalars['String'];
  value: Scalars['String'];
  where: ClearPersonWhereUniqueInput;
};


export type ClearMutationSetPromoCodeMetadataArgs = {
  key: Scalars['String'];
  value: Scalars['String'];
  where: ClearPromoCodeWhereUniqueInput;
};


export type ClearMutationSetScheduleItemMetadataArgs = {
  key: Scalars['String'];
  value: Scalars['String'];
  where: ClearScheduleItemWhereUniqueInput;
};


export type ClearMutationSetSponsorMetadataArgs = {
  key: Scalars['String'];
  value: Scalars['String'];
  where: ClearSponsorWhereUniqueInput;
};


export type ClearMutationSetTicketMetadataArgs = {
  key: Scalars['String'];
  value: Scalars['String'];
  where: ClearTicketWhereUniqueInput;
};


export type ClearMutationSetVenueMetadataArgs = {
  key: Scalars['String'];
  value: Scalars['String'];
  where: ClearVenueWhereUniqueInput;
};


export type ClearMutationSubscribeToMailingListArgs = {
  email: Scalars['String'];
  where: ClearEventWhereUniqueInput;
};


export type ClearMutationUpdateEmailTemplateArgs = {
  data: ClearEmailTemplateUpdateInput;
  where: ClearEmailTemplateWhereUniqueInput;
};


export type ClearMutationUpdateEventArgs = {
  data: ClearEventUpdateInput;
  where: ClearEventWhereUniqueInput;
};


export type ClearMutationUpdateEventGroupArgs = {
  data: ClearEventGroupUpdateInput;
  where: ClearEventGroupWhereUniqueInput;
};


export type ClearMutationUpdateEventRestrictionArgs = {
  data: ClearEventRestrictionUpdateInput;
  where: ClearEventRestrictionWhereUniqueInput;
};


export type ClearMutationUpdateMailingListMemberArgs = {
  data: ClearMailingListMemberUpdateInput;
  where: ClearMailingListMemberWhereUniqueInput;
};


export type ClearMutationUpdateManyEmailTemplateArgs = {
  data: ClearEmailTemplateUpdateManyMutationInput;
  where?: InputMaybe<ClearEmailTemplateWhereInput>;
};


export type ClearMutationUpdateManyEventArgs = {
  data: ClearEventUpdateManyMutationInput;
  where?: InputMaybe<ClearEventWhereInput>;
};


export type ClearMutationUpdateManyEventGroupArgs = {
  data: ClearEventGroupUpdateManyMutationInput;
  where?: InputMaybe<ClearEventGroupWhereInput>;
};


export type ClearMutationUpdateManyEventRestrictionArgs = {
  data: ClearEventRestrictionUpdateManyMutationInput;
  where?: InputMaybe<ClearEventRestrictionWhereInput>;
};


export type ClearMutationUpdateManyMailingListMemberArgs = {
  data: ClearMailingListMemberUpdateManyMutationInput;
  where?: InputMaybe<ClearMailingListMemberWhereInput>;
};


export type ClearMutationUpdateManyPaymentArgs = {
  data: ClearPaymentUpdateManyMutationInput;
  where?: InputMaybe<ClearPaymentWhereInput>;
};


export type ClearMutationUpdateManyPersonArgs = {
  data: ClearPersonUpdateManyMutationInput;
  where?: InputMaybe<ClearPersonWhereInput>;
};


export type ClearMutationUpdateManyPromoCodeArgs = {
  data: ClearPromoCodeUpdateManyMutationInput;
  where?: InputMaybe<ClearPromoCodeWhereInput>;
};


export type ClearMutationUpdateManyScheduleItemArgs = {
  data: ClearScheduleItemUpdateManyMutationInput;
  where?: InputMaybe<ClearScheduleItemWhereInput>;
};


export type ClearMutationUpdateManySponsorArgs = {
  data: ClearSponsorUpdateManyMutationInput;
  where?: InputMaybe<ClearSponsorWhereInput>;
};


export type ClearMutationUpdateManyTicketArgs = {
  data: ClearTicketUpdateManyMutationInput;
  where?: InputMaybe<ClearTicketWhereInput>;
};


export type ClearMutationUpdateManyVenueArgs = {
  data: ClearVenueUpdateManyMutationInput;
  where?: InputMaybe<ClearVenueWhereInput>;
};


export type ClearMutationUpdateManyWebhookArgs = {
  data: ClearWebhookUpdateManyMutationInput;
  where?: InputMaybe<ClearWebhookWhereInput>;
};


export type ClearMutationUpdatePaymentArgs = {
  data: ClearPaymentUpdateInput;
  where: ClearPaymentWhereUniqueInput;
};


export type ClearMutationUpdatePersonArgs = {
  data: ClearPersonUpdateInput;
  where: ClearPersonWhereUniqueInput;
};


export type ClearMutationUpdatePromoCodeArgs = {
  data: ClearPromoCodeUpdateInput;
  where: ClearPromoCodeWhereUniqueInput;
};


export type ClearMutationUpdateScheduleItemArgs = {
  data: ClearScheduleItemUpdateInput;
  where: ClearScheduleItemWhereUniqueInput;
};


export type ClearMutationUpdateSponsorArgs = {
  data: ClearSponsorUpdateInput;
  where: ClearSponsorWhereUniqueInput;
};


export type ClearMutationUpdateTicketArgs = {
  data: ClearTicketUpdateInput;
  where: ClearTicketWhereUniqueInput;
};


export type ClearMutationUpdateVenueArgs = {
  data: ClearVenueUpdateInput;
  where: ClearVenueWhereUniqueInput;
};


export type ClearMutationUpdateWebhookArgs = {
  data: ClearWebhookUpdateInput;
  where: ClearWebhookWhereUniqueInput;
};


export type ClearMutationUploadDarkSponsorLogoArgs = {
  upload: Scalars['Upload'];
  where: ClearSponsorWhereUniqueInput;
};


export type ClearMutationUploadEventRestrictionIconArgs = {
  upload: Scalars['Upload'];
  where: ClearEventRestrictionWhereUniqueInput;
};


export type ClearMutationUploadSponsorLogoArgs = {
  upload: Scalars['Upload'];
  where: ClearSponsorWhereUniqueInput;
};


export type ClearMutationUpsertEmailTemplateArgs = {
  create: ClearEmailTemplateCreateInput;
  update: ClearEmailTemplateUpdateInput;
  where: ClearEmailTemplateWhereUniqueInput;
};


export type ClearMutationUpsertEventArgs = {
  create: ClearEventCreateInput;
  update: ClearEventUpdateInput;
  where: ClearEventWhereUniqueInput;
};


export type ClearMutationUpsertEventGroupArgs = {
  create: ClearEventGroupCreateInput;
  update: ClearEventGroupUpdateInput;
  where: ClearEventGroupWhereUniqueInput;
};


export type ClearMutationUpsertEventRestrictionArgs = {
  create: ClearEventRestrictionCreateInput;
  update: ClearEventRestrictionUpdateInput;
  where: ClearEventRestrictionWhereUniqueInput;
};


export type ClearMutationUpsertMailingListMemberArgs = {
  create: ClearMailingListMemberCreateInput;
  update: ClearMailingListMemberUpdateInput;
  where: ClearMailingListMemberWhereUniqueInput;
};


export type ClearMutationUpsertPaymentArgs = {
  create: ClearPaymentCreateInput;
  update: ClearPaymentUpdateInput;
  where: ClearPaymentWhereUniqueInput;
};


export type ClearMutationUpsertPersonArgs = {
  create: ClearPersonCreateInput;
  update: ClearPersonUpdateInput;
  where: ClearPersonWhereUniqueInput;
};


export type ClearMutationUpsertPromoCodeArgs = {
  create: ClearPromoCodeCreateInput;
  update: ClearPromoCodeUpdateInput;
  where: ClearPromoCodeWhereUniqueInput;
};


export type ClearMutationUpsertScheduleItemArgs = {
  create: ClearScheduleItemCreateInput;
  update: ClearScheduleItemUpdateInput;
  where: ClearScheduleItemWhereUniqueInput;
};


export type ClearMutationUpsertSponsorArgs = {
  create: ClearSponsorCreateInput;
  update: ClearSponsorUpdateInput;
  where: ClearSponsorWhereUniqueInput;
};


export type ClearMutationUpsertTicketArgs = {
  create: ClearTicketCreateInput;
  update: ClearTicketUpdateInput;
  where: ClearTicketWhereUniqueInput;
};


export type ClearMutationUpsertVenueArgs = {
  create: ClearVenueCreateInput;
  update: ClearVenueUpdateInput;
  where: ClearVenueWhereUniqueInput;
};


export type ClearMutationUpsertWebhookArgs = {
  create: ClearWebhookCreateInput;
  update: ClearWebhookUpdateInput;
  where: ClearWebhookWhereUniqueInput;
};


export type ClearMutationWithdrawFailedPaymentArgs = {
  paymentIntentId: Scalars['String'];
  paymentProvider?: InputMaybe<ClearPaymentProvider>;
};

export type ClearNestedBoolFilter = {
  equals?: InputMaybe<Scalars['Boolean']>;
  not?: InputMaybe<ClearNestedBoolFilter>;
};

export type ClearNestedBoolWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedBoolFilter>;
  _min?: InputMaybe<ClearNestedBoolFilter>;
  equals?: InputMaybe<Scalars['Boolean']>;
  not?: InputMaybe<ClearNestedBoolWithAggregatesFilter>;
};

export type ClearNestedDateTimeFilter = {
  equals?: InputMaybe<Scalars['ClearDateTime']>;
  gt?: InputMaybe<Scalars['ClearDateTime']>;
  gte?: InputMaybe<Scalars['ClearDateTime']>;
  in?: InputMaybe<Array<Scalars['ClearDateTime']>>;
  lt?: InputMaybe<Scalars['ClearDateTime']>;
  lte?: InputMaybe<Scalars['ClearDateTime']>;
  not?: InputMaybe<ClearNestedDateTimeFilter>;
  notIn?: InputMaybe<Array<Scalars['ClearDateTime']>>;
};

export type ClearNestedDateTimeNullableFilter = {
  equals?: InputMaybe<Scalars['ClearDateTime']>;
  gt?: InputMaybe<Scalars['ClearDateTime']>;
  gte?: InputMaybe<Scalars['ClearDateTime']>;
  in?: InputMaybe<Array<Scalars['ClearDateTime']>>;
  lt?: InputMaybe<Scalars['ClearDateTime']>;
  lte?: InputMaybe<Scalars['ClearDateTime']>;
  not?: InputMaybe<ClearNestedDateTimeNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['ClearDateTime']>>;
};

export type ClearNestedDateTimeNullableWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntNullableFilter>;
  _max?: InputMaybe<ClearNestedDateTimeNullableFilter>;
  _min?: InputMaybe<ClearNestedDateTimeNullableFilter>;
  equals?: InputMaybe<Scalars['ClearDateTime']>;
  gt?: InputMaybe<Scalars['ClearDateTime']>;
  gte?: InputMaybe<Scalars['ClearDateTime']>;
  in?: InputMaybe<Array<Scalars['ClearDateTime']>>;
  lt?: InputMaybe<Scalars['ClearDateTime']>;
  lte?: InputMaybe<Scalars['ClearDateTime']>;
  not?: InputMaybe<ClearNestedDateTimeNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['ClearDateTime']>>;
};

export type ClearNestedDateTimeWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedDateTimeFilter>;
  _min?: InputMaybe<ClearNestedDateTimeFilter>;
  equals?: InputMaybe<Scalars['ClearDateTime']>;
  gt?: InputMaybe<Scalars['ClearDateTime']>;
  gte?: InputMaybe<Scalars['ClearDateTime']>;
  in?: InputMaybe<Array<Scalars['ClearDateTime']>>;
  lt?: InputMaybe<Scalars['ClearDateTime']>;
  lte?: InputMaybe<Scalars['ClearDateTime']>;
  not?: InputMaybe<ClearNestedDateTimeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['ClearDateTime']>>;
};

export type ClearNestedEnumDiscountTypeFilter = {
  equals?: InputMaybe<ClearDiscountType>;
  in?: InputMaybe<Array<ClearDiscountType>>;
  not?: InputMaybe<ClearNestedEnumDiscountTypeFilter>;
  notIn?: InputMaybe<Array<ClearDiscountType>>;
};

export type ClearNestedEnumDiscountTypeWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedEnumDiscountTypeFilter>;
  _min?: InputMaybe<ClearNestedEnumDiscountTypeFilter>;
  equals?: InputMaybe<ClearDiscountType>;
  in?: InputMaybe<Array<ClearDiscountType>>;
  not?: InputMaybe<ClearNestedEnumDiscountTypeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<ClearDiscountType>>;
};

export type ClearNestedEnumEmailWhenFromFilter = {
  equals?: InputMaybe<ClearEmailWhenFrom>;
  in?: InputMaybe<Array<ClearEmailWhenFrom>>;
  not?: InputMaybe<ClearNestedEnumEmailWhenFromFilter>;
  notIn?: InputMaybe<Array<ClearEmailWhenFrom>>;
};

export type ClearNestedEnumEmailWhenFromWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedEnumEmailWhenFromFilter>;
  _min?: InputMaybe<ClearNestedEnumEmailWhenFromFilter>;
  equals?: InputMaybe<ClearEmailWhenFrom>;
  in?: InputMaybe<Array<ClearEmailWhenFrom>>;
  not?: InputMaybe<ClearNestedEnumEmailWhenFromWithAggregatesFilter>;
  notIn?: InputMaybe<Array<ClearEmailWhenFrom>>;
};

export type ClearNestedEnumTicketTypeFilter = {
  equals?: InputMaybe<ClearTicketType>;
  in?: InputMaybe<Array<ClearTicketType>>;
  not?: InputMaybe<ClearNestedEnumTicketTypeFilter>;
  notIn?: InputMaybe<Array<ClearTicketType>>;
};

export type ClearNestedEnumTicketTypeWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedEnumTicketTypeFilter>;
  _min?: InputMaybe<ClearNestedEnumTicketTypeFilter>;
  equals?: InputMaybe<ClearTicketType>;
  in?: InputMaybe<Array<ClearTicketType>>;
  not?: InputMaybe<ClearNestedEnumTicketTypeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<ClearTicketType>>;
};

export type ClearNestedEnumWebhookServiceFilter = {
  equals?: InputMaybe<ClearWebhookService>;
  in?: InputMaybe<Array<ClearWebhookService>>;
  not?: InputMaybe<ClearNestedEnumWebhookServiceFilter>;
  notIn?: InputMaybe<Array<ClearWebhookService>>;
};

export type ClearNestedEnumWebhookServiceWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedEnumWebhookServiceFilter>;
  _min?: InputMaybe<ClearNestedEnumWebhookServiceFilter>;
  equals?: InputMaybe<ClearWebhookService>;
  in?: InputMaybe<Array<ClearWebhookService>>;
  not?: InputMaybe<ClearNestedEnumWebhookServiceWithAggregatesFilter>;
  notIn?: InputMaybe<Array<ClearWebhookService>>;
};

export type ClearNestedEnumWebhookTypeFilter = {
  equals?: InputMaybe<ClearWebhookType>;
  in?: InputMaybe<Array<ClearWebhookType>>;
  not?: InputMaybe<ClearNestedEnumWebhookTypeFilter>;
  notIn?: InputMaybe<Array<ClearWebhookType>>;
};

export type ClearNestedEnumWebhookTypeWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedEnumWebhookTypeFilter>;
  _min?: InputMaybe<ClearNestedEnumWebhookTypeFilter>;
  equals?: InputMaybe<ClearWebhookType>;
  in?: InputMaybe<Array<ClearWebhookType>>;
  not?: InputMaybe<ClearNestedEnumWebhookTypeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<ClearWebhookType>>;
};

export type ClearNestedFloatFilter = {
  equals?: InputMaybe<Scalars['Float']>;
  gt?: InputMaybe<Scalars['Float']>;
  gte?: InputMaybe<Scalars['Float']>;
  in?: InputMaybe<Array<Scalars['Float']>>;
  lt?: InputMaybe<Scalars['Float']>;
  lte?: InputMaybe<Scalars['Float']>;
  not?: InputMaybe<ClearNestedFloatFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']>>;
};

export type ClearNestedFloatNullableFilter = {
  equals?: InputMaybe<Scalars['Float']>;
  gt?: InputMaybe<Scalars['Float']>;
  gte?: InputMaybe<Scalars['Float']>;
  in?: InputMaybe<Array<Scalars['Float']>>;
  lt?: InputMaybe<Scalars['Float']>;
  lte?: InputMaybe<Scalars['Float']>;
  not?: InputMaybe<ClearNestedFloatNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']>>;
};

export type ClearNestedFloatNullableWithAggregatesFilter = {
  _avg?: InputMaybe<ClearNestedFloatNullableFilter>;
  _count?: InputMaybe<ClearNestedIntNullableFilter>;
  _max?: InputMaybe<ClearNestedFloatNullableFilter>;
  _min?: InputMaybe<ClearNestedFloatNullableFilter>;
  _sum?: InputMaybe<ClearNestedFloatNullableFilter>;
  equals?: InputMaybe<Scalars['Float']>;
  gt?: InputMaybe<Scalars['Float']>;
  gte?: InputMaybe<Scalars['Float']>;
  in?: InputMaybe<Array<Scalars['Float']>>;
  lt?: InputMaybe<Scalars['Float']>;
  lte?: InputMaybe<Scalars['Float']>;
  not?: InputMaybe<ClearNestedFloatNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']>>;
};

export type ClearNestedFloatWithAggregatesFilter = {
  _avg?: InputMaybe<ClearNestedFloatFilter>;
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedFloatFilter>;
  _min?: InputMaybe<ClearNestedFloatFilter>;
  _sum?: InputMaybe<ClearNestedFloatFilter>;
  equals?: InputMaybe<Scalars['Float']>;
  gt?: InputMaybe<Scalars['Float']>;
  gte?: InputMaybe<Scalars['Float']>;
  in?: InputMaybe<Array<Scalars['Float']>>;
  lt?: InputMaybe<Scalars['Float']>;
  lte?: InputMaybe<Scalars['Float']>;
  not?: InputMaybe<ClearNestedFloatWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']>>;
};

export type ClearNestedIntFilter = {
  equals?: InputMaybe<Scalars['Int']>;
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  in?: InputMaybe<Array<Scalars['Int']>>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
  not?: InputMaybe<ClearNestedIntFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']>>;
};

export type ClearNestedIntNullableFilter = {
  equals?: InputMaybe<Scalars['Int']>;
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  in?: InputMaybe<Array<Scalars['Int']>>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
  not?: InputMaybe<ClearNestedIntNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']>>;
};

export type ClearNestedIntNullableWithAggregatesFilter = {
  _avg?: InputMaybe<ClearNestedFloatNullableFilter>;
  _count?: InputMaybe<ClearNestedIntNullableFilter>;
  _max?: InputMaybe<ClearNestedIntNullableFilter>;
  _min?: InputMaybe<ClearNestedIntNullableFilter>;
  _sum?: InputMaybe<ClearNestedIntNullableFilter>;
  equals?: InputMaybe<Scalars['Int']>;
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  in?: InputMaybe<Array<Scalars['Int']>>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
  not?: InputMaybe<ClearNestedIntNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']>>;
};

export type ClearNestedIntWithAggregatesFilter = {
  _avg?: InputMaybe<ClearNestedFloatFilter>;
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedIntFilter>;
  _min?: InputMaybe<ClearNestedIntFilter>;
  _sum?: InputMaybe<ClearNestedIntFilter>;
  equals?: InputMaybe<Scalars['Int']>;
  gt?: InputMaybe<Scalars['Int']>;
  gte?: InputMaybe<Scalars['Int']>;
  in?: InputMaybe<Array<Scalars['Int']>>;
  lt?: InputMaybe<Scalars['Int']>;
  lte?: InputMaybe<Scalars['Int']>;
  not?: InputMaybe<ClearNestedIntWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']>>;
};

export type ClearNestedJsonNullableFilter = {
  equals?: InputMaybe<Scalars['ClearJSON']>;
  not?: InputMaybe<Scalars['ClearJSON']>;
};

export type ClearNestedStringFilter = {
  contains?: InputMaybe<Scalars['String']>;
  endsWith?: InputMaybe<Scalars['String']>;
  equals?: InputMaybe<Scalars['String']>;
  gt?: InputMaybe<Scalars['String']>;
  gte?: InputMaybe<Scalars['String']>;
  in?: InputMaybe<Array<Scalars['String']>>;
  lt?: InputMaybe<Scalars['String']>;
  lte?: InputMaybe<Scalars['String']>;
  not?: InputMaybe<ClearNestedStringFilter>;
  notIn?: InputMaybe<Array<Scalars['String']>>;
  startsWith?: InputMaybe<Scalars['String']>;
};

export type ClearNestedStringNullableFilter = {
  contains?: InputMaybe<Scalars['String']>;
  endsWith?: InputMaybe<Scalars['String']>;
  equals?: InputMaybe<Scalars['String']>;
  gt?: InputMaybe<Scalars['String']>;
  gte?: InputMaybe<Scalars['String']>;
  in?: InputMaybe<Array<Scalars['String']>>;
  lt?: InputMaybe<Scalars['String']>;
  lte?: InputMaybe<Scalars['String']>;
  not?: InputMaybe<ClearNestedStringNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['String']>>;
  startsWith?: InputMaybe<Scalars['String']>;
};

export type ClearNestedStringNullableWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntNullableFilter>;
  _max?: InputMaybe<ClearNestedStringNullableFilter>;
  _min?: InputMaybe<ClearNestedStringNullableFilter>;
  contains?: InputMaybe<Scalars['String']>;
  endsWith?: InputMaybe<Scalars['String']>;
  equals?: InputMaybe<Scalars['String']>;
  gt?: InputMaybe<Scalars['String']>;
  gte?: InputMaybe<Scalars['String']>;
  in?: InputMaybe<Array<Scalars['String']>>;
  lt?: InputMaybe<Scalars['String']>;
  lte?: InputMaybe<Scalars['String']>;
  not?: InputMaybe<ClearNestedStringNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']>>;
  startsWith?: InputMaybe<Scalars['String']>;
};

export type ClearNestedStringWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedStringFilter>;
  _min?: InputMaybe<ClearNestedStringFilter>;
  contains?: InputMaybe<Scalars['String']>;
  endsWith?: InputMaybe<Scalars['String']>;
  equals?: InputMaybe<Scalars['String']>;
  gt?: InputMaybe<Scalars['String']>;
  gte?: InputMaybe<Scalars['String']>;
  in?: InputMaybe<Array<Scalars['String']>>;
  lt?: InputMaybe<Scalars['String']>;
  lte?: InputMaybe<Scalars['String']>;
  not?: InputMaybe<ClearNestedStringWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']>>;
  startsWith?: InputMaybe<Scalars['String']>;
};

export type ClearNullableDateTimeFieldUpdateOperationsInput = {
  set?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearNullableFloatFieldUpdateOperationsInput = {
  decrement?: InputMaybe<Scalars['Float']>;
  divide?: InputMaybe<Scalars['Float']>;
  increment?: InputMaybe<Scalars['Float']>;
  multiply?: InputMaybe<Scalars['Float']>;
  set?: InputMaybe<Scalars['Float']>;
};

export type ClearNullableIntFieldUpdateOperationsInput = {
  decrement?: InputMaybe<Scalars['Int']>;
  divide?: InputMaybe<Scalars['Int']>;
  increment?: InputMaybe<Scalars['Int']>;
  multiply?: InputMaybe<Scalars['Int']>;
  set?: InputMaybe<Scalars['Int']>;
};

export type ClearNullableStringFieldUpdateOperationsInput = {
  set?: InputMaybe<Scalars['String']>;
};

export type ClearPayment = {
  __typename?: 'ClearPayment';
  _count?: Maybe<ClearPaymentCount>;
  complete: Scalars['Boolean'];
  createdAt: Scalars['ClearDateTime'];
  getMetadata?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  metadata?: Maybe<Scalars['ClearJSON']>;
  paymentProvider: Scalars['String'];
  stripePaymentIntentId: Scalars['String'];
  tickets: Array<ClearTicket>;
  updatedAt: Scalars['ClearDateTime'];
};


export type ClearPaymentGetMetadataArgs = {
  key: Scalars['String'];
};


export type ClearPaymentTicketsArgs = {
  cursor?: InputMaybe<ClearTicketWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearTicketScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearTicketOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearTicketWhereInput>;
};

export type ClearPaymentCount = {
  __typename?: 'ClearPaymentCount';
  tickets: Scalars['Int'];
};

export type ClearPaymentCountAggregate = {
  __typename?: 'ClearPaymentCountAggregate';
  _all: Scalars['Int'];
  complete: Scalars['Int'];
  createdAt: Scalars['Int'];
  id: Scalars['Int'];
  metadata: Scalars['Int'];
  paymentProvider: Scalars['Int'];
  stripePaymentIntentId: Scalars['Int'];
  updatedAt: Scalars['Int'];
};

export type ClearPaymentCountOrderByAggregateInput = {
  complete?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  paymentProvider?: InputMaybe<ClearSortOrder>;
  stripePaymentIntentId?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearPaymentCreateInput = {
  complete?: InputMaybe<Scalars['Boolean']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  paymentProvider?: InputMaybe<Scalars['String']>;
  stripePaymentIntentId: Scalars['String'];
  tickets?: InputMaybe<ClearTicketCreateNestedManyWithoutPaymentInput>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearPaymentCreateManyInput = {
  complete?: InputMaybe<Scalars['Boolean']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  paymentProvider?: InputMaybe<Scalars['String']>;
  stripePaymentIntentId: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearPaymentCreateNestedOneWithoutTicketsInput = {
  connect?: InputMaybe<ClearPaymentWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearPaymentCreateOrConnectWithoutTicketsInput>;
  create?: InputMaybe<ClearPaymentCreateWithoutTicketsInput>;
};

export type ClearPaymentCreateOrConnectWithoutTicketsInput = {
  create: ClearPaymentCreateWithoutTicketsInput;
  where: ClearPaymentWhereUniqueInput;
};

export type ClearPaymentCreateWithoutTicketsInput = {
  complete?: InputMaybe<Scalars['Boolean']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  paymentProvider?: InputMaybe<Scalars['String']>;
  stripePaymentIntentId: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearPaymentGroupBy = {
  __typename?: 'ClearPaymentGroupBy';
  _count?: Maybe<ClearPaymentCountAggregate>;
  _max?: Maybe<ClearPaymentMaxAggregate>;
  _min?: Maybe<ClearPaymentMinAggregate>;
  complete: Scalars['Boolean'];
  createdAt: Scalars['ClearDateTime'];
  id: Scalars['String'];
  metadata?: Maybe<Scalars['ClearJSON']>;
  paymentProvider: Scalars['String'];
  stripePaymentIntentId: Scalars['String'];
  updatedAt: Scalars['ClearDateTime'];
};

export type ClearPaymentMaxAggregate = {
  __typename?: 'ClearPaymentMaxAggregate';
  complete?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  id?: Maybe<Scalars['String']>;
  paymentProvider?: Maybe<Scalars['String']>;
  stripePaymentIntentId?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
};

export type ClearPaymentMaxOrderByAggregateInput = {
  complete?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  paymentProvider?: InputMaybe<ClearSortOrder>;
  stripePaymentIntentId?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearPaymentMinAggregate = {
  __typename?: 'ClearPaymentMinAggregate';
  complete?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  id?: Maybe<Scalars['String']>;
  paymentProvider?: Maybe<Scalars['String']>;
  stripePaymentIntentId?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
};

export type ClearPaymentMinOrderByAggregateInput = {
  complete?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  paymentProvider?: InputMaybe<ClearSortOrder>;
  stripePaymentIntentId?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearPaymentOrderByWithAggregationInput = {
  _count?: InputMaybe<ClearPaymentCountOrderByAggregateInput>;
  _max?: InputMaybe<ClearPaymentMaxOrderByAggregateInput>;
  _min?: InputMaybe<ClearPaymentMinOrderByAggregateInput>;
  complete?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  paymentProvider?: InputMaybe<ClearSortOrder>;
  stripePaymentIntentId?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearPaymentOrderByWithRelationInput = {
  complete?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  paymentProvider?: InputMaybe<ClearSortOrder>;
  stripePaymentIntentId?: InputMaybe<ClearSortOrder>;
  tickets?: InputMaybe<ClearTicketOrderByRelationAggregateInput>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export enum ClearPaymentProvider {
  Razorpay = 'razorpay',
  Stripe = 'stripe'
}

export type ClearPaymentRelationFilter = {
  is?: InputMaybe<ClearPaymentWhereInput>;
  isNot?: InputMaybe<ClearPaymentWhereInput>;
};

export enum ClearPaymentScalarFieldEnum {
  Complete = 'complete',
  CreatedAt = 'createdAt',
  Id = 'id',
  Metadata = 'metadata',
  PaymentProvider = 'paymentProvider',
  StripePaymentIntentId = 'stripePaymentIntentId',
  UpdatedAt = 'updatedAt'
}

export type ClearPaymentScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ClearPaymentScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ClearPaymentScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ClearPaymentScalarWhereWithAggregatesInput>>;
  complete?: InputMaybe<ClearBoolWithAggregatesFilter>;
  createdAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  id?: InputMaybe<ClearStringWithAggregatesFilter>;
  paymentProvider?: InputMaybe<ClearStringWithAggregatesFilter>;
  stripePaymentIntentId?: InputMaybe<ClearStringWithAggregatesFilter>;
  updatedAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
};

export type ClearPaymentUpdateInput = {
  complete?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  paymentProvider?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  stripePaymentIntentId?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  tickets?: InputMaybe<ClearTicketUpdateManyWithoutPaymentInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
};

export type ClearPaymentUpdateManyMutationInput = {
  complete?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  paymentProvider?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  stripePaymentIntentId?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
};

export type ClearPaymentUpdateOneWithoutTicketsInput = {
  connect?: InputMaybe<ClearPaymentWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearPaymentCreateOrConnectWithoutTicketsInput>;
  create?: InputMaybe<ClearPaymentCreateWithoutTicketsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<ClearPaymentUpdateWithoutTicketsInput>;
  upsert?: InputMaybe<ClearPaymentUpsertWithoutTicketsInput>;
};

export type ClearPaymentUpdateWithoutTicketsInput = {
  complete?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  paymentProvider?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  stripePaymentIntentId?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
};

export type ClearPaymentUpsertWithoutTicketsInput = {
  create: ClearPaymentCreateWithoutTicketsInput;
  update: ClearPaymentUpdateWithoutTicketsInput;
};

export type ClearPaymentWhereInput = {
  AND?: InputMaybe<Array<ClearPaymentWhereInput>>;
  NOT?: InputMaybe<Array<ClearPaymentWhereInput>>;
  OR?: InputMaybe<Array<ClearPaymentWhereInput>>;
  complete?: InputMaybe<ClearBoolFilter>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  id?: InputMaybe<ClearStringFilter>;
  paymentProvider?: InputMaybe<ClearStringFilter>;
  stripePaymentIntentId?: InputMaybe<ClearStringFilter>;
  tickets?: InputMaybe<ClearTicketListRelationFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
};

export type ClearPaymentWhereUniqueInput = {
  id?: InputMaybe<Scalars['String']>;
};

export type ClearPerson = {
  __typename?: 'ClearPerson';
  Ticket: Array<ClearTicket>;
  _count?: Maybe<ClearPersonCount>;
  age?: Maybe<Scalars['Int']>;
  createdAt: Scalars['ClearDateTime'];
  email?: Maybe<Scalars['String']>;
  firstName: Scalars['String'];
  getMetadata?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  lastName: Scalars['String'];
  locale: Scalars['String'];
  metadata?: Maybe<Scalars['ClearJSON']>;
  phone?: Maybe<Scalars['String']>;
  pronouns?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ClearDateTime'];
  username?: Maybe<Scalars['String']>;
  whatsApp?: Maybe<Scalars['String']>;
};


export type ClearPersonTicketArgs = {
  cursor?: InputMaybe<ClearTicketWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearTicketScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearTicketOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearTicketWhereInput>;
};


export type ClearPersonGetMetadataArgs = {
  key: Scalars['String'];
};

export type ClearPersonAvgAggregate = {
  __typename?: 'ClearPersonAvgAggregate';
  age?: Maybe<Scalars['Float']>;
};

export type ClearPersonAvgOrderByAggregateInput = {
  age?: InputMaybe<ClearSortOrder>;
};

export type ClearPersonCount = {
  __typename?: 'ClearPersonCount';
  Ticket: Scalars['Int'];
};

export type ClearPersonCountAggregate = {
  __typename?: 'ClearPersonCountAggregate';
  _all: Scalars['Int'];
  age: Scalars['Int'];
  createdAt: Scalars['Int'];
  email: Scalars['Int'];
  firstName: Scalars['Int'];
  id: Scalars['Int'];
  lastName: Scalars['Int'];
  locale: Scalars['Int'];
  metadata: Scalars['Int'];
  phone: Scalars['Int'];
  pronouns: Scalars['Int'];
  updatedAt: Scalars['Int'];
  username: Scalars['Int'];
  whatsApp: Scalars['Int'];
};

export type ClearPersonCountOrderByAggregateInput = {
  age?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  email?: InputMaybe<ClearSortOrder>;
  firstName?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  lastName?: InputMaybe<ClearSortOrder>;
  locale?: InputMaybe<ClearSortOrder>;
  phone?: InputMaybe<ClearSortOrder>;
  pronouns?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  username?: InputMaybe<ClearSortOrder>;
  whatsApp?: InputMaybe<ClearSortOrder>;
};

export type ClearPersonCreateInput = {
  Ticket?: InputMaybe<ClearTicketCreateNestedManyWithoutGuardianInput>;
  age?: InputMaybe<Scalars['Int']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  email?: InputMaybe<Scalars['String']>;
  firstName: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  lastName: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  phone?: InputMaybe<Scalars['String']>;
  pronouns?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  username?: InputMaybe<Scalars['String']>;
  whatsApp?: InputMaybe<Scalars['String']>;
};

export type ClearPersonCreateManyInput = {
  age?: InputMaybe<Scalars['Int']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  email?: InputMaybe<Scalars['String']>;
  firstName: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  lastName: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  phone?: InputMaybe<Scalars['String']>;
  pronouns?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  username?: InputMaybe<Scalars['String']>;
  whatsApp?: InputMaybe<Scalars['String']>;
};

export type ClearPersonCreateNestedOneWithoutTicketInput = {
  connect?: InputMaybe<ClearPersonWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearPersonCreateOrConnectWithoutTicketInput>;
  create?: InputMaybe<ClearPersonCreateWithoutTicketInput>;
};

export type ClearPersonCreateOrConnectWithoutTicketInput = {
  create: ClearPersonCreateWithoutTicketInput;
  where: ClearPersonWhereUniqueInput;
};

export type ClearPersonCreateWithoutTicketInput = {
  age?: InputMaybe<Scalars['Int']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  email?: InputMaybe<Scalars['String']>;
  firstName: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  lastName: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  phone?: InputMaybe<Scalars['String']>;
  pronouns?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  username?: InputMaybe<Scalars['String']>;
  whatsApp?: InputMaybe<Scalars['String']>;
};

export type ClearPersonGroupBy = {
  __typename?: 'ClearPersonGroupBy';
  _avg?: Maybe<ClearPersonAvgAggregate>;
  _count?: Maybe<ClearPersonCountAggregate>;
  _max?: Maybe<ClearPersonMaxAggregate>;
  _min?: Maybe<ClearPersonMinAggregate>;
  _sum?: Maybe<ClearPersonSumAggregate>;
  age?: Maybe<Scalars['Int']>;
  createdAt: Scalars['ClearDateTime'];
  email?: Maybe<Scalars['String']>;
  firstName: Scalars['String'];
  id: Scalars['String'];
  lastName: Scalars['String'];
  locale: Scalars['String'];
  metadata?: Maybe<Scalars['ClearJSON']>;
  phone?: Maybe<Scalars['String']>;
  pronouns?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ClearDateTime'];
  username?: Maybe<Scalars['String']>;
  whatsApp?: Maybe<Scalars['String']>;
};

export type ClearPersonMaxAggregate = {
  __typename?: 'ClearPersonMaxAggregate';
  age?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  locale?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  pronouns?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
  username?: Maybe<Scalars['String']>;
  whatsApp?: Maybe<Scalars['String']>;
};

export type ClearPersonMaxOrderByAggregateInput = {
  age?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  email?: InputMaybe<ClearSortOrder>;
  firstName?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  lastName?: InputMaybe<ClearSortOrder>;
  locale?: InputMaybe<ClearSortOrder>;
  phone?: InputMaybe<ClearSortOrder>;
  pronouns?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  username?: InputMaybe<ClearSortOrder>;
  whatsApp?: InputMaybe<ClearSortOrder>;
};

export type ClearPersonMinAggregate = {
  __typename?: 'ClearPersonMinAggregate';
  age?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  locale?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  pronouns?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
  username?: Maybe<Scalars['String']>;
  whatsApp?: Maybe<Scalars['String']>;
};

export type ClearPersonMinOrderByAggregateInput = {
  age?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  email?: InputMaybe<ClearSortOrder>;
  firstName?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  lastName?: InputMaybe<ClearSortOrder>;
  locale?: InputMaybe<ClearSortOrder>;
  phone?: InputMaybe<ClearSortOrder>;
  pronouns?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  username?: InputMaybe<ClearSortOrder>;
  whatsApp?: InputMaybe<ClearSortOrder>;
};

export type ClearPersonOrderByWithAggregationInput = {
  _avg?: InputMaybe<ClearPersonAvgOrderByAggregateInput>;
  _count?: InputMaybe<ClearPersonCountOrderByAggregateInput>;
  _max?: InputMaybe<ClearPersonMaxOrderByAggregateInput>;
  _min?: InputMaybe<ClearPersonMinOrderByAggregateInput>;
  _sum?: InputMaybe<ClearPersonSumOrderByAggregateInput>;
  age?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  email?: InputMaybe<ClearSortOrder>;
  firstName?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  lastName?: InputMaybe<ClearSortOrder>;
  locale?: InputMaybe<ClearSortOrder>;
  phone?: InputMaybe<ClearSortOrder>;
  pronouns?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  username?: InputMaybe<ClearSortOrder>;
  whatsApp?: InputMaybe<ClearSortOrder>;
};

export type ClearPersonOrderByWithRelationInput = {
  Ticket?: InputMaybe<ClearTicketOrderByRelationAggregateInput>;
  age?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  email?: InputMaybe<ClearSortOrder>;
  firstName?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  lastName?: InputMaybe<ClearSortOrder>;
  locale?: InputMaybe<ClearSortOrder>;
  phone?: InputMaybe<ClearSortOrder>;
  pronouns?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  username?: InputMaybe<ClearSortOrder>;
  whatsApp?: InputMaybe<ClearSortOrder>;
};

export type ClearPersonRelationFilter = {
  is?: InputMaybe<ClearPersonWhereInput>;
  isNot?: InputMaybe<ClearPersonWhereInput>;
};

export enum ClearPersonScalarFieldEnum {
  Age = 'age',
  CreatedAt = 'createdAt',
  Email = 'email',
  FirstName = 'firstName',
  Id = 'id',
  LastName = 'lastName',
  Locale = 'locale',
  Metadata = 'metadata',
  Phone = 'phone',
  Pronouns = 'pronouns',
  UpdatedAt = 'updatedAt',
  Username = 'username',
  WhatsApp = 'whatsApp'
}

export type ClearPersonScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ClearPersonScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ClearPersonScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ClearPersonScalarWhereWithAggregatesInput>>;
  age?: InputMaybe<ClearIntNullableWithAggregatesFilter>;
  createdAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  email?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  firstName?: InputMaybe<ClearStringWithAggregatesFilter>;
  id?: InputMaybe<ClearStringWithAggregatesFilter>;
  lastName?: InputMaybe<ClearStringWithAggregatesFilter>;
  locale?: InputMaybe<ClearStringWithAggregatesFilter>;
  phone?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  pronouns?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  updatedAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  username?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  whatsApp?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
};

export type ClearPersonSumAggregate = {
  __typename?: 'ClearPersonSumAggregate';
  age?: Maybe<Scalars['Int']>;
};

export type ClearPersonSumOrderByAggregateInput = {
  age?: InputMaybe<ClearSortOrder>;
};

export type ClearPersonUpdateInput = {
  Ticket?: InputMaybe<ClearTicketUpdateManyWithoutGuardianInput>;
  age?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  firstName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  lastName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  locale?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  phone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  pronouns?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  username?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  whatsApp?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
};

export type ClearPersonUpdateManyMutationInput = {
  age?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  firstName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  lastName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  locale?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  phone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  pronouns?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  username?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  whatsApp?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
};

export type ClearPersonUpdateOneWithoutTicketInput = {
  connect?: InputMaybe<ClearPersonWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearPersonCreateOrConnectWithoutTicketInput>;
  create?: InputMaybe<ClearPersonCreateWithoutTicketInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<ClearPersonUpdateWithoutTicketInput>;
  upsert?: InputMaybe<ClearPersonUpsertWithoutTicketInput>;
};

export type ClearPersonUpdateWithoutTicketInput = {
  age?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  firstName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  lastName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  locale?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  phone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  pronouns?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  username?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  whatsApp?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
};

export type ClearPersonUpsertWithoutTicketInput = {
  create: ClearPersonCreateWithoutTicketInput;
  update: ClearPersonUpdateWithoutTicketInput;
};

export type ClearPersonWhereInput = {
  AND?: InputMaybe<Array<ClearPersonWhereInput>>;
  NOT?: InputMaybe<Array<ClearPersonWhereInput>>;
  OR?: InputMaybe<Array<ClearPersonWhereInput>>;
  Ticket?: InputMaybe<ClearTicketListRelationFilter>;
  age?: InputMaybe<ClearIntNullableFilter>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  email?: InputMaybe<ClearStringNullableFilter>;
  firstName?: InputMaybe<ClearStringFilter>;
  id?: InputMaybe<ClearStringFilter>;
  lastName?: InputMaybe<ClearStringFilter>;
  locale?: InputMaybe<ClearStringFilter>;
  phone?: InputMaybe<ClearStringNullableFilter>;
  pronouns?: InputMaybe<ClearStringNullableFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
  username?: InputMaybe<ClearStringNullableFilter>;
  whatsApp?: InputMaybe<ClearStringNullableFilter>;
};

export type ClearPersonWhereUniqueInput = {
  id?: InputMaybe<Scalars['String']>;
};

export type ClearPromoCode = {
  __typename?: 'ClearPromoCode';
  _count?: Maybe<ClearPromoCodeCount>;
  amount: Scalars['Float'];
  code: Scalars['String'];
  createdAt: Scalars['ClearDateTime'];
  event?: Maybe<ClearEvent>;
  eventGroup?: Maybe<ClearEventGroup>;
  eventGroupId?: Maybe<Scalars['String']>;
  eventId?: Maybe<Scalars['String']>;
  getMetadata?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  metadata?: Maybe<Scalars['ClearJSON']>;
  tickets: Array<ClearTicket>;
  type: ClearDiscountType;
  updatedAt: Scalars['ClearDateTime'];
  uses?: Maybe<Scalars['Int']>;
  usesCount: Scalars['Float'];
  usesRemaining?: Maybe<Scalars['Float']>;
};


export type ClearPromoCodeGetMetadataArgs = {
  key: Scalars['String'];
};


export type ClearPromoCodeTicketsArgs = {
  cursor?: InputMaybe<ClearTicketWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearTicketScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearTicketOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearTicketWhereInput>;
};

export type ClearPromoCodeAvgAggregate = {
  __typename?: 'ClearPromoCodeAvgAggregate';
  amount?: Maybe<Scalars['Float']>;
  uses?: Maybe<Scalars['Float']>;
};

export type ClearPromoCodeAvgOrderByAggregateInput = {
  amount?: InputMaybe<ClearSortOrder>;
  uses?: InputMaybe<ClearSortOrder>;
};

export type ClearPromoCodeCount = {
  __typename?: 'ClearPromoCodeCount';
  tickets: Scalars['Int'];
};

export type ClearPromoCodeCountAggregate = {
  __typename?: 'ClearPromoCodeCountAggregate';
  _all: Scalars['Int'];
  amount: Scalars['Int'];
  code: Scalars['Int'];
  createdAt: Scalars['Int'];
  eventGroupId: Scalars['Int'];
  eventId: Scalars['Int'];
  id: Scalars['Int'];
  metadata: Scalars['Int'];
  type: Scalars['Int'];
  updatedAt: Scalars['Int'];
  uses: Scalars['Int'];
};

export type ClearPromoCodeCountOrderByAggregateInput = {
  amount?: InputMaybe<ClearSortOrder>;
  code?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  eventGroupId?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  type?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  uses?: InputMaybe<ClearSortOrder>;
};

export type ClearPromoCodeCreateInput = {
  amount: Scalars['Float'];
  code: Scalars['String'];
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  event?: InputMaybe<ClearEventCreateNestedOneWithoutPromoCodesInput>;
  eventGroup?: InputMaybe<ClearEventGroupCreateNestedOneWithoutPromoCodesInput>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  tickets?: InputMaybe<ClearTicketCreateNestedManyWithoutPromoCodeInput>;
  type: ClearDiscountType;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  uses?: InputMaybe<Scalars['Int']>;
};

export type ClearPromoCodeCreateManyEventGroupInput = {
  amount: Scalars['Float'];
  code: Scalars['String'];
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  eventId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  type: ClearDiscountType;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  uses?: InputMaybe<Scalars['Int']>;
};

export type ClearPromoCodeCreateManyEventGroupInputEnvelope = {
  data: Array<ClearPromoCodeCreateManyEventGroupInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};

export type ClearPromoCodeCreateManyEventInput = {
  amount: Scalars['Float'];
  code: Scalars['String'];
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  eventGroupId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  type: ClearDiscountType;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  uses?: InputMaybe<Scalars['Int']>;
};

export type ClearPromoCodeCreateManyEventInputEnvelope = {
  data: Array<ClearPromoCodeCreateManyEventInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};

export type ClearPromoCodeCreateManyInput = {
  amount: Scalars['Float'];
  code: Scalars['String'];
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  eventGroupId?: InputMaybe<Scalars['String']>;
  eventId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  type: ClearDiscountType;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  uses?: InputMaybe<Scalars['Int']>;
};

export type ClearPromoCodeCreateNestedManyWithoutEventGroupInput = {
  connect?: InputMaybe<Array<ClearPromoCodeWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearPromoCodeCreateOrConnectWithoutEventGroupInput>>;
  create?: InputMaybe<Array<ClearPromoCodeCreateWithoutEventGroupInput>>;
  createMany?: InputMaybe<ClearPromoCodeCreateManyEventGroupInputEnvelope>;
};

export type ClearPromoCodeCreateNestedManyWithoutEventInput = {
  connect?: InputMaybe<Array<ClearPromoCodeWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearPromoCodeCreateOrConnectWithoutEventInput>>;
  create?: InputMaybe<Array<ClearPromoCodeCreateWithoutEventInput>>;
  createMany?: InputMaybe<ClearPromoCodeCreateManyEventInputEnvelope>;
};

export type ClearPromoCodeCreateNestedOneWithoutTicketsInput = {
  connect?: InputMaybe<ClearPromoCodeWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearPromoCodeCreateOrConnectWithoutTicketsInput>;
  create?: InputMaybe<ClearPromoCodeCreateWithoutTicketsInput>;
};

export type ClearPromoCodeCreateOrConnectWithoutEventGroupInput = {
  create: ClearPromoCodeCreateWithoutEventGroupInput;
  where: ClearPromoCodeWhereUniqueInput;
};

export type ClearPromoCodeCreateOrConnectWithoutEventInput = {
  create: ClearPromoCodeCreateWithoutEventInput;
  where: ClearPromoCodeWhereUniqueInput;
};

export type ClearPromoCodeCreateOrConnectWithoutTicketsInput = {
  create: ClearPromoCodeCreateWithoutTicketsInput;
  where: ClearPromoCodeWhereUniqueInput;
};

export type ClearPromoCodeCreateWithoutEventGroupInput = {
  amount: Scalars['Float'];
  code: Scalars['String'];
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  event?: InputMaybe<ClearEventCreateNestedOneWithoutPromoCodesInput>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  tickets?: InputMaybe<ClearTicketCreateNestedManyWithoutPromoCodeInput>;
  type: ClearDiscountType;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  uses?: InputMaybe<Scalars['Int']>;
};

export type ClearPromoCodeCreateWithoutEventInput = {
  amount: Scalars['Float'];
  code: Scalars['String'];
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  eventGroup?: InputMaybe<ClearEventGroupCreateNestedOneWithoutPromoCodesInput>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  tickets?: InputMaybe<ClearTicketCreateNestedManyWithoutPromoCodeInput>;
  type: ClearDiscountType;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  uses?: InputMaybe<Scalars['Int']>;
};

export type ClearPromoCodeCreateWithoutTicketsInput = {
  amount: Scalars['Float'];
  code: Scalars['String'];
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  event?: InputMaybe<ClearEventCreateNestedOneWithoutPromoCodesInput>;
  eventGroup?: InputMaybe<ClearEventGroupCreateNestedOneWithoutPromoCodesInput>;
  id?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  type: ClearDiscountType;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  uses?: InputMaybe<Scalars['Int']>;
};

export type ClearPromoCodeGroupBy = {
  __typename?: 'ClearPromoCodeGroupBy';
  _avg?: Maybe<ClearPromoCodeAvgAggregate>;
  _count?: Maybe<ClearPromoCodeCountAggregate>;
  _max?: Maybe<ClearPromoCodeMaxAggregate>;
  _min?: Maybe<ClearPromoCodeMinAggregate>;
  _sum?: Maybe<ClearPromoCodeSumAggregate>;
  amount: Scalars['Float'];
  code: Scalars['String'];
  createdAt: Scalars['ClearDateTime'];
  eventGroupId?: Maybe<Scalars['String']>;
  eventId?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  metadata?: Maybe<Scalars['ClearJSON']>;
  type: ClearDiscountType;
  updatedAt: Scalars['ClearDateTime'];
  uses?: Maybe<Scalars['Int']>;
};

export type ClearPromoCodeListRelationFilter = {
  every?: InputMaybe<ClearPromoCodeWhereInput>;
  none?: InputMaybe<ClearPromoCodeWhereInput>;
  some?: InputMaybe<ClearPromoCodeWhereInput>;
};

export type ClearPromoCodeMaxAggregate = {
  __typename?: 'ClearPromoCodeMaxAggregate';
  amount?: Maybe<Scalars['Float']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  eventGroupId?: Maybe<Scalars['String']>;
  eventId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  type?: Maybe<ClearDiscountType>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
  uses?: Maybe<Scalars['Int']>;
};

export type ClearPromoCodeMaxOrderByAggregateInput = {
  amount?: InputMaybe<ClearSortOrder>;
  code?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  eventGroupId?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  type?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  uses?: InputMaybe<ClearSortOrder>;
};

export type ClearPromoCodeMinAggregate = {
  __typename?: 'ClearPromoCodeMinAggregate';
  amount?: Maybe<Scalars['Float']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  eventGroupId?: Maybe<Scalars['String']>;
  eventId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  type?: Maybe<ClearDiscountType>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
  uses?: Maybe<Scalars['Int']>;
};

export type ClearPromoCodeMinOrderByAggregateInput = {
  amount?: InputMaybe<ClearSortOrder>;
  code?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  eventGroupId?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  type?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  uses?: InputMaybe<ClearSortOrder>;
};

export type ClearPromoCodeOrderByRelationAggregateInput = {
  _count?: InputMaybe<ClearSortOrder>;
};

export type ClearPromoCodeOrderByWithAggregationInput = {
  _avg?: InputMaybe<ClearPromoCodeAvgOrderByAggregateInput>;
  _count?: InputMaybe<ClearPromoCodeCountOrderByAggregateInput>;
  _max?: InputMaybe<ClearPromoCodeMaxOrderByAggregateInput>;
  _min?: InputMaybe<ClearPromoCodeMinOrderByAggregateInput>;
  _sum?: InputMaybe<ClearPromoCodeSumOrderByAggregateInput>;
  amount?: InputMaybe<ClearSortOrder>;
  code?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  eventGroupId?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  type?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  uses?: InputMaybe<ClearSortOrder>;
};

export type ClearPromoCodeOrderByWithRelationInput = {
  amount?: InputMaybe<ClearSortOrder>;
  code?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  event?: InputMaybe<ClearEventOrderByWithRelationInput>;
  eventGroup?: InputMaybe<ClearEventGroupOrderByWithRelationInput>;
  eventGroupId?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  tickets?: InputMaybe<ClearTicketOrderByRelationAggregateInput>;
  type?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  uses?: InputMaybe<ClearSortOrder>;
};

export type ClearPromoCodeRelationFilter = {
  is?: InputMaybe<ClearPromoCodeWhereInput>;
  isNot?: InputMaybe<ClearPromoCodeWhereInput>;
};

export enum ClearPromoCodeScalarFieldEnum {
  Amount = 'amount',
  Code = 'code',
  CreatedAt = 'createdAt',
  EventGroupId = 'eventGroupId',
  EventId = 'eventId',
  Id = 'id',
  Metadata = 'metadata',
  Type = 'type',
  UpdatedAt = 'updatedAt',
  Uses = 'uses'
}

export type ClearPromoCodeScalarWhereInput = {
  AND?: InputMaybe<Array<ClearPromoCodeScalarWhereInput>>;
  NOT?: InputMaybe<Array<ClearPromoCodeScalarWhereInput>>;
  OR?: InputMaybe<Array<ClearPromoCodeScalarWhereInput>>;
  amount?: InputMaybe<ClearFloatFilter>;
  code?: InputMaybe<ClearStringFilter>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  eventGroupId?: InputMaybe<ClearStringNullableFilter>;
  eventId?: InputMaybe<ClearStringNullableFilter>;
  id?: InputMaybe<ClearStringFilter>;
  type?: InputMaybe<ClearEnumDiscountTypeFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
  uses?: InputMaybe<ClearIntNullableFilter>;
};

export type ClearPromoCodeScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ClearPromoCodeScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ClearPromoCodeScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ClearPromoCodeScalarWhereWithAggregatesInput>>;
  amount?: InputMaybe<ClearFloatWithAggregatesFilter>;
  code?: InputMaybe<ClearStringWithAggregatesFilter>;
  createdAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  eventGroupId?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  eventId?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  id?: InputMaybe<ClearStringWithAggregatesFilter>;
  type?: InputMaybe<ClearEnumDiscountTypeWithAggregatesFilter>;
  updatedAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  uses?: InputMaybe<ClearIntNullableWithAggregatesFilter>;
};

export type ClearPromoCodeSumAggregate = {
  __typename?: 'ClearPromoCodeSumAggregate';
  amount?: Maybe<Scalars['Float']>;
  uses?: Maybe<Scalars['Int']>;
};

export type ClearPromoCodeSumOrderByAggregateInput = {
  amount?: InputMaybe<ClearSortOrder>;
  uses?: InputMaybe<ClearSortOrder>;
};

export type ClearPromoCodeUpdateInput = {
  amount?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  code?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  event?: InputMaybe<ClearEventUpdateOneWithoutPromoCodesInput>;
  eventGroup?: InputMaybe<ClearEventGroupUpdateOneWithoutPromoCodesInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  tickets?: InputMaybe<ClearTicketUpdateManyWithoutPromoCodeInput>;
  type?: InputMaybe<ClearEnumDiscountTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  uses?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
};

export type ClearPromoCodeUpdateManyMutationInput = {
  amount?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  code?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  type?: InputMaybe<ClearEnumDiscountTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  uses?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
};

export type ClearPromoCodeUpdateManyWithWhereWithoutEventGroupInput = {
  data: ClearPromoCodeUpdateManyMutationInput;
  where: ClearPromoCodeScalarWhereInput;
};

export type ClearPromoCodeUpdateManyWithWhereWithoutEventInput = {
  data: ClearPromoCodeUpdateManyMutationInput;
  where: ClearPromoCodeScalarWhereInput;
};

export type ClearPromoCodeUpdateManyWithoutEventGroupInput = {
  connect?: InputMaybe<Array<ClearPromoCodeWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearPromoCodeCreateOrConnectWithoutEventGroupInput>>;
  create?: InputMaybe<Array<ClearPromoCodeCreateWithoutEventGroupInput>>;
  createMany?: InputMaybe<ClearPromoCodeCreateManyEventGroupInputEnvelope>;
  delete?: InputMaybe<Array<ClearPromoCodeWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClearPromoCodeScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClearPromoCodeWhereUniqueInput>>;
  set?: InputMaybe<Array<ClearPromoCodeWhereUniqueInput>>;
  update?: InputMaybe<Array<ClearPromoCodeUpdateWithWhereUniqueWithoutEventGroupInput>>;
  updateMany?: InputMaybe<Array<ClearPromoCodeUpdateManyWithWhereWithoutEventGroupInput>>;
  upsert?: InputMaybe<Array<ClearPromoCodeUpsertWithWhereUniqueWithoutEventGroupInput>>;
};

export type ClearPromoCodeUpdateManyWithoutEventInput = {
  connect?: InputMaybe<Array<ClearPromoCodeWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearPromoCodeCreateOrConnectWithoutEventInput>>;
  create?: InputMaybe<Array<ClearPromoCodeCreateWithoutEventInput>>;
  createMany?: InputMaybe<ClearPromoCodeCreateManyEventInputEnvelope>;
  delete?: InputMaybe<Array<ClearPromoCodeWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClearPromoCodeScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClearPromoCodeWhereUniqueInput>>;
  set?: InputMaybe<Array<ClearPromoCodeWhereUniqueInput>>;
  update?: InputMaybe<Array<ClearPromoCodeUpdateWithWhereUniqueWithoutEventInput>>;
  updateMany?: InputMaybe<Array<ClearPromoCodeUpdateManyWithWhereWithoutEventInput>>;
  upsert?: InputMaybe<Array<ClearPromoCodeUpsertWithWhereUniqueWithoutEventInput>>;
};

export type ClearPromoCodeUpdateOneWithoutTicketsInput = {
  connect?: InputMaybe<ClearPromoCodeWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearPromoCodeCreateOrConnectWithoutTicketsInput>;
  create?: InputMaybe<ClearPromoCodeCreateWithoutTicketsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<ClearPromoCodeUpdateWithoutTicketsInput>;
  upsert?: InputMaybe<ClearPromoCodeUpsertWithoutTicketsInput>;
};

export type ClearPromoCodeUpdateWithWhereUniqueWithoutEventGroupInput = {
  data: ClearPromoCodeUpdateWithoutEventGroupInput;
  where: ClearPromoCodeWhereUniqueInput;
};

export type ClearPromoCodeUpdateWithWhereUniqueWithoutEventInput = {
  data: ClearPromoCodeUpdateWithoutEventInput;
  where: ClearPromoCodeWhereUniqueInput;
};

export type ClearPromoCodeUpdateWithoutEventGroupInput = {
  amount?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  code?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  event?: InputMaybe<ClearEventUpdateOneWithoutPromoCodesInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  tickets?: InputMaybe<ClearTicketUpdateManyWithoutPromoCodeInput>;
  type?: InputMaybe<ClearEnumDiscountTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  uses?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
};

export type ClearPromoCodeUpdateWithoutEventInput = {
  amount?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  code?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  eventGroup?: InputMaybe<ClearEventGroupUpdateOneWithoutPromoCodesInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  tickets?: InputMaybe<ClearTicketUpdateManyWithoutPromoCodeInput>;
  type?: InputMaybe<ClearEnumDiscountTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  uses?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
};

export type ClearPromoCodeUpdateWithoutTicketsInput = {
  amount?: InputMaybe<ClearFloatFieldUpdateOperationsInput>;
  code?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  event?: InputMaybe<ClearEventUpdateOneWithoutPromoCodesInput>;
  eventGroup?: InputMaybe<ClearEventGroupUpdateOneWithoutPromoCodesInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  type?: InputMaybe<ClearEnumDiscountTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  uses?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
};

export type ClearPromoCodeUpsertWithWhereUniqueWithoutEventGroupInput = {
  create: ClearPromoCodeCreateWithoutEventGroupInput;
  update: ClearPromoCodeUpdateWithoutEventGroupInput;
  where: ClearPromoCodeWhereUniqueInput;
};

export type ClearPromoCodeUpsertWithWhereUniqueWithoutEventInput = {
  create: ClearPromoCodeCreateWithoutEventInput;
  update: ClearPromoCodeUpdateWithoutEventInput;
  where: ClearPromoCodeWhereUniqueInput;
};

export type ClearPromoCodeUpsertWithoutTicketsInput = {
  create: ClearPromoCodeCreateWithoutTicketsInput;
  update: ClearPromoCodeUpdateWithoutTicketsInput;
};

export type ClearPromoCodeWhereInput = {
  AND?: InputMaybe<Array<ClearPromoCodeWhereInput>>;
  NOT?: InputMaybe<Array<ClearPromoCodeWhereInput>>;
  OR?: InputMaybe<Array<ClearPromoCodeWhereInput>>;
  amount?: InputMaybe<ClearFloatFilter>;
  code?: InputMaybe<ClearStringFilter>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  event?: InputMaybe<ClearEventRelationFilter>;
  eventGroup?: InputMaybe<ClearEventGroupRelationFilter>;
  eventGroupId?: InputMaybe<ClearStringNullableFilter>;
  eventId?: InputMaybe<ClearStringNullableFilter>;
  id?: InputMaybe<ClearStringFilter>;
  tickets?: InputMaybe<ClearTicketListRelationFilter>;
  type?: InputMaybe<ClearEnumDiscountTypeFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
  uses?: InputMaybe<ClearIntNullableFilter>;
};

export type ClearPromoCodeWhereUniqueInput = {
  id?: InputMaybe<Scalars['String']>;
};

export type ClearPublicPerson = {
  __typename?: 'ClearPublicPerson';
  account?: Maybe<AccountUser>;
  avatarUrl: Scalars['String'];
  firstName: Scalars['String'];
  lastName: Scalars['String'];
  username?: Maybe<Scalars['String']>;
};

export type ClearQuery = {
  __typename?: 'ClearQuery';
  aggregateEmailTemplate: ClearAggregateEmailTemplate;
  aggregateEvent: ClearAggregateEvent;
  aggregateEventGroup: ClearAggregateEventGroup;
  aggregateEventRestriction: ClearAggregateEventRestriction;
  aggregateMailingListMember: ClearAggregateMailingListMember;
  aggregatePayment: ClearAggregatePayment;
  aggregatePerson: ClearAggregatePerson;
  aggregatePromoCode: ClearAggregatePromoCode;
  aggregateScheduleItem: ClearAggregateScheduleItem;
  aggregateSponsor: ClearAggregateSponsor;
  aggregateTicket: ClearAggregateTicket;
  aggregateVenue: ClearAggregateVenue;
  aggregateWebhook: ClearAggregateWebhook;
  emailTemplate?: Maybe<ClearEmailTemplate>;
  emailTemplates: Array<ClearEmailTemplate>;
  event?: Maybe<ClearEvent>;
  eventGroup?: Maybe<ClearEventGroup>;
  eventGroups: Array<ClearEventGroup>;
  eventRestriction?: Maybe<ClearEventRestriction>;
  eventRestrictions: Array<ClearEventRestriction>;
  events: Array<ClearEvent>;
  findFirstEmailTemplate?: Maybe<ClearEmailTemplate>;
  findFirstEvent?: Maybe<ClearEvent>;
  findFirstEventGroup?: Maybe<ClearEventGroup>;
  findFirstEventRestriction?: Maybe<ClearEventRestriction>;
  findFirstMailingListMember?: Maybe<ClearMailingListMember>;
  findFirstPayment?: Maybe<ClearPayment>;
  findFirstPerson?: Maybe<ClearPerson>;
  findFirstPromoCode?: Maybe<ClearPromoCode>;
  findFirstScheduleItem?: Maybe<ClearScheduleItem>;
  findFirstSponsor?: Maybe<ClearSponsor>;
  findFirstTicket?: Maybe<ClearTicket>;
  findFirstVenue?: Maybe<ClearVenue>;
  findFirstWebhook?: Maybe<ClearWebhook>;
  groupByEmailTemplate: Array<ClearEmailTemplateGroupBy>;
  groupByEvent: Array<ClearEventGroupBy>;
  groupByEventGroup: Array<ClearEventGroupGroupBy>;
  groupByEventRestriction: Array<ClearEventRestrictionGroupBy>;
  groupByMailingListMember: Array<ClearMailingListMemberGroupBy>;
  groupByPayment: Array<ClearPaymentGroupBy>;
  groupByPerson: Array<ClearPersonGroupBy>;
  groupByPromoCode: Array<ClearPromoCodeGroupBy>;
  groupByScheduleItem: Array<ClearScheduleItemGroupBy>;
  groupBySponsor: Array<ClearSponsorGroupBy>;
  groupByTicket: Array<ClearTicketGroupBy>;
  groupByVenue: Array<ClearVenueGroupBy>;
  groupByWebhook: Array<ClearWebhookGroupBy>;
  mailingListMember?: Maybe<ClearMailingListMember>;
  mailingListMembers: Array<ClearMailingListMember>;
  payment?: Maybe<ClearPayment>;
  payments: Array<ClearPayment>;
  people: Array<ClearPerson>;
  person?: Maybe<ClearPerson>;
  promoCode?: Maybe<ClearPromoCode>;
  promoCodes: Array<ClearPromoCode>;
  scheduleItem?: Maybe<ClearScheduleItem>;
  scheduleItems: Array<ClearScheduleItem>;
  sponsor?: Maybe<ClearSponsor>;
  sponsors: Array<ClearSponsor>;
  ticket?: Maybe<ClearTicket>;
  tickets: Array<ClearTicket>;
  venue?: Maybe<ClearVenue>;
  venues: Array<ClearVenue>;
  webhook?: Maybe<ClearWebhook>;
  webhooks: Array<ClearWebhook>;
};


export type ClearQueryAggregateEmailTemplateArgs = {
  cursor?: InputMaybe<ClearEmailTemplateWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ClearEmailTemplateOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEmailTemplateWhereInput>;
};


export type ClearQueryAggregateEventArgs = {
  cursor?: InputMaybe<ClearEventWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ClearEventOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEventWhereInput>;
};


export type ClearQueryAggregateEventGroupArgs = {
  cursor?: InputMaybe<ClearEventGroupWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ClearEventGroupOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEventGroupWhereInput>;
};


export type ClearQueryAggregateEventRestrictionArgs = {
  cursor?: InputMaybe<ClearEventRestrictionWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ClearEventRestrictionOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEventRestrictionWhereInput>;
};


export type ClearQueryAggregateMailingListMemberArgs = {
  cursor?: InputMaybe<ClearMailingListMemberWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ClearMailingListMemberOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearMailingListMemberWhereInput>;
};


export type ClearQueryAggregatePaymentArgs = {
  cursor?: InputMaybe<ClearPaymentWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ClearPaymentOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearPaymentWhereInput>;
};


export type ClearQueryAggregatePersonArgs = {
  cursor?: InputMaybe<ClearPersonWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ClearPersonOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearPersonWhereInput>;
};


export type ClearQueryAggregatePromoCodeArgs = {
  cursor?: InputMaybe<ClearPromoCodeWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ClearPromoCodeOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearPromoCodeWhereInput>;
};


export type ClearQueryAggregateScheduleItemArgs = {
  cursor?: InputMaybe<ClearScheduleItemWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ClearScheduleItemOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearScheduleItemWhereInput>;
};


export type ClearQueryAggregateSponsorArgs = {
  cursor?: InputMaybe<ClearSponsorWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ClearSponsorOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearSponsorWhereInput>;
};


export type ClearQueryAggregateTicketArgs = {
  cursor?: InputMaybe<ClearTicketWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ClearTicketOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearTicketWhereInput>;
};


export type ClearQueryAggregateVenueArgs = {
  cursor?: InputMaybe<ClearVenueWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ClearVenueOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearVenueWhereInput>;
};


export type ClearQueryAggregateWebhookArgs = {
  cursor?: InputMaybe<ClearWebhookWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ClearWebhookOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearWebhookWhereInput>;
};


export type ClearQueryEmailTemplateArgs = {
  where: ClearEmailTemplateWhereUniqueInput;
};


export type ClearQueryEmailTemplatesArgs = {
  cursor?: InputMaybe<ClearEmailTemplateWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearEmailTemplateScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearEmailTemplateOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEmailTemplateWhereInput>;
};


export type ClearQueryEventArgs = {
  where: ClearEventWhereUniqueInput;
};


export type ClearQueryEventGroupArgs = {
  where: ClearEventGroupWhereUniqueInput;
};


export type ClearQueryEventGroupsArgs = {
  cursor?: InputMaybe<ClearEventGroupWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearEventGroupScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearEventGroupOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEventGroupWhereInput>;
};


export type ClearQueryEventRestrictionArgs = {
  where: ClearEventRestrictionWhereUniqueInput;
};


export type ClearQueryEventRestrictionsArgs = {
  cursor?: InputMaybe<ClearEventRestrictionWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearEventRestrictionScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearEventRestrictionOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEventRestrictionWhereInput>;
};


export type ClearQueryEventsArgs = {
  cursor?: InputMaybe<ClearEventWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearEventScalarFieldEnum>>;
  editable?: InputMaybe<Scalars['Boolean']>;
  orderBy?: InputMaybe<Array<ClearEventOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEventWhereInput>;
};


export type ClearQueryFindFirstEmailTemplateArgs = {
  cursor?: InputMaybe<ClearEmailTemplateWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearEmailTemplateScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearEmailTemplateOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEmailTemplateWhereInput>;
};


export type ClearQueryFindFirstEventArgs = {
  cursor?: InputMaybe<ClearEventWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearEventScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearEventOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEventWhereInput>;
};


export type ClearQueryFindFirstEventGroupArgs = {
  cursor?: InputMaybe<ClearEventGroupWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearEventGroupScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearEventGroupOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEventGroupWhereInput>;
};


export type ClearQueryFindFirstEventRestrictionArgs = {
  cursor?: InputMaybe<ClearEventRestrictionWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearEventRestrictionScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearEventRestrictionOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEventRestrictionWhereInput>;
};


export type ClearQueryFindFirstMailingListMemberArgs = {
  cursor?: InputMaybe<ClearMailingListMemberWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearMailingListMemberScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearMailingListMemberOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearMailingListMemberWhereInput>;
};


export type ClearQueryFindFirstPaymentArgs = {
  cursor?: InputMaybe<ClearPaymentWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearPaymentScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearPaymentOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearPaymentWhereInput>;
};


export type ClearQueryFindFirstPersonArgs = {
  cursor?: InputMaybe<ClearPersonWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearPersonScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearPersonOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearPersonWhereInput>;
};


export type ClearQueryFindFirstPromoCodeArgs = {
  cursor?: InputMaybe<ClearPromoCodeWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearPromoCodeScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearPromoCodeOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearPromoCodeWhereInput>;
};


export type ClearQueryFindFirstScheduleItemArgs = {
  cursor?: InputMaybe<ClearScheduleItemWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearScheduleItemScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearScheduleItemOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearScheduleItemWhereInput>;
};


export type ClearQueryFindFirstSponsorArgs = {
  cursor?: InputMaybe<ClearSponsorWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearSponsorScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearSponsorOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearSponsorWhereInput>;
};


export type ClearQueryFindFirstTicketArgs = {
  cursor?: InputMaybe<ClearTicketWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearTicketScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearTicketOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearTicketWhereInput>;
};


export type ClearQueryFindFirstVenueArgs = {
  cursor?: InputMaybe<ClearVenueWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearVenueScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearVenueOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearVenueWhereInput>;
};


export type ClearQueryFindFirstWebhookArgs = {
  cursor?: InputMaybe<ClearWebhookWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearWebhookScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearWebhookOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearWebhookWhereInput>;
};


export type ClearQueryGroupByEmailTemplateArgs = {
  by: Array<ClearEmailTemplateScalarFieldEnum>;
  having?: InputMaybe<ClearEmailTemplateScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ClearEmailTemplateOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEmailTemplateWhereInput>;
};


export type ClearQueryGroupByEventArgs = {
  by: Array<ClearEventScalarFieldEnum>;
  having?: InputMaybe<ClearEventScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ClearEventOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEventWhereInput>;
};


export type ClearQueryGroupByEventGroupArgs = {
  by: Array<ClearEventGroupScalarFieldEnum>;
  having?: InputMaybe<ClearEventGroupScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ClearEventGroupOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEventGroupWhereInput>;
};


export type ClearQueryGroupByEventRestrictionArgs = {
  by: Array<ClearEventRestrictionScalarFieldEnum>;
  having?: InputMaybe<ClearEventRestrictionScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ClearEventRestrictionOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEventRestrictionWhereInput>;
};


export type ClearQueryGroupByMailingListMemberArgs = {
  by: Array<ClearMailingListMemberScalarFieldEnum>;
  having?: InputMaybe<ClearMailingListMemberScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ClearMailingListMemberOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearMailingListMemberWhereInput>;
};


export type ClearQueryGroupByPaymentArgs = {
  by: Array<ClearPaymentScalarFieldEnum>;
  having?: InputMaybe<ClearPaymentScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ClearPaymentOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearPaymentWhereInput>;
};


export type ClearQueryGroupByPersonArgs = {
  by: Array<ClearPersonScalarFieldEnum>;
  having?: InputMaybe<ClearPersonScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ClearPersonOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearPersonWhereInput>;
};


export type ClearQueryGroupByPromoCodeArgs = {
  by: Array<ClearPromoCodeScalarFieldEnum>;
  having?: InputMaybe<ClearPromoCodeScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ClearPromoCodeOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearPromoCodeWhereInput>;
};


export type ClearQueryGroupByScheduleItemArgs = {
  by: Array<ClearScheduleItemScalarFieldEnum>;
  having?: InputMaybe<ClearScheduleItemScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ClearScheduleItemOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearScheduleItemWhereInput>;
};


export type ClearQueryGroupBySponsorArgs = {
  by: Array<ClearSponsorScalarFieldEnum>;
  having?: InputMaybe<ClearSponsorScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ClearSponsorOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearSponsorWhereInput>;
};


export type ClearQueryGroupByTicketArgs = {
  by: Array<ClearTicketScalarFieldEnum>;
  having?: InputMaybe<ClearTicketScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ClearTicketOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearTicketWhereInput>;
};


export type ClearQueryGroupByVenueArgs = {
  by: Array<ClearVenueScalarFieldEnum>;
  having?: InputMaybe<ClearVenueScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ClearVenueOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearVenueWhereInput>;
};


export type ClearQueryGroupByWebhookArgs = {
  by: Array<ClearWebhookScalarFieldEnum>;
  having?: InputMaybe<ClearWebhookScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ClearWebhookOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearWebhookWhereInput>;
};


export type ClearQueryMailingListMemberArgs = {
  where: ClearMailingListMemberWhereUniqueInput;
};


export type ClearQueryMailingListMembersArgs = {
  cursor?: InputMaybe<ClearMailingListMemberWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearMailingListMemberScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearMailingListMemberOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearMailingListMemberWhereInput>;
};


export type ClearQueryPaymentArgs = {
  where: ClearPaymentWhereUniqueInput;
};


export type ClearQueryPaymentsArgs = {
  cursor?: InputMaybe<ClearPaymentWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearPaymentScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearPaymentOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearPaymentWhereInput>;
};


export type ClearQueryPeopleArgs = {
  cursor?: InputMaybe<ClearPersonWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearPersonScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearPersonOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearPersonWhereInput>;
};


export type ClearQueryPersonArgs = {
  where: ClearPersonWhereUniqueInput;
};


export type ClearQueryPromoCodeArgs = {
  where: ClearPromoCodeWhereUniqueInput;
};


export type ClearQueryPromoCodesArgs = {
  cursor?: InputMaybe<ClearPromoCodeWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearPromoCodeScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearPromoCodeOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearPromoCodeWhereInput>;
};


export type ClearQueryScheduleItemArgs = {
  where: ClearScheduleItemWhereUniqueInput;
};


export type ClearQueryScheduleItemsArgs = {
  cursor?: InputMaybe<ClearScheduleItemWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearScheduleItemScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearScheduleItemOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearScheduleItemWhereInput>;
};


export type ClearQuerySponsorArgs = {
  where: ClearSponsorWhereUniqueInput;
};


export type ClearQuerySponsorsArgs = {
  cursor?: InputMaybe<ClearSponsorWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearSponsorScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearSponsorOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearSponsorWhereInput>;
};


export type ClearQueryTicketArgs = {
  where: ClearTicketWhereUniqueInput;
};


export type ClearQueryTicketsArgs = {
  cursor?: InputMaybe<ClearTicketWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearTicketScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearTicketOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearTicketWhereInput>;
};


export type ClearQueryVenueArgs = {
  where: ClearVenueWhereUniqueInput;
};


export type ClearQueryVenuesArgs = {
  cursor?: InputMaybe<ClearVenueWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearVenueScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearVenueOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearVenueWhereInput>;
};


export type ClearQueryWebhookArgs = {
  where: ClearWebhookWhereUniqueInput;
};


export type ClearQueryWebhooksArgs = {
  cursor?: InputMaybe<ClearWebhookWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearWebhookScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearWebhookOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearWebhookWhereInput>;
};

export enum ClearQueryMode {
  Default = 'default',
  Insensitive = 'insensitive'
}

export type ClearScheduleItem = {
  __typename?: 'ClearScheduleItem';
  createdAt: Scalars['ClearDateTime'];
  description?: Maybe<Scalars['String']>;
  displayTime: Scalars['String'];
  displayTimeWithDate: Scalars['String'];
  end?: Maybe<Scalars['ClearDateTime']>;
  event?: Maybe<ClearEvent>;
  eventGroup?: Maybe<ClearEventGroup>;
  eventGroupId?: Maybe<Scalars['String']>;
  eventId?: Maybe<Scalars['String']>;
  finalized: Scalars['Boolean'];
  getMetadata?: Maybe<Scalars['String']>;
  hostEmail?: Maybe<Scalars['String']>;
  hostName?: Maybe<Scalars['String']>;
  hostPronoun?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  internal: Scalars['Boolean'];
  link?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  organizerEmail?: Maybe<Scalars['String']>;
  organizerName?: Maybe<Scalars['String']>;
  organizerPhone?: Maybe<Scalars['String']>;
  start: Scalars['ClearDateTime'];
  type: Scalars['String'];
  updatedAt: Scalars['ClearDateTime'];
};


export type ClearScheduleItemGetMetadataArgs = {
  key: Scalars['String'];
};

export type ClearScheduleItemCountAggregate = {
  __typename?: 'ClearScheduleItemCountAggregate';
  _all: Scalars['Int'];
  createdAt: Scalars['Int'];
  description: Scalars['Int'];
  end: Scalars['Int'];
  eventGroupId: Scalars['Int'];
  eventId: Scalars['Int'];
  finalized: Scalars['Int'];
  hostEmail: Scalars['Int'];
  hostName: Scalars['Int'];
  hostPronoun: Scalars['Int'];
  id: Scalars['Int'];
  internal: Scalars['Int'];
  link: Scalars['Int'];
  metadata: Scalars['Int'];
  name: Scalars['Int'];
  organizerEmail: Scalars['Int'];
  organizerName: Scalars['Int'];
  organizerPhone: Scalars['Int'];
  start: Scalars['Int'];
  type: Scalars['Int'];
  updatedAt: Scalars['Int'];
};

export type ClearScheduleItemCountOrderByAggregateInput = {
  createdAt?: InputMaybe<ClearSortOrder>;
  description?: InputMaybe<ClearSortOrder>;
  end?: InputMaybe<ClearSortOrder>;
  eventGroupId?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  finalized?: InputMaybe<ClearSortOrder>;
  hostEmail?: InputMaybe<ClearSortOrder>;
  hostName?: InputMaybe<ClearSortOrder>;
  hostPronoun?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  internal?: InputMaybe<ClearSortOrder>;
  link?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  organizerEmail?: InputMaybe<ClearSortOrder>;
  organizerName?: InputMaybe<ClearSortOrder>;
  organizerPhone?: InputMaybe<ClearSortOrder>;
  start?: InputMaybe<ClearSortOrder>;
  type?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearScheduleItemCreateInput = {
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['ClearDateTime']>;
  event?: InputMaybe<ClearEventCreateNestedOneWithoutScheduleInput>;
  eventGroup?: InputMaybe<ClearEventGroupCreateNestedOneWithoutScheduleInput>;
  finalized?: InputMaybe<Scalars['Boolean']>;
  hostEmail?: InputMaybe<Scalars['String']>;
  hostName?: InputMaybe<Scalars['String']>;
  hostPronoun?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  internal?: InputMaybe<Scalars['Boolean']>;
  link?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  organizerEmail?: InputMaybe<Scalars['String']>;
  organizerName?: InputMaybe<Scalars['String']>;
  organizerPhone?: InputMaybe<Scalars['String']>;
  start: Scalars['ClearDateTime'];
  type?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearScheduleItemCreateManyEventGroupInput = {
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['ClearDateTime']>;
  eventId?: InputMaybe<Scalars['String']>;
  finalized?: InputMaybe<Scalars['Boolean']>;
  hostEmail?: InputMaybe<Scalars['String']>;
  hostName?: InputMaybe<Scalars['String']>;
  hostPronoun?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  internal?: InputMaybe<Scalars['Boolean']>;
  link?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  organizerEmail?: InputMaybe<Scalars['String']>;
  organizerName?: InputMaybe<Scalars['String']>;
  organizerPhone?: InputMaybe<Scalars['String']>;
  start: Scalars['ClearDateTime'];
  type?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearScheduleItemCreateManyEventGroupInputEnvelope = {
  data: Array<ClearScheduleItemCreateManyEventGroupInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};

export type ClearScheduleItemCreateManyEventInput = {
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['ClearDateTime']>;
  eventGroupId?: InputMaybe<Scalars['String']>;
  finalized?: InputMaybe<Scalars['Boolean']>;
  hostEmail?: InputMaybe<Scalars['String']>;
  hostName?: InputMaybe<Scalars['String']>;
  hostPronoun?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  internal?: InputMaybe<Scalars['Boolean']>;
  link?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  organizerEmail?: InputMaybe<Scalars['String']>;
  organizerName?: InputMaybe<Scalars['String']>;
  organizerPhone?: InputMaybe<Scalars['String']>;
  start: Scalars['ClearDateTime'];
  type?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearScheduleItemCreateManyEventInputEnvelope = {
  data: Array<ClearScheduleItemCreateManyEventInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};

export type ClearScheduleItemCreateManyInput = {
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['ClearDateTime']>;
  eventGroupId?: InputMaybe<Scalars['String']>;
  eventId?: InputMaybe<Scalars['String']>;
  finalized?: InputMaybe<Scalars['Boolean']>;
  hostEmail?: InputMaybe<Scalars['String']>;
  hostName?: InputMaybe<Scalars['String']>;
  hostPronoun?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  internal?: InputMaybe<Scalars['Boolean']>;
  link?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  organizerEmail?: InputMaybe<Scalars['String']>;
  organizerName?: InputMaybe<Scalars['String']>;
  organizerPhone?: InputMaybe<Scalars['String']>;
  start: Scalars['ClearDateTime'];
  type?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearScheduleItemCreateNestedManyWithoutEventGroupInput = {
  connect?: InputMaybe<Array<ClearScheduleItemWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearScheduleItemCreateOrConnectWithoutEventGroupInput>>;
  create?: InputMaybe<Array<ClearScheduleItemCreateWithoutEventGroupInput>>;
  createMany?: InputMaybe<ClearScheduleItemCreateManyEventGroupInputEnvelope>;
};

export type ClearScheduleItemCreateNestedManyWithoutEventInput = {
  connect?: InputMaybe<Array<ClearScheduleItemWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearScheduleItemCreateOrConnectWithoutEventInput>>;
  create?: InputMaybe<Array<ClearScheduleItemCreateWithoutEventInput>>;
  createMany?: InputMaybe<ClearScheduleItemCreateManyEventInputEnvelope>;
};

export type ClearScheduleItemCreateOrConnectWithoutEventGroupInput = {
  create: ClearScheduleItemCreateWithoutEventGroupInput;
  where: ClearScheduleItemWhereUniqueInput;
};

export type ClearScheduleItemCreateOrConnectWithoutEventInput = {
  create: ClearScheduleItemCreateWithoutEventInput;
  where: ClearScheduleItemWhereUniqueInput;
};

export type ClearScheduleItemCreateWithoutEventGroupInput = {
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['ClearDateTime']>;
  event?: InputMaybe<ClearEventCreateNestedOneWithoutScheduleInput>;
  finalized?: InputMaybe<Scalars['Boolean']>;
  hostEmail?: InputMaybe<Scalars['String']>;
  hostName?: InputMaybe<Scalars['String']>;
  hostPronoun?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  internal?: InputMaybe<Scalars['Boolean']>;
  link?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  organizerEmail?: InputMaybe<Scalars['String']>;
  organizerName?: InputMaybe<Scalars['String']>;
  organizerPhone?: InputMaybe<Scalars['String']>;
  start: Scalars['ClearDateTime'];
  type?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearScheduleItemCreateWithoutEventInput = {
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  description?: InputMaybe<Scalars['String']>;
  end?: InputMaybe<Scalars['ClearDateTime']>;
  eventGroup?: InputMaybe<ClearEventGroupCreateNestedOneWithoutScheduleInput>;
  finalized?: InputMaybe<Scalars['Boolean']>;
  hostEmail?: InputMaybe<Scalars['String']>;
  hostName?: InputMaybe<Scalars['String']>;
  hostPronoun?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  internal?: InputMaybe<Scalars['Boolean']>;
  link?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  organizerEmail?: InputMaybe<Scalars['String']>;
  organizerName?: InputMaybe<Scalars['String']>;
  organizerPhone?: InputMaybe<Scalars['String']>;
  start: Scalars['ClearDateTime'];
  type?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearScheduleItemGroupBy = {
  __typename?: 'ClearScheduleItemGroupBy';
  _count?: Maybe<ClearScheduleItemCountAggregate>;
  _max?: Maybe<ClearScheduleItemMaxAggregate>;
  _min?: Maybe<ClearScheduleItemMinAggregate>;
  createdAt: Scalars['ClearDateTime'];
  description?: Maybe<Scalars['String']>;
  end?: Maybe<Scalars['ClearDateTime']>;
  eventGroupId?: Maybe<Scalars['String']>;
  eventId?: Maybe<Scalars['String']>;
  finalized: Scalars['Boolean'];
  hostEmail?: Maybe<Scalars['String']>;
  hostName?: Maybe<Scalars['String']>;
  hostPronoun?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  internal: Scalars['Boolean'];
  link?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  organizerEmail?: Maybe<Scalars['String']>;
  organizerName?: Maybe<Scalars['String']>;
  organizerPhone?: Maybe<Scalars['String']>;
  start: Scalars['ClearDateTime'];
  type: Scalars['String'];
  updatedAt: Scalars['ClearDateTime'];
};

export type ClearScheduleItemListRelationFilter = {
  every?: InputMaybe<ClearScheduleItemWhereInput>;
  none?: InputMaybe<ClearScheduleItemWhereInput>;
  some?: InputMaybe<ClearScheduleItemWhereInput>;
};

export type ClearScheduleItemMaxAggregate = {
  __typename?: 'ClearScheduleItemMaxAggregate';
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  description?: Maybe<Scalars['String']>;
  end?: Maybe<Scalars['ClearDateTime']>;
  eventGroupId?: Maybe<Scalars['String']>;
  eventId?: Maybe<Scalars['String']>;
  finalized?: Maybe<Scalars['Boolean']>;
  hostEmail?: Maybe<Scalars['String']>;
  hostName?: Maybe<Scalars['String']>;
  hostPronoun?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  internal?: Maybe<Scalars['Boolean']>;
  link?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  organizerEmail?: Maybe<Scalars['String']>;
  organizerName?: Maybe<Scalars['String']>;
  organizerPhone?: Maybe<Scalars['String']>;
  start?: Maybe<Scalars['ClearDateTime']>;
  type?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
};

export type ClearScheduleItemMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<ClearSortOrder>;
  description?: InputMaybe<ClearSortOrder>;
  end?: InputMaybe<ClearSortOrder>;
  eventGroupId?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  finalized?: InputMaybe<ClearSortOrder>;
  hostEmail?: InputMaybe<ClearSortOrder>;
  hostName?: InputMaybe<ClearSortOrder>;
  hostPronoun?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  internal?: InputMaybe<ClearSortOrder>;
  link?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  organizerEmail?: InputMaybe<ClearSortOrder>;
  organizerName?: InputMaybe<ClearSortOrder>;
  organizerPhone?: InputMaybe<ClearSortOrder>;
  start?: InputMaybe<ClearSortOrder>;
  type?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearScheduleItemMinAggregate = {
  __typename?: 'ClearScheduleItemMinAggregate';
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  description?: Maybe<Scalars['String']>;
  end?: Maybe<Scalars['ClearDateTime']>;
  eventGroupId?: Maybe<Scalars['String']>;
  eventId?: Maybe<Scalars['String']>;
  finalized?: Maybe<Scalars['Boolean']>;
  hostEmail?: Maybe<Scalars['String']>;
  hostName?: Maybe<Scalars['String']>;
  hostPronoun?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  internal?: Maybe<Scalars['Boolean']>;
  link?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  organizerEmail?: Maybe<Scalars['String']>;
  organizerName?: Maybe<Scalars['String']>;
  organizerPhone?: Maybe<Scalars['String']>;
  start?: Maybe<Scalars['ClearDateTime']>;
  type?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
};

export type ClearScheduleItemMinOrderByAggregateInput = {
  createdAt?: InputMaybe<ClearSortOrder>;
  description?: InputMaybe<ClearSortOrder>;
  end?: InputMaybe<ClearSortOrder>;
  eventGroupId?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  finalized?: InputMaybe<ClearSortOrder>;
  hostEmail?: InputMaybe<ClearSortOrder>;
  hostName?: InputMaybe<ClearSortOrder>;
  hostPronoun?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  internal?: InputMaybe<ClearSortOrder>;
  link?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  organizerEmail?: InputMaybe<ClearSortOrder>;
  organizerName?: InputMaybe<ClearSortOrder>;
  organizerPhone?: InputMaybe<ClearSortOrder>;
  start?: InputMaybe<ClearSortOrder>;
  type?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearScheduleItemOrderByRelationAggregateInput = {
  _count?: InputMaybe<ClearSortOrder>;
};

export type ClearScheduleItemOrderByWithAggregationInput = {
  _count?: InputMaybe<ClearScheduleItemCountOrderByAggregateInput>;
  _max?: InputMaybe<ClearScheduleItemMaxOrderByAggregateInput>;
  _min?: InputMaybe<ClearScheduleItemMinOrderByAggregateInput>;
  createdAt?: InputMaybe<ClearSortOrder>;
  description?: InputMaybe<ClearSortOrder>;
  end?: InputMaybe<ClearSortOrder>;
  eventGroupId?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  finalized?: InputMaybe<ClearSortOrder>;
  hostEmail?: InputMaybe<ClearSortOrder>;
  hostName?: InputMaybe<ClearSortOrder>;
  hostPronoun?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  internal?: InputMaybe<ClearSortOrder>;
  link?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  organizerEmail?: InputMaybe<ClearSortOrder>;
  organizerName?: InputMaybe<ClearSortOrder>;
  organizerPhone?: InputMaybe<ClearSortOrder>;
  start?: InputMaybe<ClearSortOrder>;
  type?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearScheduleItemOrderByWithRelationInput = {
  createdAt?: InputMaybe<ClearSortOrder>;
  description?: InputMaybe<ClearSortOrder>;
  end?: InputMaybe<ClearSortOrder>;
  event?: InputMaybe<ClearEventOrderByWithRelationInput>;
  eventGroup?: InputMaybe<ClearEventGroupOrderByWithRelationInput>;
  eventGroupId?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  finalized?: InputMaybe<ClearSortOrder>;
  hostEmail?: InputMaybe<ClearSortOrder>;
  hostName?: InputMaybe<ClearSortOrder>;
  hostPronoun?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  internal?: InputMaybe<ClearSortOrder>;
  link?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  organizerEmail?: InputMaybe<ClearSortOrder>;
  organizerName?: InputMaybe<ClearSortOrder>;
  organizerPhone?: InputMaybe<ClearSortOrder>;
  start?: InputMaybe<ClearSortOrder>;
  type?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export enum ClearScheduleItemScalarFieldEnum {
  CreatedAt = 'createdAt',
  Description = 'description',
  End = 'end',
  EventGroupId = 'eventGroupId',
  EventId = 'eventId',
  Finalized = 'finalized',
  HostEmail = 'hostEmail',
  HostName = 'hostName',
  HostPronoun = 'hostPronoun',
  Id = 'id',
  Internal = 'internal',
  Link = 'link',
  Metadata = 'metadata',
  Name = 'name',
  OrganizerEmail = 'organizerEmail',
  OrganizerName = 'organizerName',
  OrganizerPhone = 'organizerPhone',
  Start = 'start',
  Type = 'type',
  UpdatedAt = 'updatedAt'
}

export type ClearScheduleItemScalarWhereInput = {
  AND?: InputMaybe<Array<ClearScheduleItemScalarWhereInput>>;
  NOT?: InputMaybe<Array<ClearScheduleItemScalarWhereInput>>;
  OR?: InputMaybe<Array<ClearScheduleItemScalarWhereInput>>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  description?: InputMaybe<ClearStringNullableFilter>;
  end?: InputMaybe<ClearDateTimeNullableFilter>;
  eventGroupId?: InputMaybe<ClearStringNullableFilter>;
  eventId?: InputMaybe<ClearStringNullableFilter>;
  finalized?: InputMaybe<ClearBoolFilter>;
  hostEmail?: InputMaybe<ClearStringNullableFilter>;
  hostName?: InputMaybe<ClearStringNullableFilter>;
  hostPronoun?: InputMaybe<ClearStringNullableFilter>;
  id?: InputMaybe<ClearStringFilter>;
  internal?: InputMaybe<ClearBoolFilter>;
  link?: InputMaybe<ClearStringNullableFilter>;
  name?: InputMaybe<ClearStringFilter>;
  organizerEmail?: InputMaybe<ClearStringNullableFilter>;
  organizerName?: InputMaybe<ClearStringNullableFilter>;
  organizerPhone?: InputMaybe<ClearStringNullableFilter>;
  start?: InputMaybe<ClearDateTimeFilter>;
  type?: InputMaybe<ClearStringFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
};

export type ClearScheduleItemScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ClearScheduleItemScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ClearScheduleItemScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ClearScheduleItemScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  description?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  end?: InputMaybe<ClearDateTimeNullableWithAggregatesFilter>;
  eventGroupId?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  eventId?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  finalized?: InputMaybe<ClearBoolWithAggregatesFilter>;
  hostEmail?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  hostName?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  hostPronoun?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  id?: InputMaybe<ClearStringWithAggregatesFilter>;
  internal?: InputMaybe<ClearBoolWithAggregatesFilter>;
  link?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  name?: InputMaybe<ClearStringWithAggregatesFilter>;
  organizerEmail?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  organizerName?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  organizerPhone?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  start?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  type?: InputMaybe<ClearStringWithAggregatesFilter>;
  updatedAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
};

export type ClearScheduleItemUpdateInput = {
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  end?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  event?: InputMaybe<ClearEventUpdateOneWithoutScheduleInput>;
  eventGroup?: InputMaybe<ClearEventGroupUpdateOneWithoutScheduleInput>;
  finalized?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  hostEmail?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  hostName?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  hostPronoun?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  internal?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  link?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  organizerEmail?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  organizerName?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  organizerPhone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  start?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  type?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
};

export type ClearScheduleItemUpdateManyMutationInput = {
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  end?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  finalized?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  hostEmail?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  hostName?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  hostPronoun?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  internal?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  link?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  organizerEmail?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  organizerName?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  organizerPhone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  start?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  type?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
};

export type ClearScheduleItemUpdateManyWithWhereWithoutEventGroupInput = {
  data: ClearScheduleItemUpdateManyMutationInput;
  where: ClearScheduleItemScalarWhereInput;
};

export type ClearScheduleItemUpdateManyWithWhereWithoutEventInput = {
  data: ClearScheduleItemUpdateManyMutationInput;
  where: ClearScheduleItemScalarWhereInput;
};

export type ClearScheduleItemUpdateManyWithoutEventGroupInput = {
  connect?: InputMaybe<Array<ClearScheduleItemWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearScheduleItemCreateOrConnectWithoutEventGroupInput>>;
  create?: InputMaybe<Array<ClearScheduleItemCreateWithoutEventGroupInput>>;
  createMany?: InputMaybe<ClearScheduleItemCreateManyEventGroupInputEnvelope>;
  delete?: InputMaybe<Array<ClearScheduleItemWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClearScheduleItemScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClearScheduleItemWhereUniqueInput>>;
  set?: InputMaybe<Array<ClearScheduleItemWhereUniqueInput>>;
  update?: InputMaybe<Array<ClearScheduleItemUpdateWithWhereUniqueWithoutEventGroupInput>>;
  updateMany?: InputMaybe<Array<ClearScheduleItemUpdateManyWithWhereWithoutEventGroupInput>>;
  upsert?: InputMaybe<Array<ClearScheduleItemUpsertWithWhereUniqueWithoutEventGroupInput>>;
};

export type ClearScheduleItemUpdateManyWithoutEventInput = {
  connect?: InputMaybe<Array<ClearScheduleItemWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearScheduleItemCreateOrConnectWithoutEventInput>>;
  create?: InputMaybe<Array<ClearScheduleItemCreateWithoutEventInput>>;
  createMany?: InputMaybe<ClearScheduleItemCreateManyEventInputEnvelope>;
  delete?: InputMaybe<Array<ClearScheduleItemWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClearScheduleItemScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClearScheduleItemWhereUniqueInput>>;
  set?: InputMaybe<Array<ClearScheduleItemWhereUniqueInput>>;
  update?: InputMaybe<Array<ClearScheduleItemUpdateWithWhereUniqueWithoutEventInput>>;
  updateMany?: InputMaybe<Array<ClearScheduleItemUpdateManyWithWhereWithoutEventInput>>;
  upsert?: InputMaybe<Array<ClearScheduleItemUpsertWithWhereUniqueWithoutEventInput>>;
};

export type ClearScheduleItemUpdateWithWhereUniqueWithoutEventGroupInput = {
  data: ClearScheduleItemUpdateWithoutEventGroupInput;
  where: ClearScheduleItemWhereUniqueInput;
};

export type ClearScheduleItemUpdateWithWhereUniqueWithoutEventInput = {
  data: ClearScheduleItemUpdateWithoutEventInput;
  where: ClearScheduleItemWhereUniqueInput;
};

export type ClearScheduleItemUpdateWithoutEventGroupInput = {
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  end?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  event?: InputMaybe<ClearEventUpdateOneWithoutScheduleInput>;
  finalized?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  hostEmail?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  hostName?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  hostPronoun?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  internal?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  link?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  organizerEmail?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  organizerName?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  organizerPhone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  start?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  type?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
};

export type ClearScheduleItemUpdateWithoutEventInput = {
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  end?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  eventGroup?: InputMaybe<ClearEventGroupUpdateOneWithoutScheduleInput>;
  finalized?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  hostEmail?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  hostName?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  hostPronoun?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  internal?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  link?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  organizerEmail?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  organizerName?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  organizerPhone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  start?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  type?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
};

export type ClearScheduleItemUpsertWithWhereUniqueWithoutEventGroupInput = {
  create: ClearScheduleItemCreateWithoutEventGroupInput;
  update: ClearScheduleItemUpdateWithoutEventGroupInput;
  where: ClearScheduleItemWhereUniqueInput;
};

export type ClearScheduleItemUpsertWithWhereUniqueWithoutEventInput = {
  create: ClearScheduleItemCreateWithoutEventInput;
  update: ClearScheduleItemUpdateWithoutEventInput;
  where: ClearScheduleItemWhereUniqueInput;
};

export type ClearScheduleItemWhereInput = {
  AND?: InputMaybe<Array<ClearScheduleItemWhereInput>>;
  NOT?: InputMaybe<Array<ClearScheduleItemWhereInput>>;
  OR?: InputMaybe<Array<ClearScheduleItemWhereInput>>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  description?: InputMaybe<ClearStringNullableFilter>;
  end?: InputMaybe<ClearDateTimeNullableFilter>;
  event?: InputMaybe<ClearEventRelationFilter>;
  eventGroup?: InputMaybe<ClearEventGroupRelationFilter>;
  eventGroupId?: InputMaybe<ClearStringNullableFilter>;
  eventId?: InputMaybe<ClearStringNullableFilter>;
  finalized?: InputMaybe<ClearBoolFilter>;
  hostEmail?: InputMaybe<ClearStringNullableFilter>;
  hostName?: InputMaybe<ClearStringNullableFilter>;
  hostPronoun?: InputMaybe<ClearStringNullableFilter>;
  id?: InputMaybe<ClearStringFilter>;
  internal?: InputMaybe<ClearBoolFilter>;
  link?: InputMaybe<ClearStringNullableFilter>;
  name?: InputMaybe<ClearStringFilter>;
  organizerEmail?: InputMaybe<ClearStringNullableFilter>;
  organizerName?: InputMaybe<ClearStringNullableFilter>;
  organizerPhone?: InputMaybe<ClearStringNullableFilter>;
  start?: InputMaybe<ClearDateTimeFilter>;
  type?: InputMaybe<ClearStringFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
};

export type ClearScheduleItemWhereUniqueInput = {
  id?: InputMaybe<Scalars['String']>;
};

export enum ClearScholarshipReason {
  CantAfford = 'CANT_AFFORD',
  DontBelievePay = 'DONT_BELIEVE_PAY',
  FamilyCantAfford = 'FAMILY_CANT_AFFORD',
  FamilyUnsure = 'FAMILY_UNSURE',
  Other = 'OTHER'
}

export enum ClearSortOrder {
  Asc = 'asc',
  Desc = 'desc'
}

export type ClearSponsor = {
  __typename?: 'ClearSponsor';
  amount: Scalars['Int'];
  contactEmail?: Maybe<Scalars['String']>;
  contactName?: Maybe<Scalars['String']>;
  contactPhone?: Maybe<Scalars['String']>;
  createdAt: Scalars['ClearDateTime'];
  darkLogoImageUri?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  event?: Maybe<ClearEvent>;
  eventId?: Maybe<Scalars['String']>;
  getMetadata?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  link?: Maybe<Scalars['String']>;
  logoImageUri?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  perks?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ClearDateTime'];
};


export type ClearSponsorGetMetadataArgs = {
  key: Scalars['String'];
};

export type ClearSponsorAvgAggregate = {
  __typename?: 'ClearSponsorAvgAggregate';
  amount?: Maybe<Scalars['Float']>;
};

export type ClearSponsorAvgOrderByAggregateInput = {
  amount?: InputMaybe<ClearSortOrder>;
};

export type ClearSponsorCountAggregate = {
  __typename?: 'ClearSponsorCountAggregate';
  _all: Scalars['Int'];
  amount: Scalars['Int'];
  contactEmail: Scalars['Int'];
  contactName: Scalars['Int'];
  contactPhone: Scalars['Int'];
  createdAt: Scalars['Int'];
  darkLogoImageUri: Scalars['Int'];
  description: Scalars['Int'];
  eventId: Scalars['Int'];
  id: Scalars['Int'];
  link: Scalars['Int'];
  logoImageUri: Scalars['Int'];
  metadata: Scalars['Int'];
  name: Scalars['Int'];
  perks: Scalars['Int'];
  updatedAt: Scalars['Int'];
};

export type ClearSponsorCountOrderByAggregateInput = {
  amount?: InputMaybe<ClearSortOrder>;
  contactEmail?: InputMaybe<ClearSortOrder>;
  contactName?: InputMaybe<ClearSortOrder>;
  contactPhone?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  darkLogoImageUri?: InputMaybe<ClearSortOrder>;
  description?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  link?: InputMaybe<ClearSortOrder>;
  logoImageUri?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  perks?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearSponsorCreateInput = {
  amount?: InputMaybe<Scalars['Int']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  contactName?: InputMaybe<Scalars['String']>;
  contactPhone?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  darkLogoImageUri?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<ClearEventCreateNestedOneWithoutSponsorsInput>;
  id?: InputMaybe<Scalars['String']>;
  link?: InputMaybe<Scalars['String']>;
  logoImageUri?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  perks?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearSponsorCreateManyEventInput = {
  amount?: InputMaybe<Scalars['Int']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  contactName?: InputMaybe<Scalars['String']>;
  contactPhone?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  darkLogoImageUri?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  link?: InputMaybe<Scalars['String']>;
  logoImageUri?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  perks?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearSponsorCreateManyEventInputEnvelope = {
  data: Array<ClearSponsorCreateManyEventInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};

export type ClearSponsorCreateManyInput = {
  amount?: InputMaybe<Scalars['Int']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  contactName?: InputMaybe<Scalars['String']>;
  contactPhone?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  darkLogoImageUri?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  eventId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  link?: InputMaybe<Scalars['String']>;
  logoImageUri?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  perks?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearSponsorCreateNestedManyWithoutEventInput = {
  connect?: InputMaybe<Array<ClearSponsorWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearSponsorCreateOrConnectWithoutEventInput>>;
  create?: InputMaybe<Array<ClearSponsorCreateWithoutEventInput>>;
  createMany?: InputMaybe<ClearSponsorCreateManyEventInputEnvelope>;
};

export type ClearSponsorCreateOrConnectWithoutEventInput = {
  create: ClearSponsorCreateWithoutEventInput;
  where: ClearSponsorWhereUniqueInput;
};

export type ClearSponsorCreateWithoutEventInput = {
  amount?: InputMaybe<Scalars['Int']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  contactName?: InputMaybe<Scalars['String']>;
  contactPhone?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  darkLogoImageUri?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  link?: InputMaybe<Scalars['String']>;
  logoImageUri?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  perks?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
};

export type ClearSponsorGroupBy = {
  __typename?: 'ClearSponsorGroupBy';
  _avg?: Maybe<ClearSponsorAvgAggregate>;
  _count?: Maybe<ClearSponsorCountAggregate>;
  _max?: Maybe<ClearSponsorMaxAggregate>;
  _min?: Maybe<ClearSponsorMinAggregate>;
  _sum?: Maybe<ClearSponsorSumAggregate>;
  amount: Scalars['Int'];
  contactEmail?: Maybe<Scalars['String']>;
  contactName?: Maybe<Scalars['String']>;
  contactPhone?: Maybe<Scalars['String']>;
  createdAt: Scalars['ClearDateTime'];
  darkLogoImageUri?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  eventId?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  link?: Maybe<Scalars['String']>;
  logoImageUri?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  perks?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ClearDateTime'];
};

export type ClearSponsorListRelationFilter = {
  every?: InputMaybe<ClearSponsorWhereInput>;
  none?: InputMaybe<ClearSponsorWhereInput>;
  some?: InputMaybe<ClearSponsorWhereInput>;
};

export type ClearSponsorMaxAggregate = {
  __typename?: 'ClearSponsorMaxAggregate';
  amount?: Maybe<Scalars['Int']>;
  contactEmail?: Maybe<Scalars['String']>;
  contactName?: Maybe<Scalars['String']>;
  contactPhone?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  darkLogoImageUri?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  eventId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  logoImageUri?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  perks?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
};

export type ClearSponsorMaxOrderByAggregateInput = {
  amount?: InputMaybe<ClearSortOrder>;
  contactEmail?: InputMaybe<ClearSortOrder>;
  contactName?: InputMaybe<ClearSortOrder>;
  contactPhone?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  darkLogoImageUri?: InputMaybe<ClearSortOrder>;
  description?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  link?: InputMaybe<ClearSortOrder>;
  logoImageUri?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  perks?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearSponsorMinAggregate = {
  __typename?: 'ClearSponsorMinAggregate';
  amount?: Maybe<Scalars['Int']>;
  contactEmail?: Maybe<Scalars['String']>;
  contactName?: Maybe<Scalars['String']>;
  contactPhone?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  darkLogoImageUri?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  eventId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  logoImageUri?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  perks?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
};

export type ClearSponsorMinOrderByAggregateInput = {
  amount?: InputMaybe<ClearSortOrder>;
  contactEmail?: InputMaybe<ClearSortOrder>;
  contactName?: InputMaybe<ClearSortOrder>;
  contactPhone?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  darkLogoImageUri?: InputMaybe<ClearSortOrder>;
  description?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  link?: InputMaybe<ClearSortOrder>;
  logoImageUri?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  perks?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearSponsorOrderByRelationAggregateInput = {
  _count?: InputMaybe<ClearSortOrder>;
};

export type ClearSponsorOrderByWithAggregationInput = {
  _avg?: InputMaybe<ClearSponsorAvgOrderByAggregateInput>;
  _count?: InputMaybe<ClearSponsorCountOrderByAggregateInput>;
  _max?: InputMaybe<ClearSponsorMaxOrderByAggregateInput>;
  _min?: InputMaybe<ClearSponsorMinOrderByAggregateInput>;
  _sum?: InputMaybe<ClearSponsorSumOrderByAggregateInput>;
  amount?: InputMaybe<ClearSortOrder>;
  contactEmail?: InputMaybe<ClearSortOrder>;
  contactName?: InputMaybe<ClearSortOrder>;
  contactPhone?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  darkLogoImageUri?: InputMaybe<ClearSortOrder>;
  description?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  link?: InputMaybe<ClearSortOrder>;
  logoImageUri?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  perks?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export type ClearSponsorOrderByWithRelationInput = {
  amount?: InputMaybe<ClearSortOrder>;
  contactEmail?: InputMaybe<ClearSortOrder>;
  contactName?: InputMaybe<ClearSortOrder>;
  contactPhone?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  darkLogoImageUri?: InputMaybe<ClearSortOrder>;
  description?: InputMaybe<ClearSortOrder>;
  event?: InputMaybe<ClearEventOrderByWithRelationInput>;
  eventId?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  link?: InputMaybe<ClearSortOrder>;
  logoImageUri?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  perks?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
};

export enum ClearSponsorScalarFieldEnum {
  Amount = 'amount',
  ContactEmail = 'contactEmail',
  ContactName = 'contactName',
  ContactPhone = 'contactPhone',
  CreatedAt = 'createdAt',
  DarkLogoImageUri = 'darkLogoImageUri',
  Description = 'description',
  EventId = 'eventId',
  Id = 'id',
  Link = 'link',
  LogoImageUri = 'logoImageUri',
  Metadata = 'metadata',
  Name = 'name',
  Perks = 'perks',
  UpdatedAt = 'updatedAt'
}

export type ClearSponsorScalarWhereInput = {
  AND?: InputMaybe<Array<ClearSponsorScalarWhereInput>>;
  NOT?: InputMaybe<Array<ClearSponsorScalarWhereInput>>;
  OR?: InputMaybe<Array<ClearSponsorScalarWhereInput>>;
  amount?: InputMaybe<ClearIntFilter>;
  contactEmail?: InputMaybe<ClearStringNullableFilter>;
  contactName?: InputMaybe<ClearStringNullableFilter>;
  contactPhone?: InputMaybe<ClearStringNullableFilter>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  darkLogoImageUri?: InputMaybe<ClearStringNullableFilter>;
  description?: InputMaybe<ClearStringNullableFilter>;
  eventId?: InputMaybe<ClearStringNullableFilter>;
  id?: InputMaybe<ClearStringFilter>;
  link?: InputMaybe<ClearStringNullableFilter>;
  logoImageUri?: InputMaybe<ClearStringNullableFilter>;
  name?: InputMaybe<ClearStringFilter>;
  perks?: InputMaybe<ClearStringNullableFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
};

export type ClearSponsorScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ClearSponsorScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ClearSponsorScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ClearSponsorScalarWhereWithAggregatesInput>>;
  amount?: InputMaybe<ClearIntWithAggregatesFilter>;
  contactEmail?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  contactName?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  contactPhone?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  createdAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  darkLogoImageUri?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  description?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  eventId?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  id?: InputMaybe<ClearStringWithAggregatesFilter>;
  link?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  logoImageUri?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  name?: InputMaybe<ClearStringWithAggregatesFilter>;
  perks?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  updatedAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
};

export type ClearSponsorSumAggregate = {
  __typename?: 'ClearSponsorSumAggregate';
  amount?: Maybe<Scalars['Int']>;
};

export type ClearSponsorSumOrderByAggregateInput = {
  amount?: InputMaybe<ClearSortOrder>;
};

export type ClearSponsorUpdateInput = {
  amount?: InputMaybe<ClearIntFieldUpdateOperationsInput>;
  contactEmail?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contactName?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contactPhone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  darkLogoImageUri?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  event?: InputMaybe<ClearEventUpdateOneWithoutSponsorsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  link?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  logoImageUri?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  perks?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
};

export type ClearSponsorUpdateManyMutationInput = {
  amount?: InputMaybe<ClearIntFieldUpdateOperationsInput>;
  contactEmail?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contactName?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contactPhone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  darkLogoImageUri?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  link?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  logoImageUri?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  perks?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
};

export type ClearSponsorUpdateManyWithWhereWithoutEventInput = {
  data: ClearSponsorUpdateManyMutationInput;
  where: ClearSponsorScalarWhereInput;
};

export type ClearSponsorUpdateManyWithoutEventInput = {
  connect?: InputMaybe<Array<ClearSponsorWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearSponsorCreateOrConnectWithoutEventInput>>;
  create?: InputMaybe<Array<ClearSponsorCreateWithoutEventInput>>;
  createMany?: InputMaybe<ClearSponsorCreateManyEventInputEnvelope>;
  delete?: InputMaybe<Array<ClearSponsorWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClearSponsorScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClearSponsorWhereUniqueInput>>;
  set?: InputMaybe<Array<ClearSponsorWhereUniqueInput>>;
  update?: InputMaybe<Array<ClearSponsorUpdateWithWhereUniqueWithoutEventInput>>;
  updateMany?: InputMaybe<Array<ClearSponsorUpdateManyWithWhereWithoutEventInput>>;
  upsert?: InputMaybe<Array<ClearSponsorUpsertWithWhereUniqueWithoutEventInput>>;
};

export type ClearSponsorUpdateWithWhereUniqueWithoutEventInput = {
  data: ClearSponsorUpdateWithoutEventInput;
  where: ClearSponsorWhereUniqueInput;
};

export type ClearSponsorUpdateWithoutEventInput = {
  amount?: InputMaybe<ClearIntFieldUpdateOperationsInput>;
  contactEmail?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contactName?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contactPhone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  darkLogoImageUri?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  link?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  logoImageUri?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  perks?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
};

export type ClearSponsorUpsertWithWhereUniqueWithoutEventInput = {
  create: ClearSponsorCreateWithoutEventInput;
  update: ClearSponsorUpdateWithoutEventInput;
  where: ClearSponsorWhereUniqueInput;
};

export type ClearSponsorWhereInput = {
  AND?: InputMaybe<Array<ClearSponsorWhereInput>>;
  NOT?: InputMaybe<Array<ClearSponsorWhereInput>>;
  OR?: InputMaybe<Array<ClearSponsorWhereInput>>;
  amount?: InputMaybe<ClearIntFilter>;
  contactEmail?: InputMaybe<ClearStringNullableFilter>;
  contactName?: InputMaybe<ClearStringNullableFilter>;
  contactPhone?: InputMaybe<ClearStringNullableFilter>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  darkLogoImageUri?: InputMaybe<ClearStringNullableFilter>;
  description?: InputMaybe<ClearStringNullableFilter>;
  event?: InputMaybe<ClearEventRelationFilter>;
  eventId?: InputMaybe<ClearStringNullableFilter>;
  id?: InputMaybe<ClearStringFilter>;
  link?: InputMaybe<ClearStringNullableFilter>;
  logoImageUri?: InputMaybe<ClearStringNullableFilter>;
  name?: InputMaybe<ClearStringFilter>;
  perks?: InputMaybe<ClearStringNullableFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
};

export type ClearSponsorWhereUniqueInput = {
  id?: InputMaybe<Scalars['String']>;
};

export type ClearStringFieldUpdateOperationsInput = {
  set?: InputMaybe<Scalars['String']>;
};

export type ClearStringFilter = {
  contains?: InputMaybe<Scalars['String']>;
  endsWith?: InputMaybe<Scalars['String']>;
  equals?: InputMaybe<Scalars['String']>;
  gt?: InputMaybe<Scalars['String']>;
  gte?: InputMaybe<Scalars['String']>;
  in?: InputMaybe<Array<Scalars['String']>>;
  lt?: InputMaybe<Scalars['String']>;
  lte?: InputMaybe<Scalars['String']>;
  mode?: InputMaybe<ClearQueryMode>;
  not?: InputMaybe<ClearNestedStringFilter>;
  notIn?: InputMaybe<Array<Scalars['String']>>;
  startsWith?: InputMaybe<Scalars['String']>;
};

export type ClearStringNullableFilter = {
  contains?: InputMaybe<Scalars['String']>;
  endsWith?: InputMaybe<Scalars['String']>;
  equals?: InputMaybe<Scalars['String']>;
  gt?: InputMaybe<Scalars['String']>;
  gte?: InputMaybe<Scalars['String']>;
  in?: InputMaybe<Array<Scalars['String']>>;
  lt?: InputMaybe<Scalars['String']>;
  lte?: InputMaybe<Scalars['String']>;
  mode?: InputMaybe<ClearQueryMode>;
  not?: InputMaybe<ClearNestedStringNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['String']>>;
  startsWith?: InputMaybe<Scalars['String']>;
};

export type ClearStringNullableListFilter = {
  equals?: InputMaybe<Array<Scalars['String']>>;
  has?: InputMaybe<Scalars['String']>;
  hasEvery?: InputMaybe<Array<Scalars['String']>>;
  hasSome?: InputMaybe<Array<Scalars['String']>>;
  isEmpty?: InputMaybe<Scalars['Boolean']>;
};

export type ClearStringNullableWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntNullableFilter>;
  _max?: InputMaybe<ClearNestedStringNullableFilter>;
  _min?: InputMaybe<ClearNestedStringNullableFilter>;
  contains?: InputMaybe<Scalars['String']>;
  endsWith?: InputMaybe<Scalars['String']>;
  equals?: InputMaybe<Scalars['String']>;
  gt?: InputMaybe<Scalars['String']>;
  gte?: InputMaybe<Scalars['String']>;
  in?: InputMaybe<Array<Scalars['String']>>;
  lt?: InputMaybe<Scalars['String']>;
  lte?: InputMaybe<Scalars['String']>;
  mode?: InputMaybe<ClearQueryMode>;
  not?: InputMaybe<ClearNestedStringNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']>>;
  startsWith?: InputMaybe<Scalars['String']>;
};

export type ClearStringWithAggregatesFilter = {
  _count?: InputMaybe<ClearNestedIntFilter>;
  _max?: InputMaybe<ClearNestedStringFilter>;
  _min?: InputMaybe<ClearNestedStringFilter>;
  contains?: InputMaybe<Scalars['String']>;
  endsWith?: InputMaybe<Scalars['String']>;
  equals?: InputMaybe<Scalars['String']>;
  gt?: InputMaybe<Scalars['String']>;
  gte?: InputMaybe<Scalars['String']>;
  in?: InputMaybe<Array<Scalars['String']>>;
  lt?: InputMaybe<Scalars['String']>;
  lte?: InputMaybe<Scalars['String']>;
  mode?: InputMaybe<ClearQueryMode>;
  not?: InputMaybe<ClearNestedStringWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']>>;
  startsWith?: InputMaybe<Scalars['String']>;
};

export type ClearTeam = {
  __typename?: 'ClearTeam';
  judges: Array<ClearPublicPerson>;
  mentors: Array<ClearPublicPerson>;
  staff: Array<ClearPublicPerson>;
};

export type ClearTicket = {
  __typename?: 'ClearTicket';
  _count?: Maybe<ClearTicketCount>;
  age?: Maybe<Scalars['Int']>;
  checkedIn?: Maybe<Scalars['ClearDateTime']>;
  checkedOut?: Maybe<Scalars['ClearDateTime']>;
  couponCode?: Maybe<Scalars['String']>;
  createdAt: Scalars['ClearDateTime'];
  email?: Maybe<Scalars['String']>;
  event: ClearEvent;
  eventId: Scalars['String'];
  firstName: Scalars['String'];
  getMetadata?: Maybe<Scalars['String']>;
  guardian?: Maybe<ClearPerson>;
  id: Scalars['String'];
  lastName: Scalars['String'];
  locale: Scalars['String'];
  metadata?: Maybe<Scalars['ClearJSON']>;
  needsGuardian: Scalars['Boolean'];
  payment?: Maybe<ClearPayment>;
  paymentId?: Maybe<Scalars['String']>;
  personId?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  promoCode?: Maybe<ClearPromoCode>;
  promoCodeId?: Maybe<Scalars['String']>;
  sentEmails: Array<ClearEmailTemplate>;
  type: ClearTicketType;
  updatedAt: Scalars['ClearDateTime'];
  username?: Maybe<Scalars['String']>;
  waiverPdfUrl?: Maybe<Scalars['String']>;
  waiverSigned: Scalars['Boolean'];
  waiverSignedId?: Maybe<Scalars['String']>;
  waiverTrackingId?: Maybe<Scalars['String']>;
  waiverUrl?: Maybe<Scalars['String']>;
  whatsApp?: Maybe<Scalars['String']>;
};


export type ClearTicketGetMetadataArgs = {
  key: Scalars['String'];
};


export type ClearTicketSentEmailsArgs = {
  cursor?: InputMaybe<ClearEmailTemplateWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearEmailTemplateScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearEmailTemplateOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEmailTemplateWhereInput>;
};

export type ClearTicketAvgAggregate = {
  __typename?: 'ClearTicketAvgAggregate';
  age?: Maybe<Scalars['Float']>;
};

export type ClearTicketAvgOrderByAggregateInput = {
  age?: InputMaybe<ClearSortOrder>;
};

export type ClearTicketCount = {
  __typename?: 'ClearTicketCount';
  sentEmails: Scalars['Int'];
};

export type ClearTicketCountAggregate = {
  __typename?: 'ClearTicketCountAggregate';
  _all: Scalars['Int'];
  age: Scalars['Int'];
  checkedIn: Scalars['Int'];
  checkedOut: Scalars['Int'];
  couponCode: Scalars['Int'];
  createdAt: Scalars['Int'];
  email: Scalars['Int'];
  eventId: Scalars['Int'];
  firstName: Scalars['Int'];
  id: Scalars['Int'];
  lastName: Scalars['Int'];
  locale: Scalars['Int'];
  metadata: Scalars['Int'];
  paymentId: Scalars['Int'];
  personId: Scalars['Int'];
  phone: Scalars['Int'];
  promoCodeId: Scalars['Int'];
  type: Scalars['Int'];
  updatedAt: Scalars['Int'];
  username: Scalars['Int'];
  waiverPdfUrl: Scalars['Int'];
  waiverSigned: Scalars['Int'];
  waiverSignedId: Scalars['Int'];
  waiverTrackingId: Scalars['Int'];
  waiverUrl: Scalars['Int'];
  whatsApp: Scalars['Int'];
};

export type ClearTicketCountOrderByAggregateInput = {
  age?: InputMaybe<ClearSortOrder>;
  checkedIn?: InputMaybe<ClearSortOrder>;
  checkedOut?: InputMaybe<ClearSortOrder>;
  couponCode?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  email?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  firstName?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  lastName?: InputMaybe<ClearSortOrder>;
  locale?: InputMaybe<ClearSortOrder>;
  paymentId?: InputMaybe<ClearSortOrder>;
  personId?: InputMaybe<ClearSortOrder>;
  phone?: InputMaybe<ClearSortOrder>;
  promoCodeId?: InputMaybe<ClearSortOrder>;
  type?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  username?: InputMaybe<ClearSortOrder>;
  waiverPdfUrl?: InputMaybe<ClearSortOrder>;
  waiverSigned?: InputMaybe<ClearSortOrder>;
  waiverSignedId?: InputMaybe<ClearSortOrder>;
  waiverTrackingId?: InputMaybe<ClearSortOrder>;
  waiverUrl?: InputMaybe<ClearSortOrder>;
  whatsApp?: InputMaybe<ClearSortOrder>;
};

export type ClearTicketCreateInput = {
  age?: InputMaybe<Scalars['Int']>;
  checkedIn?: InputMaybe<Scalars['ClearDateTime']>;
  checkedOut?: InputMaybe<Scalars['ClearDateTime']>;
  couponCode?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  email?: InputMaybe<Scalars['String']>;
  event: ClearEventCreateNestedOneWithoutTicketsInput;
  firstName: Scalars['String'];
  guardian?: InputMaybe<ClearPersonCreateNestedOneWithoutTicketInput>;
  id?: InputMaybe<Scalars['String']>;
  lastName: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  payment?: InputMaybe<ClearPaymentCreateNestedOneWithoutTicketsInput>;
  phone?: InputMaybe<Scalars['String']>;
  promoCode?: InputMaybe<ClearPromoCodeCreateNestedOneWithoutTicketsInput>;
  sentEmails?: InputMaybe<ClearEmailTemplateCreateNestedManyWithoutSentToInput>;
  type?: InputMaybe<ClearTicketType>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  username?: InputMaybe<Scalars['String']>;
  waiverPdfUrl?: InputMaybe<Scalars['String']>;
  waiverSigned?: InputMaybe<Scalars['Boolean']>;
  waiverSignedId?: InputMaybe<Scalars['String']>;
  waiverTrackingId?: InputMaybe<Scalars['String']>;
  waiverUrl?: InputMaybe<Scalars['String']>;
  whatsApp?: InputMaybe<Scalars['String']>;
};

export type ClearTicketCreateManyEventInput = {
  age?: InputMaybe<Scalars['Int']>;
  checkedIn?: InputMaybe<Scalars['ClearDateTime']>;
  checkedOut?: InputMaybe<Scalars['ClearDateTime']>;
  couponCode?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  email?: InputMaybe<Scalars['String']>;
  firstName: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  lastName: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  paymentId?: InputMaybe<Scalars['String']>;
  personId?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  promoCodeId?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<ClearTicketType>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  username?: InputMaybe<Scalars['String']>;
  waiverPdfUrl?: InputMaybe<Scalars['String']>;
  waiverSigned?: InputMaybe<Scalars['Boolean']>;
  waiverSignedId?: InputMaybe<Scalars['String']>;
  waiverTrackingId?: InputMaybe<Scalars['String']>;
  waiverUrl?: InputMaybe<Scalars['String']>;
  whatsApp?: InputMaybe<Scalars['String']>;
};

export type ClearTicketCreateManyEventInputEnvelope = {
  data: Array<ClearTicketCreateManyEventInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};

export type ClearTicketCreateManyGuardianInput = {
  age?: InputMaybe<Scalars['Int']>;
  checkedIn?: InputMaybe<Scalars['ClearDateTime']>;
  checkedOut?: InputMaybe<Scalars['ClearDateTime']>;
  couponCode?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  email?: InputMaybe<Scalars['String']>;
  eventId: Scalars['String'];
  firstName: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  lastName: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  paymentId?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  promoCodeId?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<ClearTicketType>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  username?: InputMaybe<Scalars['String']>;
  waiverPdfUrl?: InputMaybe<Scalars['String']>;
  waiverSigned?: InputMaybe<Scalars['Boolean']>;
  waiverSignedId?: InputMaybe<Scalars['String']>;
  waiverTrackingId?: InputMaybe<Scalars['String']>;
  waiverUrl?: InputMaybe<Scalars['String']>;
  whatsApp?: InputMaybe<Scalars['String']>;
};

export type ClearTicketCreateManyGuardianInputEnvelope = {
  data: Array<ClearTicketCreateManyGuardianInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};

export type ClearTicketCreateManyInput = {
  age?: InputMaybe<Scalars['Int']>;
  checkedIn?: InputMaybe<Scalars['ClearDateTime']>;
  checkedOut?: InputMaybe<Scalars['ClearDateTime']>;
  couponCode?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  email?: InputMaybe<Scalars['String']>;
  eventId: Scalars['String'];
  firstName: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  lastName: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  paymentId?: InputMaybe<Scalars['String']>;
  personId?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  promoCodeId?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<ClearTicketType>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  username?: InputMaybe<Scalars['String']>;
  waiverPdfUrl?: InputMaybe<Scalars['String']>;
  waiverSigned?: InputMaybe<Scalars['Boolean']>;
  waiverSignedId?: InputMaybe<Scalars['String']>;
  waiverTrackingId?: InputMaybe<Scalars['String']>;
  waiverUrl?: InputMaybe<Scalars['String']>;
  whatsApp?: InputMaybe<Scalars['String']>;
};

export type ClearTicketCreateManyPaymentInput = {
  age?: InputMaybe<Scalars['Int']>;
  checkedIn?: InputMaybe<Scalars['ClearDateTime']>;
  checkedOut?: InputMaybe<Scalars['ClearDateTime']>;
  couponCode?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  email?: InputMaybe<Scalars['String']>;
  eventId: Scalars['String'];
  firstName: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  lastName: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  personId?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  promoCodeId?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<ClearTicketType>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  username?: InputMaybe<Scalars['String']>;
  waiverPdfUrl?: InputMaybe<Scalars['String']>;
  waiverSigned?: InputMaybe<Scalars['Boolean']>;
  waiverSignedId?: InputMaybe<Scalars['String']>;
  waiverTrackingId?: InputMaybe<Scalars['String']>;
  waiverUrl?: InputMaybe<Scalars['String']>;
  whatsApp?: InputMaybe<Scalars['String']>;
};

export type ClearTicketCreateManyPaymentInputEnvelope = {
  data: Array<ClearTicketCreateManyPaymentInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};

export type ClearTicketCreateManyPromoCodeInput = {
  age?: InputMaybe<Scalars['Int']>;
  checkedIn?: InputMaybe<Scalars['ClearDateTime']>;
  checkedOut?: InputMaybe<Scalars['ClearDateTime']>;
  couponCode?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  email?: InputMaybe<Scalars['String']>;
  eventId: Scalars['String'];
  firstName: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  lastName: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  paymentId?: InputMaybe<Scalars['String']>;
  personId?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<ClearTicketType>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  username?: InputMaybe<Scalars['String']>;
  waiverPdfUrl?: InputMaybe<Scalars['String']>;
  waiverSigned?: InputMaybe<Scalars['Boolean']>;
  waiverSignedId?: InputMaybe<Scalars['String']>;
  waiverTrackingId?: InputMaybe<Scalars['String']>;
  waiverUrl?: InputMaybe<Scalars['String']>;
  whatsApp?: InputMaybe<Scalars['String']>;
};

export type ClearTicketCreateManyPromoCodeInputEnvelope = {
  data: Array<ClearTicketCreateManyPromoCodeInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};

export type ClearTicketCreateNestedManyWithoutEventInput = {
  connect?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearTicketCreateOrConnectWithoutEventInput>>;
  create?: InputMaybe<Array<ClearTicketCreateWithoutEventInput>>;
  createMany?: InputMaybe<ClearTicketCreateManyEventInputEnvelope>;
};

export type ClearTicketCreateNestedManyWithoutGuardianInput = {
  connect?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearTicketCreateOrConnectWithoutGuardianInput>>;
  create?: InputMaybe<Array<ClearTicketCreateWithoutGuardianInput>>;
  createMany?: InputMaybe<ClearTicketCreateManyGuardianInputEnvelope>;
};

export type ClearTicketCreateNestedManyWithoutPaymentInput = {
  connect?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearTicketCreateOrConnectWithoutPaymentInput>>;
  create?: InputMaybe<Array<ClearTicketCreateWithoutPaymentInput>>;
  createMany?: InputMaybe<ClearTicketCreateManyPaymentInputEnvelope>;
};

export type ClearTicketCreateNestedManyWithoutPromoCodeInput = {
  connect?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearTicketCreateOrConnectWithoutPromoCodeInput>>;
  create?: InputMaybe<Array<ClearTicketCreateWithoutPromoCodeInput>>;
  createMany?: InputMaybe<ClearTicketCreateManyPromoCodeInputEnvelope>;
};

export type ClearTicketCreateNestedManyWithoutSentEmailsInput = {
  connect?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearTicketCreateOrConnectWithoutSentEmailsInput>>;
  create?: InputMaybe<Array<ClearTicketCreateWithoutSentEmailsInput>>;
};

export type ClearTicketCreateOrConnectWithoutEventInput = {
  create: ClearTicketCreateWithoutEventInput;
  where: ClearTicketWhereUniqueInput;
};

export type ClearTicketCreateOrConnectWithoutGuardianInput = {
  create: ClearTicketCreateWithoutGuardianInput;
  where: ClearTicketWhereUniqueInput;
};

export type ClearTicketCreateOrConnectWithoutPaymentInput = {
  create: ClearTicketCreateWithoutPaymentInput;
  where: ClearTicketWhereUniqueInput;
};

export type ClearTicketCreateOrConnectWithoutPromoCodeInput = {
  create: ClearTicketCreateWithoutPromoCodeInput;
  where: ClearTicketWhereUniqueInput;
};

export type ClearTicketCreateOrConnectWithoutSentEmailsInput = {
  create: ClearTicketCreateWithoutSentEmailsInput;
  where: ClearTicketWhereUniqueInput;
};

export type ClearTicketCreateWithoutEventInput = {
  age?: InputMaybe<Scalars['Int']>;
  checkedIn?: InputMaybe<Scalars['ClearDateTime']>;
  checkedOut?: InputMaybe<Scalars['ClearDateTime']>;
  couponCode?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  email?: InputMaybe<Scalars['String']>;
  firstName: Scalars['String'];
  guardian?: InputMaybe<ClearPersonCreateNestedOneWithoutTicketInput>;
  id?: InputMaybe<Scalars['String']>;
  lastName: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  payment?: InputMaybe<ClearPaymentCreateNestedOneWithoutTicketsInput>;
  phone?: InputMaybe<Scalars['String']>;
  promoCode?: InputMaybe<ClearPromoCodeCreateNestedOneWithoutTicketsInput>;
  sentEmails?: InputMaybe<ClearEmailTemplateCreateNestedManyWithoutSentToInput>;
  type?: InputMaybe<ClearTicketType>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  username?: InputMaybe<Scalars['String']>;
  waiverPdfUrl?: InputMaybe<Scalars['String']>;
  waiverSigned?: InputMaybe<Scalars['Boolean']>;
  waiverSignedId?: InputMaybe<Scalars['String']>;
  waiverTrackingId?: InputMaybe<Scalars['String']>;
  waiverUrl?: InputMaybe<Scalars['String']>;
  whatsApp?: InputMaybe<Scalars['String']>;
};

export type ClearTicketCreateWithoutGuardianInput = {
  age?: InputMaybe<Scalars['Int']>;
  checkedIn?: InputMaybe<Scalars['ClearDateTime']>;
  checkedOut?: InputMaybe<Scalars['ClearDateTime']>;
  couponCode?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  email?: InputMaybe<Scalars['String']>;
  event: ClearEventCreateNestedOneWithoutTicketsInput;
  firstName: Scalars['String'];
  id?: InputMaybe<Scalars['String']>;
  lastName: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  payment?: InputMaybe<ClearPaymentCreateNestedOneWithoutTicketsInput>;
  phone?: InputMaybe<Scalars['String']>;
  promoCode?: InputMaybe<ClearPromoCodeCreateNestedOneWithoutTicketsInput>;
  sentEmails?: InputMaybe<ClearEmailTemplateCreateNestedManyWithoutSentToInput>;
  type?: InputMaybe<ClearTicketType>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  username?: InputMaybe<Scalars['String']>;
  waiverPdfUrl?: InputMaybe<Scalars['String']>;
  waiverSigned?: InputMaybe<Scalars['Boolean']>;
  waiverSignedId?: InputMaybe<Scalars['String']>;
  waiverTrackingId?: InputMaybe<Scalars['String']>;
  waiverUrl?: InputMaybe<Scalars['String']>;
  whatsApp?: InputMaybe<Scalars['String']>;
};

export type ClearTicketCreateWithoutPaymentInput = {
  age?: InputMaybe<Scalars['Int']>;
  checkedIn?: InputMaybe<Scalars['ClearDateTime']>;
  checkedOut?: InputMaybe<Scalars['ClearDateTime']>;
  couponCode?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  email?: InputMaybe<Scalars['String']>;
  event: ClearEventCreateNestedOneWithoutTicketsInput;
  firstName: Scalars['String'];
  guardian?: InputMaybe<ClearPersonCreateNestedOneWithoutTicketInput>;
  id?: InputMaybe<Scalars['String']>;
  lastName: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  phone?: InputMaybe<Scalars['String']>;
  promoCode?: InputMaybe<ClearPromoCodeCreateNestedOneWithoutTicketsInput>;
  sentEmails?: InputMaybe<ClearEmailTemplateCreateNestedManyWithoutSentToInput>;
  type?: InputMaybe<ClearTicketType>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  username?: InputMaybe<Scalars['String']>;
  waiverPdfUrl?: InputMaybe<Scalars['String']>;
  waiverSigned?: InputMaybe<Scalars['Boolean']>;
  waiverSignedId?: InputMaybe<Scalars['String']>;
  waiverTrackingId?: InputMaybe<Scalars['String']>;
  waiverUrl?: InputMaybe<Scalars['String']>;
  whatsApp?: InputMaybe<Scalars['String']>;
};

export type ClearTicketCreateWithoutPromoCodeInput = {
  age?: InputMaybe<Scalars['Int']>;
  checkedIn?: InputMaybe<Scalars['ClearDateTime']>;
  checkedOut?: InputMaybe<Scalars['ClearDateTime']>;
  couponCode?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  email?: InputMaybe<Scalars['String']>;
  event: ClearEventCreateNestedOneWithoutTicketsInput;
  firstName: Scalars['String'];
  guardian?: InputMaybe<ClearPersonCreateNestedOneWithoutTicketInput>;
  id?: InputMaybe<Scalars['String']>;
  lastName: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  payment?: InputMaybe<ClearPaymentCreateNestedOneWithoutTicketsInput>;
  phone?: InputMaybe<Scalars['String']>;
  sentEmails?: InputMaybe<ClearEmailTemplateCreateNestedManyWithoutSentToInput>;
  type?: InputMaybe<ClearTicketType>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  username?: InputMaybe<Scalars['String']>;
  waiverPdfUrl?: InputMaybe<Scalars['String']>;
  waiverSigned?: InputMaybe<Scalars['Boolean']>;
  waiverSignedId?: InputMaybe<Scalars['String']>;
  waiverTrackingId?: InputMaybe<Scalars['String']>;
  waiverUrl?: InputMaybe<Scalars['String']>;
  whatsApp?: InputMaybe<Scalars['String']>;
};

export type ClearTicketCreateWithoutSentEmailsInput = {
  age?: InputMaybe<Scalars['Int']>;
  checkedIn?: InputMaybe<Scalars['ClearDateTime']>;
  checkedOut?: InputMaybe<Scalars['ClearDateTime']>;
  couponCode?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  email?: InputMaybe<Scalars['String']>;
  event: ClearEventCreateNestedOneWithoutTicketsInput;
  firstName: Scalars['String'];
  guardian?: InputMaybe<ClearPersonCreateNestedOneWithoutTicketInput>;
  id?: InputMaybe<Scalars['String']>;
  lastName: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  payment?: InputMaybe<ClearPaymentCreateNestedOneWithoutTicketsInput>;
  phone?: InputMaybe<Scalars['String']>;
  promoCode?: InputMaybe<ClearPromoCodeCreateNestedOneWithoutTicketsInput>;
  type?: InputMaybe<ClearTicketType>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  username?: InputMaybe<Scalars['String']>;
  waiverPdfUrl?: InputMaybe<Scalars['String']>;
  waiverSigned?: InputMaybe<Scalars['Boolean']>;
  waiverSignedId?: InputMaybe<Scalars['String']>;
  waiverTrackingId?: InputMaybe<Scalars['String']>;
  waiverUrl?: InputMaybe<Scalars['String']>;
  whatsApp?: InputMaybe<Scalars['String']>;
};

export type ClearTicketGroupBy = {
  __typename?: 'ClearTicketGroupBy';
  _avg?: Maybe<ClearTicketAvgAggregate>;
  _count?: Maybe<ClearTicketCountAggregate>;
  _max?: Maybe<ClearTicketMaxAggregate>;
  _min?: Maybe<ClearTicketMinAggregate>;
  _sum?: Maybe<ClearTicketSumAggregate>;
  age?: Maybe<Scalars['Int']>;
  checkedIn?: Maybe<Scalars['ClearDateTime']>;
  checkedOut?: Maybe<Scalars['ClearDateTime']>;
  couponCode?: Maybe<Scalars['String']>;
  createdAt: Scalars['ClearDateTime'];
  email?: Maybe<Scalars['String']>;
  eventId: Scalars['String'];
  firstName: Scalars['String'];
  id: Scalars['String'];
  lastName: Scalars['String'];
  locale: Scalars['String'];
  metadata?: Maybe<Scalars['ClearJSON']>;
  paymentId?: Maybe<Scalars['String']>;
  personId?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  promoCodeId?: Maybe<Scalars['String']>;
  type: ClearTicketType;
  updatedAt: Scalars['ClearDateTime'];
  username?: Maybe<Scalars['String']>;
  waiverPdfUrl?: Maybe<Scalars['String']>;
  waiverSigned: Scalars['Boolean'];
  waiverSignedId?: Maybe<Scalars['String']>;
  waiverTrackingId?: Maybe<Scalars['String']>;
  waiverUrl?: Maybe<Scalars['String']>;
  whatsApp?: Maybe<Scalars['String']>;
};

export type ClearTicketListRelationFilter = {
  every?: InputMaybe<ClearTicketWhereInput>;
  none?: InputMaybe<ClearTicketWhereInput>;
  some?: InputMaybe<ClearTicketWhereInput>;
};

export type ClearTicketMaxAggregate = {
  __typename?: 'ClearTicketMaxAggregate';
  age?: Maybe<Scalars['Int']>;
  checkedIn?: Maybe<Scalars['ClearDateTime']>;
  checkedOut?: Maybe<Scalars['ClearDateTime']>;
  couponCode?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  email?: Maybe<Scalars['String']>;
  eventId?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  locale?: Maybe<Scalars['String']>;
  paymentId?: Maybe<Scalars['String']>;
  personId?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  promoCodeId?: Maybe<Scalars['String']>;
  type?: Maybe<ClearTicketType>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
  username?: Maybe<Scalars['String']>;
  waiverPdfUrl?: Maybe<Scalars['String']>;
  waiverSigned?: Maybe<Scalars['Boolean']>;
  waiverSignedId?: Maybe<Scalars['String']>;
  waiverTrackingId?: Maybe<Scalars['String']>;
  waiverUrl?: Maybe<Scalars['String']>;
  whatsApp?: Maybe<Scalars['String']>;
};

export type ClearTicketMaxOrderByAggregateInput = {
  age?: InputMaybe<ClearSortOrder>;
  checkedIn?: InputMaybe<ClearSortOrder>;
  checkedOut?: InputMaybe<ClearSortOrder>;
  couponCode?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  email?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  firstName?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  lastName?: InputMaybe<ClearSortOrder>;
  locale?: InputMaybe<ClearSortOrder>;
  paymentId?: InputMaybe<ClearSortOrder>;
  personId?: InputMaybe<ClearSortOrder>;
  phone?: InputMaybe<ClearSortOrder>;
  promoCodeId?: InputMaybe<ClearSortOrder>;
  type?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  username?: InputMaybe<ClearSortOrder>;
  waiverPdfUrl?: InputMaybe<ClearSortOrder>;
  waiverSigned?: InputMaybe<ClearSortOrder>;
  waiverSignedId?: InputMaybe<ClearSortOrder>;
  waiverTrackingId?: InputMaybe<ClearSortOrder>;
  waiverUrl?: InputMaybe<ClearSortOrder>;
  whatsApp?: InputMaybe<ClearSortOrder>;
};

export type ClearTicketMinAggregate = {
  __typename?: 'ClearTicketMinAggregate';
  age?: Maybe<Scalars['Int']>;
  checkedIn?: Maybe<Scalars['ClearDateTime']>;
  checkedOut?: Maybe<Scalars['ClearDateTime']>;
  couponCode?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  email?: Maybe<Scalars['String']>;
  eventId?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  locale?: Maybe<Scalars['String']>;
  paymentId?: Maybe<Scalars['String']>;
  personId?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  promoCodeId?: Maybe<Scalars['String']>;
  type?: Maybe<ClearTicketType>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
  username?: Maybe<Scalars['String']>;
  waiverPdfUrl?: Maybe<Scalars['String']>;
  waiverSigned?: Maybe<Scalars['Boolean']>;
  waiverSignedId?: Maybe<Scalars['String']>;
  waiverTrackingId?: Maybe<Scalars['String']>;
  waiverUrl?: Maybe<Scalars['String']>;
  whatsApp?: Maybe<Scalars['String']>;
};

export type ClearTicketMinOrderByAggregateInput = {
  age?: InputMaybe<ClearSortOrder>;
  checkedIn?: InputMaybe<ClearSortOrder>;
  checkedOut?: InputMaybe<ClearSortOrder>;
  couponCode?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  email?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  firstName?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  lastName?: InputMaybe<ClearSortOrder>;
  locale?: InputMaybe<ClearSortOrder>;
  paymentId?: InputMaybe<ClearSortOrder>;
  personId?: InputMaybe<ClearSortOrder>;
  phone?: InputMaybe<ClearSortOrder>;
  promoCodeId?: InputMaybe<ClearSortOrder>;
  type?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  username?: InputMaybe<ClearSortOrder>;
  waiverPdfUrl?: InputMaybe<ClearSortOrder>;
  waiverSigned?: InputMaybe<ClearSortOrder>;
  waiverSignedId?: InputMaybe<ClearSortOrder>;
  waiverTrackingId?: InputMaybe<ClearSortOrder>;
  waiverUrl?: InputMaybe<ClearSortOrder>;
  whatsApp?: InputMaybe<ClearSortOrder>;
};

export type ClearTicketOrderByRelationAggregateInput = {
  _count?: InputMaybe<ClearSortOrder>;
};

export type ClearTicketOrderByWithAggregationInput = {
  _avg?: InputMaybe<ClearTicketAvgOrderByAggregateInput>;
  _count?: InputMaybe<ClearTicketCountOrderByAggregateInput>;
  _max?: InputMaybe<ClearTicketMaxOrderByAggregateInput>;
  _min?: InputMaybe<ClearTicketMinOrderByAggregateInput>;
  _sum?: InputMaybe<ClearTicketSumOrderByAggregateInput>;
  age?: InputMaybe<ClearSortOrder>;
  checkedIn?: InputMaybe<ClearSortOrder>;
  checkedOut?: InputMaybe<ClearSortOrder>;
  couponCode?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  email?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  firstName?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  lastName?: InputMaybe<ClearSortOrder>;
  locale?: InputMaybe<ClearSortOrder>;
  paymentId?: InputMaybe<ClearSortOrder>;
  personId?: InputMaybe<ClearSortOrder>;
  phone?: InputMaybe<ClearSortOrder>;
  promoCodeId?: InputMaybe<ClearSortOrder>;
  type?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  username?: InputMaybe<ClearSortOrder>;
  waiverPdfUrl?: InputMaybe<ClearSortOrder>;
  waiverSigned?: InputMaybe<ClearSortOrder>;
  waiverSignedId?: InputMaybe<ClearSortOrder>;
  waiverTrackingId?: InputMaybe<ClearSortOrder>;
  waiverUrl?: InputMaybe<ClearSortOrder>;
  whatsApp?: InputMaybe<ClearSortOrder>;
};

export type ClearTicketOrderByWithRelationInput = {
  age?: InputMaybe<ClearSortOrder>;
  checkedIn?: InputMaybe<ClearSortOrder>;
  checkedOut?: InputMaybe<ClearSortOrder>;
  couponCode?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  email?: InputMaybe<ClearSortOrder>;
  event?: InputMaybe<ClearEventOrderByWithRelationInput>;
  eventId?: InputMaybe<ClearSortOrder>;
  firstName?: InputMaybe<ClearSortOrder>;
  guardian?: InputMaybe<ClearPersonOrderByWithRelationInput>;
  id?: InputMaybe<ClearSortOrder>;
  lastName?: InputMaybe<ClearSortOrder>;
  locale?: InputMaybe<ClearSortOrder>;
  payment?: InputMaybe<ClearPaymentOrderByWithRelationInput>;
  paymentId?: InputMaybe<ClearSortOrder>;
  personId?: InputMaybe<ClearSortOrder>;
  phone?: InputMaybe<ClearSortOrder>;
  promoCode?: InputMaybe<ClearPromoCodeOrderByWithRelationInput>;
  promoCodeId?: InputMaybe<ClearSortOrder>;
  sentEmails?: InputMaybe<ClearEmailTemplateOrderByRelationAggregateInput>;
  type?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  username?: InputMaybe<ClearSortOrder>;
  waiverPdfUrl?: InputMaybe<ClearSortOrder>;
  waiverSigned?: InputMaybe<ClearSortOrder>;
  waiverSignedId?: InputMaybe<ClearSortOrder>;
  waiverTrackingId?: InputMaybe<ClearSortOrder>;
  waiverUrl?: InputMaybe<ClearSortOrder>;
  whatsApp?: InputMaybe<ClearSortOrder>;
};

export enum ClearTicketScalarFieldEnum {
  Age = 'age',
  CheckedIn = 'checkedIn',
  CheckedOut = 'checkedOut',
  CouponCode = 'couponCode',
  CreatedAt = 'createdAt',
  Email = 'email',
  EventId = 'eventId',
  FirstName = 'firstName',
  Id = 'id',
  LastName = 'lastName',
  Locale = 'locale',
  Metadata = 'metadata',
  PaymentId = 'paymentId',
  PersonId = 'personId',
  Phone = 'phone',
  PromoCodeId = 'promoCodeId',
  Type = 'type',
  UpdatedAt = 'updatedAt',
  Username = 'username',
  WaiverPdfUrl = 'waiverPdfUrl',
  WaiverSigned = 'waiverSigned',
  WaiverSignedId = 'waiverSignedId',
  WaiverTrackingId = 'waiverTrackingId',
  WaiverUrl = 'waiverUrl',
  WhatsApp = 'whatsApp'
}

export type ClearTicketScalarWhereInput = {
  AND?: InputMaybe<Array<ClearTicketScalarWhereInput>>;
  NOT?: InputMaybe<Array<ClearTicketScalarWhereInput>>;
  OR?: InputMaybe<Array<ClearTicketScalarWhereInput>>;
  age?: InputMaybe<ClearIntNullableFilter>;
  checkedIn?: InputMaybe<ClearDateTimeNullableFilter>;
  checkedOut?: InputMaybe<ClearDateTimeNullableFilter>;
  couponCode?: InputMaybe<ClearStringNullableFilter>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  email?: InputMaybe<ClearStringNullableFilter>;
  eventId?: InputMaybe<ClearStringFilter>;
  firstName?: InputMaybe<ClearStringFilter>;
  id?: InputMaybe<ClearStringFilter>;
  lastName?: InputMaybe<ClearStringFilter>;
  locale?: InputMaybe<ClearStringFilter>;
  paymentId?: InputMaybe<ClearStringNullableFilter>;
  personId?: InputMaybe<ClearStringNullableFilter>;
  phone?: InputMaybe<ClearStringNullableFilter>;
  promoCodeId?: InputMaybe<ClearStringNullableFilter>;
  type?: InputMaybe<ClearEnumTicketTypeFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
  username?: InputMaybe<ClearStringNullableFilter>;
  waiverPdfUrl?: InputMaybe<ClearStringNullableFilter>;
  waiverSigned?: InputMaybe<ClearBoolFilter>;
  waiverSignedId?: InputMaybe<ClearStringNullableFilter>;
  waiverTrackingId?: InputMaybe<ClearStringNullableFilter>;
  waiverUrl?: InputMaybe<ClearStringNullableFilter>;
  whatsApp?: InputMaybe<ClearStringNullableFilter>;
};

export type ClearTicketScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ClearTicketScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ClearTicketScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ClearTicketScalarWhereWithAggregatesInput>>;
  age?: InputMaybe<ClearIntNullableWithAggregatesFilter>;
  checkedIn?: InputMaybe<ClearDateTimeNullableWithAggregatesFilter>;
  checkedOut?: InputMaybe<ClearDateTimeNullableWithAggregatesFilter>;
  couponCode?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  createdAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  email?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  eventId?: InputMaybe<ClearStringWithAggregatesFilter>;
  firstName?: InputMaybe<ClearStringWithAggregatesFilter>;
  id?: InputMaybe<ClearStringWithAggregatesFilter>;
  lastName?: InputMaybe<ClearStringWithAggregatesFilter>;
  locale?: InputMaybe<ClearStringWithAggregatesFilter>;
  paymentId?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  personId?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  phone?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  promoCodeId?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  type?: InputMaybe<ClearEnumTicketTypeWithAggregatesFilter>;
  updatedAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  username?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  waiverPdfUrl?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  waiverSigned?: InputMaybe<ClearBoolWithAggregatesFilter>;
  waiverSignedId?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  waiverTrackingId?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  waiverUrl?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  whatsApp?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
};

export type ClearTicketSumAggregate = {
  __typename?: 'ClearTicketSumAggregate';
  age?: Maybe<Scalars['Int']>;
};

export type ClearTicketSumOrderByAggregateInput = {
  age?: InputMaybe<ClearSortOrder>;
};

export enum ClearTicketType {
  Judge = 'JUDGE',
  Mentor = 'MENTOR',
  Staff = 'STAFF',
  Student = 'STUDENT',
  Teacher = 'TEACHER',
  Vip = 'VIP'
}

export type ClearTicketUpdateInput = {
  age?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  checkedIn?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  checkedOut?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  couponCode?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  event?: InputMaybe<ClearEventUpdateOneRequiredWithoutTicketsInput>;
  firstName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  guardian?: InputMaybe<ClearPersonUpdateOneWithoutTicketInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  lastName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  locale?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  payment?: InputMaybe<ClearPaymentUpdateOneWithoutTicketsInput>;
  phone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  promoCode?: InputMaybe<ClearPromoCodeUpdateOneWithoutTicketsInput>;
  sentEmails?: InputMaybe<ClearEmailTemplateUpdateManyWithoutSentToInput>;
  type?: InputMaybe<ClearEnumTicketTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  username?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverPdfUrl?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverSigned?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  waiverSignedId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverTrackingId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverUrl?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  whatsApp?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
};

export type ClearTicketUpdateManyMutationInput = {
  age?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  checkedIn?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  checkedOut?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  couponCode?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  firstName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  lastName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  locale?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  phone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  type?: InputMaybe<ClearEnumTicketTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  username?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverPdfUrl?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverSigned?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  waiverSignedId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverTrackingId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverUrl?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  whatsApp?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
};

export type ClearTicketUpdateManyWithWhereWithoutEventInput = {
  data: ClearTicketUpdateManyMutationInput;
  where: ClearTicketScalarWhereInput;
};

export type ClearTicketUpdateManyWithWhereWithoutGuardianInput = {
  data: ClearTicketUpdateManyMutationInput;
  where: ClearTicketScalarWhereInput;
};

export type ClearTicketUpdateManyWithWhereWithoutPaymentInput = {
  data: ClearTicketUpdateManyMutationInput;
  where: ClearTicketScalarWhereInput;
};

export type ClearTicketUpdateManyWithWhereWithoutPromoCodeInput = {
  data: ClearTicketUpdateManyMutationInput;
  where: ClearTicketScalarWhereInput;
};

export type ClearTicketUpdateManyWithWhereWithoutSentEmailsInput = {
  data: ClearTicketUpdateManyMutationInput;
  where: ClearTicketScalarWhereInput;
};

export type ClearTicketUpdateManyWithoutEventInput = {
  connect?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearTicketCreateOrConnectWithoutEventInput>>;
  create?: InputMaybe<Array<ClearTicketCreateWithoutEventInput>>;
  createMany?: InputMaybe<ClearTicketCreateManyEventInputEnvelope>;
  delete?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClearTicketScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  set?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  update?: InputMaybe<Array<ClearTicketUpdateWithWhereUniqueWithoutEventInput>>;
  updateMany?: InputMaybe<Array<ClearTicketUpdateManyWithWhereWithoutEventInput>>;
  upsert?: InputMaybe<Array<ClearTicketUpsertWithWhereUniqueWithoutEventInput>>;
};

export type ClearTicketUpdateManyWithoutGuardianInput = {
  connect?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearTicketCreateOrConnectWithoutGuardianInput>>;
  create?: InputMaybe<Array<ClearTicketCreateWithoutGuardianInput>>;
  createMany?: InputMaybe<ClearTicketCreateManyGuardianInputEnvelope>;
  delete?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClearTicketScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  set?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  update?: InputMaybe<Array<ClearTicketUpdateWithWhereUniqueWithoutGuardianInput>>;
  updateMany?: InputMaybe<Array<ClearTicketUpdateManyWithWhereWithoutGuardianInput>>;
  upsert?: InputMaybe<Array<ClearTicketUpsertWithWhereUniqueWithoutGuardianInput>>;
};

export type ClearTicketUpdateManyWithoutPaymentInput = {
  connect?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearTicketCreateOrConnectWithoutPaymentInput>>;
  create?: InputMaybe<Array<ClearTicketCreateWithoutPaymentInput>>;
  createMany?: InputMaybe<ClearTicketCreateManyPaymentInputEnvelope>;
  delete?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClearTicketScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  set?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  update?: InputMaybe<Array<ClearTicketUpdateWithWhereUniqueWithoutPaymentInput>>;
  updateMany?: InputMaybe<Array<ClearTicketUpdateManyWithWhereWithoutPaymentInput>>;
  upsert?: InputMaybe<Array<ClearTicketUpsertWithWhereUniqueWithoutPaymentInput>>;
};

export type ClearTicketUpdateManyWithoutPromoCodeInput = {
  connect?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearTicketCreateOrConnectWithoutPromoCodeInput>>;
  create?: InputMaybe<Array<ClearTicketCreateWithoutPromoCodeInput>>;
  createMany?: InputMaybe<ClearTicketCreateManyPromoCodeInputEnvelope>;
  delete?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClearTicketScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  set?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  update?: InputMaybe<Array<ClearTicketUpdateWithWhereUniqueWithoutPromoCodeInput>>;
  updateMany?: InputMaybe<Array<ClearTicketUpdateManyWithWhereWithoutPromoCodeInput>>;
  upsert?: InputMaybe<Array<ClearTicketUpsertWithWhereUniqueWithoutPromoCodeInput>>;
};

export type ClearTicketUpdateManyWithoutSentEmailsInput = {
  connect?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearTicketCreateOrConnectWithoutSentEmailsInput>>;
  create?: InputMaybe<Array<ClearTicketCreateWithoutSentEmailsInput>>;
  delete?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClearTicketScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  set?: InputMaybe<Array<ClearTicketWhereUniqueInput>>;
  update?: InputMaybe<Array<ClearTicketUpdateWithWhereUniqueWithoutSentEmailsInput>>;
  updateMany?: InputMaybe<Array<ClearTicketUpdateManyWithWhereWithoutSentEmailsInput>>;
  upsert?: InputMaybe<Array<ClearTicketUpsertWithWhereUniqueWithoutSentEmailsInput>>;
};

export type ClearTicketUpdateWithWhereUniqueWithoutEventInput = {
  data: ClearTicketUpdateWithoutEventInput;
  where: ClearTicketWhereUniqueInput;
};

export type ClearTicketUpdateWithWhereUniqueWithoutGuardianInput = {
  data: ClearTicketUpdateWithoutGuardianInput;
  where: ClearTicketWhereUniqueInput;
};

export type ClearTicketUpdateWithWhereUniqueWithoutPaymentInput = {
  data: ClearTicketUpdateWithoutPaymentInput;
  where: ClearTicketWhereUniqueInput;
};

export type ClearTicketUpdateWithWhereUniqueWithoutPromoCodeInput = {
  data: ClearTicketUpdateWithoutPromoCodeInput;
  where: ClearTicketWhereUniqueInput;
};

export type ClearTicketUpdateWithWhereUniqueWithoutSentEmailsInput = {
  data: ClearTicketUpdateWithoutSentEmailsInput;
  where: ClearTicketWhereUniqueInput;
};

export type ClearTicketUpdateWithoutEventInput = {
  age?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  checkedIn?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  checkedOut?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  couponCode?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  firstName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  guardian?: InputMaybe<ClearPersonUpdateOneWithoutTicketInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  lastName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  locale?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  payment?: InputMaybe<ClearPaymentUpdateOneWithoutTicketsInput>;
  phone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  promoCode?: InputMaybe<ClearPromoCodeUpdateOneWithoutTicketsInput>;
  sentEmails?: InputMaybe<ClearEmailTemplateUpdateManyWithoutSentToInput>;
  type?: InputMaybe<ClearEnumTicketTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  username?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverPdfUrl?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverSigned?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  waiverSignedId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverTrackingId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverUrl?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  whatsApp?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
};

export type ClearTicketUpdateWithoutGuardianInput = {
  age?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  checkedIn?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  checkedOut?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  couponCode?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  event?: InputMaybe<ClearEventUpdateOneRequiredWithoutTicketsInput>;
  firstName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  lastName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  locale?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  payment?: InputMaybe<ClearPaymentUpdateOneWithoutTicketsInput>;
  phone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  promoCode?: InputMaybe<ClearPromoCodeUpdateOneWithoutTicketsInput>;
  sentEmails?: InputMaybe<ClearEmailTemplateUpdateManyWithoutSentToInput>;
  type?: InputMaybe<ClearEnumTicketTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  username?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverPdfUrl?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverSigned?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  waiverSignedId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverTrackingId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverUrl?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  whatsApp?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
};

export type ClearTicketUpdateWithoutPaymentInput = {
  age?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  checkedIn?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  checkedOut?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  couponCode?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  event?: InputMaybe<ClearEventUpdateOneRequiredWithoutTicketsInput>;
  firstName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  guardian?: InputMaybe<ClearPersonUpdateOneWithoutTicketInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  lastName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  locale?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  phone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  promoCode?: InputMaybe<ClearPromoCodeUpdateOneWithoutTicketsInput>;
  sentEmails?: InputMaybe<ClearEmailTemplateUpdateManyWithoutSentToInput>;
  type?: InputMaybe<ClearEnumTicketTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  username?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverPdfUrl?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverSigned?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  waiverSignedId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverTrackingId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverUrl?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  whatsApp?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
};

export type ClearTicketUpdateWithoutPromoCodeInput = {
  age?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  checkedIn?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  checkedOut?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  couponCode?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  event?: InputMaybe<ClearEventUpdateOneRequiredWithoutTicketsInput>;
  firstName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  guardian?: InputMaybe<ClearPersonUpdateOneWithoutTicketInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  lastName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  locale?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  payment?: InputMaybe<ClearPaymentUpdateOneWithoutTicketsInput>;
  phone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  sentEmails?: InputMaybe<ClearEmailTemplateUpdateManyWithoutSentToInput>;
  type?: InputMaybe<ClearEnumTicketTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  username?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverPdfUrl?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverSigned?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  waiverSignedId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverTrackingId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverUrl?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  whatsApp?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
};

export type ClearTicketUpdateWithoutSentEmailsInput = {
  age?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  checkedIn?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  checkedOut?: InputMaybe<ClearNullableDateTimeFieldUpdateOperationsInput>;
  couponCode?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  event?: InputMaybe<ClearEventUpdateOneRequiredWithoutTicketsInput>;
  firstName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  guardian?: InputMaybe<ClearPersonUpdateOneWithoutTicketInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  lastName?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  locale?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  payment?: InputMaybe<ClearPaymentUpdateOneWithoutTicketsInput>;
  phone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  promoCode?: InputMaybe<ClearPromoCodeUpdateOneWithoutTicketsInput>;
  type?: InputMaybe<ClearEnumTicketTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  username?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverPdfUrl?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverSigned?: InputMaybe<ClearBoolFieldUpdateOperationsInput>;
  waiverSignedId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverTrackingId?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  waiverUrl?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  whatsApp?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
};

export type ClearTicketUpsertWithWhereUniqueWithoutEventInput = {
  create: ClearTicketCreateWithoutEventInput;
  update: ClearTicketUpdateWithoutEventInput;
  where: ClearTicketWhereUniqueInput;
};

export type ClearTicketUpsertWithWhereUniqueWithoutGuardianInput = {
  create: ClearTicketCreateWithoutGuardianInput;
  update: ClearTicketUpdateWithoutGuardianInput;
  where: ClearTicketWhereUniqueInput;
};

export type ClearTicketUpsertWithWhereUniqueWithoutPaymentInput = {
  create: ClearTicketCreateWithoutPaymentInput;
  update: ClearTicketUpdateWithoutPaymentInput;
  where: ClearTicketWhereUniqueInput;
};

export type ClearTicketUpsertWithWhereUniqueWithoutPromoCodeInput = {
  create: ClearTicketCreateWithoutPromoCodeInput;
  update: ClearTicketUpdateWithoutPromoCodeInput;
  where: ClearTicketWhereUniqueInput;
};

export type ClearTicketUpsertWithWhereUniqueWithoutSentEmailsInput = {
  create: ClearTicketCreateWithoutSentEmailsInput;
  update: ClearTicketUpdateWithoutSentEmailsInput;
  where: ClearTicketWhereUniqueInput;
};

export type ClearTicketWhereInput = {
  AND?: InputMaybe<Array<ClearTicketWhereInput>>;
  NOT?: InputMaybe<Array<ClearTicketWhereInput>>;
  OR?: InputMaybe<Array<ClearTicketWhereInput>>;
  age?: InputMaybe<ClearIntNullableFilter>;
  checkedIn?: InputMaybe<ClearDateTimeNullableFilter>;
  checkedOut?: InputMaybe<ClearDateTimeNullableFilter>;
  couponCode?: InputMaybe<ClearStringNullableFilter>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  email?: InputMaybe<ClearStringNullableFilter>;
  event?: InputMaybe<ClearEventRelationFilter>;
  eventId?: InputMaybe<ClearStringFilter>;
  firstName?: InputMaybe<ClearStringFilter>;
  guardian?: InputMaybe<ClearPersonRelationFilter>;
  id?: InputMaybe<ClearStringFilter>;
  lastName?: InputMaybe<ClearStringFilter>;
  locale?: InputMaybe<ClearStringFilter>;
  payment?: InputMaybe<ClearPaymentRelationFilter>;
  paymentId?: InputMaybe<ClearStringNullableFilter>;
  personId?: InputMaybe<ClearStringNullableFilter>;
  phone?: InputMaybe<ClearStringNullableFilter>;
  promoCode?: InputMaybe<ClearPromoCodeRelationFilter>;
  promoCodeId?: InputMaybe<ClearStringNullableFilter>;
  sentEmails?: InputMaybe<ClearEmailTemplateListRelationFilter>;
  type?: InputMaybe<ClearEnumTicketTypeFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
  username?: InputMaybe<ClearStringNullableFilter>;
  waiverPdfUrl?: InputMaybe<ClearStringNullableFilter>;
  waiverSigned?: InputMaybe<ClearBoolFilter>;
  waiverSignedId?: InputMaybe<ClearStringNullableFilter>;
  waiverTrackingId?: InputMaybe<ClearStringNullableFilter>;
  waiverUrl?: InputMaybe<ClearStringNullableFilter>;
  whatsApp?: InputMaybe<ClearStringNullableFilter>;
};

export type ClearTicketWhereUniqueInput = {
  id?: InputMaybe<Scalars['String']>;
};

export type ClearVenue = {
  __typename?: 'ClearVenue';
  _count?: Maybe<ClearVenueCount>;
  address?: Maybe<Scalars['String']>;
  addressInline?: Maybe<Scalars['String']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  addressLine3?: Maybe<Scalars['String']>;
  capacity?: Maybe<Scalars['Int']>;
  city?: Maybe<Scalars['String']>;
  contactEmail?: Maybe<Scalars['String']>;
  contactName?: Maybe<Scalars['String']>;
  contactPhone?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  countryAbbreviation?: Maybe<Scalars['String']>;
  createdAt: Scalars['ClearDateTime'];
  events: Array<ClearEvent>;
  getMetadata?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  mapLink?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  state?: Maybe<Scalars['String']>;
  stateAbbreviation?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ClearDateTime'];
  zipCode?: Maybe<Scalars['String']>;
};


export type ClearVenueEventsArgs = {
  cursor?: InputMaybe<ClearEventWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClearEventScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClearEventOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']>;
  take?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ClearEventWhereInput>;
};


export type ClearVenueGetMetadataArgs = {
  key: Scalars['String'];
};

export type ClearVenueAvgAggregate = {
  __typename?: 'ClearVenueAvgAggregate';
  capacity?: Maybe<Scalars['Float']>;
};

export type ClearVenueAvgOrderByAggregateInput = {
  capacity?: InputMaybe<ClearSortOrder>;
};

export type ClearVenueCount = {
  __typename?: 'ClearVenueCount';
  events: Scalars['Int'];
};

export type ClearVenueCountAggregate = {
  __typename?: 'ClearVenueCountAggregate';
  _all: Scalars['Int'];
  address: Scalars['Int'];
  addressLine1: Scalars['Int'];
  addressLine2: Scalars['Int'];
  addressLine3: Scalars['Int'];
  capacity: Scalars['Int'];
  city: Scalars['Int'];
  contactEmail: Scalars['Int'];
  contactName: Scalars['Int'];
  contactPhone: Scalars['Int'];
  country: Scalars['Int'];
  countryAbbreviation: Scalars['Int'];
  createdAt: Scalars['Int'];
  id: Scalars['Int'];
  mapLink: Scalars['Int'];
  metadata: Scalars['Int'];
  name: Scalars['Int'];
  state: Scalars['Int'];
  stateAbbreviation: Scalars['Int'];
  updatedAt: Scalars['Int'];
  zipCode: Scalars['Int'];
};

export type ClearVenueCountOrderByAggregateInput = {
  addressLine1?: InputMaybe<ClearSortOrder>;
  addressLine2?: InputMaybe<ClearSortOrder>;
  addressLine3?: InputMaybe<ClearSortOrder>;
  capacity?: InputMaybe<ClearSortOrder>;
  city?: InputMaybe<ClearSortOrder>;
  contactEmail?: InputMaybe<ClearSortOrder>;
  contactName?: InputMaybe<ClearSortOrder>;
  contactPhone?: InputMaybe<ClearSortOrder>;
  country?: InputMaybe<ClearSortOrder>;
  countryAbbreviation?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  mapLink?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  state?: InputMaybe<ClearSortOrder>;
  stateAbbreviation?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  zipCode?: InputMaybe<ClearSortOrder>;
};

export type ClearVenueCreateInput = {
  addressLine1?: InputMaybe<Scalars['String']>;
  addressLine2?: InputMaybe<Scalars['String']>;
  addressLine3?: InputMaybe<Scalars['String']>;
  capacity?: InputMaybe<Scalars['Int']>;
  city?: InputMaybe<Scalars['String']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  contactName?: InputMaybe<Scalars['String']>;
  contactPhone?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  countryAbbreviation?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  events?: InputMaybe<ClearEventCreateNestedManyWithoutVenueInput>;
  id?: InputMaybe<Scalars['String']>;
  mapLink?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  state?: InputMaybe<Scalars['String']>;
  stateAbbreviation?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  zipCode?: InputMaybe<Scalars['String']>;
};

export type ClearVenueCreateManyInput = {
  addressLine1?: InputMaybe<Scalars['String']>;
  addressLine2?: InputMaybe<Scalars['String']>;
  addressLine3?: InputMaybe<Scalars['String']>;
  capacity?: InputMaybe<Scalars['Int']>;
  city?: InputMaybe<Scalars['String']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  contactName?: InputMaybe<Scalars['String']>;
  contactPhone?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  countryAbbreviation?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  id?: InputMaybe<Scalars['String']>;
  mapLink?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  state?: InputMaybe<Scalars['String']>;
  stateAbbreviation?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  zipCode?: InputMaybe<Scalars['String']>;
};

export type ClearVenueCreateNestedOneWithoutEventsInput = {
  connect?: InputMaybe<ClearVenueWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearVenueCreateOrConnectWithoutEventsInput>;
  create?: InputMaybe<ClearVenueCreateWithoutEventsInput>;
};

export type ClearVenueCreateOrConnectWithoutEventsInput = {
  create: ClearVenueCreateWithoutEventsInput;
  where: ClearVenueWhereUniqueInput;
};

export type ClearVenueCreateWithoutEventsInput = {
  addressLine1?: InputMaybe<Scalars['String']>;
  addressLine2?: InputMaybe<Scalars['String']>;
  addressLine3?: InputMaybe<Scalars['String']>;
  capacity?: InputMaybe<Scalars['Int']>;
  city?: InputMaybe<Scalars['String']>;
  contactEmail?: InputMaybe<Scalars['String']>;
  contactName?: InputMaybe<Scalars['String']>;
  contactPhone?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  countryAbbreviation?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['ClearDateTime']>;
  id?: InputMaybe<Scalars['String']>;
  mapLink?: InputMaybe<Scalars['String']>;
  metadata?: InputMaybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  state?: InputMaybe<Scalars['String']>;
  stateAbbreviation?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['ClearDateTime']>;
  zipCode?: InputMaybe<Scalars['String']>;
};

export type ClearVenueGroupBy = {
  __typename?: 'ClearVenueGroupBy';
  _avg?: Maybe<ClearVenueAvgAggregate>;
  _count?: Maybe<ClearVenueCountAggregate>;
  _max?: Maybe<ClearVenueMaxAggregate>;
  _min?: Maybe<ClearVenueMinAggregate>;
  _sum?: Maybe<ClearVenueSumAggregate>;
  address?: Maybe<Scalars['String']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  addressLine3?: Maybe<Scalars['String']>;
  capacity?: Maybe<Scalars['Int']>;
  city?: Maybe<Scalars['String']>;
  contactEmail?: Maybe<Scalars['String']>;
  contactName?: Maybe<Scalars['String']>;
  contactPhone?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  countryAbbreviation?: Maybe<Scalars['String']>;
  createdAt: Scalars['ClearDateTime'];
  id: Scalars['String'];
  mapLink?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['ClearJSON']>;
  name: Scalars['String'];
  state?: Maybe<Scalars['String']>;
  stateAbbreviation?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ClearDateTime'];
  zipCode?: Maybe<Scalars['String']>;
};

export type ClearVenueMaxAggregate = {
  __typename?: 'ClearVenueMaxAggregate';
  address?: Maybe<Scalars['String']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  addressLine3?: Maybe<Scalars['String']>;
  capacity?: Maybe<Scalars['Int']>;
  city?: Maybe<Scalars['String']>;
  contactEmail?: Maybe<Scalars['String']>;
  contactName?: Maybe<Scalars['String']>;
  contactPhone?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  countryAbbreviation?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  id?: Maybe<Scalars['String']>;
  mapLink?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stateAbbreviation?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
  zipCode?: Maybe<Scalars['String']>;
};

export type ClearVenueMaxOrderByAggregateInput = {
  addressLine1?: InputMaybe<ClearSortOrder>;
  addressLine2?: InputMaybe<ClearSortOrder>;
  addressLine3?: InputMaybe<ClearSortOrder>;
  capacity?: InputMaybe<ClearSortOrder>;
  city?: InputMaybe<ClearSortOrder>;
  contactEmail?: InputMaybe<ClearSortOrder>;
  contactName?: InputMaybe<ClearSortOrder>;
  contactPhone?: InputMaybe<ClearSortOrder>;
  country?: InputMaybe<ClearSortOrder>;
  countryAbbreviation?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  mapLink?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  state?: InputMaybe<ClearSortOrder>;
  stateAbbreviation?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  zipCode?: InputMaybe<ClearSortOrder>;
};

export type ClearVenueMinAggregate = {
  __typename?: 'ClearVenueMinAggregate';
  address?: Maybe<Scalars['String']>;
  addressLine1?: Maybe<Scalars['String']>;
  addressLine2?: Maybe<Scalars['String']>;
  addressLine3?: Maybe<Scalars['String']>;
  capacity?: Maybe<Scalars['Int']>;
  city?: Maybe<Scalars['String']>;
  contactEmail?: Maybe<Scalars['String']>;
  contactName?: Maybe<Scalars['String']>;
  contactPhone?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  countryAbbreviation?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['ClearDateTime']>;
  id?: Maybe<Scalars['String']>;
  mapLink?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stateAbbreviation?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ClearDateTime']>;
  zipCode?: Maybe<Scalars['String']>;
};

export type ClearVenueMinOrderByAggregateInput = {
  addressLine1?: InputMaybe<ClearSortOrder>;
  addressLine2?: InputMaybe<ClearSortOrder>;
  addressLine3?: InputMaybe<ClearSortOrder>;
  capacity?: InputMaybe<ClearSortOrder>;
  city?: InputMaybe<ClearSortOrder>;
  contactEmail?: InputMaybe<ClearSortOrder>;
  contactName?: InputMaybe<ClearSortOrder>;
  contactPhone?: InputMaybe<ClearSortOrder>;
  country?: InputMaybe<ClearSortOrder>;
  countryAbbreviation?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  mapLink?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  state?: InputMaybe<ClearSortOrder>;
  stateAbbreviation?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  zipCode?: InputMaybe<ClearSortOrder>;
};

export type ClearVenueOrderByWithAggregationInput = {
  _avg?: InputMaybe<ClearVenueAvgOrderByAggregateInput>;
  _count?: InputMaybe<ClearVenueCountOrderByAggregateInput>;
  _max?: InputMaybe<ClearVenueMaxOrderByAggregateInput>;
  _min?: InputMaybe<ClearVenueMinOrderByAggregateInput>;
  _sum?: InputMaybe<ClearVenueSumOrderByAggregateInput>;
  addressLine1?: InputMaybe<ClearSortOrder>;
  addressLine2?: InputMaybe<ClearSortOrder>;
  addressLine3?: InputMaybe<ClearSortOrder>;
  capacity?: InputMaybe<ClearSortOrder>;
  city?: InputMaybe<ClearSortOrder>;
  contactEmail?: InputMaybe<ClearSortOrder>;
  contactName?: InputMaybe<ClearSortOrder>;
  contactPhone?: InputMaybe<ClearSortOrder>;
  country?: InputMaybe<ClearSortOrder>;
  countryAbbreviation?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  mapLink?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  state?: InputMaybe<ClearSortOrder>;
  stateAbbreviation?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  zipCode?: InputMaybe<ClearSortOrder>;
};

export type ClearVenueOrderByWithRelationInput = {
  addressLine1?: InputMaybe<ClearSortOrder>;
  addressLine2?: InputMaybe<ClearSortOrder>;
  addressLine3?: InputMaybe<ClearSortOrder>;
  capacity?: InputMaybe<ClearSortOrder>;
  city?: InputMaybe<ClearSortOrder>;
  contactEmail?: InputMaybe<ClearSortOrder>;
  contactName?: InputMaybe<ClearSortOrder>;
  contactPhone?: InputMaybe<ClearSortOrder>;
  country?: InputMaybe<ClearSortOrder>;
  countryAbbreviation?: InputMaybe<ClearSortOrder>;
  createdAt?: InputMaybe<ClearSortOrder>;
  events?: InputMaybe<ClearEventOrderByRelationAggregateInput>;
  id?: InputMaybe<ClearSortOrder>;
  mapLink?: InputMaybe<ClearSortOrder>;
  name?: InputMaybe<ClearSortOrder>;
  state?: InputMaybe<ClearSortOrder>;
  stateAbbreviation?: InputMaybe<ClearSortOrder>;
  updatedAt?: InputMaybe<ClearSortOrder>;
  zipCode?: InputMaybe<ClearSortOrder>;
};

export type ClearVenueRelationFilter = {
  is?: InputMaybe<ClearVenueWhereInput>;
  isNot?: InputMaybe<ClearVenueWhereInput>;
};

export enum ClearVenueScalarFieldEnum {
  Address = 'address',
  AddressLine1 = 'addressLine1',
  AddressLine2 = 'addressLine2',
  AddressLine3 = 'addressLine3',
  Capacity = 'capacity',
  City = 'city',
  ContactEmail = 'contactEmail',
  ContactName = 'contactName',
  ContactPhone = 'contactPhone',
  Country = 'country',
  CountryAbbreviation = 'countryAbbreviation',
  CreatedAt = 'createdAt',
  Id = 'id',
  MapLink = 'mapLink',
  Metadata = 'metadata',
  Name = 'name',
  State = 'state',
  StateAbbreviation = 'stateAbbreviation',
  UpdatedAt = 'updatedAt',
  ZipCode = 'zipCode'
}

export type ClearVenueScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ClearVenueScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ClearVenueScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ClearVenueScalarWhereWithAggregatesInput>>;
  addressLine1?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  addressLine2?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  addressLine3?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  capacity?: InputMaybe<ClearIntNullableWithAggregatesFilter>;
  city?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  contactEmail?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  contactName?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  contactPhone?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  country?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  countryAbbreviation?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  createdAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  id?: InputMaybe<ClearStringWithAggregatesFilter>;
  mapLink?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  name?: InputMaybe<ClearStringWithAggregatesFilter>;
  state?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  stateAbbreviation?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  updatedAt?: InputMaybe<ClearDateTimeWithAggregatesFilter>;
  zipCode?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
};

export type ClearVenueSumAggregate = {
  __typename?: 'ClearVenueSumAggregate';
  capacity?: Maybe<Scalars['Int']>;
};

export type ClearVenueSumOrderByAggregateInput = {
  capacity?: InputMaybe<ClearSortOrder>;
};

export type ClearVenueUpdateInput = {
  addressLine1?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  addressLine2?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  addressLine3?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  capacity?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  city?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contactEmail?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contactName?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contactPhone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  country?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  countryAbbreviation?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  events?: InputMaybe<ClearEventUpdateManyWithoutVenueInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  mapLink?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  state?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  stateAbbreviation?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  zipCode?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
};

export type ClearVenueUpdateManyMutationInput = {
  addressLine1?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  addressLine2?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  addressLine3?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  capacity?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  city?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contactEmail?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contactName?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contactPhone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  country?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  countryAbbreviation?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  mapLink?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  state?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  stateAbbreviation?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  zipCode?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
};

export type ClearVenueUpdateOneWithoutEventsInput = {
  connect?: InputMaybe<ClearVenueWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClearVenueCreateOrConnectWithoutEventsInput>;
  create?: InputMaybe<ClearVenueCreateWithoutEventsInput>;
  delete?: InputMaybe<Scalars['Boolean']>;
  disconnect?: InputMaybe<Scalars['Boolean']>;
  update?: InputMaybe<ClearVenueUpdateWithoutEventsInput>;
  upsert?: InputMaybe<ClearVenueUpsertWithoutEventsInput>;
};

export type ClearVenueUpdateWithoutEventsInput = {
  addressLine1?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  addressLine2?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  addressLine3?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  capacity?: InputMaybe<ClearNullableIntFieldUpdateOperationsInput>;
  city?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contactEmail?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contactName?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  contactPhone?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  country?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  countryAbbreviation?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  mapLink?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  state?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  stateAbbreviation?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<ClearDateTimeFieldUpdateOperationsInput>;
  zipCode?: InputMaybe<ClearNullableStringFieldUpdateOperationsInput>;
};

export type ClearVenueUpsertWithoutEventsInput = {
  create: ClearVenueCreateWithoutEventsInput;
  update: ClearVenueUpdateWithoutEventsInput;
};

export type ClearVenueWhereInput = {
  AND?: InputMaybe<Array<ClearVenueWhereInput>>;
  NOT?: InputMaybe<Array<ClearVenueWhereInput>>;
  OR?: InputMaybe<Array<ClearVenueWhereInput>>;
  addressLine1?: InputMaybe<ClearStringNullableFilter>;
  addressLine2?: InputMaybe<ClearStringNullableFilter>;
  addressLine3?: InputMaybe<ClearStringNullableFilter>;
  capacity?: InputMaybe<ClearIntNullableFilter>;
  city?: InputMaybe<ClearStringNullableFilter>;
  contactEmail?: InputMaybe<ClearStringNullableFilter>;
  contactName?: InputMaybe<ClearStringNullableFilter>;
  contactPhone?: InputMaybe<ClearStringNullableFilter>;
  country?: InputMaybe<ClearStringNullableFilter>;
  countryAbbreviation?: InputMaybe<ClearStringNullableFilter>;
  createdAt?: InputMaybe<ClearDateTimeFilter>;
  events?: InputMaybe<ClearEventListRelationFilter>;
  id?: InputMaybe<ClearStringFilter>;
  mapLink?: InputMaybe<ClearStringNullableFilter>;
  name?: InputMaybe<ClearStringFilter>;
  state?: InputMaybe<ClearStringNullableFilter>;
  stateAbbreviation?: InputMaybe<ClearStringNullableFilter>;
  updatedAt?: InputMaybe<ClearDateTimeFilter>;
  zipCode?: InputMaybe<ClearStringNullableFilter>;
};

export type ClearVenueWhereUniqueInput = {
  id?: InputMaybe<Scalars['String']>;
};

export type ClearWebhook = {
  __typename?: 'ClearWebhook';
  event?: Maybe<ClearEvent>;
  eventGroup?: Maybe<ClearEventGroup>;
  eventGroupId?: Maybe<Scalars['String']>;
  eventId?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  service: ClearWebhookService;
  sink: Scalars['String'];
  type: ClearWebhookType;
};

export type ClearWebhookCountAggregate = {
  __typename?: 'ClearWebhookCountAggregate';
  _all: Scalars['Int'];
  eventGroupId: Scalars['Int'];
  eventId: Scalars['Int'];
  id: Scalars['Int'];
  service: Scalars['Int'];
  sink: Scalars['Int'];
  type: Scalars['Int'];
};

export type ClearWebhookCountOrderByAggregateInput = {
  eventGroupId?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  service?: InputMaybe<ClearSortOrder>;
  sink?: InputMaybe<ClearSortOrder>;
  type?: InputMaybe<ClearSortOrder>;
};

export type ClearWebhookCreateInput = {
  event?: InputMaybe<ClearEventCreateNestedOneWithoutWebhooksInput>;
  eventGroup?: InputMaybe<ClearEventGroupCreateNestedOneWithoutWebhooksInput>;
  id?: InputMaybe<Scalars['String']>;
  service: ClearWebhookService;
  sink: Scalars['String'];
  type: ClearWebhookType;
};

export type ClearWebhookCreateManyEventGroupInput = {
  eventId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  service: ClearWebhookService;
  sink: Scalars['String'];
  type: ClearWebhookType;
};

export type ClearWebhookCreateManyEventGroupInputEnvelope = {
  data: Array<ClearWebhookCreateManyEventGroupInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};

export type ClearWebhookCreateManyEventInput = {
  eventGroupId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  service: ClearWebhookService;
  sink: Scalars['String'];
  type: ClearWebhookType;
};

export type ClearWebhookCreateManyEventInputEnvelope = {
  data: Array<ClearWebhookCreateManyEventInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']>;
};

export type ClearWebhookCreateManyInput = {
  eventGroupId?: InputMaybe<Scalars['String']>;
  eventId?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  service: ClearWebhookService;
  sink: Scalars['String'];
  type: ClearWebhookType;
};

export type ClearWebhookCreateNestedManyWithoutEventGroupInput = {
  connect?: InputMaybe<Array<ClearWebhookWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearWebhookCreateOrConnectWithoutEventGroupInput>>;
  create?: InputMaybe<Array<ClearWebhookCreateWithoutEventGroupInput>>;
  createMany?: InputMaybe<ClearWebhookCreateManyEventGroupInputEnvelope>;
};

export type ClearWebhookCreateNestedManyWithoutEventInput = {
  connect?: InputMaybe<Array<ClearWebhookWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearWebhookCreateOrConnectWithoutEventInput>>;
  create?: InputMaybe<Array<ClearWebhookCreateWithoutEventInput>>;
  createMany?: InputMaybe<ClearWebhookCreateManyEventInputEnvelope>;
};

export type ClearWebhookCreateOrConnectWithoutEventGroupInput = {
  create: ClearWebhookCreateWithoutEventGroupInput;
  where: ClearWebhookWhereUniqueInput;
};

export type ClearWebhookCreateOrConnectWithoutEventInput = {
  create: ClearWebhookCreateWithoutEventInput;
  where: ClearWebhookWhereUniqueInput;
};

export type ClearWebhookCreateWithoutEventGroupInput = {
  event?: InputMaybe<ClearEventCreateNestedOneWithoutWebhooksInput>;
  id?: InputMaybe<Scalars['String']>;
  service: ClearWebhookService;
  sink: Scalars['String'];
  type: ClearWebhookType;
};

export type ClearWebhookCreateWithoutEventInput = {
  eventGroup?: InputMaybe<ClearEventGroupCreateNestedOneWithoutWebhooksInput>;
  id?: InputMaybe<Scalars['String']>;
  service: ClearWebhookService;
  sink: Scalars['String'];
  type: ClearWebhookType;
};

export type ClearWebhookGroupBy = {
  __typename?: 'ClearWebhookGroupBy';
  _count?: Maybe<ClearWebhookCountAggregate>;
  _max?: Maybe<ClearWebhookMaxAggregate>;
  _min?: Maybe<ClearWebhookMinAggregate>;
  eventGroupId?: Maybe<Scalars['String']>;
  eventId?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  service: ClearWebhookService;
  sink: Scalars['String'];
  type: ClearWebhookType;
};

export type ClearWebhookListRelationFilter = {
  every?: InputMaybe<ClearWebhookWhereInput>;
  none?: InputMaybe<ClearWebhookWhereInput>;
  some?: InputMaybe<ClearWebhookWhereInput>;
};

export type ClearWebhookMaxAggregate = {
  __typename?: 'ClearWebhookMaxAggregate';
  eventGroupId?: Maybe<Scalars['String']>;
  eventId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  service?: Maybe<ClearWebhookService>;
  sink?: Maybe<Scalars['String']>;
  type?: Maybe<ClearWebhookType>;
};

export type ClearWebhookMaxOrderByAggregateInput = {
  eventGroupId?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  service?: InputMaybe<ClearSortOrder>;
  sink?: InputMaybe<ClearSortOrder>;
  type?: InputMaybe<ClearSortOrder>;
};

export type ClearWebhookMinAggregate = {
  __typename?: 'ClearWebhookMinAggregate';
  eventGroupId?: Maybe<Scalars['String']>;
  eventId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  service?: Maybe<ClearWebhookService>;
  sink?: Maybe<Scalars['String']>;
  type?: Maybe<ClearWebhookType>;
};

export type ClearWebhookMinOrderByAggregateInput = {
  eventGroupId?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  service?: InputMaybe<ClearSortOrder>;
  sink?: InputMaybe<ClearSortOrder>;
  type?: InputMaybe<ClearSortOrder>;
};

export type ClearWebhookOrderByRelationAggregateInput = {
  _count?: InputMaybe<ClearSortOrder>;
};

export type ClearWebhookOrderByWithAggregationInput = {
  _count?: InputMaybe<ClearWebhookCountOrderByAggregateInput>;
  _max?: InputMaybe<ClearWebhookMaxOrderByAggregateInput>;
  _min?: InputMaybe<ClearWebhookMinOrderByAggregateInput>;
  eventGroupId?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  service?: InputMaybe<ClearSortOrder>;
  sink?: InputMaybe<ClearSortOrder>;
  type?: InputMaybe<ClearSortOrder>;
};

export type ClearWebhookOrderByWithRelationInput = {
  event?: InputMaybe<ClearEventOrderByWithRelationInput>;
  eventGroup?: InputMaybe<ClearEventGroupOrderByWithRelationInput>;
  eventGroupId?: InputMaybe<ClearSortOrder>;
  eventId?: InputMaybe<ClearSortOrder>;
  id?: InputMaybe<ClearSortOrder>;
  service?: InputMaybe<ClearSortOrder>;
  sink?: InputMaybe<ClearSortOrder>;
  type?: InputMaybe<ClearSortOrder>;
};

export enum ClearWebhookScalarFieldEnum {
  EventGroupId = 'eventGroupId',
  EventId = 'eventId',
  Id = 'id',
  Service = 'service',
  Sink = 'sink',
  Type = 'type'
}

export type ClearWebhookScalarWhereInput = {
  AND?: InputMaybe<Array<ClearWebhookScalarWhereInput>>;
  NOT?: InputMaybe<Array<ClearWebhookScalarWhereInput>>;
  OR?: InputMaybe<Array<ClearWebhookScalarWhereInput>>;
  eventGroupId?: InputMaybe<ClearStringNullableFilter>;
  eventId?: InputMaybe<ClearStringNullableFilter>;
  id?: InputMaybe<ClearStringFilter>;
  service?: InputMaybe<ClearEnumWebhookServiceFilter>;
  sink?: InputMaybe<ClearStringFilter>;
  type?: InputMaybe<ClearEnumWebhookTypeFilter>;
};

export type ClearWebhookScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ClearWebhookScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ClearWebhookScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ClearWebhookScalarWhereWithAggregatesInput>>;
  eventGroupId?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  eventId?: InputMaybe<ClearStringNullableWithAggregatesFilter>;
  id?: InputMaybe<ClearStringWithAggregatesFilter>;
  service?: InputMaybe<ClearEnumWebhookServiceWithAggregatesFilter>;
  sink?: InputMaybe<ClearStringWithAggregatesFilter>;
  type?: InputMaybe<ClearEnumWebhookTypeWithAggregatesFilter>;
};

export enum ClearWebhookService {
  Discord = 'DISCORD',
  Email = 'EMAIL'
}

export enum ClearWebhookType {
  All = 'ALL',
  Digest = 'DIGEST'
}

export type ClearWebhookUpdateInput = {
  event?: InputMaybe<ClearEventUpdateOneWithoutWebhooksInput>;
  eventGroup?: InputMaybe<ClearEventGroupUpdateOneWithoutWebhooksInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  service?: InputMaybe<ClearEnumWebhookServiceFieldUpdateOperationsInput>;
  sink?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  type?: InputMaybe<ClearEnumWebhookTypeFieldUpdateOperationsInput>;
};

export type ClearWebhookUpdateManyMutationInput = {
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  service?: InputMaybe<ClearEnumWebhookServiceFieldUpdateOperationsInput>;
  sink?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  type?: InputMaybe<ClearEnumWebhookTypeFieldUpdateOperationsInput>;
};

export type ClearWebhookUpdateManyWithWhereWithoutEventGroupInput = {
  data: ClearWebhookUpdateManyMutationInput;
  where: ClearWebhookScalarWhereInput;
};

export type ClearWebhookUpdateManyWithWhereWithoutEventInput = {
  data: ClearWebhookUpdateManyMutationInput;
  where: ClearWebhookScalarWhereInput;
};

export type ClearWebhookUpdateManyWithoutEventGroupInput = {
  connect?: InputMaybe<Array<ClearWebhookWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearWebhookCreateOrConnectWithoutEventGroupInput>>;
  create?: InputMaybe<Array<ClearWebhookCreateWithoutEventGroupInput>>;
  createMany?: InputMaybe<ClearWebhookCreateManyEventGroupInputEnvelope>;
  delete?: InputMaybe<Array<ClearWebhookWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClearWebhookScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClearWebhookWhereUniqueInput>>;
  set?: InputMaybe<Array<ClearWebhookWhereUniqueInput>>;
  update?: InputMaybe<Array<ClearWebhookUpdateWithWhereUniqueWithoutEventGroupInput>>;
  updateMany?: InputMaybe<Array<ClearWebhookUpdateManyWithWhereWithoutEventGroupInput>>;
  upsert?: InputMaybe<Array<ClearWebhookUpsertWithWhereUniqueWithoutEventGroupInput>>;
};

export type ClearWebhookUpdateManyWithoutEventInput = {
  connect?: InputMaybe<Array<ClearWebhookWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClearWebhookCreateOrConnectWithoutEventInput>>;
  create?: InputMaybe<Array<ClearWebhookCreateWithoutEventInput>>;
  createMany?: InputMaybe<ClearWebhookCreateManyEventInputEnvelope>;
  delete?: InputMaybe<Array<ClearWebhookWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClearWebhookScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClearWebhookWhereUniqueInput>>;
  set?: InputMaybe<Array<ClearWebhookWhereUniqueInput>>;
  update?: InputMaybe<Array<ClearWebhookUpdateWithWhereUniqueWithoutEventInput>>;
  updateMany?: InputMaybe<Array<ClearWebhookUpdateManyWithWhereWithoutEventInput>>;
  upsert?: InputMaybe<Array<ClearWebhookUpsertWithWhereUniqueWithoutEventInput>>;
};

export type ClearWebhookUpdateWithWhereUniqueWithoutEventGroupInput = {
  data: ClearWebhookUpdateWithoutEventGroupInput;
  where: ClearWebhookWhereUniqueInput;
};

export type ClearWebhookUpdateWithWhereUniqueWithoutEventInput = {
  data: ClearWebhookUpdateWithoutEventInput;
  where: ClearWebhookWhereUniqueInput;
};

export type ClearWebhookUpdateWithoutEventGroupInput = {
  event?: InputMaybe<ClearEventUpdateOneWithoutWebhooksInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  service?: InputMaybe<ClearEnumWebhookServiceFieldUpdateOperationsInput>;
  sink?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  type?: InputMaybe<ClearEnumWebhookTypeFieldUpdateOperationsInput>;
};

export type ClearWebhookUpdateWithoutEventInput = {
  eventGroup?: InputMaybe<ClearEventGroupUpdateOneWithoutWebhooksInput>;
  id?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  service?: InputMaybe<ClearEnumWebhookServiceFieldUpdateOperationsInput>;
  sink?: InputMaybe<ClearStringFieldUpdateOperationsInput>;
  type?: InputMaybe<ClearEnumWebhookTypeFieldUpdateOperationsInput>;
};

export type ClearWebhookUpsertWithWhereUniqueWithoutEventGroupInput = {
  create: ClearWebhookCreateWithoutEventGroupInput;
  update: ClearWebhookUpdateWithoutEventGroupInput;
  where: ClearWebhookWhereUniqueInput;
};

export type ClearWebhookUpsertWithWhereUniqueWithoutEventInput = {
  create: ClearWebhookCreateWithoutEventInput;
  update: ClearWebhookUpdateWithoutEventInput;
  where: ClearWebhookWhereUniqueInput;
};

export type ClearWebhookWhereInput = {
  AND?: InputMaybe<Array<ClearWebhookWhereInput>>;
  NOT?: InputMaybe<Array<ClearWebhookWhereInput>>;
  OR?: InputMaybe<Array<ClearWebhookWhereInput>>;
  event?: InputMaybe<ClearEventRelationFilter>;
  eventGroup?: InputMaybe<ClearEventGroupRelationFilter>;
  eventGroupId?: InputMaybe<ClearStringNullableFilter>;
  eventId?: InputMaybe<ClearStringNullableFilter>;
  id?: InputMaybe<ClearStringFilter>;
  service?: InputMaybe<ClearEnumWebhookServiceFilter>;
  sink?: InputMaybe<ClearStringFilter>;
  type?: InputMaybe<ClearEnumWebhookTypeFilter>;
};

export type ClearWebhookWhereUniqueInput = {
  id?: InputMaybe<Scalars['String']>;
};

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/announcement) */
export type CmsAnnouncement = CmsEntry & {
  __typename?: 'CmsAnnouncement';
  contentfulMetadata: CmsContentfulMetadata;
  displayAt?: Maybe<Scalars['CmsDateTime']>;
  endAt?: Maybe<Scalars['CmsDateTime']>;
  link?: Maybe<Scalars['String']>;
  linkedFrom?: Maybe<CmsAnnouncementLinkingCollections>;
  oneline?: Maybe<Scalars['String']>;
  programs?: Maybe<CmsAnnouncementProgramCollection>;
  sys: CmsSys;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  visibility?: Maybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/announcement) */
export type CmsAnnouncementDisplayAtArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/announcement) */
export type CmsAnnouncementEndAtArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/announcement) */
export type CmsAnnouncementLinkArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/announcement) */
export type CmsAnnouncementLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/announcement) */
export type CmsAnnouncementOnelineArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/announcement) */
export type CmsAnnouncementProgramsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/announcement) */
export type CmsAnnouncementTitleArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/announcement) */
export type CmsAnnouncementTypeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/announcement) */
export type CmsAnnouncementVisibilityArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsAnnouncementCollection = {
  __typename?: 'CmsAnnouncementCollection';
  items: Array<Maybe<CmsAnnouncement>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsAnnouncementFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsAnnouncementFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsAnnouncementFilter>>>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  displayAt?: InputMaybe<Scalars['CmsDateTime']>;
  displayAt_exists?: InputMaybe<Scalars['Boolean']>;
  displayAt_gt?: InputMaybe<Scalars['CmsDateTime']>;
  displayAt_gte?: InputMaybe<Scalars['CmsDateTime']>;
  displayAt_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  displayAt_lt?: InputMaybe<Scalars['CmsDateTime']>;
  displayAt_lte?: InputMaybe<Scalars['CmsDateTime']>;
  displayAt_not?: InputMaybe<Scalars['CmsDateTime']>;
  displayAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  endAt?: InputMaybe<Scalars['CmsDateTime']>;
  endAt_exists?: InputMaybe<Scalars['Boolean']>;
  endAt_gt?: InputMaybe<Scalars['CmsDateTime']>;
  endAt_gte?: InputMaybe<Scalars['CmsDateTime']>;
  endAt_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  endAt_lt?: InputMaybe<Scalars['CmsDateTime']>;
  endAt_lte?: InputMaybe<Scalars['CmsDateTime']>;
  endAt_not?: InputMaybe<Scalars['CmsDateTime']>;
  endAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  link?: InputMaybe<Scalars['String']>;
  link_contains?: InputMaybe<Scalars['String']>;
  link_exists?: InputMaybe<Scalars['Boolean']>;
  link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  link_not?: InputMaybe<Scalars['String']>;
  link_not_contains?: InputMaybe<Scalars['String']>;
  link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  oneline?: InputMaybe<Scalars['String']>;
  oneline_contains?: InputMaybe<Scalars['String']>;
  oneline_exists?: InputMaybe<Scalars['Boolean']>;
  oneline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  oneline_not?: InputMaybe<Scalars['String']>;
  oneline_not_contains?: InputMaybe<Scalars['String']>;
  oneline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  programCollection_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
  title?: InputMaybe<Scalars['String']>;
  title_contains?: InputMaybe<Scalars['String']>;
  title_exists?: InputMaybe<Scalars['Boolean']>;
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  title_not?: InputMaybe<Scalars['String']>;
  title_not_contains?: InputMaybe<Scalars['String']>;
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  type?: InputMaybe<Scalars['String']>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_exists?: InputMaybe<Scalars['Boolean']>;
  type_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  visibility?: InputMaybe<Scalars['String']>;
  visibility_contains?: InputMaybe<Scalars['String']>;
  visibility_exists?: InputMaybe<Scalars['Boolean']>;
  visibility_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  visibility_not?: InputMaybe<Scalars['String']>;
  visibility_not_contains?: InputMaybe<Scalars['String']>;
  visibility_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmsAnnouncementLinkingCollections = {
  __typename?: 'CmsAnnouncementLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
};


export type CmsAnnouncementLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsAnnouncementOrder {
  DisplayAtAsc = 'displayAt_ASC',
  DisplayAtDesc = 'displayAt_DESC',
  EndAtAsc = 'endAt_ASC',
  EndAtDesc = 'endAt_DESC',
  LinkAsc = 'link_ASC',
  LinkDesc = 'link_DESC',
  OnelineAsc = 'oneline_ASC',
  OnelineDesc = 'oneline_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  VisibilityAsc = 'visibility_ASC',
  VisibilityDesc = 'visibility_DESC'
}

export type CmsAnnouncementProgramCollection = {
  __typename?: 'CmsAnnouncementProgramCollection';
  items: Array<Maybe<CmsProgram>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

/** Represents a binary file in a space. An asset can be any file type. */
export type CmsAsset = {
  __typename?: 'CmsAsset';
  contentType?: Maybe<Scalars['String']>;
  contentfulBaseUrl?: Maybe<Scalars['String']>;
  contentfulMetadata: CmsContentfulMetadata;
  description?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
  height?: Maybe<Scalars['Int']>;
  linkedFrom?: Maybe<CmsAssetLinkingCollections>;
  size?: Maybe<Scalars['Int']>;
  sys: CmsSys;
  title?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Int']>;
};


/** Represents a binary file in a space. An asset can be any file type. */
export type CmsAssetContentTypeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** Represents a binary file in a space. An asset can be any file type. */
export type CmsAssetContentfulBaseUrlArgs = {
  locale?: InputMaybe<Scalars['String']>;
  transform?: InputMaybe<CmsImageTransformOptions>;
};


/** Represents a binary file in a space. An asset can be any file type. */
export type CmsAssetDescriptionArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** Represents a binary file in a space. An asset can be any file type. */
export type CmsAssetFileNameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** Represents a binary file in a space. An asset can be any file type. */
export type CmsAssetHeightArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** Represents a binary file in a space. An asset can be any file type. */
export type CmsAssetLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** Represents a binary file in a space. An asset can be any file type. */
export type CmsAssetSizeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** Represents a binary file in a space. An asset can be any file type. */
export type CmsAssetTitleArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** Represents a binary file in a space. An asset can be any file type. */
export type CmsAssetUrlArgs = {
  transform?: InputMaybe<CmsImageTransformOptions>;
};


/** Represents a binary file in a space. An asset can be any file type. */
export type CmsAssetWidthArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsAssetCollection = {
  __typename?: 'CmsAssetCollection';
  items: Array<Maybe<CmsAsset>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsAssetFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsAssetFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsAssetFilter>>>;
  contentType?: InputMaybe<Scalars['String']>;
  contentType_contains?: InputMaybe<Scalars['String']>;
  contentType_exists?: InputMaybe<Scalars['Boolean']>;
  contentType_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contentType_not?: InputMaybe<Scalars['String']>;
  contentType_not_contains?: InputMaybe<Scalars['String']>;
  contentType_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  description?: InputMaybe<Scalars['String']>;
  description_contains?: InputMaybe<Scalars['String']>;
  description_exists?: InputMaybe<Scalars['Boolean']>;
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  description_not?: InputMaybe<Scalars['String']>;
  description_not_contains?: InputMaybe<Scalars['String']>;
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  fileName?: InputMaybe<Scalars['String']>;
  fileName_contains?: InputMaybe<Scalars['String']>;
  fileName_exists?: InputMaybe<Scalars['Boolean']>;
  fileName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  fileName_not?: InputMaybe<Scalars['String']>;
  fileName_not_contains?: InputMaybe<Scalars['String']>;
  fileName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  height?: InputMaybe<Scalars['Int']>;
  height_exists?: InputMaybe<Scalars['Boolean']>;
  height_gt?: InputMaybe<Scalars['Int']>;
  height_gte?: InputMaybe<Scalars['Int']>;
  height_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  height_lt?: InputMaybe<Scalars['Int']>;
  height_lte?: InputMaybe<Scalars['Int']>;
  height_not?: InputMaybe<Scalars['Int']>;
  height_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  size?: InputMaybe<Scalars['Int']>;
  size_exists?: InputMaybe<Scalars['Boolean']>;
  size_gt?: InputMaybe<Scalars['Int']>;
  size_gte?: InputMaybe<Scalars['Int']>;
  size_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  size_lt?: InputMaybe<Scalars['Int']>;
  size_lte?: InputMaybe<Scalars['Int']>;
  size_not?: InputMaybe<Scalars['Int']>;
  size_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  sys?: InputMaybe<CmsSysFilter>;
  title?: InputMaybe<Scalars['String']>;
  title_contains?: InputMaybe<Scalars['String']>;
  title_exists?: InputMaybe<Scalars['Boolean']>;
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  title_not?: InputMaybe<Scalars['String']>;
  title_not_contains?: InputMaybe<Scalars['String']>;
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  url?: InputMaybe<Scalars['String']>;
  url_contains?: InputMaybe<Scalars['String']>;
  url_exists?: InputMaybe<Scalars['Boolean']>;
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  url_not?: InputMaybe<Scalars['String']>;
  url_not_contains?: InputMaybe<Scalars['String']>;
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  width?: InputMaybe<Scalars['Int']>;
  width_exists?: InputMaybe<Scalars['Boolean']>;
  width_gt?: InputMaybe<Scalars['Int']>;
  width_gte?: InputMaybe<Scalars['Int']>;
  width_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  width_lt?: InputMaybe<Scalars['Int']>;
  width_lte?: InputMaybe<Scalars['Int']>;
  width_not?: InputMaybe<Scalars['Int']>;
  width_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
};

export type CmsAssetLinkingCollections = {
  __typename?: 'CmsAssetLinkingCollections';
  awards?: Maybe<CmsAwardCollection>;
  badges?: Maybe<CmsBadgeCollection>;
  communityPartners?: Maybe<CmsCommunityPartnerCollection>;
  entries?: Maybe<CmsEntryCollection>;
  eventRestrictions?: Maybe<CmsEventRestrictionCollection>;
  events?: Maybe<CmsEventCollection>;
  forms?: Maybe<CmsFormCollection>;
  globalSponsors?: Maybe<CmsGlobalSponsorCollection>;
  hiringCompanies?: Maybe<CmsHiringCompanyCollection>;
  legalDocuments?: Maybe<CmsLegalDocumentCollection>;
  newsCoverages?: Maybe<CmsNewsCoverageCollection>;
  pressPhotos?: Maybe<CmsPressPhotoCollection>;
  programs?: Maybe<CmsProgramCollection>;
  regions?: Maybe<CmsRegionCollection>;
  socialMedias?: Maybe<CmsSocialMediaCollection>;
  stockMusics?: Maybe<CmsStockMusicCollection>;
  testimonials?: Maybe<CmsTestimonialCollection>;
};


export type CmsAssetLinkingCollectionsAwardsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsAssetLinkingCollectionsBadgesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsAssetLinkingCollectionsCommunityPartnersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsAssetLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsAssetLinkingCollectionsEventRestrictionsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsAssetLinkingCollectionsEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsAssetLinkingCollectionsFormsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsAssetLinkingCollectionsGlobalSponsorsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsAssetLinkingCollectionsHiringCompaniesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsAssetLinkingCollectionsLegalDocumentsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsAssetLinkingCollectionsNewsCoveragesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsAssetLinkingCollectionsPressPhotosArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsAssetLinkingCollectionsProgramsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsAssetLinkingCollectionsRegionsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsAssetLinkingCollectionsSocialMediasArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsAssetLinkingCollectionsStockMusicsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsAssetLinkingCollectionsTestimonialsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsAssetOrder {
  ContentTypeAsc = 'contentType_ASC',
  ContentTypeDesc = 'contentType_DESC',
  FileNameAsc = 'fileName_ASC',
  FileNameDesc = 'fileName_DESC',
  HeightAsc = 'height_ASC',
  HeightDesc = 'height_DESC',
  SizeAsc = 'size_ASC',
  SizeDesc = 'size_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC',
  WidthAsc = 'width_ASC',
  WidthDesc = 'width_DESC'
}

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/award) */
export type CmsAward = CmsEntry & {
  __typename?: 'CmsAward';
  contentfulMetadata: CmsContentfulMetadata;
  description?: Maybe<Scalars['String']>;
  featured?: Maybe<Scalars['Boolean']>;
  icon?: Maybe<CmsAsset>;
  id?: Maybe<Scalars['String']>;
  linkedFrom?: Maybe<CmsAwardLinkingCollections>;
  name?: Maybe<Scalars['String']>;
  programs?: Maybe<CmsAwardProgramsCollection>;
  ranking?: Maybe<Scalars['Int']>;
  suggestedModifiers?: Maybe<Array<Maybe<Scalars['String']>>>;
  sys: CmsSys;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/award) */
export type CmsAwardDescriptionArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/award) */
export type CmsAwardFeaturedArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/award) */
export type CmsAwardIconArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/award) */
export type CmsAwardIdArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/award) */
export type CmsAwardLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/award) */
export type CmsAwardNameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/award) */
export type CmsAwardProgramsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/award) */
export type CmsAwardRankingArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/award) */
export type CmsAwardSuggestedModifiersArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsAwardCollection = {
  __typename?: 'CmsAwardCollection';
  items: Array<Maybe<CmsAward>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsAwardFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsAwardFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsAwardFilter>>>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  description?: InputMaybe<Scalars['String']>;
  description_contains?: InputMaybe<Scalars['String']>;
  description_exists?: InputMaybe<Scalars['Boolean']>;
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  description_not?: InputMaybe<Scalars['String']>;
  description_not_contains?: InputMaybe<Scalars['String']>;
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  featured?: InputMaybe<Scalars['Boolean']>;
  featured_exists?: InputMaybe<Scalars['Boolean']>;
  featured_not?: InputMaybe<Scalars['Boolean']>;
  icon_exists?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['String']>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_exists?: InputMaybe<Scalars['Boolean']>;
  id_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id_not?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name?: InputMaybe<Scalars['String']>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_exists?: InputMaybe<Scalars['Boolean']>;
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name_not?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  programsCollection_exists?: InputMaybe<Scalars['Boolean']>;
  ranking?: InputMaybe<Scalars['Int']>;
  ranking_exists?: InputMaybe<Scalars['Boolean']>;
  ranking_gt?: InputMaybe<Scalars['Int']>;
  ranking_gte?: InputMaybe<Scalars['Int']>;
  ranking_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  ranking_lt?: InputMaybe<Scalars['Int']>;
  ranking_lte?: InputMaybe<Scalars['Int']>;
  ranking_not?: InputMaybe<Scalars['Int']>;
  ranking_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  suggestedModifiers_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  suggestedModifiers_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  suggestedModifiers_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  suggestedModifiers_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
};

export type CmsAwardLinkingCollections = {
  __typename?: 'CmsAwardLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
};


export type CmsAwardLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsAwardOrder {
  FeaturedAsc = 'featured_ASC',
  FeaturedDesc = 'featured_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  RankingAsc = 'ranking_ASC',
  RankingDesc = 'ranking_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}

export type CmsAwardProgramsCollection = {
  __typename?: 'CmsAwardProgramsCollection';
  items: Array<Maybe<CmsProgram>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/badge) */
export type CmsBadge = CmsEntry & {
  __typename?: 'CmsBadge';
  contentfulMetadata: CmsContentfulMetadata;
  description?: Maybe<Scalars['String']>;
  earnCriteria?: Maybe<Scalars['String']>;
  earnMessage?: Maybe<Scalars['String']>;
  emoji?: Maybe<Scalars['String']>;
  grantPermissionOverrideIDs?: Maybe<Scalars['CmsJSON']>;
  id?: Maybe<Scalars['String']>;
  image?: Maybe<CmsAsset>;
  linkedFrom?: Maybe<CmsBadgeLinkingCollections>;
  name?: Maybe<Scalars['String']>;
  sys: CmsSys;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/badge) */
export type CmsBadgeDescriptionArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/badge) */
export type CmsBadgeEarnCriteriaArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/badge) */
export type CmsBadgeEarnMessageArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/badge) */
export type CmsBadgeEmojiArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/badge) */
export type CmsBadgeGrantPermissionOverrideIDsArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/badge) */
export type CmsBadgeIdArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/badge) */
export type CmsBadgeImageArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/badge) */
export type CmsBadgeLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/badge) */
export type CmsBadgeNameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsBadgeCollection = {
  __typename?: 'CmsBadgeCollection';
  items: Array<Maybe<CmsBadge>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsBadgeFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsBadgeFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsBadgeFilter>>>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  description?: InputMaybe<Scalars['String']>;
  description_contains?: InputMaybe<Scalars['String']>;
  description_exists?: InputMaybe<Scalars['Boolean']>;
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  description_not?: InputMaybe<Scalars['String']>;
  description_not_contains?: InputMaybe<Scalars['String']>;
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  earnCriteria?: InputMaybe<Scalars['String']>;
  earnCriteria_contains?: InputMaybe<Scalars['String']>;
  earnCriteria_exists?: InputMaybe<Scalars['Boolean']>;
  earnCriteria_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  earnCriteria_not?: InputMaybe<Scalars['String']>;
  earnCriteria_not_contains?: InputMaybe<Scalars['String']>;
  earnCriteria_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  earnMessage?: InputMaybe<Scalars['String']>;
  earnMessage_contains?: InputMaybe<Scalars['String']>;
  earnMessage_exists?: InputMaybe<Scalars['Boolean']>;
  earnMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  earnMessage_not?: InputMaybe<Scalars['String']>;
  earnMessage_not_contains?: InputMaybe<Scalars['String']>;
  earnMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  emoji?: InputMaybe<Scalars['String']>;
  emoji_contains?: InputMaybe<Scalars['String']>;
  emoji_exists?: InputMaybe<Scalars['Boolean']>;
  emoji_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  emoji_not?: InputMaybe<Scalars['String']>;
  emoji_not_contains?: InputMaybe<Scalars['String']>;
  emoji_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  grantPermissionOverrideIDs_exists?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['String']>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_exists?: InputMaybe<Scalars['Boolean']>;
  id_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id_not?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  image_exists?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_exists?: InputMaybe<Scalars['Boolean']>;
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name_not?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  sys?: InputMaybe<CmsSysFilter>;
};

export type CmsBadgeLinkingCollections = {
  __typename?: 'CmsBadgeLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
};


export type CmsBadgeLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsBadgeOrder {
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  EarnCriteriaAsc = 'earnCriteria_ASC',
  EarnCriteriaDesc = 'earnCriteria_DESC',
  EmojiAsc = 'emoji_ASC',
  EmojiDesc = 'emoji_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/bumper) */
export type CmsBumper = CmsEntry & {
  __typename?: 'CmsBumper';
  ambient?: Maybe<Scalars['Boolean']>;
  contentfulMetadata: CmsContentfulMetadata;
  linkedFrom?: Maybe<CmsBumperLinkingCollections>;
  purpose?: Maybe<Array<Maybe<Scalars['String']>>>;
  sys: CmsSys;
  title?: Maybe<Scalars['String']>;
  video?: Maybe<Scalars['CmsJSON']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/bumper) */
export type CmsBumperAmbientArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/bumper) */
export type CmsBumperLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/bumper) */
export type CmsBumperPurposeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/bumper) */
export type CmsBumperTitleArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/bumper) */
export type CmsBumperVideoArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsBumperCollection = {
  __typename?: 'CmsBumperCollection';
  items: Array<Maybe<CmsBumper>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsBumperFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsBumperFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsBumperFilter>>>;
  ambient?: InputMaybe<Scalars['Boolean']>;
  ambient_exists?: InputMaybe<Scalars['Boolean']>;
  ambient_not?: InputMaybe<Scalars['Boolean']>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  purpose_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  purpose_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  purpose_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  purpose_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
  title?: InputMaybe<Scalars['String']>;
  title_contains?: InputMaybe<Scalars['String']>;
  title_exists?: InputMaybe<Scalars['Boolean']>;
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  title_not?: InputMaybe<Scalars['String']>;
  title_not_contains?: InputMaybe<Scalars['String']>;
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  video_exists?: InputMaybe<Scalars['Boolean']>;
};

export type CmsBumperLinkingCollections = {
  __typename?: 'CmsBumperLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
};


export type CmsBumperLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsBumperOrder {
  AmbientAsc = 'ambient_ASC',
  AmbientDesc = 'ambient_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/communityPartner) */
export type CmsCommunityPartner = CmsEntry & {
  __typename?: 'CmsCommunityPartner';
  audience?: Maybe<Array<Maybe<Scalars['String']>>>;
  blurb?: Maybe<Scalars['String']>;
  contentfulMetadata: CmsContentfulMetadata;
  cost?: Maybe<Scalars['Int']>;
  details?: Maybe<Scalars['String']>;
  displayUrl?: Maybe<Scalars['String']>;
  eligibility?: Maybe<Scalars['String']>;
  expires?: Maybe<Scalars['CmsDateTime']>;
  linkedFrom?: Maybe<CmsCommunityPartnerLinkingCollections>;
  logo?: Maybe<CmsAsset>;
  name?: Maybe<Scalars['String']>;
  regions?: Maybe<CmsCommunityPartnerRegionCollection>;
  sys: CmsSys;
  url?: Maybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/communityPartner) */
export type CmsCommunityPartnerAudienceArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/communityPartner) */
export type CmsCommunityPartnerBlurbArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/communityPartner) */
export type CmsCommunityPartnerCostArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/communityPartner) */
export type CmsCommunityPartnerDetailsArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/communityPartner) */
export type CmsCommunityPartnerDisplayUrlArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/communityPartner) */
export type CmsCommunityPartnerEligibilityArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/communityPartner) */
export type CmsCommunityPartnerExpiresArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/communityPartner) */
export type CmsCommunityPartnerLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/communityPartner) */
export type CmsCommunityPartnerLogoArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/communityPartner) */
export type CmsCommunityPartnerNameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/communityPartner) */
export type CmsCommunityPartnerRegionsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/communityPartner) */
export type CmsCommunityPartnerUrlArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsCommunityPartnerCollection = {
  __typename?: 'CmsCommunityPartnerCollection';
  items: Array<Maybe<CmsCommunityPartner>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsCommunityPartnerFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsCommunityPartnerFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsCommunityPartnerFilter>>>;
  audience_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  audience_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  audience_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  audience_exists?: InputMaybe<Scalars['Boolean']>;
  blurb?: InputMaybe<Scalars['String']>;
  blurb_contains?: InputMaybe<Scalars['String']>;
  blurb_exists?: InputMaybe<Scalars['Boolean']>;
  blurb_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  blurb_not?: InputMaybe<Scalars['String']>;
  blurb_not_contains?: InputMaybe<Scalars['String']>;
  blurb_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  cost?: InputMaybe<Scalars['Int']>;
  cost_exists?: InputMaybe<Scalars['Boolean']>;
  cost_gt?: InputMaybe<Scalars['Int']>;
  cost_gte?: InputMaybe<Scalars['Int']>;
  cost_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  cost_lt?: InputMaybe<Scalars['Int']>;
  cost_lte?: InputMaybe<Scalars['Int']>;
  cost_not?: InputMaybe<Scalars['Int']>;
  cost_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  details?: InputMaybe<Scalars['String']>;
  details_contains?: InputMaybe<Scalars['String']>;
  details_exists?: InputMaybe<Scalars['Boolean']>;
  details_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  details_not?: InputMaybe<Scalars['String']>;
  details_not_contains?: InputMaybe<Scalars['String']>;
  details_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  displayUrl?: InputMaybe<Scalars['String']>;
  displayUrl_contains?: InputMaybe<Scalars['String']>;
  displayUrl_exists?: InputMaybe<Scalars['Boolean']>;
  displayUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  displayUrl_not?: InputMaybe<Scalars['String']>;
  displayUrl_not_contains?: InputMaybe<Scalars['String']>;
  displayUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  eligibility?: InputMaybe<Scalars['String']>;
  eligibility_contains?: InputMaybe<Scalars['String']>;
  eligibility_exists?: InputMaybe<Scalars['Boolean']>;
  eligibility_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  eligibility_not?: InputMaybe<Scalars['String']>;
  eligibility_not_contains?: InputMaybe<Scalars['String']>;
  eligibility_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  expires?: InputMaybe<Scalars['CmsDateTime']>;
  expires_exists?: InputMaybe<Scalars['Boolean']>;
  expires_gt?: InputMaybe<Scalars['CmsDateTime']>;
  expires_gte?: InputMaybe<Scalars['CmsDateTime']>;
  expires_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  expires_lt?: InputMaybe<Scalars['CmsDateTime']>;
  expires_lte?: InputMaybe<Scalars['CmsDateTime']>;
  expires_not?: InputMaybe<Scalars['CmsDateTime']>;
  expires_not_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  logo_exists?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_exists?: InputMaybe<Scalars['Boolean']>;
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name_not?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  regionCollection_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
  url?: InputMaybe<Scalars['String']>;
  url_contains?: InputMaybe<Scalars['String']>;
  url_exists?: InputMaybe<Scalars['Boolean']>;
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  url_not?: InputMaybe<Scalars['String']>;
  url_not_contains?: InputMaybe<Scalars['String']>;
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmsCommunityPartnerLinkingCollections = {
  __typename?: 'CmsCommunityPartnerLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
};


export type CmsCommunityPartnerLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsCommunityPartnerOrder {
  BlurbAsc = 'blurb_ASC',
  BlurbDesc = 'blurb_DESC',
  CostAsc = 'cost_ASC',
  CostDesc = 'cost_DESC',
  DisplayUrlAsc = 'displayUrl_ASC',
  DisplayUrlDesc = 'displayUrl_DESC',
  EligibilityAsc = 'eligibility_ASC',
  EligibilityDesc = 'eligibility_DESC',
  ExpiresAsc = 'expires_ASC',
  ExpiresDesc = 'expires_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC'
}

export type CmsCommunityPartnerRegionCollection = {
  __typename?: 'CmsCommunityPartnerRegionCollection';
  items: Array<Maybe<CmsRegion>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/string) */
export type CmsContentTypeString = CmsEntry & {
  __typename?: 'CmsContentTypeString';
  contentfulMetadata: CmsContentfulMetadata;
  json?: Maybe<Scalars['CmsJSON']>;
  key?: Maybe<Scalars['String']>;
  linkedFrom?: Maybe<CmsContentTypeStringLinkingCollections>;
  richValue?: Maybe<CmsContentTypeStringRichValue>;
  subvalues?: Maybe<CmsContentTypeStringSubvalueCollection>;
  sys: CmsSys;
  value?: Maybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/string) */
export type CmsContentTypeStringJsonArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/string) */
export type CmsContentTypeStringKeyArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/string) */
export type CmsContentTypeStringLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/string) */
export type CmsContentTypeStringRichValueArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/string) */
export type CmsContentTypeStringSubvaluesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/string) */
export type CmsContentTypeStringValueArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsContentTypeStringCollection = {
  __typename?: 'CmsContentTypeStringCollection';
  items: Array<Maybe<CmsContentTypeString>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsContentTypeStringFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsContentTypeStringFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsContentTypeStringFilter>>>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  json_exists?: InputMaybe<Scalars['Boolean']>;
  key?: InputMaybe<Scalars['String']>;
  key_contains?: InputMaybe<Scalars['String']>;
  key_exists?: InputMaybe<Scalars['Boolean']>;
  key_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  key_not?: InputMaybe<Scalars['String']>;
  key_not_contains?: InputMaybe<Scalars['String']>;
  key_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  richValue_contains?: InputMaybe<Scalars['String']>;
  richValue_exists?: InputMaybe<Scalars['Boolean']>;
  richValue_not_contains?: InputMaybe<Scalars['String']>;
  subvalueCollection_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
  value?: InputMaybe<Scalars['String']>;
  value_contains?: InputMaybe<Scalars['String']>;
  value_exists?: InputMaybe<Scalars['Boolean']>;
  value_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  value_not?: InputMaybe<Scalars['String']>;
  value_not_contains?: InputMaybe<Scalars['String']>;
  value_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmsContentTypeStringLinkingCollections = {
  __typename?: 'CmsContentTypeStringLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
  strings?: Maybe<CmsContentTypeStringCollection>;
};


export type CmsContentTypeStringLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsContentTypeStringLinkingCollectionsStringsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsContentTypeStringOrder {
  KeyAsc = 'key_ASC',
  KeyDesc = 'key_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}

export type CmsContentTypeStringRichValue = {
  __typename?: 'CmsContentTypeStringRichValue';
  json: Scalars['CmsJSON'];
  links: CmsContentTypeStringRichValueLinks;
};

export type CmsContentTypeStringRichValueAssets = {
  __typename?: 'CmsContentTypeStringRichValueAssets';
  block: Array<Maybe<CmsAsset>>;
  hyperlink: Array<Maybe<CmsAsset>>;
};

export type CmsContentTypeStringRichValueEntries = {
  __typename?: 'CmsContentTypeStringRichValueEntries';
  block: Array<Maybe<CmsEntry>>;
  hyperlink: Array<Maybe<CmsEntry>>;
  inline: Array<Maybe<CmsEntry>>;
};

export type CmsContentTypeStringRichValueLinks = {
  __typename?: 'CmsContentTypeStringRichValueLinks';
  assets: CmsContentTypeStringRichValueAssets;
  entries: CmsContentTypeStringRichValueEntries;
};

export type CmsContentTypeStringSubvalueCollection = {
  __typename?: 'CmsContentTypeStringSubvalueCollection';
  items: Array<Maybe<CmsContentTypeString>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsContentfulMetadata = {
  __typename?: 'CmsContentfulMetadata';
  tags: Array<Maybe<CmsContentfulTag>>;
};

export type CmsContentfulMetadataFilter = {
  tags?: InputMaybe<CmsContentfulMetadataTagsFilter>;
  tags_exists?: InputMaybe<Scalars['Boolean']>;
};

export type CmsContentfulMetadataTagsFilter = {
  id_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

/**
 * Represents a tag entity for finding and organizing content easily.
 *     Find out more here: https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/content-tags
 */
export type CmsContentfulTag = {
  __typename?: 'CmsContentfulTag';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type CmsEntry = {
  contentfulMetadata: CmsContentfulMetadata;
  sys: CmsSys;
};

export type CmsEntryCollection = {
  __typename?: 'CmsEntryCollection';
  items: Array<Maybe<CmsEntry>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsEntryFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsEntryFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsEntryFilter>>>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  sys?: InputMaybe<CmsSysFilter>;
};

export enum CmsEntryOrder {
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEvent = CmsEntry & {
  __typename?: 'CmsEvent';
  awardsAt?: Maybe<Scalars['CmsDateTime']>;
  calendarReleaseDate?: Maybe<Scalars['CmsDateTime']>;
  contentfulMetadata: CmsContentfulMetadata;
  endsAt?: Maybe<Scalars['CmsDateTime']>;
  id?: Maybe<Scalars['String']>;
  kickoffVideo?: Maybe<CmsAsset>;
  kickoffVideoCaptions?: Maybe<CmsAsset>;
  linkedFrom?: Maybe<CmsEventLinkingCollections>;
  notice?: Maybe<CmsEventNotice>;
  participantRoleId?: Maybe<Scalars['String']>;
  posters?: Maybe<CmsAssetCollection>;
  program?: Maybe<CmsProgram>;
  registrationsCloseAt?: Maybe<Scalars['CmsDateTime']>;
  registrationsOpenAt?: Maybe<Scalars['CmsDateTime']>;
  startsAt?: Maybe<Scalars['CmsDateTime']>;
  statEventCount?: Maybe<Scalars['Int']>;
  statLowInterestContinuedCount?: Maybe<Scalars['Int']>;
  statLowInterestCount?: Maybe<Scalars['Int']>;
  statStudentCount?: Maybe<Scalars['Int']>;
  subEventIds?: Maybe<Scalars['CmsJSON']>;
  sys: CmsSys;
  theme?: Maybe<Scalars['String']>;
  themeBackgrounds?: Maybe<CmsAssetCollection>;
  themeLogoBackgrounds?: Maybe<CmsAssetCollection>;
  title?: Maybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventAwardsAtArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventCalendarReleaseDateArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventEndsAtArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventIdArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventKickoffVideoArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventKickoffVideoCaptionsArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventNoticeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventParticipantRoleIdArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventPostersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventProgramArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventRegistrationsCloseAtArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventRegistrationsOpenAtArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventStartsAtArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventStatEventCountArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventStatLowInterestContinuedCountArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventStatLowInterestCountArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventStatStudentCountArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventSubEventIdsArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventThemeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventThemeBackgroundsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventThemeLogoBackgroundsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/event) */
export type CmsEventTitleArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsEventCollection = {
  __typename?: 'CmsEventCollection';
  items: Array<Maybe<CmsEvent>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsEventFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsEventFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsEventFilter>>>;
  awardsAt?: InputMaybe<Scalars['CmsDateTime']>;
  awardsAt_exists?: InputMaybe<Scalars['Boolean']>;
  awardsAt_gt?: InputMaybe<Scalars['CmsDateTime']>;
  awardsAt_gte?: InputMaybe<Scalars['CmsDateTime']>;
  awardsAt_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  awardsAt_lt?: InputMaybe<Scalars['CmsDateTime']>;
  awardsAt_lte?: InputMaybe<Scalars['CmsDateTime']>;
  awardsAt_not?: InputMaybe<Scalars['CmsDateTime']>;
  awardsAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  calendarReleaseDate?: InputMaybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_exists?: InputMaybe<Scalars['Boolean']>;
  calendarReleaseDate_gt?: InputMaybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_gte?: InputMaybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  calendarReleaseDate_lt?: InputMaybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_lte?: InputMaybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_not?: InputMaybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_not_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  endsAt?: InputMaybe<Scalars['CmsDateTime']>;
  endsAt_exists?: InputMaybe<Scalars['Boolean']>;
  endsAt_gt?: InputMaybe<Scalars['CmsDateTime']>;
  endsAt_gte?: InputMaybe<Scalars['CmsDateTime']>;
  endsAt_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  endsAt_lt?: InputMaybe<Scalars['CmsDateTime']>;
  endsAt_lte?: InputMaybe<Scalars['CmsDateTime']>;
  endsAt_not?: InputMaybe<Scalars['CmsDateTime']>;
  endsAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  id?: InputMaybe<Scalars['String']>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_exists?: InputMaybe<Scalars['Boolean']>;
  id_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id_not?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  kickoffVideoCaptions_exists?: InputMaybe<Scalars['Boolean']>;
  kickoffVideo_exists?: InputMaybe<Scalars['Boolean']>;
  notice_contains?: InputMaybe<Scalars['String']>;
  notice_exists?: InputMaybe<Scalars['Boolean']>;
  notice_not_contains?: InputMaybe<Scalars['String']>;
  participantRoleId?: InputMaybe<Scalars['String']>;
  participantRoleId_contains?: InputMaybe<Scalars['String']>;
  participantRoleId_exists?: InputMaybe<Scalars['Boolean']>;
  participantRoleId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  participantRoleId_not?: InputMaybe<Scalars['String']>;
  participantRoleId_not_contains?: InputMaybe<Scalars['String']>;
  participantRoleId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  postersCollection_exists?: InputMaybe<Scalars['Boolean']>;
  program?: InputMaybe<CmscfProgramNestedFilter>;
  program_exists?: InputMaybe<Scalars['Boolean']>;
  registrationsCloseAt?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_exists?: InputMaybe<Scalars['Boolean']>;
  registrationsCloseAt_gt?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_gte?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  registrationsCloseAt_lt?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_lte?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_not?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  registrationsOpenAt?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_exists?: InputMaybe<Scalars['Boolean']>;
  registrationsOpenAt_gt?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_gte?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  registrationsOpenAt_lt?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_lte?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_not?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  startsAt?: InputMaybe<Scalars['CmsDateTime']>;
  startsAt_exists?: InputMaybe<Scalars['Boolean']>;
  startsAt_gt?: InputMaybe<Scalars['CmsDateTime']>;
  startsAt_gte?: InputMaybe<Scalars['CmsDateTime']>;
  startsAt_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  startsAt_lt?: InputMaybe<Scalars['CmsDateTime']>;
  startsAt_lte?: InputMaybe<Scalars['CmsDateTime']>;
  startsAt_not?: InputMaybe<Scalars['CmsDateTime']>;
  startsAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  statEventCount?: InputMaybe<Scalars['Int']>;
  statEventCount_exists?: InputMaybe<Scalars['Boolean']>;
  statEventCount_gt?: InputMaybe<Scalars['Int']>;
  statEventCount_gte?: InputMaybe<Scalars['Int']>;
  statEventCount_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  statEventCount_lt?: InputMaybe<Scalars['Int']>;
  statEventCount_lte?: InputMaybe<Scalars['Int']>;
  statEventCount_not?: InputMaybe<Scalars['Int']>;
  statEventCount_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  statLowInterestContinuedCount?: InputMaybe<Scalars['Int']>;
  statLowInterestContinuedCount_exists?: InputMaybe<Scalars['Boolean']>;
  statLowInterestContinuedCount_gt?: InputMaybe<Scalars['Int']>;
  statLowInterestContinuedCount_gte?: InputMaybe<Scalars['Int']>;
  statLowInterestContinuedCount_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  statLowInterestContinuedCount_lt?: InputMaybe<Scalars['Int']>;
  statLowInterestContinuedCount_lte?: InputMaybe<Scalars['Int']>;
  statLowInterestContinuedCount_not?: InputMaybe<Scalars['Int']>;
  statLowInterestContinuedCount_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  statLowInterestCount?: InputMaybe<Scalars['Int']>;
  statLowInterestCount_exists?: InputMaybe<Scalars['Boolean']>;
  statLowInterestCount_gt?: InputMaybe<Scalars['Int']>;
  statLowInterestCount_gte?: InputMaybe<Scalars['Int']>;
  statLowInterestCount_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  statLowInterestCount_lt?: InputMaybe<Scalars['Int']>;
  statLowInterestCount_lte?: InputMaybe<Scalars['Int']>;
  statLowInterestCount_not?: InputMaybe<Scalars['Int']>;
  statLowInterestCount_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  statStudentCount?: InputMaybe<Scalars['Int']>;
  statStudentCount_exists?: InputMaybe<Scalars['Boolean']>;
  statStudentCount_gt?: InputMaybe<Scalars['Int']>;
  statStudentCount_gte?: InputMaybe<Scalars['Int']>;
  statStudentCount_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  statStudentCount_lt?: InputMaybe<Scalars['Int']>;
  statStudentCount_lte?: InputMaybe<Scalars['Int']>;
  statStudentCount_not?: InputMaybe<Scalars['Int']>;
  statStudentCount_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  subEventIds_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
  theme?: InputMaybe<Scalars['String']>;
  themeBackgroundsCollection_exists?: InputMaybe<Scalars['Boolean']>;
  themeLogoBackgroundsCollection_exists?: InputMaybe<Scalars['Boolean']>;
  theme_contains?: InputMaybe<Scalars['String']>;
  theme_exists?: InputMaybe<Scalars['Boolean']>;
  theme_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  theme_not?: InputMaybe<Scalars['String']>;
  theme_not_contains?: InputMaybe<Scalars['String']>;
  theme_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  title?: InputMaybe<Scalars['String']>;
  title_contains?: InputMaybe<Scalars['String']>;
  title_exists?: InputMaybe<Scalars['Boolean']>;
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  title_not?: InputMaybe<Scalars['String']>;
  title_not_contains?: InputMaybe<Scalars['String']>;
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmsEventLinkingCollections = {
  __typename?: 'CmsEventLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
  pressPhotos?: Maybe<CmsPressPhotoCollection>;
};


export type CmsEventLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsEventLinkingCollectionsPressPhotosArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export type CmsEventNotice = {
  __typename?: 'CmsEventNotice';
  json: Scalars['CmsJSON'];
  links: CmsEventNoticeLinks;
};

export type CmsEventNoticeAssets = {
  __typename?: 'CmsEventNoticeAssets';
  block: Array<Maybe<CmsAsset>>;
  hyperlink: Array<Maybe<CmsAsset>>;
};

export type CmsEventNoticeEntries = {
  __typename?: 'CmsEventNoticeEntries';
  block: Array<Maybe<CmsEntry>>;
  hyperlink: Array<Maybe<CmsEntry>>;
  inline: Array<Maybe<CmsEntry>>;
};

export type CmsEventNoticeLinks = {
  __typename?: 'CmsEventNoticeLinks';
  assets: CmsEventNoticeAssets;
  entries: CmsEventNoticeEntries;
};

export enum CmsEventOrder {
  AwardsAtAsc = 'awardsAt_ASC',
  AwardsAtDesc = 'awardsAt_DESC',
  CalendarReleaseDateAsc = 'calendarReleaseDate_ASC',
  CalendarReleaseDateDesc = 'calendarReleaseDate_DESC',
  EndsAtAsc = 'endsAt_ASC',
  EndsAtDesc = 'endsAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ParticipantRoleIdAsc = 'participantRoleId_ASC',
  ParticipantRoleIdDesc = 'participantRoleId_DESC',
  RegistrationsCloseAtAsc = 'registrationsCloseAt_ASC',
  RegistrationsCloseAtDesc = 'registrationsCloseAt_DESC',
  RegistrationsOpenAtAsc = 'registrationsOpenAt_ASC',
  RegistrationsOpenAtDesc = 'registrationsOpenAt_DESC',
  StartsAtAsc = 'startsAt_ASC',
  StartsAtDesc = 'startsAt_DESC',
  StatEventCountAsc = 'statEventCount_ASC',
  StatEventCountDesc = 'statEventCount_DESC',
  StatLowInterestContinuedCountAsc = 'statLowInterestContinuedCount_ASC',
  StatLowInterestContinuedCountDesc = 'statLowInterestContinuedCount_DESC',
  StatLowInterestCountAsc = 'statLowInterestCount_ASC',
  StatLowInterestCountDesc = 'statLowInterestCount_DESC',
  StatStudentCountAsc = 'statStudentCount_ASC',
  StatStudentCountDesc = 'statStudentCount_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  ThemeAsc = 'theme_ASC',
  ThemeDesc = 'theme_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/eventRestriction) */
export type CmsEventRestriction = CmsEntry & {
  __typename?: 'CmsEventRestriction';
  applicablePrograms?: Maybe<CmsEventRestrictionApplicableProgramsCollection>;
  contentfulMetadata: CmsContentfulMetadata;
  details?: Maybe<Scalars['String']>;
  icon?: Maybe<CmsAsset>;
  id?: Maybe<Scalars['String']>;
  linkedFrom?: Maybe<CmsEventRestrictionLinkingCollections>;
  name?: Maybe<Scalars['String']>;
  sys: CmsSys;
  title?: Maybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/eventRestriction) */
export type CmsEventRestrictionApplicableProgramsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/eventRestriction) */
export type CmsEventRestrictionDetailsArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/eventRestriction) */
export type CmsEventRestrictionIconArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/eventRestriction) */
export type CmsEventRestrictionIdArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/eventRestriction) */
export type CmsEventRestrictionLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/eventRestriction) */
export type CmsEventRestrictionNameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/eventRestriction) */
export type CmsEventRestrictionTitleArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsEventRestrictionApplicableProgramsCollection = {
  __typename?: 'CmsEventRestrictionApplicableProgramsCollection';
  items: Array<Maybe<CmsProgram>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsEventRestrictionCollection = {
  __typename?: 'CmsEventRestrictionCollection';
  items: Array<Maybe<CmsEventRestriction>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsEventRestrictionFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsEventRestrictionFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsEventRestrictionFilter>>>;
  applicableProgramsCollection_exists?: InputMaybe<Scalars['Boolean']>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  details?: InputMaybe<Scalars['String']>;
  details_contains?: InputMaybe<Scalars['String']>;
  details_exists?: InputMaybe<Scalars['Boolean']>;
  details_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  details_not?: InputMaybe<Scalars['String']>;
  details_not_contains?: InputMaybe<Scalars['String']>;
  details_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  icon_exists?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['String']>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_exists?: InputMaybe<Scalars['Boolean']>;
  id_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id_not?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name?: InputMaybe<Scalars['String']>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_exists?: InputMaybe<Scalars['Boolean']>;
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name_not?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  sys?: InputMaybe<CmsSysFilter>;
  title?: InputMaybe<Scalars['String']>;
  title_contains?: InputMaybe<Scalars['String']>;
  title_exists?: InputMaybe<Scalars['Boolean']>;
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  title_not?: InputMaybe<Scalars['String']>;
  title_not_contains?: InputMaybe<Scalars['String']>;
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmsEventRestrictionLinkingCollections = {
  __typename?: 'CmsEventRestrictionLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
  localizationConfigs?: Maybe<CmsLocalizationConfigCollection>;
};


export type CmsEventRestrictionLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsEventRestrictionLinkingCollectionsLocalizationConfigsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsEventRestrictionOrder {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/faq) */
export type CmsFaq = CmsEntry & {
  __typename?: 'CmsFaq';
  answer?: Maybe<CmsFaqAnswer>;
  audience?: Maybe<Array<Maybe<Scalars['String']>>>;
  contentfulMetadata: CmsContentfulMetadata;
  featured?: Maybe<Scalars['Boolean']>;
  linkedFrom?: Maybe<CmsFaqLinkingCollections>;
  program?: Maybe<CmsProgram>;
  relatedAnswers?: Maybe<CmsFaqRelatedAnswersCollection>;
  sys: CmsSys;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  title?: Maybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/faq) */
export type CmsFaqAnswerArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/faq) */
export type CmsFaqAudienceArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/faq) */
export type CmsFaqFeaturedArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/faq) */
export type CmsFaqLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/faq) */
export type CmsFaqProgramArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/faq) */
export type CmsFaqRelatedAnswersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/faq) */
export type CmsFaqTagsArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/faq) */
export type CmsFaqTitleArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsFaqAnswer = {
  __typename?: 'CmsFaqAnswer';
  json: Scalars['CmsJSON'];
  links: CmsFaqAnswerLinks;
};

export type CmsFaqAnswerAssets = {
  __typename?: 'CmsFaqAnswerAssets';
  block: Array<Maybe<CmsAsset>>;
  hyperlink: Array<Maybe<CmsAsset>>;
};

export type CmsFaqAnswerEntries = {
  __typename?: 'CmsFaqAnswerEntries';
  block: Array<Maybe<CmsEntry>>;
  hyperlink: Array<Maybe<CmsEntry>>;
  inline: Array<Maybe<CmsEntry>>;
};

export type CmsFaqAnswerLinks = {
  __typename?: 'CmsFaqAnswerLinks';
  assets: CmsFaqAnswerAssets;
  entries: CmsFaqAnswerEntries;
};

export type CmsFaqCollection = {
  __typename?: 'CmsFaqCollection';
  items: Array<Maybe<CmsFaq>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsFaqFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsFaqFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsFaqFilter>>>;
  answer_contains?: InputMaybe<Scalars['String']>;
  answer_exists?: InputMaybe<Scalars['Boolean']>;
  answer_not_contains?: InputMaybe<Scalars['String']>;
  audience_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  audience_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  audience_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  audience_exists?: InputMaybe<Scalars['Boolean']>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  featured?: InputMaybe<Scalars['Boolean']>;
  featured_exists?: InputMaybe<Scalars['Boolean']>;
  featured_not?: InputMaybe<Scalars['Boolean']>;
  program?: InputMaybe<CmscfProgramNestedFilter>;
  program_exists?: InputMaybe<Scalars['Boolean']>;
  relatedAnswersCollection_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
  tags_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  tags_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  tags_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  tags_exists?: InputMaybe<Scalars['Boolean']>;
  title?: InputMaybe<Scalars['String']>;
  title_contains?: InputMaybe<Scalars['String']>;
  title_exists?: InputMaybe<Scalars['Boolean']>;
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  title_not?: InputMaybe<Scalars['String']>;
  title_not_contains?: InputMaybe<Scalars['String']>;
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmsFaqLinkingCollections = {
  __typename?: 'CmsFaqLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
  faqs?: Maybe<CmsFaqCollection>;
};


export type CmsFaqLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsFaqLinkingCollectionsFaqsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsFaqOrder {
  FeaturedAsc = 'featured_ASC',
  FeaturedDesc = 'featured_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type CmsFaqRelatedAnswersCollection = {
  __typename?: 'CmsFaqRelatedAnswersCollection';
  items: Array<Maybe<CmsFaq>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/form) */
export type CmsForm = CmsEntry & {
  __typename?: 'CmsForm';
  cognitoForm?: Maybe<Scalars['Int']>;
  contentfulMetadata: CmsContentfulMetadata;
  details?: Maybe<CmsFormDetails>;
  image?: Maybe<CmsAsset>;
  linkedFrom?: Maybe<CmsFormLinkingCollections>;
  prefill?: Maybe<Scalars['CmsJSON']>;
  sidebar?: Maybe<CmsFormSidebar>;
  slug?: Maybe<Scalars['String']>;
  sys: CmsSys;
  title?: Maybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/form) */
export type CmsFormCognitoFormArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/form) */
export type CmsFormDetailsArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/form) */
export type CmsFormImageArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/form) */
export type CmsFormLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/form) */
export type CmsFormPrefillArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/form) */
export type CmsFormSidebarArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/form) */
export type CmsFormSlugArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/form) */
export type CmsFormTitleArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsFormCollection = {
  __typename?: 'CmsFormCollection';
  items: Array<Maybe<CmsForm>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsFormDetails = {
  __typename?: 'CmsFormDetails';
  json: Scalars['CmsJSON'];
  links: CmsFormDetailsLinks;
};

export type CmsFormDetailsAssets = {
  __typename?: 'CmsFormDetailsAssets';
  block: Array<Maybe<CmsAsset>>;
  hyperlink: Array<Maybe<CmsAsset>>;
};

export type CmsFormDetailsEntries = {
  __typename?: 'CmsFormDetailsEntries';
  block: Array<Maybe<CmsEntry>>;
  hyperlink: Array<Maybe<CmsEntry>>;
  inline: Array<Maybe<CmsEntry>>;
};

export type CmsFormDetailsLinks = {
  __typename?: 'CmsFormDetailsLinks';
  assets: CmsFormDetailsAssets;
  entries: CmsFormDetailsEntries;
};

export type CmsFormFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsFormFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsFormFilter>>>;
  cognitoForm?: InputMaybe<Scalars['Int']>;
  cognitoForm_exists?: InputMaybe<Scalars['Boolean']>;
  cognitoForm_gt?: InputMaybe<Scalars['Int']>;
  cognitoForm_gte?: InputMaybe<Scalars['Int']>;
  cognitoForm_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  cognitoForm_lt?: InputMaybe<Scalars['Int']>;
  cognitoForm_lte?: InputMaybe<Scalars['Int']>;
  cognitoForm_not?: InputMaybe<Scalars['Int']>;
  cognitoForm_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  details_contains?: InputMaybe<Scalars['String']>;
  details_exists?: InputMaybe<Scalars['Boolean']>;
  details_not_contains?: InputMaybe<Scalars['String']>;
  image_exists?: InputMaybe<Scalars['Boolean']>;
  prefill_exists?: InputMaybe<Scalars['Boolean']>;
  sidebar_contains?: InputMaybe<Scalars['String']>;
  sidebar_exists?: InputMaybe<Scalars['Boolean']>;
  sidebar_not_contains?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  slug_contains?: InputMaybe<Scalars['String']>;
  slug_exists?: InputMaybe<Scalars['Boolean']>;
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  slug_not?: InputMaybe<Scalars['String']>;
  slug_not_contains?: InputMaybe<Scalars['String']>;
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  sys?: InputMaybe<CmsSysFilter>;
  title?: InputMaybe<Scalars['String']>;
  title_contains?: InputMaybe<Scalars['String']>;
  title_exists?: InputMaybe<Scalars['Boolean']>;
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  title_not?: InputMaybe<Scalars['String']>;
  title_not_contains?: InputMaybe<Scalars['String']>;
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmsFormLinkingCollections = {
  __typename?: 'CmsFormLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
};


export type CmsFormLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsFormOrder {
  CognitoFormAsc = 'cognitoForm_ASC',
  CognitoFormDesc = 'cognitoForm_DESC',
  SlugAsc = 'slug_ASC',
  SlugDesc = 'slug_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type CmsFormSidebar = {
  __typename?: 'CmsFormSidebar';
  json: Scalars['CmsJSON'];
  links: CmsFormSidebarLinks;
};

export type CmsFormSidebarAssets = {
  __typename?: 'CmsFormSidebarAssets';
  block: Array<Maybe<CmsAsset>>;
  hyperlink: Array<Maybe<CmsAsset>>;
};

export type CmsFormSidebarEntries = {
  __typename?: 'CmsFormSidebarEntries';
  block: Array<Maybe<CmsEntry>>;
  hyperlink: Array<Maybe<CmsEntry>>;
  inline: Array<Maybe<CmsEntry>>;
};

export type CmsFormSidebarLinks = {
  __typename?: 'CmsFormSidebarLinks';
  assets: CmsFormSidebarAssets;
  entries: CmsFormSidebarEntries;
};

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/globalSponsor) */
export type CmsGlobalSponsor = CmsEntry & {
  __typename?: 'CmsGlobalSponsor';
  audio?: Maybe<CmsAsset>;
  contentfulMetadata: CmsContentfulMetadata;
  darkLogo?: Maybe<CmsAsset>;
  description?: Maybe<Scalars['String']>;
  instagramUsername?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  linkedFrom?: Maybe<CmsGlobalSponsorLinkingCollections>;
  logo?: Maybe<CmsAsset>;
  name?: Maybe<Scalars['String']>;
  perks?: Maybe<Scalars['String']>;
  shortDescription?: Maybe<Scalars['String']>;
  sys: CmsSys;
  twitterUsername?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/globalSponsor) */
export type CmsGlobalSponsorAudioArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/globalSponsor) */
export type CmsGlobalSponsorDarkLogoArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/globalSponsor) */
export type CmsGlobalSponsorDescriptionArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/globalSponsor) */
export type CmsGlobalSponsorInstagramUsernameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/globalSponsor) */
export type CmsGlobalSponsorLinkArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/globalSponsor) */
export type CmsGlobalSponsorLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/globalSponsor) */
export type CmsGlobalSponsorLogoArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/globalSponsor) */
export type CmsGlobalSponsorNameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/globalSponsor) */
export type CmsGlobalSponsorPerksArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/globalSponsor) */
export type CmsGlobalSponsorShortDescriptionArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/globalSponsor) */
export type CmsGlobalSponsorTwitterUsernameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/globalSponsor) */
export type CmsGlobalSponsorTypeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsGlobalSponsorCollection = {
  __typename?: 'CmsGlobalSponsorCollection';
  items: Array<Maybe<CmsGlobalSponsor>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsGlobalSponsorFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsGlobalSponsorFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsGlobalSponsorFilter>>>;
  audio_exists?: InputMaybe<Scalars['Boolean']>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  darkLogo_exists?: InputMaybe<Scalars['Boolean']>;
  description?: InputMaybe<Scalars['String']>;
  description_contains?: InputMaybe<Scalars['String']>;
  description_exists?: InputMaybe<Scalars['Boolean']>;
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  description_not?: InputMaybe<Scalars['String']>;
  description_not_contains?: InputMaybe<Scalars['String']>;
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  instagramUsername?: InputMaybe<Scalars['String']>;
  instagramUsername_contains?: InputMaybe<Scalars['String']>;
  instagramUsername_exists?: InputMaybe<Scalars['Boolean']>;
  instagramUsername_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  instagramUsername_not?: InputMaybe<Scalars['String']>;
  instagramUsername_not_contains?: InputMaybe<Scalars['String']>;
  instagramUsername_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  link?: InputMaybe<Scalars['String']>;
  link_contains?: InputMaybe<Scalars['String']>;
  link_exists?: InputMaybe<Scalars['Boolean']>;
  link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  link_not?: InputMaybe<Scalars['String']>;
  link_not_contains?: InputMaybe<Scalars['String']>;
  link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  logo_exists?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_exists?: InputMaybe<Scalars['Boolean']>;
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name_not?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  perks?: InputMaybe<Scalars['String']>;
  perks_contains?: InputMaybe<Scalars['String']>;
  perks_exists?: InputMaybe<Scalars['Boolean']>;
  perks_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  perks_not?: InputMaybe<Scalars['String']>;
  perks_not_contains?: InputMaybe<Scalars['String']>;
  perks_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  shortDescription?: InputMaybe<Scalars['String']>;
  shortDescription_contains?: InputMaybe<Scalars['String']>;
  shortDescription_exists?: InputMaybe<Scalars['Boolean']>;
  shortDescription_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  shortDescription_not?: InputMaybe<Scalars['String']>;
  shortDescription_not_contains?: InputMaybe<Scalars['String']>;
  shortDescription_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  sys?: InputMaybe<CmsSysFilter>;
  twitterUsername?: InputMaybe<Scalars['String']>;
  twitterUsername_contains?: InputMaybe<Scalars['String']>;
  twitterUsername_exists?: InputMaybe<Scalars['Boolean']>;
  twitterUsername_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  twitterUsername_not?: InputMaybe<Scalars['String']>;
  twitterUsername_not_contains?: InputMaybe<Scalars['String']>;
  twitterUsername_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  type?: InputMaybe<Scalars['String']>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_exists?: InputMaybe<Scalars['Boolean']>;
  type_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmsGlobalSponsorLinkingCollections = {
  __typename?: 'CmsGlobalSponsorLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
  hiringCompanies?: Maybe<CmsHiringCompanyCollection>;
  programs?: Maybe<CmsProgramCollection>;
};


export type CmsGlobalSponsorLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsGlobalSponsorLinkingCollectionsHiringCompaniesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsGlobalSponsorLinkingCollectionsProgramsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsGlobalSponsorOrder {
  InstagramUsernameAsc = 'instagramUsername_ASC',
  InstagramUsernameDesc = 'instagramUsername_DESC',
  LinkAsc = 'link_ASC',
  LinkDesc = 'link_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ShortDescriptionAsc = 'shortDescription_ASC',
  ShortDescriptionDesc = 'shortDescription_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  TwitterUsernameAsc = 'twitterUsername_ASC',
  TwitterUsernameDesc = 'twitterUsername_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC'
}

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringCompany) */
export type CmsHiringCompany = CmsEntry & {
  __typename?: 'CmsHiringCompany';
  alumniReferralAccounts?: Maybe<Array<Maybe<AccountUser>>>;
  alumniReferrals?: Maybe<Array<Maybe<Scalars['String']>>>;
  contentfulMetadata: CmsContentfulMetadata;
  description?: Maybe<CmsHiringCompanyDescription>;
  featured?: Maybe<Scalars['Boolean']>;
  linkedFrom?: Maybe<CmsHiringCompanyLinkingCollections>;
  logo?: Maybe<CmsAsset>;
  name?: Maybe<Scalars['String']>;
  relatedSponsor?: Maybe<CmsGlobalSponsor>;
  sys: CmsSys;
  url?: Maybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringCompany) */
export type CmsHiringCompanyAlumniReferralsArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringCompany) */
export type CmsHiringCompanyDescriptionArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringCompany) */
export type CmsHiringCompanyFeaturedArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringCompany) */
export type CmsHiringCompanyLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringCompany) */
export type CmsHiringCompanyLogoArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringCompany) */
export type CmsHiringCompanyNameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringCompany) */
export type CmsHiringCompanyRelatedSponsorArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringCompany) */
export type CmsHiringCompanyUrlArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsHiringCompanyCollection = {
  __typename?: 'CmsHiringCompanyCollection';
  items: Array<Maybe<CmsHiringCompany>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsHiringCompanyDescription = {
  __typename?: 'CmsHiringCompanyDescription';
  json: Scalars['CmsJSON'];
  links: CmsHiringCompanyDescriptionLinks;
};

export type CmsHiringCompanyDescriptionAssets = {
  __typename?: 'CmsHiringCompanyDescriptionAssets';
  block: Array<Maybe<CmsAsset>>;
  hyperlink: Array<Maybe<CmsAsset>>;
};

export type CmsHiringCompanyDescriptionEntries = {
  __typename?: 'CmsHiringCompanyDescriptionEntries';
  block: Array<Maybe<CmsEntry>>;
  hyperlink: Array<Maybe<CmsEntry>>;
  inline: Array<Maybe<CmsEntry>>;
};

export type CmsHiringCompanyDescriptionLinks = {
  __typename?: 'CmsHiringCompanyDescriptionLinks';
  assets: CmsHiringCompanyDescriptionAssets;
  entries: CmsHiringCompanyDescriptionEntries;
};

export type CmsHiringCompanyFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsHiringCompanyFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsHiringCompanyFilter>>>;
  alumniReferrals_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  alumniReferrals_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  alumniReferrals_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  alumniReferrals_exists?: InputMaybe<Scalars['Boolean']>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  description_contains?: InputMaybe<Scalars['String']>;
  description_exists?: InputMaybe<Scalars['Boolean']>;
  description_not_contains?: InputMaybe<Scalars['String']>;
  featured?: InputMaybe<Scalars['Boolean']>;
  featured_exists?: InputMaybe<Scalars['Boolean']>;
  featured_not?: InputMaybe<Scalars['Boolean']>;
  logo_exists?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_exists?: InputMaybe<Scalars['Boolean']>;
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name_not?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  relatedSponsor?: InputMaybe<CmscfGlobalSponsorNestedFilter>;
  relatedSponsor_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
  url?: InputMaybe<Scalars['String']>;
  url_contains?: InputMaybe<Scalars['String']>;
  url_exists?: InputMaybe<Scalars['Boolean']>;
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  url_not?: InputMaybe<Scalars['String']>;
  url_not_contains?: InputMaybe<Scalars['String']>;
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmsHiringCompanyLinkingCollections = {
  __typename?: 'CmsHiringCompanyLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
  hiringPosts?: Maybe<CmsHiringPostCollection>;
};


export type CmsHiringCompanyLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsHiringCompanyLinkingCollectionsHiringPostsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsHiringCompanyOrder {
  FeaturedAsc = 'featured_ASC',
  FeaturedDesc = 'featured_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC'
}

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringPost) */
export type CmsHiringPost = CmsEntry & {
  __typename?: 'CmsHiringPost';
  company?: Maybe<CmsHiringCompany>;
  contentfulMetadata: CmsContentfulMetadata;
  description?: Maybe<CmsHiringPostDescription>;
  linkedFrom?: Maybe<CmsHiringPostLinkingCollections>;
  paid?: Maybe<Scalars['Boolean']>;
  regions?: Maybe<CmsHiringPostRegionsCollection>;
  sys: CmsSys;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringPost) */
export type CmsHiringPostCompanyArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringPost) */
export type CmsHiringPostDescriptionArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringPost) */
export type CmsHiringPostLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringPost) */
export type CmsHiringPostPaidArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringPost) */
export type CmsHiringPostRegionsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringPost) */
export type CmsHiringPostTitleArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringPost) */
export type CmsHiringPostTypeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/hiringPost) */
export type CmsHiringPostUrlArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsHiringPostCollection = {
  __typename?: 'CmsHiringPostCollection';
  items: Array<Maybe<CmsHiringPost>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsHiringPostDescription = {
  __typename?: 'CmsHiringPostDescription';
  json: Scalars['CmsJSON'];
  links: CmsHiringPostDescriptionLinks;
};

export type CmsHiringPostDescriptionAssets = {
  __typename?: 'CmsHiringPostDescriptionAssets';
  block: Array<Maybe<CmsAsset>>;
  hyperlink: Array<Maybe<CmsAsset>>;
};

export type CmsHiringPostDescriptionEntries = {
  __typename?: 'CmsHiringPostDescriptionEntries';
  block: Array<Maybe<CmsEntry>>;
  hyperlink: Array<Maybe<CmsEntry>>;
  inline: Array<Maybe<CmsEntry>>;
};

export type CmsHiringPostDescriptionLinks = {
  __typename?: 'CmsHiringPostDescriptionLinks';
  assets: CmsHiringPostDescriptionAssets;
  entries: CmsHiringPostDescriptionEntries;
};

export type CmsHiringPostFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsHiringPostFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsHiringPostFilter>>>;
  company?: InputMaybe<CmscfHiringCompanyNestedFilter>;
  company_exists?: InputMaybe<Scalars['Boolean']>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  description_contains?: InputMaybe<Scalars['String']>;
  description_exists?: InputMaybe<Scalars['Boolean']>;
  description_not_contains?: InputMaybe<Scalars['String']>;
  paid?: InputMaybe<Scalars['Boolean']>;
  paid_exists?: InputMaybe<Scalars['Boolean']>;
  paid_not?: InputMaybe<Scalars['Boolean']>;
  regionsCollection_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
  title?: InputMaybe<Scalars['String']>;
  title_contains?: InputMaybe<Scalars['String']>;
  title_exists?: InputMaybe<Scalars['Boolean']>;
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  title_not?: InputMaybe<Scalars['String']>;
  title_not_contains?: InputMaybe<Scalars['String']>;
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  type?: InputMaybe<Scalars['String']>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_exists?: InputMaybe<Scalars['Boolean']>;
  type_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  url?: InputMaybe<Scalars['String']>;
  url_contains?: InputMaybe<Scalars['String']>;
  url_exists?: InputMaybe<Scalars['Boolean']>;
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  url_not?: InputMaybe<Scalars['String']>;
  url_not_contains?: InputMaybe<Scalars['String']>;
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmsHiringPostLinkingCollections = {
  __typename?: 'CmsHiringPostLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
};


export type CmsHiringPostLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsHiringPostOrder {
  PaidAsc = 'paid_ASC',
  PaidDesc = 'paid_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC'
}

export type CmsHiringPostRegionsCollection = {
  __typename?: 'CmsHiringPostRegionsCollection';
  items: Array<Maybe<CmsRegion>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export enum CmsImageFormat {
  Avif = 'AVIF',
  /** JPG image format. */
  Jpg = 'JPG',
  /**
   * Progressive JPG format stores multiple passes of an image in progressively higher detail.
   *         When a progressive image is loading, the viewer will first see a lower quality pixelated version which
   *         will gradually improve in detail, until the image is fully downloaded. This is to display an image as
   *         early as possible to make the layout look as designed.
   */
  JpgProgressive = 'JPG_PROGRESSIVE',
  /** PNG image format */
  Png = 'PNG',
  /**
   * 8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
   *         The 8-bit PNG format is mostly used for simple images, such as icons or logos.
   */
  Png8 = 'PNG8',
  /** WebP image format. */
  Webp = 'WEBP'
}

export enum CmsImageResizeFocus {
  /** Focus the resizing on the bottom. */
  Bottom = 'BOTTOM',
  /** Focus the resizing on the bottom left. */
  BottomLeft = 'BOTTOM_LEFT',
  /** Focus the resizing on the bottom right. */
  BottomRight = 'BOTTOM_RIGHT',
  /** Focus the resizing on the center. */
  Center = 'CENTER',
  /** Focus the resizing on the largest face. */
  Face = 'FACE',
  /** Focus the resizing on the area containing all the faces. */
  Faces = 'FACES',
  /** Focus the resizing on the left. */
  Left = 'LEFT',
  /** Focus the resizing on the right. */
  Right = 'RIGHT',
  /** Focus the resizing on the top. */
  Top = 'TOP',
  /** Focus the resizing on the top left. */
  TopLeft = 'TOP_LEFT',
  /** Focus the resizing on the top right. */
  TopRight = 'TOP_RIGHT'
}

export enum CmsImageResizeStrategy {
  /** Crops a part of the original image to fit into the specified dimensions. */
  Crop = 'CROP',
  /** Resizes the image to the specified dimensions, cropping the image if needed. */
  Fill = 'FILL',
  /** Resizes the image to fit into the specified dimensions. */
  Fit = 'FIT',
  /**
   * Resizes the image to the specified dimensions, padding the image if needed.
   *         Uses desired background color as padding color.
   */
  Pad = 'PAD',
  /** Resizes the image to the specified dimensions, changing the original aspect ratio if needed. */
  Scale = 'SCALE',
  /** Creates a thumbnail from the image. */
  Thumb = 'THUMB'
}

export type CmsImageTransformOptions = {
  /**
   * Desired background color, used with corner radius or `PAD` resize strategy.
   *         Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
   */
  backgroundColor?: InputMaybe<Scalars['CmsHexColor']>;
  /**
   * Desired corner radius in pixels.
   *         Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
   *         Defaults to `0`. Uses desired background color as padding color,
   *         unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
   */
  cornerRadius?: InputMaybe<Scalars['Int']>;
  /** Desired image format. Defaults to the original image format. */
  format?: InputMaybe<CmsImageFormat>;
  /** Desired height in pixels. Defaults to the original image height. */
  height?: InputMaybe<Scalars['CmsDimension']>;
  /**
   * Desired quality of the image in percents.
   *         Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
   */
  quality?: InputMaybe<Scalars['CmsQuality']>;
  /** Desired resize focus area. Defaults to `CENTER`. */
  resizeFocus?: InputMaybe<CmsImageResizeFocus>;
  /** Desired resize strategy. Defaults to `FIT`. */
  resizeStrategy?: InputMaybe<CmsImageResizeStrategy>;
  /** Desired width in pixels. Defaults to the original image width. */
  width?: InputMaybe<Scalars['CmsDimension']>;
};

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/legalDocument) */
export type CmsLegalDocument = CmsEntry & {
  __typename?: 'CmsLegalDocument';
  contentfulMetadata: CmsContentfulMetadata;
  date?: Maybe<Scalars['CmsDateTime']>;
  file?: Maybe<CmsAsset>;
  id?: Maybe<Scalars['String']>;
  linkedFrom?: Maybe<CmsLegalDocumentLinkingCollections>;
  sys: CmsSys;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/legalDocument) */
export type CmsLegalDocumentDateArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/legalDocument) */
export type CmsLegalDocumentFileArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/legalDocument) */
export type CmsLegalDocumentIdArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/legalDocument) */
export type CmsLegalDocumentLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/legalDocument) */
export type CmsLegalDocumentTitleArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/legalDocument) */
export type CmsLegalDocumentTypeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsLegalDocumentCollection = {
  __typename?: 'CmsLegalDocumentCollection';
  items: Array<Maybe<CmsLegalDocument>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsLegalDocumentFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsLegalDocumentFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsLegalDocumentFilter>>>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  date?: InputMaybe<Scalars['CmsDateTime']>;
  date_exists?: InputMaybe<Scalars['Boolean']>;
  date_gt?: InputMaybe<Scalars['CmsDateTime']>;
  date_gte?: InputMaybe<Scalars['CmsDateTime']>;
  date_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  date_lt?: InputMaybe<Scalars['CmsDateTime']>;
  date_lte?: InputMaybe<Scalars['CmsDateTime']>;
  date_not?: InputMaybe<Scalars['CmsDateTime']>;
  date_not_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  file_exists?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['String']>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_exists?: InputMaybe<Scalars['Boolean']>;
  id_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id_not?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  sys?: InputMaybe<CmsSysFilter>;
  title?: InputMaybe<Scalars['String']>;
  title_contains?: InputMaybe<Scalars['String']>;
  title_exists?: InputMaybe<Scalars['Boolean']>;
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  title_not?: InputMaybe<Scalars['String']>;
  title_not_contains?: InputMaybe<Scalars['String']>;
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  type?: InputMaybe<Scalars['String']>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_exists?: InputMaybe<Scalars['Boolean']>;
  type_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmsLegalDocumentLinkingCollections = {
  __typename?: 'CmsLegalDocumentLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
};


export type CmsLegalDocumentLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsLegalDocumentOrder {
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC'
}

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfig = CmsEntry & {
  __typename?: 'CmsLocalizationConfig';
  contactDefaultType?: Maybe<Scalars['String']>;
  contactDefaultValue?: Maybe<Scalars['String']>;
  contentfulMetadata: CmsContentfulMetadata;
  countryName?: Maybe<Scalars['String']>;
  countryNameAdjective?: Maybe<Scalars['String']>;
  countryNameShort?: Maybe<Scalars['String']>;
  countryNameShortAdjective?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  currencySymbol?: Maybe<Scalars['String']>;
  e164CountryCode?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  iso3166Alpha2Code?: Maybe<Scalars['String']>;
  iso3166Alpha3Code?: Maybe<Scalars['String']>;
  linkedFrom?: Maybe<CmsLocalizationConfigLinkingCollections>;
  locale?: Maybe<Scalars['String']>;
  messagingServices?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  paymentProviders?: Maybe<Array<Maybe<Scalars['String']>>>;
  requiredEventRestrictions?: Maybe<CmsLocalizationConfigRequiredEventRestrictionsCollection>;
  sys: CmsSys;
  use24HourTime?: Maybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfigContactDefaultTypeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfigContactDefaultValueArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfigCountryNameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfigCountryNameAdjectiveArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfigCountryNameShortArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfigCountryNameShortAdjectiveArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfigCurrencyArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfigCurrencySymbolArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfigE164CountryCodeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfigIdArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfigIso3166Alpha2CodeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfigIso3166Alpha3CodeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfigLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfigLocaleArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfigMessagingServicesArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfigNameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfigPaymentProvidersArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfigRequiredEventRestrictionsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/localizationConfig) */
export type CmsLocalizationConfigUse24HourTimeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsLocalizationConfigCollection = {
  __typename?: 'CmsLocalizationConfigCollection';
  items: Array<Maybe<CmsLocalizationConfig>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsLocalizationConfigFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsLocalizationConfigFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsLocalizationConfigFilter>>>;
  contactDefaultType?: InputMaybe<Scalars['String']>;
  contactDefaultType_contains?: InputMaybe<Scalars['String']>;
  contactDefaultType_exists?: InputMaybe<Scalars['Boolean']>;
  contactDefaultType_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contactDefaultType_not?: InputMaybe<Scalars['String']>;
  contactDefaultType_not_contains?: InputMaybe<Scalars['String']>;
  contactDefaultType_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contactDefaultValue?: InputMaybe<Scalars['String']>;
  contactDefaultValue_contains?: InputMaybe<Scalars['String']>;
  contactDefaultValue_exists?: InputMaybe<Scalars['Boolean']>;
  contactDefaultValue_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contactDefaultValue_not?: InputMaybe<Scalars['String']>;
  contactDefaultValue_not_contains?: InputMaybe<Scalars['String']>;
  contactDefaultValue_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  countryName?: InputMaybe<Scalars['String']>;
  countryNameAdjective?: InputMaybe<Scalars['String']>;
  countryNameAdjective_contains?: InputMaybe<Scalars['String']>;
  countryNameAdjective_exists?: InputMaybe<Scalars['Boolean']>;
  countryNameAdjective_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameAdjective_not?: InputMaybe<Scalars['String']>;
  countryNameAdjective_not_contains?: InputMaybe<Scalars['String']>;
  countryNameAdjective_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameShort?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective_contains?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective_exists?: InputMaybe<Scalars['Boolean']>;
  countryNameShortAdjective_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameShortAdjective_not?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective_not_contains?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameShort_contains?: InputMaybe<Scalars['String']>;
  countryNameShort_exists?: InputMaybe<Scalars['Boolean']>;
  countryNameShort_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameShort_not?: InputMaybe<Scalars['String']>;
  countryNameShort_not_contains?: InputMaybe<Scalars['String']>;
  countryNameShort_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryName_contains?: InputMaybe<Scalars['String']>;
  countryName_exists?: InputMaybe<Scalars['Boolean']>;
  countryName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryName_not?: InputMaybe<Scalars['String']>;
  countryName_not_contains?: InputMaybe<Scalars['String']>;
  countryName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  currency?: InputMaybe<Scalars['String']>;
  currencySymbol?: InputMaybe<Scalars['String']>;
  currencySymbol_contains?: InputMaybe<Scalars['String']>;
  currencySymbol_exists?: InputMaybe<Scalars['Boolean']>;
  currencySymbol_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  currencySymbol_not?: InputMaybe<Scalars['String']>;
  currencySymbol_not_contains?: InputMaybe<Scalars['String']>;
  currencySymbol_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  currency_contains?: InputMaybe<Scalars['String']>;
  currency_exists?: InputMaybe<Scalars['Boolean']>;
  currency_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  currency_not?: InputMaybe<Scalars['String']>;
  currency_not_contains?: InputMaybe<Scalars['String']>;
  currency_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  e164CountryCode?: InputMaybe<Scalars['String']>;
  e164CountryCode_contains?: InputMaybe<Scalars['String']>;
  e164CountryCode_exists?: InputMaybe<Scalars['Boolean']>;
  e164CountryCode_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  e164CountryCode_not?: InputMaybe<Scalars['String']>;
  e164CountryCode_not_contains?: InputMaybe<Scalars['String']>;
  e164CountryCode_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id?: InputMaybe<Scalars['String']>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_exists?: InputMaybe<Scalars['Boolean']>;
  id_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id_not?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  iso3166Alpha2Code?: InputMaybe<Scalars['String']>;
  iso3166Alpha2Code_contains?: InputMaybe<Scalars['String']>;
  iso3166Alpha2Code_exists?: InputMaybe<Scalars['Boolean']>;
  iso3166Alpha2Code_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  iso3166Alpha2Code_not?: InputMaybe<Scalars['String']>;
  iso3166Alpha2Code_not_contains?: InputMaybe<Scalars['String']>;
  iso3166Alpha2Code_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  iso3166Alpha3Code?: InputMaybe<Scalars['String']>;
  iso3166Alpha3Code_contains?: InputMaybe<Scalars['String']>;
  iso3166Alpha3Code_exists?: InputMaybe<Scalars['Boolean']>;
  iso3166Alpha3Code_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  iso3166Alpha3Code_not?: InputMaybe<Scalars['String']>;
  iso3166Alpha3Code_not_contains?: InputMaybe<Scalars['String']>;
  iso3166Alpha3Code_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  locale?: InputMaybe<Scalars['String']>;
  locale_contains?: InputMaybe<Scalars['String']>;
  locale_exists?: InputMaybe<Scalars['Boolean']>;
  locale_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  locale_not?: InputMaybe<Scalars['String']>;
  locale_not_contains?: InputMaybe<Scalars['String']>;
  locale_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  messagingServices_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  messagingServices_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  messagingServices_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  messagingServices_exists?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_exists?: InputMaybe<Scalars['Boolean']>;
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name_not?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  paymentProviders_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  paymentProviders_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  paymentProviders_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  paymentProviders_exists?: InputMaybe<Scalars['Boolean']>;
  requiredEventRestrictionsCollection_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
  use24HourTime?: InputMaybe<Scalars['Boolean']>;
  use24HourTime_exists?: InputMaybe<Scalars['Boolean']>;
  use24HourTime_not?: InputMaybe<Scalars['Boolean']>;
};

export type CmsLocalizationConfigLinkingCollections = {
  __typename?: 'CmsLocalizationConfigLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
  regions?: Maybe<CmsRegionCollection>;
};


export type CmsLocalizationConfigLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsLocalizationConfigLinkingCollectionsRegionsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsLocalizationConfigOrder {
  ContactDefaultTypeAsc = 'contactDefaultType_ASC',
  ContactDefaultTypeDesc = 'contactDefaultType_DESC',
  ContactDefaultValueAsc = 'contactDefaultValue_ASC',
  ContactDefaultValueDesc = 'contactDefaultValue_DESC',
  CountryNameAdjectiveAsc = 'countryNameAdjective_ASC',
  CountryNameAdjectiveDesc = 'countryNameAdjective_DESC',
  CountryNameShortAdjectiveAsc = 'countryNameShortAdjective_ASC',
  CountryNameShortAdjectiveDesc = 'countryNameShortAdjective_DESC',
  CountryNameShortAsc = 'countryNameShort_ASC',
  CountryNameShortDesc = 'countryNameShort_DESC',
  CountryNameAsc = 'countryName_ASC',
  CountryNameDesc = 'countryName_DESC',
  CurrencySymbolAsc = 'currencySymbol_ASC',
  CurrencySymbolDesc = 'currencySymbol_DESC',
  CurrencyAsc = 'currency_ASC',
  CurrencyDesc = 'currency_DESC',
  E164CountryCodeAsc = 'e164CountryCode_ASC',
  E164CountryCodeDesc = 'e164CountryCode_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  Iso3166Alpha2CodeAsc = 'iso3166Alpha2Code_ASC',
  Iso3166Alpha2CodeDesc = 'iso3166Alpha2Code_DESC',
  Iso3166Alpha3CodeAsc = 'iso3166Alpha3Code_ASC',
  Iso3166Alpha3CodeDesc = 'iso3166Alpha3Code_DESC',
  LocaleAsc = 'locale_ASC',
  LocaleDesc = 'locale_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  Use24HourTimeAsc = 'use24HourTime_ASC',
  Use24HourTimeDesc = 'use24HourTime_DESC'
}

export type CmsLocalizationConfigRequiredEventRestrictionsCollection = {
  __typename?: 'CmsLocalizationConfigRequiredEventRestrictionsCollection';
  items: Array<Maybe<CmsEventRestriction>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsLocation = {
  __typename?: 'CmsLocation';
  lat?: Maybe<Scalars['Float']>;
  lon?: Maybe<Scalars['Float']>;
};

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/newsCoverage) */
export type CmsNewsCoverage = CmsEntry & {
  __typename?: 'CmsNewsCoverage';
  contentfulMetadata: CmsContentfulMetadata;
  date?: Maybe<Scalars['CmsDateTime']>;
  featured?: Maybe<Scalars['Boolean']>;
  linkedFrom?: Maybe<CmsNewsCoverageLinkingCollections>;
  publicationLogo?: Maybe<CmsAsset>;
  publicationName?: Maybe<Scalars['String']>;
  sys: CmsSys;
  title?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/newsCoverage) */
export type CmsNewsCoverageDateArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/newsCoverage) */
export type CmsNewsCoverageFeaturedArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/newsCoverage) */
export type CmsNewsCoverageLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/newsCoverage) */
export type CmsNewsCoveragePublicationLogoArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/newsCoverage) */
export type CmsNewsCoveragePublicationNameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/newsCoverage) */
export type CmsNewsCoverageTitleArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/newsCoverage) */
export type CmsNewsCoverageUrlArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsNewsCoverageCollection = {
  __typename?: 'CmsNewsCoverageCollection';
  items: Array<Maybe<CmsNewsCoverage>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsNewsCoverageFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsNewsCoverageFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsNewsCoverageFilter>>>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  date?: InputMaybe<Scalars['CmsDateTime']>;
  date_exists?: InputMaybe<Scalars['Boolean']>;
  date_gt?: InputMaybe<Scalars['CmsDateTime']>;
  date_gte?: InputMaybe<Scalars['CmsDateTime']>;
  date_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  date_lt?: InputMaybe<Scalars['CmsDateTime']>;
  date_lte?: InputMaybe<Scalars['CmsDateTime']>;
  date_not?: InputMaybe<Scalars['CmsDateTime']>;
  date_not_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  featured?: InputMaybe<Scalars['Boolean']>;
  featured_exists?: InputMaybe<Scalars['Boolean']>;
  featured_not?: InputMaybe<Scalars['Boolean']>;
  publicationLogo_exists?: InputMaybe<Scalars['Boolean']>;
  publicationName?: InputMaybe<Scalars['String']>;
  publicationName_contains?: InputMaybe<Scalars['String']>;
  publicationName_exists?: InputMaybe<Scalars['Boolean']>;
  publicationName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  publicationName_not?: InputMaybe<Scalars['String']>;
  publicationName_not_contains?: InputMaybe<Scalars['String']>;
  publicationName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  sys?: InputMaybe<CmsSysFilter>;
  title?: InputMaybe<Scalars['String']>;
  title_contains?: InputMaybe<Scalars['String']>;
  title_exists?: InputMaybe<Scalars['Boolean']>;
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  title_not?: InputMaybe<Scalars['String']>;
  title_not_contains?: InputMaybe<Scalars['String']>;
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  url?: InputMaybe<Scalars['String']>;
  url_contains?: InputMaybe<Scalars['String']>;
  url_exists?: InputMaybe<Scalars['Boolean']>;
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  url_not?: InputMaybe<Scalars['String']>;
  url_not_contains?: InputMaybe<Scalars['String']>;
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmsNewsCoverageLinkingCollections = {
  __typename?: 'CmsNewsCoverageLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
};


export type CmsNewsCoverageLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsNewsCoverageOrder {
  DateAsc = 'date_ASC',
  DateDesc = 'date_DESC',
  FeaturedAsc = 'featured_ASC',
  FeaturedDesc = 'featured_DESC',
  PublicationNameAsc = 'publicationName_ASC',
  PublicationNameDesc = 'publicationName_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC'
}

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/pressPhoto) */
export type CmsPressPhoto = CmsEntry & {
  __typename?: 'CmsPressPhoto';
  contentfulMetadata: CmsContentfulMetadata;
  event?: Maybe<CmsEvent>;
  linkedFrom?: Maybe<CmsPressPhotoLinkingCollections>;
  photo?: Maybe<CmsAsset>;
  region?: Maybe<CmsRegion>;
  subProgram?: Maybe<CmsProgram>;
  sys: CmsSys;
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/pressPhoto) */
export type CmsPressPhotoEventArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/pressPhoto) */
export type CmsPressPhotoLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/pressPhoto) */
export type CmsPressPhotoPhotoArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/pressPhoto) */
export type CmsPressPhotoRegionArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/pressPhoto) */
export type CmsPressPhotoSubProgramArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/pressPhoto) */
export type CmsPressPhotoTagsArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsPressPhotoCollection = {
  __typename?: 'CmsPressPhotoCollection';
  items: Array<Maybe<CmsPressPhoto>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsPressPhotoFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsPressPhotoFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsPressPhotoFilter>>>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  event?: InputMaybe<CmscfEventNestedFilter>;
  event_exists?: InputMaybe<Scalars['Boolean']>;
  photo_exists?: InputMaybe<Scalars['Boolean']>;
  region?: InputMaybe<CmscfRegionNestedFilter>;
  region_exists?: InputMaybe<Scalars['Boolean']>;
  subProgram?: InputMaybe<CmscfProgramNestedFilter>;
  subProgram_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
  tags_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  tags_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  tags_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  tags_exists?: InputMaybe<Scalars['Boolean']>;
};

export type CmsPressPhotoLinkingCollections = {
  __typename?: 'CmsPressPhotoLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
};


export type CmsPressPhotoLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsPressPhotoOrder {
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC'
}

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgram = CmsEntry & {
  __typename?: 'CmsProgram';
  archived?: Maybe<Scalars['Boolean']>;
  contentfulMetadata: CmsContentfulMetadata;
  description?: Maybe<Scalars['String']>;
  educationDetails?: Maybe<CmsProgramEducationDetails>;
  eligibility?: Maybe<CmsProgramEligibility>;
  linkedFrom?: Maybe<CmsProgramLinkingCollections>;
  logo?: Maybe<CmsAsset>;
  logoWhite?: Maybe<CmsAsset>;
  name?: Maybe<Scalars['String']>;
  posters?: Maybe<CmsAssetCollection>;
  presentingSponsors?: Maybe<CmsProgramPresentingSponsorsCollection>;
  shortDescription?: Maybe<Scalars['String']>;
  sponsorPerks?: Maybe<Scalars['CmsJSON']>;
  sys: CmsSys;
  type?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  virtual?: Maybe<Scalars['Boolean']>;
  volunteerBlurb?: Maybe<CmsProgramVolunteerBlurb>;
  volunteerDetails?: Maybe<CmsProgramVolunteerDetails>;
  volunteerPositions?: Maybe<Array<Maybe<Scalars['String']>>>;
  volunteerRecruitingResources?: Maybe<CmsAssetCollection>;
  volunteerUrl?: Maybe<Scalars['String']>;
  webname?: Maybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramArchivedArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramDescriptionArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramEducationDetailsArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramEligibilityArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramLogoArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramLogoWhiteArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramNameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramPostersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramPresentingSponsorsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramShortDescriptionArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramSponsorPerksArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramTypeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramUrlArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramVirtualArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramVolunteerBlurbArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramVolunteerDetailsArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramVolunteerPositionsArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramVolunteerRecruitingResourcesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramVolunteerUrlArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/program) */
export type CmsProgramWebnameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsProgramCollection = {
  __typename?: 'CmsProgramCollection';
  items: Array<Maybe<CmsProgram>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsProgramEducationDetails = {
  __typename?: 'CmsProgramEducationDetails';
  json: Scalars['CmsJSON'];
  links: CmsProgramEducationDetailsLinks;
};

export type CmsProgramEducationDetailsAssets = {
  __typename?: 'CmsProgramEducationDetailsAssets';
  block: Array<Maybe<CmsAsset>>;
  hyperlink: Array<Maybe<CmsAsset>>;
};

export type CmsProgramEducationDetailsEntries = {
  __typename?: 'CmsProgramEducationDetailsEntries';
  block: Array<Maybe<CmsEntry>>;
  hyperlink: Array<Maybe<CmsEntry>>;
  inline: Array<Maybe<CmsEntry>>;
};

export type CmsProgramEducationDetailsLinks = {
  __typename?: 'CmsProgramEducationDetailsLinks';
  assets: CmsProgramEducationDetailsAssets;
  entries: CmsProgramEducationDetailsEntries;
};

export type CmsProgramEligibility = {
  __typename?: 'CmsProgramEligibility';
  json: Scalars['CmsJSON'];
  links: CmsProgramEligibilityLinks;
};

export type CmsProgramEligibilityAssets = {
  __typename?: 'CmsProgramEligibilityAssets';
  block: Array<Maybe<CmsAsset>>;
  hyperlink: Array<Maybe<CmsAsset>>;
};

export type CmsProgramEligibilityEntries = {
  __typename?: 'CmsProgramEligibilityEntries';
  block: Array<Maybe<CmsEntry>>;
  hyperlink: Array<Maybe<CmsEntry>>;
  inline: Array<Maybe<CmsEntry>>;
};

export type CmsProgramEligibilityLinks = {
  __typename?: 'CmsProgramEligibilityLinks';
  assets: CmsProgramEligibilityAssets;
  entries: CmsProgramEligibilityEntries;
};

export type CmsProgramFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsProgramFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsProgramFilter>>>;
  archived?: InputMaybe<Scalars['Boolean']>;
  archived_exists?: InputMaybe<Scalars['Boolean']>;
  archived_not?: InputMaybe<Scalars['Boolean']>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  description?: InputMaybe<Scalars['String']>;
  description_contains?: InputMaybe<Scalars['String']>;
  description_exists?: InputMaybe<Scalars['Boolean']>;
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  description_not?: InputMaybe<Scalars['String']>;
  description_not_contains?: InputMaybe<Scalars['String']>;
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  educationDetails_contains?: InputMaybe<Scalars['String']>;
  educationDetails_exists?: InputMaybe<Scalars['Boolean']>;
  educationDetails_not_contains?: InputMaybe<Scalars['String']>;
  eligibility_contains?: InputMaybe<Scalars['String']>;
  eligibility_exists?: InputMaybe<Scalars['Boolean']>;
  eligibility_not_contains?: InputMaybe<Scalars['String']>;
  logoWhite_exists?: InputMaybe<Scalars['Boolean']>;
  logo_exists?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_exists?: InputMaybe<Scalars['Boolean']>;
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name_not?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  postersCollection_exists?: InputMaybe<Scalars['Boolean']>;
  presentingSponsorsCollection_exists?: InputMaybe<Scalars['Boolean']>;
  shortDescription?: InputMaybe<Scalars['String']>;
  shortDescription_contains?: InputMaybe<Scalars['String']>;
  shortDescription_exists?: InputMaybe<Scalars['Boolean']>;
  shortDescription_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  shortDescription_not?: InputMaybe<Scalars['String']>;
  shortDescription_not_contains?: InputMaybe<Scalars['String']>;
  shortDescription_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  sponsorPerks_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
  type?: InputMaybe<Scalars['String']>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_exists?: InputMaybe<Scalars['Boolean']>;
  type_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  url?: InputMaybe<Scalars['String']>;
  url_contains?: InputMaybe<Scalars['String']>;
  url_exists?: InputMaybe<Scalars['Boolean']>;
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  url_not?: InputMaybe<Scalars['String']>;
  url_not_contains?: InputMaybe<Scalars['String']>;
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  virtual?: InputMaybe<Scalars['Boolean']>;
  virtual_exists?: InputMaybe<Scalars['Boolean']>;
  virtual_not?: InputMaybe<Scalars['Boolean']>;
  volunteerBlurb_contains?: InputMaybe<Scalars['String']>;
  volunteerBlurb_exists?: InputMaybe<Scalars['Boolean']>;
  volunteerBlurb_not_contains?: InputMaybe<Scalars['String']>;
  volunteerDetails_contains?: InputMaybe<Scalars['String']>;
  volunteerDetails_exists?: InputMaybe<Scalars['Boolean']>;
  volunteerDetails_not_contains?: InputMaybe<Scalars['String']>;
  volunteerPositions_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  volunteerPositions_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  volunteerPositions_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  volunteerPositions_exists?: InputMaybe<Scalars['Boolean']>;
  volunteerRecruitingResourcesCollection_exists?: InputMaybe<Scalars['Boolean']>;
  volunteerUrl?: InputMaybe<Scalars['String']>;
  volunteerUrl_contains?: InputMaybe<Scalars['String']>;
  volunteerUrl_exists?: InputMaybe<Scalars['Boolean']>;
  volunteerUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  volunteerUrl_not?: InputMaybe<Scalars['String']>;
  volunteerUrl_not_contains?: InputMaybe<Scalars['String']>;
  volunteerUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  webname?: InputMaybe<Scalars['String']>;
  webname_contains?: InputMaybe<Scalars['String']>;
  webname_exists?: InputMaybe<Scalars['Boolean']>;
  webname_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  webname_not?: InputMaybe<Scalars['String']>;
  webname_not_contains?: InputMaybe<Scalars['String']>;
  webname_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmsProgramLinkingCollections = {
  __typename?: 'CmsProgramLinkingCollections';
  announcements?: Maybe<CmsAnnouncementCollection>;
  awards?: Maybe<CmsAwardCollection>;
  entries?: Maybe<CmsEntryCollection>;
  eventRestrictions?: Maybe<CmsEventRestrictionCollection>;
  events?: Maybe<CmsEventCollection>;
  faqs?: Maybe<CmsFaqCollection>;
  pressPhotos?: Maybe<CmsPressPhotoCollection>;
  testimonials?: Maybe<CmsTestimonialCollection>;
};


export type CmsProgramLinkingCollectionsAnnouncementsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsProgramLinkingCollectionsAwardsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsProgramLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsProgramLinkingCollectionsEventRestrictionsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsProgramLinkingCollectionsEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsProgramLinkingCollectionsFaqsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsProgramLinkingCollectionsPressPhotosArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsProgramLinkingCollectionsTestimonialsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsProgramOrder {
  ArchivedAsc = 'archived_ASC',
  ArchivedDesc = 'archived_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  ShortDescriptionAsc = 'shortDescription_ASC',
  ShortDescriptionDesc = 'shortDescription_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC',
  VirtualAsc = 'virtual_ASC',
  VirtualDesc = 'virtual_DESC',
  VolunteerUrlAsc = 'volunteerUrl_ASC',
  VolunteerUrlDesc = 'volunteerUrl_DESC',
  WebnameAsc = 'webname_ASC',
  WebnameDesc = 'webname_DESC'
}

export type CmsProgramPresentingSponsorsCollection = {
  __typename?: 'CmsProgramPresentingSponsorsCollection';
  items: Array<Maybe<CmsGlobalSponsor>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsProgramVolunteerBlurb = {
  __typename?: 'CmsProgramVolunteerBlurb';
  json: Scalars['CmsJSON'];
  links: CmsProgramVolunteerBlurbLinks;
};

export type CmsProgramVolunteerBlurbAssets = {
  __typename?: 'CmsProgramVolunteerBlurbAssets';
  block: Array<Maybe<CmsAsset>>;
  hyperlink: Array<Maybe<CmsAsset>>;
};

export type CmsProgramVolunteerBlurbEntries = {
  __typename?: 'CmsProgramVolunteerBlurbEntries';
  block: Array<Maybe<CmsEntry>>;
  hyperlink: Array<Maybe<CmsEntry>>;
  inline: Array<Maybe<CmsEntry>>;
};

export type CmsProgramVolunteerBlurbLinks = {
  __typename?: 'CmsProgramVolunteerBlurbLinks';
  assets: CmsProgramVolunteerBlurbAssets;
  entries: CmsProgramVolunteerBlurbEntries;
};

export type CmsProgramVolunteerDetails = {
  __typename?: 'CmsProgramVolunteerDetails';
  json: Scalars['CmsJSON'];
  links: CmsProgramVolunteerDetailsLinks;
};

export type CmsProgramVolunteerDetailsAssets = {
  __typename?: 'CmsProgramVolunteerDetailsAssets';
  block: Array<Maybe<CmsAsset>>;
  hyperlink: Array<Maybe<CmsAsset>>;
};

export type CmsProgramVolunteerDetailsEntries = {
  __typename?: 'CmsProgramVolunteerDetailsEntries';
  block: Array<Maybe<CmsEntry>>;
  hyperlink: Array<Maybe<CmsEntry>>;
  inline: Array<Maybe<CmsEntry>>;
};

export type CmsProgramVolunteerDetailsLinks = {
  __typename?: 'CmsProgramVolunteerDetailsLinks';
  assets: CmsProgramVolunteerDetailsAssets;
  entries: CmsProgramVolunteerDetailsEntries;
};

export type CmsQuery = {
  __typename?: 'CmsQuery';
  announcement?: Maybe<CmsAnnouncement>;
  announcements?: Maybe<CmsAnnouncementCollection>;
  asset?: Maybe<CmsAsset>;
  assets?: Maybe<CmsAssetCollection>;
  award?: Maybe<CmsAward>;
  awards?: Maybe<CmsAwardCollection>;
  badge?: Maybe<CmsBadge>;
  badges?: Maybe<CmsBadgeCollection>;
  bumper?: Maybe<CmsBumper>;
  bumpers?: Maybe<CmsBumperCollection>;
  communityPartner?: Maybe<CmsCommunityPartner>;
  communityPartners?: Maybe<CmsCommunityPartnerCollection>;
  entries?: Maybe<CmsEntryCollection>;
  event?: Maybe<CmsEvent>;
  eventRestriction?: Maybe<CmsEventRestriction>;
  eventRestrictions?: Maybe<CmsEventRestrictionCollection>;
  events?: Maybe<CmsEventCollection>;
  faq?: Maybe<CmsFaq>;
  faqs?: Maybe<CmsFaqCollection>;
  form?: Maybe<CmsForm>;
  forms?: Maybe<CmsFormCollection>;
  globalSponsor?: Maybe<CmsGlobalSponsor>;
  globalSponsors?: Maybe<CmsGlobalSponsorCollection>;
  hiringCompanies?: Maybe<CmsHiringCompanyCollection>;
  hiringCompany?: Maybe<CmsHiringCompany>;
  hiringPost?: Maybe<CmsHiringPost>;
  hiringPosts?: Maybe<CmsHiringPostCollection>;
  legalDocument?: Maybe<CmsLegalDocument>;
  legalDocuments?: Maybe<CmsLegalDocumentCollection>;
  localizationConfig?: Maybe<CmsLocalizationConfig>;
  localizationConfigs?: Maybe<CmsLocalizationConfigCollection>;
  newsCoverage?: Maybe<CmsNewsCoverage>;
  newsCoverages?: Maybe<CmsNewsCoverageCollection>;
  pressPhoto?: Maybe<CmsPressPhoto>;
  pressPhotos?: Maybe<CmsPressPhotoCollection>;
  program?: Maybe<CmsProgram>;
  programs?: Maybe<CmsProgramCollection>;
  region?: Maybe<CmsRegion>;
  regions?: Maybe<CmsRegionCollection>;
  site?: Maybe<CmsSite>;
  sites?: Maybe<CmsSiteCollection>;
  socialMedia?: Maybe<CmsSocialMedia>;
  socialMedias?: Maybe<CmsSocialMediaCollection>;
  stockMusic?: Maybe<CmsStockMusic>;
  stockMusics?: Maybe<CmsStockMusicCollection>;
  string?: Maybe<CmsContentTypeString>;
  strings?: Maybe<CmsContentTypeStringCollection>;
  testimonial?: Maybe<CmsTestimonial>;
  testimonials?: Maybe<CmsTestimonialCollection>;
};


export type CmsQueryAnnouncementArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryAnnouncementsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsAnnouncementOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsAnnouncementFilter>;
};


export type CmsQueryAssetArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryAssetsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsAssetOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsAssetFilter>;
};


export type CmsQueryAwardArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryAwardsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsAwardOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsAwardFilter>;
};


export type CmsQueryBadgeArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryBadgesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsBadgeOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsBadgeFilter>;
};


export type CmsQueryBumperArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryBumpersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsBumperOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsBumperFilter>;
};


export type CmsQueryCommunityPartnerArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryCommunityPartnersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsCommunityPartnerOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsCommunityPartnerFilter>;
};


export type CmsQueryEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsEntryOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsEntryFilter>;
};


export type CmsQueryEventArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryEventRestrictionArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryEventRestrictionsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsEventRestrictionOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsEventRestrictionFilter>;
};


export type CmsQueryEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsEventOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsEventFilter>;
};


export type CmsQueryFaqArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryFaqsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsFaqOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsFaqFilter>;
};


export type CmsQueryFormArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryFormsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsFormOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsFormFilter>;
};


export type CmsQueryGlobalSponsorArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryGlobalSponsorsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsGlobalSponsorOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsGlobalSponsorFilter>;
};


export type CmsQueryHiringCompaniesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsHiringCompanyOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsHiringCompanyFilter>;
};


export type CmsQueryHiringCompanyArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryHiringPostArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryHiringPostsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsHiringPostOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsHiringPostFilter>;
};


export type CmsQueryLegalDocumentArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryLegalDocumentsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsLegalDocumentOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsLegalDocumentFilter>;
};


export type CmsQueryLocalizationConfigArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryLocalizationConfigsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsLocalizationConfigOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsLocalizationConfigFilter>;
};


export type CmsQueryNewsCoverageArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryNewsCoveragesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsNewsCoverageOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsNewsCoverageFilter>;
};


export type CmsQueryPressPhotoArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryPressPhotosArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsPressPhotoOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPressPhotoFilter>;
};


export type CmsQueryProgramArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryProgramsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsProgramOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsProgramFilter>;
};


export type CmsQueryRegionArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryRegionsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsRegionOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsRegionFilter>;
};


export type CmsQuerySiteArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQuerySitesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsSiteOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsSiteFilter>;
};


export type CmsQuerySocialMediaArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQuerySocialMediasArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsSocialMediaOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsSocialMediaFilter>;
};


export type CmsQueryStockMusicArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryStockMusicsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsStockMusicOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsStockMusicFilter>;
};


export type CmsQueryStringArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryStringsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsContentTypeStringOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsContentTypeStringFilter>;
};


export type CmsQueryTestimonialArgs = {
  id: Scalars['String'];
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


export type CmsQueryTestimonialsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  order?: InputMaybe<Array<InputMaybe<CmsTestimonialOrder>>>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsTestimonialFilter>;
};

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegion = CmsEntry & {
  __typename?: 'CmsRegion';
  abbr?: Maybe<Scalars['String']>;
  accountingName?: Maybe<Scalars['String']>;
  aliases?: Maybe<Array<Maybe<Scalars['String']>>>;
  clearEvents: Array<ClearEvent>;
  complication?: Maybe<CmsAsset>;
  contentfulMetadata: CmsContentfulMetadata;
  countryName?: Maybe<Scalars['String']>;
  countryNameAdjective?: Maybe<Scalars['String']>;
  countryNameShort?: Maybe<Scalars['String']>;
  countryNameShortAdjective?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  currencySymbol?: Maybe<Scalars['String']>;
  e164CountryCode?: Maybe<Scalars['String']>;
  iso3166Alpha2Code?: Maybe<Scalars['String']>;
  iso3166Alpha3Code?: Maybe<Scalars['String']>;
  linkedFrom?: Maybe<CmsRegionLinkingCollections>;
  localizationConfig?: Maybe<CmsLocalizationConfig>;
  location?: Maybe<CmsLocation>;
  messagingServices?: Maybe<Array<Maybe<Scalars['String']>>>;
  motto?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  pastPhotos: Array<ShowcasePhoto>;
  paymentProvider?: Maybe<Scalars['String']>;
  primaryColor?: Maybe<Scalars['String']>;
  regionPhotos?: Maybe<CmsAssetCollection>;
  skylinePhoto?: Maybe<CmsAsset>;
  stickerLarge?: Maybe<CmsAsset>;
  stickerSmall?: Maybe<CmsAsset>;
  sys: CmsSys;
  timezone?: Maybe<Scalars['String']>;
  webname?: Maybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionAbbrArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionAccountingNameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionAliasesArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionComplicationArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionCountryNameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionCountryNameAdjectiveArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionCountryNameShortArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionCountryNameShortAdjectiveArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionCurrencyArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionCurrencySymbolArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionE164CountryCodeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionIso3166Alpha2CodeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionIso3166Alpha3CodeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionLocalizationConfigArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionLocationArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionMessagingServicesArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionMottoArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionNameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionPastPhotosArgs = {
  orderBy?: InputMaybe<ShowcasePhotoOrderByArg>;
  skip?: InputMaybe<Scalars['Float']>;
  take?: InputMaybe<Scalars['Float']>;
  where?: InputMaybe<ShowcasePhotosWhere>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionPaymentProviderArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionPrimaryColorArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionRegionPhotosArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionSkylinePhotoArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionStickerLargeArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionStickerSmallArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionTimezoneArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/region) */
export type CmsRegionWebnameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsRegionCollection = {
  __typename?: 'CmsRegionCollection';
  items: Array<Maybe<CmsRegion>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsRegionFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsRegionFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsRegionFilter>>>;
  abbr?: InputMaybe<Scalars['String']>;
  abbr_contains?: InputMaybe<Scalars['String']>;
  abbr_exists?: InputMaybe<Scalars['Boolean']>;
  abbr_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  abbr_not?: InputMaybe<Scalars['String']>;
  abbr_not_contains?: InputMaybe<Scalars['String']>;
  abbr_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  accountingName?: InputMaybe<Scalars['String']>;
  accountingName_contains?: InputMaybe<Scalars['String']>;
  accountingName_exists?: InputMaybe<Scalars['Boolean']>;
  accountingName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  accountingName_not?: InputMaybe<Scalars['String']>;
  accountingName_not_contains?: InputMaybe<Scalars['String']>;
  accountingName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  aliases_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  aliases_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  aliases_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  aliases_exists?: InputMaybe<Scalars['Boolean']>;
  complication_exists?: InputMaybe<Scalars['Boolean']>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  countryName?: InputMaybe<Scalars['String']>;
  countryNameAdjective?: InputMaybe<Scalars['String']>;
  countryNameAdjective_contains?: InputMaybe<Scalars['String']>;
  countryNameAdjective_exists?: InputMaybe<Scalars['Boolean']>;
  countryNameAdjective_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameAdjective_not?: InputMaybe<Scalars['String']>;
  countryNameAdjective_not_contains?: InputMaybe<Scalars['String']>;
  countryNameAdjective_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameShort?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective_contains?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective_exists?: InputMaybe<Scalars['Boolean']>;
  countryNameShortAdjective_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameShortAdjective_not?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective_not_contains?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameShort_contains?: InputMaybe<Scalars['String']>;
  countryNameShort_exists?: InputMaybe<Scalars['Boolean']>;
  countryNameShort_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameShort_not?: InputMaybe<Scalars['String']>;
  countryNameShort_not_contains?: InputMaybe<Scalars['String']>;
  countryNameShort_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryName_contains?: InputMaybe<Scalars['String']>;
  countryName_exists?: InputMaybe<Scalars['Boolean']>;
  countryName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryName_not?: InputMaybe<Scalars['String']>;
  countryName_not_contains?: InputMaybe<Scalars['String']>;
  countryName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  currency?: InputMaybe<Scalars['String']>;
  currencySymbol?: InputMaybe<Scalars['String']>;
  currencySymbol_contains?: InputMaybe<Scalars['String']>;
  currencySymbol_exists?: InputMaybe<Scalars['Boolean']>;
  currencySymbol_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  currencySymbol_not?: InputMaybe<Scalars['String']>;
  currencySymbol_not_contains?: InputMaybe<Scalars['String']>;
  currencySymbol_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  currency_contains?: InputMaybe<Scalars['String']>;
  currency_exists?: InputMaybe<Scalars['Boolean']>;
  currency_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  currency_not?: InputMaybe<Scalars['String']>;
  currency_not_contains?: InputMaybe<Scalars['String']>;
  currency_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  e164CountryCode?: InputMaybe<Scalars['String']>;
  e164CountryCode_contains?: InputMaybe<Scalars['String']>;
  e164CountryCode_exists?: InputMaybe<Scalars['Boolean']>;
  e164CountryCode_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  e164CountryCode_not?: InputMaybe<Scalars['String']>;
  e164CountryCode_not_contains?: InputMaybe<Scalars['String']>;
  e164CountryCode_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  iso3166Alpha2Code?: InputMaybe<Scalars['String']>;
  iso3166Alpha2Code_contains?: InputMaybe<Scalars['String']>;
  iso3166Alpha2Code_exists?: InputMaybe<Scalars['Boolean']>;
  iso3166Alpha2Code_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  iso3166Alpha2Code_not?: InputMaybe<Scalars['String']>;
  iso3166Alpha2Code_not_contains?: InputMaybe<Scalars['String']>;
  iso3166Alpha2Code_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  iso3166Alpha3Code?: InputMaybe<Scalars['String']>;
  iso3166Alpha3Code_contains?: InputMaybe<Scalars['String']>;
  iso3166Alpha3Code_exists?: InputMaybe<Scalars['Boolean']>;
  iso3166Alpha3Code_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  iso3166Alpha3Code_not?: InputMaybe<Scalars['String']>;
  iso3166Alpha3Code_not_contains?: InputMaybe<Scalars['String']>;
  iso3166Alpha3Code_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  localizationConfig?: InputMaybe<CmscfLocalizationConfigNestedFilter>;
  localizationConfig_exists?: InputMaybe<Scalars['Boolean']>;
  location_exists?: InputMaybe<Scalars['Boolean']>;
  location_within_circle?: InputMaybe<Scalars['CmsCircle']>;
  location_within_rectangle?: InputMaybe<Scalars['CmsRectangle']>;
  messagingServices_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  messagingServices_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  messagingServices_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  messagingServices_exists?: InputMaybe<Scalars['Boolean']>;
  motto?: InputMaybe<Scalars['String']>;
  motto_contains?: InputMaybe<Scalars['String']>;
  motto_exists?: InputMaybe<Scalars['Boolean']>;
  motto_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  motto_not?: InputMaybe<Scalars['String']>;
  motto_not_contains?: InputMaybe<Scalars['String']>;
  motto_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name?: InputMaybe<Scalars['String']>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_exists?: InputMaybe<Scalars['Boolean']>;
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name_not?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  paymentProvider?: InputMaybe<Scalars['String']>;
  paymentProvider_contains?: InputMaybe<Scalars['String']>;
  paymentProvider_exists?: InputMaybe<Scalars['Boolean']>;
  paymentProvider_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  paymentProvider_not?: InputMaybe<Scalars['String']>;
  paymentProvider_not_contains?: InputMaybe<Scalars['String']>;
  paymentProvider_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  primaryColor?: InputMaybe<Scalars['String']>;
  primaryColor_contains?: InputMaybe<Scalars['String']>;
  primaryColor_exists?: InputMaybe<Scalars['Boolean']>;
  primaryColor_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  primaryColor_not?: InputMaybe<Scalars['String']>;
  primaryColor_not_contains?: InputMaybe<Scalars['String']>;
  primaryColor_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  regionPhotosCollection_exists?: InputMaybe<Scalars['Boolean']>;
  skylinePhoto_exists?: InputMaybe<Scalars['Boolean']>;
  stickerLarge_exists?: InputMaybe<Scalars['Boolean']>;
  stickerSmall_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
  timezone?: InputMaybe<Scalars['String']>;
  timezone_contains?: InputMaybe<Scalars['String']>;
  timezone_exists?: InputMaybe<Scalars['Boolean']>;
  timezone_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  timezone_not?: InputMaybe<Scalars['String']>;
  timezone_not_contains?: InputMaybe<Scalars['String']>;
  timezone_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  webname?: InputMaybe<Scalars['String']>;
  webname_contains?: InputMaybe<Scalars['String']>;
  webname_exists?: InputMaybe<Scalars['Boolean']>;
  webname_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  webname_not?: InputMaybe<Scalars['String']>;
  webname_not_contains?: InputMaybe<Scalars['String']>;
  webname_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmsRegionLinkingCollections = {
  __typename?: 'CmsRegionLinkingCollections';
  communityPartners?: Maybe<CmsCommunityPartnerCollection>;
  entries?: Maybe<CmsEntryCollection>;
  hiringPosts?: Maybe<CmsHiringPostCollection>;
  pressPhotos?: Maybe<CmsPressPhotoCollection>;
  testimonials?: Maybe<CmsTestimonialCollection>;
};


export type CmsRegionLinkingCollectionsCommunityPartnersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsRegionLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsRegionLinkingCollectionsHiringPostsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsRegionLinkingCollectionsPressPhotosArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsRegionLinkingCollectionsTestimonialsArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsRegionOrder {
  AbbrAsc = 'abbr_ASC',
  AbbrDesc = 'abbr_DESC',
  AccountingNameAsc = 'accountingName_ASC',
  AccountingNameDesc = 'accountingName_DESC',
  CountryNameAdjectiveAsc = 'countryNameAdjective_ASC',
  CountryNameAdjectiveDesc = 'countryNameAdjective_DESC',
  CountryNameShortAdjectiveAsc = 'countryNameShortAdjective_ASC',
  CountryNameShortAdjectiveDesc = 'countryNameShortAdjective_DESC',
  CountryNameShortAsc = 'countryNameShort_ASC',
  CountryNameShortDesc = 'countryNameShort_DESC',
  CountryNameAsc = 'countryName_ASC',
  CountryNameDesc = 'countryName_DESC',
  CurrencySymbolAsc = 'currencySymbol_ASC',
  CurrencySymbolDesc = 'currencySymbol_DESC',
  CurrencyAsc = 'currency_ASC',
  CurrencyDesc = 'currency_DESC',
  E164CountryCodeAsc = 'e164CountryCode_ASC',
  E164CountryCodeDesc = 'e164CountryCode_DESC',
  Iso3166Alpha2CodeAsc = 'iso3166Alpha2Code_ASC',
  Iso3166Alpha2CodeDesc = 'iso3166Alpha2Code_DESC',
  Iso3166Alpha3CodeAsc = 'iso3166Alpha3Code_ASC',
  Iso3166Alpha3CodeDesc = 'iso3166Alpha3Code_DESC',
  MottoAsc = 'motto_ASC',
  MottoDesc = 'motto_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PaymentProviderAsc = 'paymentProvider_ASC',
  PaymentProviderDesc = 'paymentProvider_DESC',
  PrimaryColorAsc = 'primaryColor_ASC',
  PrimaryColorDesc = 'primaryColor_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  TimezoneAsc = 'timezone_ASC',
  TimezoneDesc = 'timezone_DESC',
  WebnameAsc = 'webname_ASC',
  WebnameDesc = 'webname_DESC'
}

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/site) */
export type CmsSite = CmsEntry & {
  __typename?: 'CmsSite';
  contentfulMetadata: CmsContentfulMetadata;
  display?: Maybe<Array<Maybe<Scalars['String']>>>;
  link?: Maybe<Scalars['String']>;
  linkedFrom?: Maybe<CmsSiteLinkingCollections>;
  sys: CmsSys;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/site) */
export type CmsSiteDisplayArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/site) */
export type CmsSiteLinkArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/site) */
export type CmsSiteLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/site) */
export type CmsSiteTitleArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/site) */
export type CmsSiteTypeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsSiteCollection = {
  __typename?: 'CmsSiteCollection';
  items: Array<Maybe<CmsSite>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsSiteFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsSiteFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsSiteFilter>>>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  display_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  display_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  display_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  display_exists?: InputMaybe<Scalars['Boolean']>;
  link?: InputMaybe<Scalars['String']>;
  link_contains?: InputMaybe<Scalars['String']>;
  link_exists?: InputMaybe<Scalars['Boolean']>;
  link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  link_not?: InputMaybe<Scalars['String']>;
  link_not_contains?: InputMaybe<Scalars['String']>;
  link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  sys?: InputMaybe<CmsSysFilter>;
  title?: InputMaybe<Scalars['String']>;
  title_contains?: InputMaybe<Scalars['String']>;
  title_exists?: InputMaybe<Scalars['Boolean']>;
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  title_not?: InputMaybe<Scalars['String']>;
  title_not_contains?: InputMaybe<Scalars['String']>;
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  type?: InputMaybe<Scalars['String']>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_exists?: InputMaybe<Scalars['Boolean']>;
  type_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmsSiteLinkingCollections = {
  __typename?: 'CmsSiteLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
};


export type CmsSiteLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsSiteOrder {
  LinkAsc = 'link_ASC',
  LinkDesc = 'link_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC'
}

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/socialMedia) */
export type CmsSocialMedia = CmsEntry & {
  __typename?: 'CmsSocialMedia';
  contentfulMetadata: CmsContentfulMetadata;
  icon?: Maybe<CmsAsset>;
  linkedFrom?: Maybe<CmsSocialMediaLinkingCollections>;
  name?: Maybe<Scalars['String']>;
  sys: CmsSys;
  url?: Maybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/socialMedia) */
export type CmsSocialMediaIconArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/socialMedia) */
export type CmsSocialMediaLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/socialMedia) */
export type CmsSocialMediaNameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/socialMedia) */
export type CmsSocialMediaUrlArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsSocialMediaCollection = {
  __typename?: 'CmsSocialMediaCollection';
  items: Array<Maybe<CmsSocialMedia>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsSocialMediaFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsSocialMediaFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsSocialMediaFilter>>>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  icon_exists?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_exists?: InputMaybe<Scalars['Boolean']>;
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name_not?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  sys?: InputMaybe<CmsSysFilter>;
  url?: InputMaybe<Scalars['String']>;
  url_contains?: InputMaybe<Scalars['String']>;
  url_exists?: InputMaybe<Scalars['Boolean']>;
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  url_not?: InputMaybe<Scalars['String']>;
  url_not_contains?: InputMaybe<Scalars['String']>;
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmsSocialMediaLinkingCollections = {
  __typename?: 'CmsSocialMediaLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
};


export type CmsSocialMediaLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsSocialMediaOrder {
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC'
}

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/stockMusic) */
export type CmsStockMusic = CmsEntry & {
  __typename?: 'CmsStockMusic';
  contentfulMetadata: CmsContentfulMetadata;
  linkedFrom?: Maybe<CmsStockMusicLinkingCollections>;
  music?: Maybe<CmsAsset>;
  sys: CmsSys;
  title?: Maybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/stockMusic) */
export type CmsStockMusicLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/stockMusic) */
export type CmsStockMusicMusicArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/stockMusic) */
export type CmsStockMusicTitleArgs = {
  locale?: InputMaybe<Scalars['String']>;
};

export type CmsStockMusicCollection = {
  __typename?: 'CmsStockMusicCollection';
  items: Array<Maybe<CmsStockMusic>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsStockMusicFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsStockMusicFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsStockMusicFilter>>>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  music_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
  title?: InputMaybe<Scalars['String']>;
  title_contains?: InputMaybe<Scalars['String']>;
  title_exists?: InputMaybe<Scalars['Boolean']>;
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  title_not?: InputMaybe<Scalars['String']>;
  title_not_contains?: InputMaybe<Scalars['String']>;
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmsStockMusicLinkingCollections = {
  __typename?: 'CmsStockMusicLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
};


export type CmsStockMusicLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsStockMusicOrder {
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type CmsSys = {
  __typename?: 'CmsSys';
  environmentId: Scalars['String'];
  firstPublishedAt?: Maybe<Scalars['CmsDateTime']>;
  id: Scalars['String'];
  publishedAt?: Maybe<Scalars['CmsDateTime']>;
  publishedVersion?: Maybe<Scalars['Int']>;
  spaceId: Scalars['String'];
};

export type CmsSysFilter = {
  firstPublishedAt?: InputMaybe<Scalars['CmsDateTime']>;
  firstPublishedAt_exists?: InputMaybe<Scalars['Boolean']>;
  firstPublishedAt_gt?: InputMaybe<Scalars['CmsDateTime']>;
  firstPublishedAt_gte?: InputMaybe<Scalars['CmsDateTime']>;
  firstPublishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  firstPublishedAt_lt?: InputMaybe<Scalars['CmsDateTime']>;
  firstPublishedAt_lte?: InputMaybe<Scalars['CmsDateTime']>;
  firstPublishedAt_not?: InputMaybe<Scalars['CmsDateTime']>;
  firstPublishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  id?: InputMaybe<Scalars['String']>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_exists?: InputMaybe<Scalars['Boolean']>;
  id_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id_not?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  publishedAt?: InputMaybe<Scalars['CmsDateTime']>;
  publishedAt_exists?: InputMaybe<Scalars['Boolean']>;
  publishedAt_gt?: InputMaybe<Scalars['CmsDateTime']>;
  publishedAt_gte?: InputMaybe<Scalars['CmsDateTime']>;
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  publishedAt_lt?: InputMaybe<Scalars['CmsDateTime']>;
  publishedAt_lte?: InputMaybe<Scalars['CmsDateTime']>;
  publishedAt_not?: InputMaybe<Scalars['CmsDateTime']>;
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  publishedVersion?: InputMaybe<Scalars['Float']>;
  publishedVersion_exists?: InputMaybe<Scalars['Boolean']>;
  publishedVersion_gt?: InputMaybe<Scalars['Float']>;
  publishedVersion_gte?: InputMaybe<Scalars['Float']>;
  publishedVersion_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  publishedVersion_lt?: InputMaybe<Scalars['Float']>;
  publishedVersion_lte?: InputMaybe<Scalars['Float']>;
  publishedVersion_not?: InputMaybe<Scalars['Float']>;
  publishedVersion_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
};

/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/testimonial) */
export type CmsTestimonial = CmsEntry & {
  __typename?: 'CmsTestimonial';
  company?: Maybe<Scalars['String']>;
  contentfulMetadata: CmsContentfulMetadata;
  experience?: Maybe<Scalars['String']>;
  featured?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['String']>;
  groupName?: Maybe<Scalars['String']>;
  image?: Maybe<CmsAsset>;
  lastName?: Maybe<Scalars['String']>;
  linkedFrom?: Maybe<CmsTestimonialLinkingCollections>;
  program?: Maybe<CmsProgram>;
  quote?: Maybe<Scalars['String']>;
  region?: Maybe<CmsRegion>;
  sys: CmsSys;
  title?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  video?: Maybe<CmsAsset>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/testimonial) */
export type CmsTestimonialCompanyArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/testimonial) */
export type CmsTestimonialExperienceArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/testimonial) */
export type CmsTestimonialFeaturedArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/testimonial) */
export type CmsTestimonialFirstNameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/testimonial) */
export type CmsTestimonialGroupNameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/testimonial) */
export type CmsTestimonialImageArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/testimonial) */
export type CmsTestimonialLastNameArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/testimonial) */
export type CmsTestimonialLinkedFromArgs = {
  allowedLocales?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/testimonial) */
export type CmsTestimonialProgramArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/testimonial) */
export type CmsTestimonialQuoteArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/testimonial) */
export type CmsTestimonialRegionArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/testimonial) */
export type CmsTestimonialTitleArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/testimonial) */
export type CmsTestimonialTypeArgs = {
  locale?: InputMaybe<Scalars['String']>;
};


/** [See type definition](https://app.contentful.com/spaces/d5pti1xheuyu/content_types/testimonial) */
export type CmsTestimonialVideoArgs = {
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
};

export type CmsTestimonialCollection = {
  __typename?: 'CmsTestimonialCollection';
  items: Array<Maybe<CmsTestimonial>>;
  limit: Scalars['Int'];
  skip: Scalars['Int'];
  total: Scalars['Int'];
};

export type CmsTestimonialFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmsTestimonialFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmsTestimonialFilter>>>;
  company?: InputMaybe<Scalars['String']>;
  company_contains?: InputMaybe<Scalars['String']>;
  company_exists?: InputMaybe<Scalars['Boolean']>;
  company_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  company_not?: InputMaybe<Scalars['String']>;
  company_not_contains?: InputMaybe<Scalars['String']>;
  company_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  experience?: InputMaybe<Scalars['String']>;
  experience_contains?: InputMaybe<Scalars['String']>;
  experience_exists?: InputMaybe<Scalars['Boolean']>;
  experience_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  experience_not?: InputMaybe<Scalars['String']>;
  experience_not_contains?: InputMaybe<Scalars['String']>;
  experience_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  featured?: InputMaybe<Scalars['Boolean']>;
  featured_exists?: InputMaybe<Scalars['Boolean']>;
  featured_not?: InputMaybe<Scalars['Boolean']>;
  firstName?: InputMaybe<Scalars['String']>;
  firstName_contains?: InputMaybe<Scalars['String']>;
  firstName_exists?: InputMaybe<Scalars['Boolean']>;
  firstName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  firstName_not?: InputMaybe<Scalars['String']>;
  firstName_not_contains?: InputMaybe<Scalars['String']>;
  firstName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  groupName?: InputMaybe<Scalars['String']>;
  groupName_contains?: InputMaybe<Scalars['String']>;
  groupName_exists?: InputMaybe<Scalars['Boolean']>;
  groupName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  groupName_not?: InputMaybe<Scalars['String']>;
  groupName_not_contains?: InputMaybe<Scalars['String']>;
  groupName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  image_exists?: InputMaybe<Scalars['Boolean']>;
  lastName?: InputMaybe<Scalars['String']>;
  lastName_contains?: InputMaybe<Scalars['String']>;
  lastName_exists?: InputMaybe<Scalars['Boolean']>;
  lastName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  lastName_not?: InputMaybe<Scalars['String']>;
  lastName_not_contains?: InputMaybe<Scalars['String']>;
  lastName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  program?: InputMaybe<CmscfProgramNestedFilter>;
  program_exists?: InputMaybe<Scalars['Boolean']>;
  quote?: InputMaybe<Scalars['String']>;
  quote_contains?: InputMaybe<Scalars['String']>;
  quote_exists?: InputMaybe<Scalars['Boolean']>;
  quote_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  quote_not?: InputMaybe<Scalars['String']>;
  quote_not_contains?: InputMaybe<Scalars['String']>;
  quote_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  region?: InputMaybe<CmscfRegionNestedFilter>;
  region_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
  title?: InputMaybe<Scalars['String']>;
  title_contains?: InputMaybe<Scalars['String']>;
  title_exists?: InputMaybe<Scalars['Boolean']>;
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  title_not?: InputMaybe<Scalars['String']>;
  title_not_contains?: InputMaybe<Scalars['String']>;
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  type?: InputMaybe<Scalars['String']>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_exists?: InputMaybe<Scalars['Boolean']>;
  type_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  video_exists?: InputMaybe<Scalars['Boolean']>;
};

export type CmsTestimonialLinkingCollections = {
  __typename?: 'CmsTestimonialLinkingCollections';
  entries?: Maybe<CmsEntryCollection>;
};


export type CmsTestimonialLinkingCollectionsEntriesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  locale?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
};

export enum CmsTestimonialOrder {
  CompanyAsc = 'company_ASC',
  CompanyDesc = 'company_DESC',
  ExperienceAsc = 'experience_ASC',
  ExperienceDesc = 'experience_DESC',
  FeaturedAsc = 'featured_ASC',
  FeaturedDesc = 'featured_DESC',
  FirstNameAsc = 'firstName_ASC',
  FirstNameDesc = 'firstName_DESC',
  GroupNameAsc = 'groupName_ASC',
  GroupNameDesc = 'groupName_DESC',
  LastNameAsc = 'lastName_ASC',
  LastNameDesc = 'lastName_DESC',
  SysFirstPublishedAtAsc = 'sys_firstPublishedAt_ASC',
  SysFirstPublishedAtDesc = 'sys_firstPublishedAt_DESC',
  SysIdAsc = 'sys_id_ASC',
  SysIdDesc = 'sys_id_DESC',
  SysPublishedAtAsc = 'sys_publishedAt_ASC',
  SysPublishedAtDesc = 'sys_publishedAt_DESC',
  SysPublishedVersionAsc = 'sys_publishedVersion_ASC',
  SysPublishedVersionDesc = 'sys_publishedVersion_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC'
}

export type CmscfEventNestedFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmscfEventNestedFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmscfEventNestedFilter>>>;
  awardsAt?: InputMaybe<Scalars['CmsDateTime']>;
  awardsAt_exists?: InputMaybe<Scalars['Boolean']>;
  awardsAt_gt?: InputMaybe<Scalars['CmsDateTime']>;
  awardsAt_gte?: InputMaybe<Scalars['CmsDateTime']>;
  awardsAt_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  awardsAt_lt?: InputMaybe<Scalars['CmsDateTime']>;
  awardsAt_lte?: InputMaybe<Scalars['CmsDateTime']>;
  awardsAt_not?: InputMaybe<Scalars['CmsDateTime']>;
  awardsAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  calendarReleaseDate?: InputMaybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_exists?: InputMaybe<Scalars['Boolean']>;
  calendarReleaseDate_gt?: InputMaybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_gte?: InputMaybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  calendarReleaseDate_lt?: InputMaybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_lte?: InputMaybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_not?: InputMaybe<Scalars['CmsDateTime']>;
  calendarReleaseDate_not_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  endsAt?: InputMaybe<Scalars['CmsDateTime']>;
  endsAt_exists?: InputMaybe<Scalars['Boolean']>;
  endsAt_gt?: InputMaybe<Scalars['CmsDateTime']>;
  endsAt_gte?: InputMaybe<Scalars['CmsDateTime']>;
  endsAt_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  endsAt_lt?: InputMaybe<Scalars['CmsDateTime']>;
  endsAt_lte?: InputMaybe<Scalars['CmsDateTime']>;
  endsAt_not?: InputMaybe<Scalars['CmsDateTime']>;
  endsAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  id?: InputMaybe<Scalars['String']>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_exists?: InputMaybe<Scalars['Boolean']>;
  id_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id_not?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  kickoffVideoCaptions_exists?: InputMaybe<Scalars['Boolean']>;
  kickoffVideo_exists?: InputMaybe<Scalars['Boolean']>;
  notice_contains?: InputMaybe<Scalars['String']>;
  notice_exists?: InputMaybe<Scalars['Boolean']>;
  notice_not_contains?: InputMaybe<Scalars['String']>;
  participantRoleId?: InputMaybe<Scalars['String']>;
  participantRoleId_contains?: InputMaybe<Scalars['String']>;
  participantRoleId_exists?: InputMaybe<Scalars['Boolean']>;
  participantRoleId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  participantRoleId_not?: InputMaybe<Scalars['String']>;
  participantRoleId_not_contains?: InputMaybe<Scalars['String']>;
  participantRoleId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  postersCollection_exists?: InputMaybe<Scalars['Boolean']>;
  program_exists?: InputMaybe<Scalars['Boolean']>;
  registrationsCloseAt?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_exists?: InputMaybe<Scalars['Boolean']>;
  registrationsCloseAt_gt?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_gte?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  registrationsCloseAt_lt?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_lte?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_not?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsCloseAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  registrationsOpenAt?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_exists?: InputMaybe<Scalars['Boolean']>;
  registrationsOpenAt_gt?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_gte?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  registrationsOpenAt_lt?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_lte?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_not?: InputMaybe<Scalars['CmsDateTime']>;
  registrationsOpenAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  startsAt?: InputMaybe<Scalars['CmsDateTime']>;
  startsAt_exists?: InputMaybe<Scalars['Boolean']>;
  startsAt_gt?: InputMaybe<Scalars['CmsDateTime']>;
  startsAt_gte?: InputMaybe<Scalars['CmsDateTime']>;
  startsAt_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  startsAt_lt?: InputMaybe<Scalars['CmsDateTime']>;
  startsAt_lte?: InputMaybe<Scalars['CmsDateTime']>;
  startsAt_not?: InputMaybe<Scalars['CmsDateTime']>;
  startsAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['CmsDateTime']>>>;
  statEventCount?: InputMaybe<Scalars['Int']>;
  statEventCount_exists?: InputMaybe<Scalars['Boolean']>;
  statEventCount_gt?: InputMaybe<Scalars['Int']>;
  statEventCount_gte?: InputMaybe<Scalars['Int']>;
  statEventCount_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  statEventCount_lt?: InputMaybe<Scalars['Int']>;
  statEventCount_lte?: InputMaybe<Scalars['Int']>;
  statEventCount_not?: InputMaybe<Scalars['Int']>;
  statEventCount_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  statLowInterestContinuedCount?: InputMaybe<Scalars['Int']>;
  statLowInterestContinuedCount_exists?: InputMaybe<Scalars['Boolean']>;
  statLowInterestContinuedCount_gt?: InputMaybe<Scalars['Int']>;
  statLowInterestContinuedCount_gte?: InputMaybe<Scalars['Int']>;
  statLowInterestContinuedCount_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  statLowInterestContinuedCount_lt?: InputMaybe<Scalars['Int']>;
  statLowInterestContinuedCount_lte?: InputMaybe<Scalars['Int']>;
  statLowInterestContinuedCount_not?: InputMaybe<Scalars['Int']>;
  statLowInterestContinuedCount_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  statLowInterestCount?: InputMaybe<Scalars['Int']>;
  statLowInterestCount_exists?: InputMaybe<Scalars['Boolean']>;
  statLowInterestCount_gt?: InputMaybe<Scalars['Int']>;
  statLowInterestCount_gte?: InputMaybe<Scalars['Int']>;
  statLowInterestCount_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  statLowInterestCount_lt?: InputMaybe<Scalars['Int']>;
  statLowInterestCount_lte?: InputMaybe<Scalars['Int']>;
  statLowInterestCount_not?: InputMaybe<Scalars['Int']>;
  statLowInterestCount_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  statStudentCount?: InputMaybe<Scalars['Int']>;
  statStudentCount_exists?: InputMaybe<Scalars['Boolean']>;
  statStudentCount_gt?: InputMaybe<Scalars['Int']>;
  statStudentCount_gte?: InputMaybe<Scalars['Int']>;
  statStudentCount_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  statStudentCount_lt?: InputMaybe<Scalars['Int']>;
  statStudentCount_lte?: InputMaybe<Scalars['Int']>;
  statStudentCount_not?: InputMaybe<Scalars['Int']>;
  statStudentCount_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  subEventIds_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
  theme?: InputMaybe<Scalars['String']>;
  themeBackgroundsCollection_exists?: InputMaybe<Scalars['Boolean']>;
  themeLogoBackgroundsCollection_exists?: InputMaybe<Scalars['Boolean']>;
  theme_contains?: InputMaybe<Scalars['String']>;
  theme_exists?: InputMaybe<Scalars['Boolean']>;
  theme_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  theme_not?: InputMaybe<Scalars['String']>;
  theme_not_contains?: InputMaybe<Scalars['String']>;
  theme_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  title?: InputMaybe<Scalars['String']>;
  title_contains?: InputMaybe<Scalars['String']>;
  title_exists?: InputMaybe<Scalars['Boolean']>;
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  title_not?: InputMaybe<Scalars['String']>;
  title_not_contains?: InputMaybe<Scalars['String']>;
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmscfGlobalSponsorNestedFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmscfGlobalSponsorNestedFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmscfGlobalSponsorNestedFilter>>>;
  audio_exists?: InputMaybe<Scalars['Boolean']>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  darkLogo_exists?: InputMaybe<Scalars['Boolean']>;
  description?: InputMaybe<Scalars['String']>;
  description_contains?: InputMaybe<Scalars['String']>;
  description_exists?: InputMaybe<Scalars['Boolean']>;
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  description_not?: InputMaybe<Scalars['String']>;
  description_not_contains?: InputMaybe<Scalars['String']>;
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  instagramUsername?: InputMaybe<Scalars['String']>;
  instagramUsername_contains?: InputMaybe<Scalars['String']>;
  instagramUsername_exists?: InputMaybe<Scalars['Boolean']>;
  instagramUsername_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  instagramUsername_not?: InputMaybe<Scalars['String']>;
  instagramUsername_not_contains?: InputMaybe<Scalars['String']>;
  instagramUsername_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  link?: InputMaybe<Scalars['String']>;
  link_contains?: InputMaybe<Scalars['String']>;
  link_exists?: InputMaybe<Scalars['Boolean']>;
  link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  link_not?: InputMaybe<Scalars['String']>;
  link_not_contains?: InputMaybe<Scalars['String']>;
  link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  logo_exists?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_exists?: InputMaybe<Scalars['Boolean']>;
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name_not?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  perks?: InputMaybe<Scalars['String']>;
  perks_contains?: InputMaybe<Scalars['String']>;
  perks_exists?: InputMaybe<Scalars['Boolean']>;
  perks_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  perks_not?: InputMaybe<Scalars['String']>;
  perks_not_contains?: InputMaybe<Scalars['String']>;
  perks_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  shortDescription?: InputMaybe<Scalars['String']>;
  shortDescription_contains?: InputMaybe<Scalars['String']>;
  shortDescription_exists?: InputMaybe<Scalars['Boolean']>;
  shortDescription_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  shortDescription_not?: InputMaybe<Scalars['String']>;
  shortDescription_not_contains?: InputMaybe<Scalars['String']>;
  shortDescription_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  sys?: InputMaybe<CmsSysFilter>;
  twitterUsername?: InputMaybe<Scalars['String']>;
  twitterUsername_contains?: InputMaybe<Scalars['String']>;
  twitterUsername_exists?: InputMaybe<Scalars['Boolean']>;
  twitterUsername_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  twitterUsername_not?: InputMaybe<Scalars['String']>;
  twitterUsername_not_contains?: InputMaybe<Scalars['String']>;
  twitterUsername_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  type?: InputMaybe<Scalars['String']>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_exists?: InputMaybe<Scalars['Boolean']>;
  type_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmscfHiringCompanyNestedFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmscfHiringCompanyNestedFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmscfHiringCompanyNestedFilter>>>;
  alumniReferrals_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  alumniReferrals_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  alumniReferrals_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  alumniReferrals_exists?: InputMaybe<Scalars['Boolean']>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  description_contains?: InputMaybe<Scalars['String']>;
  description_exists?: InputMaybe<Scalars['Boolean']>;
  description_not_contains?: InputMaybe<Scalars['String']>;
  featured?: InputMaybe<Scalars['Boolean']>;
  featured_exists?: InputMaybe<Scalars['Boolean']>;
  featured_not?: InputMaybe<Scalars['Boolean']>;
  logo_exists?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_exists?: InputMaybe<Scalars['Boolean']>;
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name_not?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  relatedSponsor_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
  url?: InputMaybe<Scalars['String']>;
  url_contains?: InputMaybe<Scalars['String']>;
  url_exists?: InputMaybe<Scalars['Boolean']>;
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  url_not?: InputMaybe<Scalars['String']>;
  url_not_contains?: InputMaybe<Scalars['String']>;
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmscfLocalizationConfigNestedFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmscfLocalizationConfigNestedFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmscfLocalizationConfigNestedFilter>>>;
  contactDefaultType?: InputMaybe<Scalars['String']>;
  contactDefaultType_contains?: InputMaybe<Scalars['String']>;
  contactDefaultType_exists?: InputMaybe<Scalars['Boolean']>;
  contactDefaultType_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contactDefaultType_not?: InputMaybe<Scalars['String']>;
  contactDefaultType_not_contains?: InputMaybe<Scalars['String']>;
  contactDefaultType_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contactDefaultValue?: InputMaybe<Scalars['String']>;
  contactDefaultValue_contains?: InputMaybe<Scalars['String']>;
  contactDefaultValue_exists?: InputMaybe<Scalars['Boolean']>;
  contactDefaultValue_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contactDefaultValue_not?: InputMaybe<Scalars['String']>;
  contactDefaultValue_not_contains?: InputMaybe<Scalars['String']>;
  contactDefaultValue_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  countryName?: InputMaybe<Scalars['String']>;
  countryNameAdjective?: InputMaybe<Scalars['String']>;
  countryNameAdjective_contains?: InputMaybe<Scalars['String']>;
  countryNameAdjective_exists?: InputMaybe<Scalars['Boolean']>;
  countryNameAdjective_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameAdjective_not?: InputMaybe<Scalars['String']>;
  countryNameAdjective_not_contains?: InputMaybe<Scalars['String']>;
  countryNameAdjective_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameShort?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective_contains?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective_exists?: InputMaybe<Scalars['Boolean']>;
  countryNameShortAdjective_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameShortAdjective_not?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective_not_contains?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameShort_contains?: InputMaybe<Scalars['String']>;
  countryNameShort_exists?: InputMaybe<Scalars['Boolean']>;
  countryNameShort_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameShort_not?: InputMaybe<Scalars['String']>;
  countryNameShort_not_contains?: InputMaybe<Scalars['String']>;
  countryNameShort_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryName_contains?: InputMaybe<Scalars['String']>;
  countryName_exists?: InputMaybe<Scalars['Boolean']>;
  countryName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryName_not?: InputMaybe<Scalars['String']>;
  countryName_not_contains?: InputMaybe<Scalars['String']>;
  countryName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  currency?: InputMaybe<Scalars['String']>;
  currencySymbol?: InputMaybe<Scalars['String']>;
  currencySymbol_contains?: InputMaybe<Scalars['String']>;
  currencySymbol_exists?: InputMaybe<Scalars['Boolean']>;
  currencySymbol_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  currencySymbol_not?: InputMaybe<Scalars['String']>;
  currencySymbol_not_contains?: InputMaybe<Scalars['String']>;
  currencySymbol_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  currency_contains?: InputMaybe<Scalars['String']>;
  currency_exists?: InputMaybe<Scalars['Boolean']>;
  currency_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  currency_not?: InputMaybe<Scalars['String']>;
  currency_not_contains?: InputMaybe<Scalars['String']>;
  currency_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  e164CountryCode?: InputMaybe<Scalars['String']>;
  e164CountryCode_contains?: InputMaybe<Scalars['String']>;
  e164CountryCode_exists?: InputMaybe<Scalars['Boolean']>;
  e164CountryCode_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  e164CountryCode_not?: InputMaybe<Scalars['String']>;
  e164CountryCode_not_contains?: InputMaybe<Scalars['String']>;
  e164CountryCode_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id?: InputMaybe<Scalars['String']>;
  id_contains?: InputMaybe<Scalars['String']>;
  id_exists?: InputMaybe<Scalars['Boolean']>;
  id_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  id_not?: InputMaybe<Scalars['String']>;
  id_not_contains?: InputMaybe<Scalars['String']>;
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  iso3166Alpha2Code?: InputMaybe<Scalars['String']>;
  iso3166Alpha2Code_contains?: InputMaybe<Scalars['String']>;
  iso3166Alpha2Code_exists?: InputMaybe<Scalars['Boolean']>;
  iso3166Alpha2Code_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  iso3166Alpha2Code_not?: InputMaybe<Scalars['String']>;
  iso3166Alpha2Code_not_contains?: InputMaybe<Scalars['String']>;
  iso3166Alpha2Code_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  iso3166Alpha3Code?: InputMaybe<Scalars['String']>;
  iso3166Alpha3Code_contains?: InputMaybe<Scalars['String']>;
  iso3166Alpha3Code_exists?: InputMaybe<Scalars['Boolean']>;
  iso3166Alpha3Code_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  iso3166Alpha3Code_not?: InputMaybe<Scalars['String']>;
  iso3166Alpha3Code_not_contains?: InputMaybe<Scalars['String']>;
  iso3166Alpha3Code_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  locale?: InputMaybe<Scalars['String']>;
  locale_contains?: InputMaybe<Scalars['String']>;
  locale_exists?: InputMaybe<Scalars['Boolean']>;
  locale_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  locale_not?: InputMaybe<Scalars['String']>;
  locale_not_contains?: InputMaybe<Scalars['String']>;
  locale_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  messagingServices_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  messagingServices_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  messagingServices_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  messagingServices_exists?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_exists?: InputMaybe<Scalars['Boolean']>;
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name_not?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  paymentProviders_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  paymentProviders_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  paymentProviders_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  paymentProviders_exists?: InputMaybe<Scalars['Boolean']>;
  requiredEventRestrictionsCollection_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
  use24HourTime?: InputMaybe<Scalars['Boolean']>;
  use24HourTime_exists?: InputMaybe<Scalars['Boolean']>;
  use24HourTime_not?: InputMaybe<Scalars['Boolean']>;
};

export type CmscfProgramNestedFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmscfProgramNestedFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmscfProgramNestedFilter>>>;
  archived?: InputMaybe<Scalars['Boolean']>;
  archived_exists?: InputMaybe<Scalars['Boolean']>;
  archived_not?: InputMaybe<Scalars['Boolean']>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  description?: InputMaybe<Scalars['String']>;
  description_contains?: InputMaybe<Scalars['String']>;
  description_exists?: InputMaybe<Scalars['Boolean']>;
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  description_not?: InputMaybe<Scalars['String']>;
  description_not_contains?: InputMaybe<Scalars['String']>;
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  educationDetails_contains?: InputMaybe<Scalars['String']>;
  educationDetails_exists?: InputMaybe<Scalars['Boolean']>;
  educationDetails_not_contains?: InputMaybe<Scalars['String']>;
  eligibility_contains?: InputMaybe<Scalars['String']>;
  eligibility_exists?: InputMaybe<Scalars['Boolean']>;
  eligibility_not_contains?: InputMaybe<Scalars['String']>;
  logoWhite_exists?: InputMaybe<Scalars['Boolean']>;
  logo_exists?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_exists?: InputMaybe<Scalars['Boolean']>;
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name_not?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  postersCollection_exists?: InputMaybe<Scalars['Boolean']>;
  presentingSponsorsCollection_exists?: InputMaybe<Scalars['Boolean']>;
  shortDescription?: InputMaybe<Scalars['String']>;
  shortDescription_contains?: InputMaybe<Scalars['String']>;
  shortDescription_exists?: InputMaybe<Scalars['Boolean']>;
  shortDescription_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  shortDescription_not?: InputMaybe<Scalars['String']>;
  shortDescription_not_contains?: InputMaybe<Scalars['String']>;
  shortDescription_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  sponsorPerks_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
  type?: InputMaybe<Scalars['String']>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_exists?: InputMaybe<Scalars['Boolean']>;
  type_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  url?: InputMaybe<Scalars['String']>;
  url_contains?: InputMaybe<Scalars['String']>;
  url_exists?: InputMaybe<Scalars['Boolean']>;
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  url_not?: InputMaybe<Scalars['String']>;
  url_not_contains?: InputMaybe<Scalars['String']>;
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  virtual?: InputMaybe<Scalars['Boolean']>;
  virtual_exists?: InputMaybe<Scalars['Boolean']>;
  virtual_not?: InputMaybe<Scalars['Boolean']>;
  volunteerBlurb_contains?: InputMaybe<Scalars['String']>;
  volunteerBlurb_exists?: InputMaybe<Scalars['Boolean']>;
  volunteerBlurb_not_contains?: InputMaybe<Scalars['String']>;
  volunteerDetails_contains?: InputMaybe<Scalars['String']>;
  volunteerDetails_exists?: InputMaybe<Scalars['Boolean']>;
  volunteerDetails_not_contains?: InputMaybe<Scalars['String']>;
  volunteerPositions_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  volunteerPositions_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  volunteerPositions_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  volunteerPositions_exists?: InputMaybe<Scalars['Boolean']>;
  volunteerRecruitingResourcesCollection_exists?: InputMaybe<Scalars['Boolean']>;
  volunteerUrl?: InputMaybe<Scalars['String']>;
  volunteerUrl_contains?: InputMaybe<Scalars['String']>;
  volunteerUrl_exists?: InputMaybe<Scalars['Boolean']>;
  volunteerUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  volunteerUrl_not?: InputMaybe<Scalars['String']>;
  volunteerUrl_not_contains?: InputMaybe<Scalars['String']>;
  volunteerUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  webname?: InputMaybe<Scalars['String']>;
  webname_contains?: InputMaybe<Scalars['String']>;
  webname_exists?: InputMaybe<Scalars['Boolean']>;
  webname_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  webname_not?: InputMaybe<Scalars['String']>;
  webname_not_contains?: InputMaybe<Scalars['String']>;
  webname_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type CmscfRegionNestedFilter = {
  AND?: InputMaybe<Array<InputMaybe<CmscfRegionNestedFilter>>>;
  OR?: InputMaybe<Array<InputMaybe<CmscfRegionNestedFilter>>>;
  abbr?: InputMaybe<Scalars['String']>;
  abbr_contains?: InputMaybe<Scalars['String']>;
  abbr_exists?: InputMaybe<Scalars['Boolean']>;
  abbr_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  abbr_not?: InputMaybe<Scalars['String']>;
  abbr_not_contains?: InputMaybe<Scalars['String']>;
  abbr_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  accountingName?: InputMaybe<Scalars['String']>;
  accountingName_contains?: InputMaybe<Scalars['String']>;
  accountingName_exists?: InputMaybe<Scalars['Boolean']>;
  accountingName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  accountingName_not?: InputMaybe<Scalars['String']>;
  accountingName_not_contains?: InputMaybe<Scalars['String']>;
  accountingName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  aliases_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  aliases_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  aliases_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  aliases_exists?: InputMaybe<Scalars['Boolean']>;
  complication_exists?: InputMaybe<Scalars['Boolean']>;
  contentfulMetadata?: InputMaybe<CmsContentfulMetadataFilter>;
  countryName?: InputMaybe<Scalars['String']>;
  countryNameAdjective?: InputMaybe<Scalars['String']>;
  countryNameAdjective_contains?: InputMaybe<Scalars['String']>;
  countryNameAdjective_exists?: InputMaybe<Scalars['Boolean']>;
  countryNameAdjective_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameAdjective_not?: InputMaybe<Scalars['String']>;
  countryNameAdjective_not_contains?: InputMaybe<Scalars['String']>;
  countryNameAdjective_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameShort?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective_contains?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective_exists?: InputMaybe<Scalars['Boolean']>;
  countryNameShortAdjective_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameShortAdjective_not?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective_not_contains?: InputMaybe<Scalars['String']>;
  countryNameShortAdjective_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameShort_contains?: InputMaybe<Scalars['String']>;
  countryNameShort_exists?: InputMaybe<Scalars['Boolean']>;
  countryNameShort_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryNameShort_not?: InputMaybe<Scalars['String']>;
  countryNameShort_not_contains?: InputMaybe<Scalars['String']>;
  countryNameShort_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryName_contains?: InputMaybe<Scalars['String']>;
  countryName_exists?: InputMaybe<Scalars['Boolean']>;
  countryName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  countryName_not?: InputMaybe<Scalars['String']>;
  countryName_not_contains?: InputMaybe<Scalars['String']>;
  countryName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  currency?: InputMaybe<Scalars['String']>;
  currencySymbol?: InputMaybe<Scalars['String']>;
  currencySymbol_contains?: InputMaybe<Scalars['String']>;
  currencySymbol_exists?: InputMaybe<Scalars['Boolean']>;
  currencySymbol_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  currencySymbol_not?: InputMaybe<Scalars['String']>;
  currencySymbol_not_contains?: InputMaybe<Scalars['String']>;
  currencySymbol_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  currency_contains?: InputMaybe<Scalars['String']>;
  currency_exists?: InputMaybe<Scalars['Boolean']>;
  currency_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  currency_not?: InputMaybe<Scalars['String']>;
  currency_not_contains?: InputMaybe<Scalars['String']>;
  currency_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  e164CountryCode?: InputMaybe<Scalars['String']>;
  e164CountryCode_contains?: InputMaybe<Scalars['String']>;
  e164CountryCode_exists?: InputMaybe<Scalars['Boolean']>;
  e164CountryCode_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  e164CountryCode_not?: InputMaybe<Scalars['String']>;
  e164CountryCode_not_contains?: InputMaybe<Scalars['String']>;
  e164CountryCode_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  iso3166Alpha2Code?: InputMaybe<Scalars['String']>;
  iso3166Alpha2Code_contains?: InputMaybe<Scalars['String']>;
  iso3166Alpha2Code_exists?: InputMaybe<Scalars['Boolean']>;
  iso3166Alpha2Code_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  iso3166Alpha2Code_not?: InputMaybe<Scalars['String']>;
  iso3166Alpha2Code_not_contains?: InputMaybe<Scalars['String']>;
  iso3166Alpha2Code_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  iso3166Alpha3Code?: InputMaybe<Scalars['String']>;
  iso3166Alpha3Code_contains?: InputMaybe<Scalars['String']>;
  iso3166Alpha3Code_exists?: InputMaybe<Scalars['Boolean']>;
  iso3166Alpha3Code_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  iso3166Alpha3Code_not?: InputMaybe<Scalars['String']>;
  iso3166Alpha3Code_not_contains?: InputMaybe<Scalars['String']>;
  iso3166Alpha3Code_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  localizationConfig_exists?: InputMaybe<Scalars['Boolean']>;
  location_exists?: InputMaybe<Scalars['Boolean']>;
  location_within_circle?: InputMaybe<Scalars['CmsCircle']>;
  location_within_rectangle?: InputMaybe<Scalars['CmsRectangle']>;
  messagingServices_contains_all?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  messagingServices_contains_none?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  messagingServices_contains_some?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  messagingServices_exists?: InputMaybe<Scalars['Boolean']>;
  motto?: InputMaybe<Scalars['String']>;
  motto_contains?: InputMaybe<Scalars['String']>;
  motto_exists?: InputMaybe<Scalars['Boolean']>;
  motto_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  motto_not?: InputMaybe<Scalars['String']>;
  motto_not_contains?: InputMaybe<Scalars['String']>;
  motto_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name?: InputMaybe<Scalars['String']>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_exists?: InputMaybe<Scalars['Boolean']>;
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  name_not?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  paymentProvider?: InputMaybe<Scalars['String']>;
  paymentProvider_contains?: InputMaybe<Scalars['String']>;
  paymentProvider_exists?: InputMaybe<Scalars['Boolean']>;
  paymentProvider_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  paymentProvider_not?: InputMaybe<Scalars['String']>;
  paymentProvider_not_contains?: InputMaybe<Scalars['String']>;
  paymentProvider_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  primaryColor?: InputMaybe<Scalars['String']>;
  primaryColor_contains?: InputMaybe<Scalars['String']>;
  primaryColor_exists?: InputMaybe<Scalars['Boolean']>;
  primaryColor_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  primaryColor_not?: InputMaybe<Scalars['String']>;
  primaryColor_not_contains?: InputMaybe<Scalars['String']>;
  primaryColor_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  regionPhotosCollection_exists?: InputMaybe<Scalars['Boolean']>;
  skylinePhoto_exists?: InputMaybe<Scalars['Boolean']>;
  stickerLarge_exists?: InputMaybe<Scalars['Boolean']>;
  stickerSmall_exists?: InputMaybe<Scalars['Boolean']>;
  sys?: InputMaybe<CmsSysFilter>;
  timezone?: InputMaybe<Scalars['String']>;
  timezone_contains?: InputMaybe<Scalars['String']>;
  timezone_exists?: InputMaybe<Scalars['Boolean']>;
  timezone_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  timezone_not?: InputMaybe<Scalars['String']>;
  timezone_not_contains?: InputMaybe<Scalars['String']>;
  timezone_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  webname?: InputMaybe<Scalars['String']>;
  webname_contains?: InputMaybe<Scalars['String']>;
  webname_exists?: InputMaybe<Scalars['Boolean']>;
  webname_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  webname_not?: InputMaybe<Scalars['String']>;
  webname_not_contains?: InputMaybe<Scalars['String']>;
  webname_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type EmailMutation = {
  __typename?: 'EmailMutation';
  subscribe?: Maybe<Scalars['String']>;
};


export type EmailMutationSubscribeArgs = {
  email: Scalars['String'];
  fields?: InputMaybe<Scalars['EmailJSONObject']>;
  firstName?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  list: Scalars['String'];
};

export type EmailQuery = {
  __typename?: 'EmailQuery';
  status?: Maybe<Scalars['Boolean']>;
};

export type GeoGeoResult = {
  __typename?: 'GeoGeoResult';
  accuracy?: Maybe<Scalars['Float']>;
  cityName?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  countryName?: Maybe<Scalars['String']>;
  ip?: Maybe<Scalars['String']>;
  isp?: Maybe<Scalars['String']>;
  lat?: Maybe<Scalars['Float']>;
  lng?: Maybe<Scalars['Float']>;
  organization?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  subdivision?: Maybe<Scalars['String']>;
  subdivisionName?: Maybe<Scalars['String']>;
  tz?: Maybe<Scalars['String']>;
};

export type GeoQuery = {
  __typename?: 'GeoQuery';
  mine: GeoGeoResult;
};

export type GithubContributor = {
  __typename?: 'GithubContributor';
  account?: Maybe<AccountUser>;
  username: Scalars['String'];
};

export type GithubQuery = {
  __typename?: 'GithubQuery';
  contributors?: Maybe<Array<Maybe<GithubContributor>>>;
};


export type GithubQueryContributorsArgs = {
  branch?: InputMaybe<Scalars['String']>;
  owner?: InputMaybe<Scalars['String']>;
  path?: InputMaybe<Scalars['String']>;
  repository: Scalars['String'];
};

export type LabsEvent = {
  __typename?: 'LabsEvent';
  createdAt: Scalars['LabsDateTime'];
  emailTemplate: Scalars['String'];
  id: Scalars['String'];
  matchPreferenceSubmissionOpen: Scalars['Boolean'];
  matchingAlgorithm: Scalars['String'];
  mentorApplicationsEndAt: Scalars['LabsDateTime'];
  mentorApplicationsStartAt: Scalars['LabsDateTime'];
  name: Scalars['String'];
  slug: Scalars['String'];
  startsAt: Scalars['LabsDateTime'];
  studentApplicationsEndAt: Scalars['LabsDateTime'];
  studentApplicationsStartAt: Scalars['LabsDateTime'];
  updatedAt: Scalars['LabsDateTime'];
};

export type LabsGtLtEq = {
  eq?: InputMaybe<Scalars['Float']>;
  gt?: InputMaybe<Scalars['Float']>;
  gte?: InputMaybe<Scalars['Float']>;
  lt?: InputMaybe<Scalars['Float']>;
  lte?: InputMaybe<Scalars['Float']>;
};

export type LabsIdOrUsernameInput = {
  id?: InputMaybe<Scalars['String']>;
  username?: InputMaybe<Scalars['String']>;
};

export type LabsMatch = {
  __typename?: 'LabsMatch';
  project: LabsProject;
  score: Scalars['Float'];
};

export type LabsMentor = {
  __typename?: 'LabsMentor';
  account?: Maybe<AccountUser>;
  createdAt: Scalars['LabsDateTime'];
  email: Scalars['String'];
  event: LabsEvent;
  eventId: Scalars['String'];
  givenName: Scalars['String'];
  id: Scalars['String'];
  manager?: Maybe<AccountUser>;
  managerUsername?: Maybe<Scalars['String']>;
  maxWeeks: Scalars['Int'];
  name: Scalars['String'];
  profile: Scalars['LabsJSON'];
  profileField?: Maybe<Scalars['LabsJSON']>;
  projects: Array<LabsProject>;
  status: LabsMentorStatus;
  surname: Scalars['String'];
  updatedAt: Scalars['LabsDateTime'];
  username?: Maybe<Scalars['String']>;
};


export type LabsMentorProfileFieldArgs = {
  key: Scalars['String'];
};

export type LabsMentorApplyInput = {
  email: Scalars['String'];
  givenName: Scalars['String'];
  maxWeeks?: InputMaybe<Scalars['Int']>;
  profile?: InputMaybe<Scalars['LabsJSONObject']>;
  projects: Array<LabsProjectCreateInput>;
  surname: Scalars['String'];
};

export type LabsMentorCreateInput = {
  email: Scalars['String'];
  givenName: Scalars['String'];
  maxWeeks?: InputMaybe<Scalars['Int']>;
  profile?: InputMaybe<Scalars['LabsJSONObject']>;
  status?: InputMaybe<LabsMentorStatus>;
  surname: Scalars['String'];
  username?: InputMaybe<Scalars['String']>;
};

export type LabsMentorEditInput = {
  email?: InputMaybe<Scalars['String']>;
  givenName?: InputMaybe<Scalars['String']>;
  managerUsername?: InputMaybe<Scalars['String']>;
  maxWeeks?: InputMaybe<Scalars['Int']>;
  profile?: InputMaybe<Scalars['LabsJSONObject']>;
  status?: InputMaybe<LabsMentorStatus>;
  surname?: InputMaybe<Scalars['String']>;
  username?: InputMaybe<Scalars['String']>;
};

export type LabsMentorFilterInput = {
  assignedToManager?: InputMaybe<Scalars['String']>;
  inStatus?: InputMaybe<LabsMentorStatus>;
  studentWeeks?: InputMaybe<LabsGtLtEq>;
  track?: InputMaybe<LabsTrack>;
  weeksGte?: InputMaybe<Scalars['Float']>;
  withProjects?: InputMaybe<Scalars['Boolean']>;
};

export enum LabsMentorStatus {
  Accepted = 'ACCEPTED',
  Applied = 'APPLIED',
  Canceled = 'CANCELED',
  Rejected = 'REJECTED',
  Scheduled = 'SCHEDULED'
}

export type LabsMutation = {
  __typename?: 'LabsMutation';
  acceptStudentOffer: LabsStudent;
  addProjectMentor: LabsProject;
  addProjectStudent: LabsProject;
  applyMentor: LabsMentor;
  applyStudent: LabsStudent;
  cancelStudentApplication: LabsStudent;
  createMentor: LabsMentor;
  createProject: LabsProject;
  createStudent: LabsStudent;
  createSurvey: LabsSurvey;
  createSurveyOccurence: LabsSurveyOccurence;
  createTag: LabsTag;
  deleteMentor: Scalars['Boolean'];
  deleteProject: Scalars['Boolean'];
  deleteStudent: Scalars['Boolean'];
  deleteTag: Scalars['Boolean'];
  editMentor: LabsMentor;
  editProject: LabsProject;
  editStudent: LabsStudent;
  editTag: LabsTag;
  expressProjectPreferences?: Maybe<Array<LabsPreference>>;
  offerStudentAdmission: LabsStudent;
  rejectStudent: LabsStudent;
  removeProjectMentor: LabsProject;
  removeProjectStudent: LabsProject;
  resetStudentAdmissionOffer: LabsStudent;
  sendMentorEmail: Scalars['Float'];
  sendStudentEmail: Scalars['Float'];
  submitStudentRating: Scalars['Boolean'];
  submitTraining: Scalars['Boolean'];
  surveyRespond: Scalars['Boolean'];
};


export type LabsMutationAddProjectMentorArgs = {
  mentor: LabsIdOrUsernameInput;
  project: Scalars['String'];
};


export type LabsMutationAddProjectStudentArgs = {
  project: Scalars['String'];
  student: LabsIdOrUsernameInput;
};


export type LabsMutationApplyMentorArgs = {
  data: LabsMentorApplyInput;
};


export type LabsMutationApplyStudentArgs = {
  data: LabsStudentApplyInput;
};


export type LabsMutationCreateMentorArgs = {
  data: LabsMentorCreateInput;
};


export type LabsMutationCreateProjectArgs = {
  data: LabsProjectCreateInput;
  mentor?: InputMaybe<LabsIdOrUsernameInput>;
};


export type LabsMutationCreateStudentArgs = {
  data: LabsStudentCreateInput;
};


export type LabsMutationCreateSurveyArgs = {
  data: LabsSurveyCreateInput;
};


export type LabsMutationCreateSurveyOccurenceArgs = {
  dueAt: Scalars['LabsDateTime'];
  survey: Scalars['String'];
  visibleAt: Scalars['LabsDateTime'];
};


export type LabsMutationCreateTagArgs = {
  data: LabsTagCreateInput;
};


export type LabsMutationDeleteMentorArgs = {
  where: LabsIdOrUsernameInput;
};


export type LabsMutationDeleteProjectArgs = {
  project: Scalars['String'];
};


export type LabsMutationDeleteStudentArgs = {
  where: LabsIdOrUsernameInput;
};


export type LabsMutationDeleteTagArgs = {
  tag: Scalars['String'];
};


export type LabsMutationEditMentorArgs = {
  data: LabsMentorEditInput;
  where?: InputMaybe<LabsIdOrUsernameInput>;
};


export type LabsMutationEditProjectArgs = {
  data: LabsProjectEditInput;
  project: Scalars['String'];
};


export type LabsMutationEditStudentArgs = {
  data: LabsStudentEditInput;
  where?: InputMaybe<LabsIdOrUsernameInput>;
};


export type LabsMutationEditTagArgs = {
  data: LabsTagEditInput;
  tag: Scalars['String'];
};


export type LabsMutationExpressProjectPreferencesArgs = {
  projects: Array<Scalars['String']>;
};


export type LabsMutationOfferStudentAdmissionArgs = {
  where: LabsIdOrUsernameInput;
};


export type LabsMutationRejectStudentArgs = {
  reason?: InputMaybe<LabsRejectionReason>;
  where: LabsIdOrUsernameInput;
};


export type LabsMutationRemoveProjectMentorArgs = {
  mentor: LabsIdOrUsernameInput;
  project: Scalars['String'];
};


export type LabsMutationRemoveProjectStudentArgs = {
  project: Scalars['String'];
  student: LabsIdOrUsernameInput;
};


export type LabsMutationResetStudentAdmissionOfferArgs = {
  where: LabsIdOrUsernameInput;
};


export type LabsMutationSendMentorEmailArgs = {
  body: Scalars['String'];
  dryRun?: InputMaybe<Scalars['Boolean']>;
  subject: Scalars['String'];
  where?: InputMaybe<LabsMentorFilterInput>;
};


export type LabsMutationSendStudentEmailArgs = {
  body: Scalars['String'];
  dryRun?: InputMaybe<Scalars['Boolean']>;
  subject: Scalars['String'];
  where?: InputMaybe<LabsStudentFilterInput>;
};


export type LabsMutationSubmitStudentRatingArgs = {
  rating: Scalars['Int'];
  track: LabsTrack;
  where: LabsIdOrUsernameInput;
};


export type LabsMutationSubmitTrainingArgs = {
  tag: Scalars['String'];
  url: Scalars['String'];
};


export type LabsMutationSurveyRespondArgs = {
  occurrence: Scalars['String'];
  responses: Array<LabsSurveyRespondInput>;
};

export enum LabsPersonType {
  Mentor = 'MENTOR',
  Student = 'STUDENT'
}

export type LabsPreference = {
  __typename?: 'LabsPreference';
  project: LabsProject;
  ranking: Scalars['Float'];
};

export type LabsProject = {
  __typename?: 'LabsProject';
  createdAt: Scalars['LabsDateTime'];
  deliverables?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  event: LabsEvent;
  eventId: Scalars['String'];
  id: Scalars['String'];
  maxStudents: Scalars['Int'];
  mentors: Array<LabsMentor>;
  status: LabsProjectStatus;
  studentCount: Scalars['Float'];
  students: Array<LabsStudent>;
  tags: Array<LabsTag>;
  track: LabsTrack;
  updatedAt: Scalars['LabsDateTime'];
};

export type LabsProjectCreateInput = {
  deliverables?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  maxStudents?: InputMaybe<Scalars['Int']>;
  tags?: InputMaybe<Array<Scalars['String']>>;
  track: LabsTrack;
};

export type LabsProjectEditInput = {
  deliverables?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  maxStudents?: InputMaybe<Scalars['Int']>;
  status?: InputMaybe<LabsProjectStatus>;
  tags?: InputMaybe<Array<Scalars['String']>>;
  track?: InputMaybe<LabsTrack>;
};

export enum LabsProjectStatus {
  Accepted = 'ACCEPTED',
  Draft = 'DRAFT',
  Matched = 'MATCHED',
  Proposed = 'PROPOSED'
}

export type LabsQuery = {
  __typename?: 'LabsQuery';
  event?: Maybe<LabsEvent>;
  mentor?: Maybe<LabsMentor>;
  mentors: Array<LabsMentor>;
  nextStudentNeedingRating?: Maybe<LabsStudent>;
  projectMatches?: Maybe<Array<LabsMatch>>;
  projectPreferences?: Maybe<Array<LabsPreference>>;
  statAdmissionsStatus: Array<LabsStat>;
  student?: Maybe<LabsStudent>;
  students: Array<LabsStudent>;
  studentsTopRated: Array<LabsStudent>;
  survey: LabsSurvey;
  surveys: Array<LabsSurvey>;
  tags: Array<LabsTag>;
};


export type LabsQueryMentorArgs = {
  where?: InputMaybe<LabsIdOrUsernameInput>;
};


export type LabsQueryMentorsArgs = {
  skip?: InputMaybe<Scalars['Float']>;
  take?: InputMaybe<Scalars['Float']>;
  where?: InputMaybe<LabsMentorFilterInput>;
};


export type LabsQueryNextStudentNeedingRatingArgs = {
  track?: InputMaybe<LabsTrack>;
};


export type LabsQueryProjectMatchesArgs = {
  tags: Array<Scalars['String']>;
};


export type LabsQueryStatAdmissionsStatusArgs = {
  track?: InputMaybe<LabsTrack>;
};


export type LabsQueryStudentArgs = {
  where?: InputMaybe<LabsIdOrUsernameInput>;
};


export type LabsQueryStudentsArgs = {
  skip?: InputMaybe<Scalars['Float']>;
  take?: InputMaybe<Scalars['Float']>;
  where?: InputMaybe<LabsStudentFilterInput>;
};


export type LabsQueryStudentsTopRatedArgs = {
  includeRejected?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Float']>;
  take?: InputMaybe<Scalars['Float']>;
  track?: InputMaybe<LabsTrack>;
};


export type LabsQuerySurveyArgs = {
  survey: Scalars['String'];
};


export type LabsQueryTagsArgs = {
  type?: InputMaybe<LabsTagType>;
};

export enum LabsRejectionReason {
  ExperienceHigh = 'EXPERIENCE_HIGH',
  ExperienceLow = 'EXPERIENCE_LOW',
  Other = 'OTHER'
}

export type LabsStat = {
  __typename?: 'LabsStat';
  key: Scalars['String'];
  value: Scalars['Float'];
};

export type LabsStudent = {
  __typename?: 'LabsStudent';
  account?: Maybe<AccountUser>;
  admissionRatingAverage?: Maybe<Scalars['Float']>;
  admissionRatingCount?: Maybe<Scalars['Float']>;
  createdAt: Scalars['LabsDateTime'];
  email: Scalars['String'];
  event: LabsEvent;
  eventId: Scalars['String'];
  givenName: Scalars['String'];
  hasValidAdmissionOffer: Scalars['Boolean'];
  id: Scalars['String'];
  minHours: Scalars['Int'];
  name: Scalars['String'];
  offerDate?: Maybe<Scalars['LabsDateTime']>;
  partnerCode?: Maybe<Scalars['String']>;
  profile: Scalars['LabsJSON'];
  projectCount: Scalars['Float'];
  projectPreferences: Array<LabsPreference>;
  projects: Array<LabsProject>;
  rejectionReason?: Maybe<LabsRejectionReason>;
  requiredTagTraining: Array<LabsTag>;
  status: LabsStudentStatus;
  surname: Scalars['String'];
  surveyResponsesAbout: Array<LabsSurveyResponse>;
  tagTrainingSubmissions: Array<LabsTagTrainingSubmission>;
  tags: Array<LabsTag>;
  track: LabsTrack;
  trackRecommendation?: Maybe<Array<LabsTrackRecommendation>>;
  updatedAt: Scalars['LabsDateTime'];
  username: Scalars['String'];
  weeks: Scalars['Int'];
};

export type LabsStudentApplyInput = {
  email: Scalars['String'];
  givenName: Scalars['String'];
  minHours: Scalars['Int'];
  partnerCode?: InputMaybe<Scalars['String']>;
  profile?: InputMaybe<Scalars['LabsJSONObject']>;
  surname: Scalars['String'];
  tags?: InputMaybe<Array<Scalars['String']>>;
  track: LabsTrack;
};

export type LabsStudentCreateInput = {
  email: Scalars['String'];
  givenName: Scalars['String'];
  minHours: Scalars['Int'];
  partnerCode?: InputMaybe<Scalars['String']>;
  profile?: InputMaybe<Scalars['LabsJSONObject']>;
  status?: InputMaybe<LabsStudentStatus>;
  surname: Scalars['String'];
  tags?: InputMaybe<Array<Scalars['String']>>;
  track: LabsTrack;
  username: Scalars['String'];
  weeks?: InputMaybe<Scalars['Int']>;
};

export type LabsStudentEditInput = {
  email?: InputMaybe<Scalars['String']>;
  givenName?: InputMaybe<Scalars['String']>;
  minHours?: InputMaybe<Scalars['Int']>;
  partnerCode?: InputMaybe<Scalars['String']>;
  profile?: InputMaybe<Scalars['LabsJSONObject']>;
  status?: InputMaybe<LabsStudentStatus>;
  surname?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<Scalars['String']>>;
  track?: InputMaybe<LabsTrack>;
  username?: InputMaybe<Scalars['String']>;
  weeks?: InputMaybe<Scalars['Int']>;
};

export type LabsStudentFilterInput = {
  email?: InputMaybe<Scalars['String']>;
  givenName?: InputMaybe<Scalars['String']>;
  inStatus?: InputMaybe<LabsStudentStatus>;
  partnerCode?: InputMaybe<Scalars['String']>;
  surname?: InputMaybe<Scalars['String']>;
  track?: InputMaybe<LabsTrack>;
  weeks?: InputMaybe<LabsGtLtEq>;
  withProjects?: InputMaybe<Scalars['Boolean']>;
};

export enum LabsStudentStatus {
  Accepted = 'ACCEPTED',
  Applied = 'APPLIED',
  Canceled = 'CANCELED',
  Offered = 'OFFERED',
  Rejected = 'REJECTED',
  TrackChallenge = 'TRACK_CHALLENGE',
  TrackInterview = 'TRACK_INTERVIEW'
}

export type LabsSurvey = {
  __typename?: 'LabsSurvey';
  createdAt: Scalars['LabsDateTime'];
  event: LabsEvent;
  eventId: Scalars['String'];
  id: Scalars['String'];
  menteeCaution?: Maybe<Scalars['String']>;
  menteeSchema?: Maybe<Scalars['LabsJSONObject']>;
  menteeShare?: Maybe<Scalars['LabsJSONObject']>;
  menteeUi?: Maybe<Scalars['LabsJSONObject']>;
  mentorCaution?: Maybe<Scalars['String']>;
  mentorSchema?: Maybe<Scalars['LabsJSONObject']>;
  mentorShare?: Maybe<Scalars['LabsJSONObject']>;
  mentorUi?: Maybe<Scalars['LabsJSONObject']>;
  name: Scalars['String'];
  occurrences: Array<LabsSurveyOccurence>;
  peerCaution?: Maybe<Scalars['String']>;
  peerSchema?: Maybe<Scalars['LabsJSONObject']>;
  peerShare?: Maybe<Scalars['LabsJSONObject']>;
  peerUi?: Maybe<Scalars['LabsJSONObject']>;
  personType: LabsPersonType;
  projectCaution?: Maybe<Scalars['String']>;
  projectSchema?: Maybe<Scalars['LabsJSONObject']>;
  projectShare?: Maybe<Scalars['LabsJSONObject']>;
  projectUi?: Maybe<Scalars['LabsJSONObject']>;
  selfCaution?: Maybe<Scalars['String']>;
  selfSchema?: Maybe<Scalars['LabsJSONObject']>;
  selfUi?: Maybe<Scalars['LabsJSONObject']>;
  updatedAt: Scalars['LabsDateTime'];
};

export type LabsSurveyCreateInput = {
  menteeCaution?: InputMaybe<Scalars['String']>;
  menteeSchema?: InputMaybe<Scalars['LabsJSONObject']>;
  menteeShare?: InputMaybe<Scalars['LabsJSONObject']>;
  menteeUi?: InputMaybe<Scalars['LabsJSONObject']>;
  mentorCaution?: InputMaybe<Scalars['String']>;
  mentorSchema?: InputMaybe<Scalars['LabsJSONObject']>;
  mentorShare?: InputMaybe<Scalars['LabsJSONObject']>;
  mentorUi?: InputMaybe<Scalars['LabsJSONObject']>;
  name: Scalars['String'];
  peerCaution?: InputMaybe<Scalars['String']>;
  peerSchema?: InputMaybe<Scalars['LabsJSONObject']>;
  peerShare?: InputMaybe<Scalars['LabsJSONObject']>;
  peerUi?: InputMaybe<Scalars['LabsJSONObject']>;
  personType: LabsPersonType;
  projectCaution?: InputMaybe<Scalars['String']>;
  projectSchema?: InputMaybe<Scalars['LabsJSONObject']>;
  projectShare?: InputMaybe<Scalars['LabsJSONObject']>;
  projectUi?: InputMaybe<Scalars['LabsJSONObject']>;
  selfCaution?: InputMaybe<Scalars['String']>;
  selfSchema?: InputMaybe<Scalars['LabsJSONObject']>;
  selfUi?: InputMaybe<Scalars['LabsJSONObject']>;
  slug: Scalars['String'];
};

export type LabsSurveyOccurence = {
  __typename?: 'LabsSurveyOccurence';
  createdAt: Scalars['LabsDateTime'];
  dueAt: Scalars['LabsDateTime'];
  id: Scalars['String'];
  survey: LabsSurvey;
  surveyFeedback: Array<LabsSurveyResponse>;
  surveyId: Scalars['String'];
  surveyResponses: Array<LabsSurveyResponse>;
  updatedAt: Scalars['LabsDateTime'];
  visibleAt: Scalars['LabsDateTime'];
};


export type LabsSurveyOccurenceSurveyFeedbackArgs = {
  personType?: InputMaybe<Scalars['String']>;
};


export type LabsSurveyOccurenceSurveyResponsesArgs = {
  personType?: InputMaybe<Scalars['String']>;
};

export type LabsSurveyRespondInput = {
  mentor?: InputMaybe<Scalars['String']>;
  project?: InputMaybe<Scalars['String']>;
  response: Scalars['LabsJSONObject'];
  student?: InputMaybe<Scalars['String']>;
};

export type LabsSurveyResponse = {
  __typename?: 'LabsSurveyResponse';
  authorMentor?: Maybe<LabsMentor>;
  authorMentorId?: Maybe<Scalars['String']>;
  authorStudent?: Maybe<LabsStudent>;
  authorStudentId?: Maybe<Scalars['String']>;
  caution: Scalars['Float'];
  createdAt: Scalars['LabsDateTime'];
  id: Scalars['String'];
  mentor?: Maybe<LabsMentor>;
  mentorId?: Maybe<Scalars['String']>;
  project?: Maybe<LabsProject>;
  projectId?: Maybe<Scalars['String']>;
  response: Scalars['LabsJSONObject'];
  student?: Maybe<LabsStudent>;
  studentId?: Maybe<Scalars['String']>;
  surveyOccurence: LabsSurveyOccurence;
  surveyOccurenceId: Scalars['String'];
  updatedAt: Scalars['LabsDateTime'];
};

export type LabsTag = {
  __typename?: 'LabsTag';
  createdAt: Scalars['LabsDateTime'];
  id: Scalars['String'];
  mentorDisplayName: Scalars['String'];
  studentDisplayName: Scalars['String'];
  trainingLink?: Maybe<Scalars['String']>;
  type: LabsTagType;
  updatedAt: Scalars['LabsDateTime'];
};

export type LabsTagCreateInput = {
  id: Scalars['String'];
  mentorDisplayName: Scalars['String'];
  studentDisplayName: Scalars['String'];
  trainingLink?: InputMaybe<Scalars['String']>;
  type: LabsTagType;
};

export type LabsTagEditInput = {
  mentorDisplayName?: InputMaybe<Scalars['String']>;
  studentDisplayName?: InputMaybe<Scalars['String']>;
  trainingLink?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<LabsTagType>;
};

export type LabsTagTrainingSubmission = {
  __typename?: 'LabsTagTrainingSubmission';
  createdAt: Scalars['LabsDateTime'];
  id: Scalars['String'];
  student: LabsStudent;
  tag: LabsTag;
  updatedAt: Scalars['LabsDateTime'];
  url: Scalars['String'];
};

export enum LabsTagType {
  Interest = 'INTEREST',
  Technology = 'TECHNOLOGY'
}

export enum LabsTrack {
  Advanced = 'ADVANCED',
  Beginner = 'BEGINNER',
  Intermediate = 'INTERMEDIATE'
}

export type LabsTrackRecommendation = {
  __typename?: 'LabsTrackRecommendation';
  track: LabsTrack;
  weight: Scalars['Float'];
};

export type Mutation = {
  __typename?: 'Mutation';
  account: AccountMutation;
  advisor: AdvisorMutation;
  blog: BlogRootMutation;
  calendar: CalendarMutation;
  clear: ClearMutation;
  email: EmailMutation;
  labs: LabsMutation;
  showcase: ShowcaseMutation;
};

export type Query = {
  __typename?: 'Query';
  account: AccountQuery;
  advisor: AdvisorQuery;
  blog: BlogRootQuery;
  calendar: CalendarQuery;
  clear: ClearQuery;
  cms: CmsQuery;
  email: EmailQuery;
  geo: GeoQuery;
  github: GithubQuery;
  labs: LabsQuery;
  showcase: ShowcaseQuery;
  showyourwork: ShowyourworkQuery;
  twitch: TwitchQuery;
};

export type ShowcaseAddReactionsInput = {
  count: Scalars['Float'];
  type: ShowcaseReactionType;
};

export type ShowcaseAward = {
  __typename?: 'ShowcaseAward';
  createdAt: Scalars['ShowcaseDateTime'];
  id: Scalars['String'];
  info?: Maybe<CmsAward>;
  modifier?: Maybe<Scalars['String']>;
  project: ShowcaseProject;
  type: Scalars['String'];
  updatedAt: Scalars['ShowcaseDateTime'];
};

export type ShowcaseCreateJudgingPoolInput = {
  eventGroupId?: InputMaybe<Scalars['String']>;
  eventId?: InputMaybe<Scalars['String']>;
  judgingCriteria: Array<ShowcaseJudgingCriteriaInput>;
  name: Scalars['String'];
  programId?: InputMaybe<Scalars['String']>;
  regionId?: InputMaybe<Scalars['String']>;
};

export type ShowcaseCreateProjectInput = {
  challengesEncountered?: InputMaybe<Scalars['String']>;
  codeLink?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  priorExperience?: InputMaybe<Scalars['String']>;
  type: ShowcaseProjectType;
  viewLink?: InputMaybe<Scalars['String']>;
};

export type ShowcaseEditPhotoInput = {
  eventGroupId?: InputMaybe<Scalars['String']>;
  eventId?: InputMaybe<Scalars['String']>;
  programId?: InputMaybe<Scalars['String']>;
  regionId?: InputMaybe<Scalars['String']>;
  thanks?: InputMaybe<Scalars['String']>;
};

export type ShowcaseEditProjectInput = {
  challengesEncountered?: InputMaybe<Scalars['String']>;
  codeLink?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  priorExperience?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<Scalars['String']>>;
  type?: InputMaybe<ShowcaseProjectType>;
  viewLink?: InputMaybe<Scalars['String']>;
};

export type ShowcaseImportPhotoInput = {
  createdAt?: InputMaybe<Scalars['ShowcaseDateTime']>;
  eventGroupId?: InputMaybe<Scalars['String']>;
  eventId: Scalars['String'];
  programId?: InputMaybe<Scalars['String']>;
  regionId?: InputMaybe<Scalars['String']>;
  thanks?: InputMaybe<Scalars['String']>;
  url: Scalars['String'];
  urlLarge: Scalars['String'];
  urlMedium: Scalars['String'];
  urlSmall: Scalars['String'];
};

export type ShowcaseJudgement = {
  __typename?: 'ShowcaseJudgement';
  createdAt: Scalars['ShowcaseDateTime'];
  id: Scalars['String'];
  judgingCriteria: ShowcaseJudgingCriteria;
  judgingPool: ShowcaseJudgingPool;
  updatedAt: Scalars['ShowcaseDateTime'];
  username: Scalars['String'];
  value: Scalars['Float'];
};

export type ShowcaseJudgingCriteria = {
  __typename?: 'ShowcaseJudgingCriteria';
  createdAt: Scalars['ShowcaseDateTime'];
  id: Scalars['String'];
  judgingPool: ShowcaseJudgingPool;
  name: Scalars['String'];
  updatedAt: Scalars['ShowcaseDateTime'];
  weight: Scalars['Float'];
};

export type ShowcaseJudgingCriteriaInput = {
  name: Scalars['String'];
  weight: Scalars['Float'];
};

export type ShowcaseJudgingPool = {
  __typename?: 'ShowcaseJudgingPool';
  createdAt: Scalars['ShowcaseDateTime'];
  eventGroupId?: Maybe<Scalars['String']>;
  eventId?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  judgingCriteria: Array<ShowcaseJudgingCriteria>;
  name: Scalars['String'];
  programId?: Maybe<Scalars['String']>;
  projects: Array<ShowcaseProject>;
  regionId?: Maybe<Scalars['String']>;
  results: Array<ShowcaseJudgingResult>;
  updatedAt: Scalars['ShowcaseDateTime'];
};


export type ShowcaseJudgingPoolProjectsArgs = {
  needsJudging?: InputMaybe<Scalars['Boolean']>;
  take?: InputMaybe<Scalars['Float']>;
};

export type ShowcaseJudgingResult = {
  __typename?: 'ShowcaseJudgingResult';
  count: Scalars['Float'];
  project: ShowcaseProject;
  subScores: Array<ShowcaseJudgingResultSubValue>;
  value: Scalars['Float'];
};

export type ShowcaseJudgingResultSubValue = {
  __typename?: 'ShowcaseJudgingResultSubValue';
  count: Scalars['Float'];
  judgingCriteria: ShowcaseJudgingCriteria;
  value: Scalars['Float'];
};

export type ShowcaseMedia = {
  __typename?: 'ShowcaseMedia';
  createdAt: Scalars['ShowcaseDateTime'];
  download?: Maybe<Scalars['String']>;
  featured: Scalars['Boolean'];
  id: Scalars['String'];
  image: Scalars['String'];
  project: ShowcaseProject;
  stream?: Maybe<Scalars['String']>;
  topic: ShowcaseMediaTopic;
  type: ShowcaseMediaType;
  updatedAt: Scalars['ShowcaseDateTime'];
};


export type ShowcaseMediaImageArgs = {
  fillBlur?: InputMaybe<Scalars['Boolean']>;
  height?: InputMaybe<Scalars['Float']>;
  strategy?: InputMaybe<ShowcaseResizeStrategy>;
  width?: InputMaybe<Scalars['Float']>;
};

export enum ShowcaseMediaFilterType {
  Any = 'ANY',
  Audios = 'AUDIOS',
  Both = 'BOTH',
  Images = 'IMAGES',
  Videos = 'VIDEOS'
}

export enum ShowcaseMediaTopic {
  Demo = 'DEMO',
  Judges = 'JUDGES',
  Presentation = 'PRESENTATION',
  Team = 'TEAM'
}

export enum ShowcaseMediaType {
  Audio = 'AUDIO',
  Image = 'IMAGE',
  Video = 'VIDEO'
}

export type ShowcaseMember = {
  __typename?: 'ShowcaseMember';
  account?: Maybe<AccountUser>;
  createdAt: Scalars['ShowcaseDateTime'];
  project: ShowcaseProject;
  updatedAt: Scalars['ShowcaseDateTime'];
  username: Scalars['String'];
};

export type ShowcaseMetadata = {
  __typename?: 'ShowcaseMetadata';
  createdAt: Scalars['ShowcaseDateTime'];
  key: Scalars['String'];
  project: ShowcaseProject;
  updatedAt: Scalars['ShowcaseDateTime'];
  value: Scalars['String'];
  visibility: ShowcaseMetadataVisibility;
};

export enum ShowcaseMetadataVisibility {
  Admin = 'ADMIN',
  Private = 'PRIVATE',
  Public = 'PUBLIC'
}

export type ShowcaseMetadataWhere = {
  key: Scalars['String'];
  value: Scalars['String'];
};

export type ShowcaseMetricAggregate = {
  __typename?: 'ShowcaseMetricAggregate';
  project: ShowcaseProject;
  value?: Maybe<Scalars['Float']>;
};

export type ShowcaseMetricTimeSeries = {
  __typename?: 'ShowcaseMetricTimeSeries';
  time: Scalars['ShowcaseDateTime'];
  value: Scalars['Float'];
};

export type ShowcaseMutation = {
  __typename?: 'ShowcaseMutation';
  addAward: ShowcaseAward;
  addMember: ShowcaseMember;
  addReactions: Scalars['Boolean'];
  createJudgingPool: ShowcaseJudgingPool;
  createProject: ShowcaseProject;
  deleteMedia: Scalars['Boolean'];
  deletePhoto: Scalars['Boolean'];
  deleteProject: Scalars['Boolean'];
  editPhoto: ShowcasePhoto;
  editProject: ShowcaseProject;
  featureMedia: Scalars['Boolean'];
  featurePhoto: Scalars['Boolean'];
  featureProject: Scalars['Boolean'];
  importPhotos: Scalars['Boolean'];
  judgeProject: Scalars['Boolean'];
  peerJudgeProjects: Scalars['Boolean'];
  recordMetric: Scalars['Boolean'];
  removeAward: Scalars['Boolean'];
  removeJudgingPool: Scalars['Boolean'];
  removeMember: Scalars['Boolean'];
  setMetadata: Scalars['Boolean'];
  unsetMetadata: Scalars['Boolean'];
  uploadMedia: ShowcaseMedia;
  uploadPhoto: ShowcasePhoto;
};


export type ShowcaseMutationAddAwardArgs = {
  modifier?: InputMaybe<Scalars['String']>;
  project: Scalars['String'];
  type: Scalars['String'];
};


export type ShowcaseMutationAddMemberArgs = {
  project: Scalars['String'];
  username: Scalars['String'];
};


export type ShowcaseMutationAddReactionsArgs = {
  id: Scalars['String'];
  reactions: Array<ShowcaseAddReactionsInput>;
};


export type ShowcaseMutationCreateJudgingPoolArgs = {
  judgingPool: ShowcaseCreateJudgingPoolInput;
};


export type ShowcaseMutationCreateProjectArgs = {
  project: ShowcaseCreateProjectInput;
};


export type ShowcaseMutationDeleteMediaArgs = {
  id: Scalars['String'];
};


export type ShowcaseMutationDeletePhotoArgs = {
  id: Scalars['String'];
};


export type ShowcaseMutationDeleteProjectArgs = {
  id: Scalars['String'];
};


export type ShowcaseMutationEditPhotoArgs = {
  data: ShowcaseEditPhotoInput;
  id: Scalars['String'];
};


export type ShowcaseMutationEditProjectArgs = {
  id: Scalars['String'];
  project: ShowcaseEditProjectInput;
};


export type ShowcaseMutationFeatureMediaArgs = {
  id: Scalars['String'];
};


export type ShowcaseMutationFeaturePhotoArgs = {
  id: Scalars['String'];
  isFeatured?: InputMaybe<Scalars['Boolean']>;
};


export type ShowcaseMutationFeatureProjectArgs = {
  id: Scalars['String'];
  isFeatured?: InputMaybe<Scalars['Boolean']>;
};


export type ShowcaseMutationImportPhotosArgs = {
  photos: Array<ShowcaseImportPhotoInput>;
};


export type ShowcaseMutationJudgeProjectArgs = {
  judgingCriteria: Scalars['String'];
  project: Scalars['String'];
  value: Scalars['Float'];
};


export type ShowcaseMutationPeerJudgeProjectsArgs = {
  eventId: Scalars['String'];
  projects: Array<Scalars['String']>;
};


export type ShowcaseMutationRecordMetricArgs = {
  member: Scalars['String'];
  name: Scalars['String'];
  project: Scalars['String'];
  value: Scalars['Float'];
};


export type ShowcaseMutationRemoveAwardArgs = {
  id: Scalars['String'];
};


export type ShowcaseMutationRemoveJudgingPoolArgs = {
  judgingPool: Scalars['String'];
};


export type ShowcaseMutationRemoveMemberArgs = {
  project: Scalars['String'];
  username: Scalars['String'];
};


export type ShowcaseMutationSetMetadataArgs = {
  key: Scalars['String'];
  project: Scalars['String'];
  value: Scalars['String'];
  visibility: ShowcaseMetadataVisibility;
};


export type ShowcaseMutationUnsetMetadataArgs = {
  key: Scalars['String'];
  project: Scalars['String'];
};


export type ShowcaseMutationUploadMediaArgs = {
  project: Scalars['String'];
  topic: ShowcaseMediaTopic;
  type: ShowcaseMediaType;
  upload: Scalars['Upload'];
};


export type ShowcaseMutationUploadPhotoArgs = {
  eventGroupId?: InputMaybe<Scalars['String']>;
  eventId: Scalars['String'];
  programId?: InputMaybe<Scalars['String']>;
  regionId?: InputMaybe<Scalars['String']>;
  thanks?: InputMaybe<Scalars['String']>;
  upload: Scalars['Upload'];
};

export type ShowcasePeerJudgement = {
  __typename?: 'ShowcasePeerJudgement';
  createdAt: Scalars['ShowcaseDateTime'];
  eventId: Scalars['String'];
  id: Scalars['String'];
  project: ShowcaseProject;
  updatedAt: Scalars['ShowcaseDateTime'];
  username: Scalars['String'];
};

export type ShowcasePhoto = {
  __typename?: 'ShowcasePhoto';
  createdAt: Scalars['ShowcaseDateTime'];
  eventGroup?: Maybe<CmsEvent>;
  eventGroupId?: Maybe<Scalars['String']>;
  eventId: Scalars['String'];
  featured: Scalars['Boolean'];
  id: Scalars['String'];
  program?: Maybe<CmsProgram>;
  programId: Scalars['String'];
  region?: Maybe<CmsRegion>;
  regionId?: Maybe<Scalars['String']>;
  thanks?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ShowcaseDateTime'];
  url: Scalars['String'];
  urlLarge?: Maybe<Scalars['String']>;
  urlMedium?: Maybe<Scalars['String']>;
  urlSmall?: Maybe<Scalars['String']>;
};

export enum ShowcasePhotoOrderByArg {
  Newest = 'NEWEST',
  Oldest = 'OLDEST',
  Random = 'RANDOM'
}

export type ShowcasePhotosWhere = {
  event?: InputMaybe<Scalars['String']>;
  eventGroup?: InputMaybe<Scalars['String']>;
  featured?: InputMaybe<Scalars['Boolean']>;
  program?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<Scalars['String']>;
};

export type ShowcaseProject = {
  __typename?: 'ShowcaseProject';
  awards?: Maybe<Array<ShowcaseAward>>;
  canAdmin: Scalars['Boolean'];
  canEdit: Scalars['Boolean'];
  challengesEncountered?: Maybe<Scalars['String']>;
  codeLink?: Maybe<Scalars['String']>;
  createdAt: Scalars['ShowcaseDateTime'];
  description?: Maybe<Scalars['String']>;
  eventGroup?: Maybe<CmsEvent>;
  eventGroupId?: Maybe<Scalars['String']>;
  eventId: Scalars['String'];
  featured: Scalars['Boolean'];
  id: Scalars['String'];
  media?: Maybe<Array<ShowcaseMedia>>;
  members?: Maybe<Array<ShowcaseMember>>;
  metadata?: Maybe<Array<ShowcaseMetadata>>;
  metadataValue?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  peerJudgements?: Maybe<Array<ShowcasePeerJudgement>>;
  priorExperience?: Maybe<Scalars['String']>;
  program?: Maybe<CmsProgram>;
  programId: Scalars['String'];
  reactionCounts: Array<ShowcaseReactionCount>;
  region?: Maybe<CmsRegion>;
  regionId?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  tags: Array<Scalars['String']>;
  type: ShowcaseProjectType;
  updatedAt: Scalars['ShowcaseDateTime'];
  userJudgement?: Maybe<Array<ShowcaseJudgement>>;
  viewLink?: Maybe<Scalars['String']>;
};


export type ShowcaseProjectMediaArgs = {
  take?: InputMaybe<Scalars['Float']>;
  topics?: InputMaybe<Array<ShowcaseMediaTopic>>;
  type?: InputMaybe<ShowcaseMediaType>;
};


export type ShowcaseProjectMetadataValueArgs = {
  key: Scalars['String'];
};

export enum ShowcaseProjectOrderByArg {
  Newest = 'NEWEST',
  Oldest = 'OLDEST'
}

export enum ShowcaseProjectType {
  App = 'APP',
  Bot = 'BOT',
  Game = 'GAME',
  Hardware = 'HARDWARE',
  Library = 'LIBRARY',
  Other = 'OTHER',
  Vr = 'VR',
  Website = 'WEBSITE'
}

export type ShowcaseProjectsWhere = {
  awarded?: InputMaybe<Scalars['Boolean']>;
  contains?: InputMaybe<Scalars['String']>;
  event?: InputMaybe<Scalars['String']>;
  eventGroup?: InputMaybe<Scalars['String']>;
  featured?: InputMaybe<Scalars['Boolean']>;
  media?: InputMaybe<ShowcaseMediaFilterType>;
  mediaTopic?: InputMaybe<ShowcaseMediaTopic>;
  metadata?: InputMaybe<Array<ShowcaseMetadataWhere>>;
  program?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<Scalars['String']>;
  tags?: InputMaybe<Array<Scalars['String']>>;
  type?: InputMaybe<ShowcaseProjectType>;
  user?: InputMaybe<Scalars['String']>;
};

export type ShowcaseQuery = {
  __typename?: 'ShowcaseQuery';
  averageMemberRecentResponses: Array<ShowcaseMetricAggregate>;
  judgingPools: Array<ShowcaseJudgingPool>;
  membersOverTime: Array<ShowcaseMetricTimeSeries>;
  myJudgingPool: ShowcaseJudgingPool;
  photo: ShowcasePhoto;
  photos: Array<ShowcasePhoto>;
  presentationReadyPercent: Scalars['Float'];
  project: ShowcaseProject;
  projects: Array<ShowcaseProject>;
  projectsOverTime: Array<ShowcaseMetricTimeSeries>;
};


export type ShowcaseQueryAverageMemberRecentResponsesArgs = {
  name: Scalars['String'];
  projectWhere?: InputMaybe<ShowcaseProjectsWhere>;
};


export type ShowcaseQueryMembersOverTimeArgs = {
  where: ShowcaseProjectsWhere;
};


export type ShowcaseQueryPhotoArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type ShowcaseQueryPhotosArgs = {
  orderBy?: InputMaybe<ShowcasePhotoOrderByArg>;
  skip?: InputMaybe<Scalars['Float']>;
  take?: InputMaybe<Scalars['Float']>;
  where?: InputMaybe<ShowcasePhotosWhere>;
};


export type ShowcaseQueryPresentationReadyPercentArgs = {
  where: ShowcaseProjectsWhere;
};


export type ShowcaseQueryProjectArgs = {
  id?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
};


export type ShowcaseQueryProjectsArgs = {
  orderBy?: InputMaybe<ShowcaseProjectOrderByArg>;
  skip?: InputMaybe<Scalars['Float']>;
  take?: InputMaybe<Scalars['Float']>;
  where?: InputMaybe<ShowcaseProjectsWhere>;
};


export type ShowcaseQueryProjectsOverTimeArgs = {
  where: ShowcaseProjectsWhere;
};

export type ShowcaseReactionCount = {
  __typename?: 'ShowcaseReactionCount';
  count: Scalars['Float'];
  type: ShowcaseReactionType;
};

export enum ShowcaseReactionType {
  Clap = 'CLAP',
  Grin = 'GRIN',
  Heart = 'HEART',
  Upvote = 'UPVOTE'
}

export enum ShowcaseResizeStrategy {
  Clamp = 'CLAMP',
  Clip = 'CLIP',
  Crop = 'CROP',
  Facearea = 'FACEAREA',
  Fill = 'FILL',
  Fillmax = 'FILLMAX',
  Max = 'MAX',
  Min = 'MIN',
  Scale = 'SCALE'
}

export type ShowyourworkDiscordMessage = {
  __typename?: 'ShowyourworkDiscordMessage';
  author?: Maybe<AccountUser>;
  createdAt: Scalars['ShowyourworkDateTime'];
  id: Scalars['String'];
  imageUrl: Scalars['String'];
  text: Scalars['String'];
  userId: Scalars['String'];
  videoUrl?: Maybe<Scalars['String']>;
};


export type ShowyourworkDiscordMessageImageUrlArgs = {
  fillBlur?: InputMaybe<Scalars['Boolean']>;
  height?: InputMaybe<Scalars['Float']>;
  strategy?: InputMaybe<ShowyourworkResizeStrategy>;
  width?: InputMaybe<Scalars['Float']>;
};

export type ShowyourworkQuery = {
  __typename?: 'ShowyourworkQuery';
  messages: Array<ShowyourworkDiscordMessage>;
};


export type ShowyourworkQueryMessagesArgs = {
  skip?: InputMaybe<Scalars['Float']>;
  take?: InputMaybe<Scalars['Float']>;
};

export enum ShowyourworkResizeStrategy {
  Clamp = 'CLAMP',
  Clip = 'CLIP',
  Crop = 'CROP',
  Facearea = 'FACEAREA',
  Fill = 'FILL',
  Fillmax = 'FILLMAX',
  Max = 'MAX',
  Min = 'MIN',
  Scale = 'SCALE'
}

export type Subscription = {
  __typename?: 'Subscription';
  memberAdded: ShowcaseMember;
  memberRemoved: ShowcaseMember;
  projectCreated: ShowcaseProject;
  projectDeleted: ShowcaseProject;
  projectEdited: ShowcaseProject;
  userBadgeUpdate: AccountSubscriptionBadge;
  userCultSelection: AccountSubscriptionUser;
  userDisplayedBadgesUpdate: AccountSubscriptionUser;
  userProfilePictureUpdate: AccountSubscriptionUser;
  userRoleUpdate: AccountSubscriptionUser;
  userUnlinkDiscord: Scalars['String'];
  userUpdate: AccountSubscriptionUser;
};


export type SubscriptionMemberAddedArgs = {
  where?: InputMaybe<ShowcaseProjectsWhere>;
};


export type SubscriptionMemberRemovedArgs = {
  where?: InputMaybe<ShowcaseProjectsWhere>;
};


export type SubscriptionProjectCreatedArgs = {
  where?: InputMaybe<ShowcaseProjectsWhere>;
};


export type SubscriptionProjectDeletedArgs = {
  where?: InputMaybe<ShowcaseProjectsWhere>;
};


export type SubscriptionProjectEditedArgs = {
  where?: InputMaybe<ShowcaseProjectsWhere>;
};

export type TwitchLiveStatus = {
  __typename?: 'TwitchLiveStatus';
  startedAt: Scalars['String'];
  thumbnail: Scalars['String'];
  title: Scalars['String'];
  url: Scalars['String'];
  username: Scalars['String'];
  viewerCount: Scalars['Int'];
};


export type TwitchLiveStatusThumbnailArgs = {
  height: Scalars['Int'];
  width: Scalars['Int'];
};

export type TwitchQuery = {
  __typename?: 'TwitchQuery';
  live?: Maybe<TwitchLiveStatus>;
};

export type WithIndex<TObject> = TObject & Record<string, any>;
export type ResolversObject<TObject> = WithIndex<TObject>;

export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string | ((fieldNode: FieldNode) => SelectionSetNode);
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | ResolverWithResolve<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping of union types */
export type ResolversUnionTypes = ResolversObject<{
  BlogContentRevisionUnion: ( BlogPage ) | ( BlogPost );
  BlogMenuItemObjectUnion: ( BlogCategory ) | ( BlogPage ) | ( BlogPost ) | ( BlogTag );
}>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = ResolversObject<{
  AccountBadge: ResolverTypeWrapper<AccountBadge>;
  AccountBadgeInput: AccountBadgeInput;
  AccountDiscordInformation: ResolverTypeWrapper<AccountDiscordInformation>;
  AccountDiscordTokenInfoInput: AccountDiscordTokenInfoInput;
  AccountDisplayedBadgeInput: AccountDisplayedBadgeInput;
  AccountMutation: ResolverTypeWrapper<AccountMutation>;
  AccountPizzaOrTurtle: AccountPizzaOrTurtle;
  AccountQuery: ResolverTypeWrapper<AccountQuery>;
  AccountRole: ResolverTypeWrapper<AccountRole>;
  AccountSubscriptionBadge: ResolverTypeWrapper<AccountSubscriptionBadge>;
  AccountSubscriptionUser: ResolverTypeWrapper<AccountSubscriptionUser>;
  AccountUpdateUserInput: AccountUpdateUserInput;
  AccountUser: ResolverTypeWrapper<AccountUser>;
  AccountUserPictureFit: AccountUserPictureFit;
  AccountUserPictureTransformInput: AccountUserPictureTransformInput;
  AccountUserSearch: AccountUserSearch;
  AccountUserWhereInput: AccountUserWhereInput;
  AdvisorAdvisor: ResolverTypeWrapper<AdvisorAdvisor>;
  AdvisorAdvisorCreateInput: AdvisorAdvisorCreateInput;
  AdvisorAdvisorLimitInput: AdvisorAdvisorLimitInput;
  AdvisorAdvisorType: AdvisorAdvisorType;
  AdvisorAdvisorWhereInput: AdvisorAdvisorWhereInput;
  AdvisorDateTime: ResolverTypeWrapper<Scalars['AdvisorDateTime']>;
  AdvisorEventParticipation: ResolverTypeWrapper<AdvisorEventParticipation>;
  AdvisorEventParticipationCreateInput: AdvisorEventParticipationCreateInput;
  AdvisorJSONObject: ResolverTypeWrapper<Scalars['AdvisorJSONObject']>;
  AdvisorMutation: ResolverTypeWrapper<AdvisorMutation>;
  AdvisorPendingRequests: ResolverTypeWrapper<AdvisorPendingRequests>;
  AdvisorProfile: ResolverTypeWrapper<AdvisorProfile>;
  AdvisorProfileCreateInput: AdvisorProfileCreateInput;
  AdvisorProfileEditInput: AdvisorProfileEditInput;
  AdvisorQuery: ResolverTypeWrapper<AdvisorQuery>;
  AdvisorRecommendation: ResolverTypeWrapper<AdvisorRecommendation>;
  AdvisorRecommendationCreateInput: AdvisorRecommendationCreateInput;
  AdvisorRecommendationEditInput: AdvisorRecommendationEditInput;
  AdvisorRecommendationRating: AdvisorRecommendationRating;
  AdvisorRemainingRequestsByAdvisorType: ResolverTypeWrapper<AdvisorRemainingRequestsByAdvisorType>;
  AdvisorRemainingRequestsType: ResolverTypeWrapper<AdvisorRemainingRequestsType>;
  AdvisorRequest: ResolverTypeWrapper<AdvisorRequest>;
  AdvisorRequestAssignment: ResolverTypeWrapper<AdvisorRequestAssignment>;
  AdvisorRequestCount: ResolverTypeWrapper<AdvisorRequestCount>;
  AdvisorRequestCountWhereInput: AdvisorRequestCountWhereInput;
  AdvisorRequestType: AdvisorRequestType;
  AdvisorTag: ResolverTypeWrapper<AdvisorTag>;
  AdvisorTagCreateInput: AdvisorTagCreateInput;
  AdvisorTagType: AdvisorTagType;
  BlogAcfFieldGroup: ResolversTypes['BlogCategory_Display'] | ResolversTypes['BlogPost_Authoroverride'] | ResolversTypes['BlogPost_Marketing'] | ResolversTypes['BlogPost_Release'];
  BlogAvatar: ResolverTypeWrapper<BlogAvatar>;
  BlogAvatarRatingEnum: BlogAvatarRatingEnum;
  BlogCategory: ResolverTypeWrapper<BlogCategory>;
  BlogCategoryIdType: BlogCategoryIdType;
  BlogCategoryToAncestorsCategoryConnection: ResolverTypeWrapper<BlogCategoryToAncestorsCategoryConnection>;
  BlogCategoryToAncestorsCategoryConnectionEdge: ResolverTypeWrapper<BlogCategoryToAncestorsCategoryConnectionEdge>;
  BlogCategoryToCategoryConnection: ResolverTypeWrapper<BlogCategoryToCategoryConnection>;
  BlogCategoryToCategoryConnectionEdge: ResolverTypeWrapper<BlogCategoryToCategoryConnectionEdge>;
  BlogCategoryToCategoryConnectionWhereArgs: BlogCategoryToCategoryConnectionWhereArgs;
  BlogCategoryToContentNodeConnection: ResolverTypeWrapper<BlogCategoryToContentNodeConnection>;
  BlogCategoryToContentNodeConnectionEdge: ResolverTypeWrapper<BlogCategoryToContentNodeConnectionEdge>;
  BlogCategoryToContentNodeConnectionWhereArgs: BlogCategoryToContentNodeConnectionWhereArgs;
  BlogCategoryToParentCategoryConnectionEdge: ResolverTypeWrapper<BlogCategoryToParentCategoryConnectionEdge>;
  BlogCategoryToPostConnection: ResolverTypeWrapper<BlogCategoryToPostConnection>;
  BlogCategoryToPostConnectionEdge: ResolverTypeWrapper<BlogCategoryToPostConnectionEdge>;
  BlogCategoryToPostConnectionWhereArgs: BlogCategoryToPostConnectionWhereArgs;
  BlogCategoryToTaxonomyConnectionEdge: ResolverTypeWrapper<BlogCategoryToTaxonomyConnectionEdge>;
  BlogCategory_Display: ResolverTypeWrapper<BlogCategory_Display>;
  BlogComment: ResolverTypeWrapper<BlogComment>;
  BlogCommentAuthor: ResolverTypeWrapper<BlogCommentAuthor>;
  BlogCommentToCommentConnection: ResolverTypeWrapper<BlogCommentToCommentConnection>;
  BlogCommentToCommentConnectionEdge: ResolverTypeWrapper<BlogCommentToCommentConnectionEdge>;
  BlogCommentToCommentConnectionWhereArgs: BlogCommentToCommentConnectionWhereArgs;
  BlogCommentToCommenterConnectionEdge: ResolverTypeWrapper<BlogCommentToCommenterConnectionEdge>;
  BlogCommentToContentNodeConnectionEdge: ResolverTypeWrapper<BlogCommentToContentNodeConnectionEdge>;
  BlogCommentToParentCommentConnectionEdge: ResolverTypeWrapper<BlogCommentToParentCommentConnectionEdge>;
  BlogCommentToParentCommentConnectionWhereArgs: BlogCommentToParentCommentConnectionWhereArgs;
  BlogCommenter: ResolversTypes['BlogCommentAuthor'] | ResolversTypes['BlogUser'];
  BlogCommentsConnectionOrderbyEnum: BlogCommentsConnectionOrderbyEnum;
  BlogContentNode: ResolversTypes['BlogMediaItem'] | ResolversTypes['BlogPage'] | ResolversTypes['BlogPost'];
  BlogContentNodeIdTypeEnum: BlogContentNodeIdTypeEnum;
  BlogContentNodeToContentTypeConnectionEdge: ResolverTypeWrapper<BlogContentNodeToContentTypeConnectionEdge>;
  BlogContentNodeToEditLastConnectionEdge: ResolverTypeWrapper<BlogContentNodeToEditLastConnectionEdge>;
  BlogContentNodeToEditLockConnectionEdge: ResolverTypeWrapper<BlogContentNodeToEditLockConnectionEdge>;
  BlogContentNodeToEnqueuedScriptConnection: ResolverTypeWrapper<BlogContentNodeToEnqueuedScriptConnection>;
  BlogContentNodeToEnqueuedScriptConnectionEdge: ResolverTypeWrapper<BlogContentNodeToEnqueuedScriptConnectionEdge>;
  BlogContentNodeToEnqueuedStylesheetConnection: ResolverTypeWrapper<BlogContentNodeToEnqueuedStylesheetConnection>;
  BlogContentNodeToEnqueuedStylesheetConnectionEdge: ResolverTypeWrapper<BlogContentNodeToEnqueuedStylesheetConnectionEdge>;
  BlogContentRevisionUnion: ResolverTypeWrapper<ResolversUnionTypes['BlogContentRevisionUnion']>;
  BlogContentTemplate: ResolversTypes['BlogDefaultTemplate'];
  BlogContentType: ResolverTypeWrapper<BlogContentType>;
  BlogContentTypeEnum: BlogContentTypeEnum;
  BlogContentTypeIdTypeEnum: BlogContentTypeIdTypeEnum;
  BlogContentTypeToContentNodeConnection: ResolverTypeWrapper<BlogContentTypeToContentNodeConnection>;
  BlogContentTypeToContentNodeConnectionEdge: ResolverTypeWrapper<BlogContentTypeToContentNodeConnectionEdge>;
  BlogContentTypeToContentNodeConnectionWhereArgs: BlogContentTypeToContentNodeConnectionWhereArgs;
  BlogContentTypeToTaxonomyConnection: ResolverTypeWrapper<BlogContentTypeToTaxonomyConnection>;
  BlogContentTypeToTaxonomyConnectionEdge: ResolverTypeWrapper<BlogContentTypeToTaxonomyConnectionEdge>;
  BlogContentTypesOfCategoryEnum: BlogContentTypesOfCategoryEnum;
  BlogContentTypesOfPostFormatEnum: BlogContentTypesOfPostFormatEnum;
  BlogContentTypesOfTagEnum: BlogContentTypesOfTagEnum;
  BlogCreateCategoryInput: BlogCreateCategoryInput;
  BlogCreateCategoryPayload: ResolverTypeWrapper<BlogCreateCategoryPayload>;
  BlogCreateCommentInput: BlogCreateCommentInput;
  BlogCreateCommentPayload: ResolverTypeWrapper<BlogCreateCommentPayload>;
  BlogCreateMediaItemInput: BlogCreateMediaItemInput;
  BlogCreateMediaItemPayload: ResolverTypeWrapper<BlogCreateMediaItemPayload>;
  BlogCreatePageInput: BlogCreatePageInput;
  BlogCreatePagePayload: ResolverTypeWrapper<BlogCreatePagePayload>;
  BlogCreatePostFormatInput: BlogCreatePostFormatInput;
  BlogCreatePostFormatPayload: ResolverTypeWrapper<BlogCreatePostFormatPayload>;
  BlogCreatePostInput: BlogCreatePostInput;
  BlogCreatePostPayload: ResolverTypeWrapper<BlogCreatePostPayload>;
  BlogCreateTagInput: BlogCreateTagInput;
  BlogCreateTagPayload: ResolverTypeWrapper<BlogCreateTagPayload>;
  BlogCreateUserInput: BlogCreateUserInput;
  BlogCreateUserPayload: ResolverTypeWrapper<BlogCreateUserPayload>;
  BlogDatabaseIdentifier: ResolversTypes['BlogCategory'] | ResolversTypes['BlogComment'] | ResolversTypes['BlogMediaItem'] | ResolversTypes['BlogMenu'] | ResolversTypes['BlogMenuItem'] | ResolversTypes['BlogPage'] | ResolversTypes['BlogPost'] | ResolversTypes['BlogPostFormat'] | ResolversTypes['BlogTag'] | ResolversTypes['BlogUser'];
  BlogDateInput: BlogDateInput;
  BlogDateQueryInput: BlogDateQueryInput;
  BlogDefaultTemplate: ResolverTypeWrapper<BlogDefaultTemplate>;
  BlogDeleteCategoryInput: BlogDeleteCategoryInput;
  BlogDeleteCategoryPayload: ResolverTypeWrapper<BlogDeleteCategoryPayload>;
  BlogDeleteCommentInput: BlogDeleteCommentInput;
  BlogDeleteCommentPayload: ResolverTypeWrapper<BlogDeleteCommentPayload>;
  BlogDeleteMediaItemInput: BlogDeleteMediaItemInput;
  BlogDeleteMediaItemPayload: ResolverTypeWrapper<BlogDeleteMediaItemPayload>;
  BlogDeletePageInput: BlogDeletePageInput;
  BlogDeletePagePayload: ResolverTypeWrapper<BlogDeletePagePayload>;
  BlogDeletePostFormatInput: BlogDeletePostFormatInput;
  BlogDeletePostFormatPayload: ResolverTypeWrapper<BlogDeletePostFormatPayload>;
  BlogDeletePostInput: BlogDeletePostInput;
  BlogDeletePostPayload: ResolverTypeWrapper<BlogDeletePostPayload>;
  BlogDeleteTagInput: BlogDeleteTagInput;
  BlogDeleteTagPayload: ResolverTypeWrapper<BlogDeleteTagPayload>;
  BlogDeleteUserInput: BlogDeleteUserInput;
  BlogDeleteUserPayload: ResolverTypeWrapper<BlogDeleteUserPayload>;
  BlogDiscussionSettings: ResolverTypeWrapper<BlogDiscussionSettings>;
  BlogEnqueuedAsset: ResolversTypes['BlogEnqueuedScript'] | ResolversTypes['BlogEnqueuedStylesheet'];
  BlogEnqueuedScript: ResolverTypeWrapper<BlogEnqueuedScript>;
  BlogEnqueuedStylesheet: ResolverTypeWrapper<BlogEnqueuedStylesheet>;
  BlogGeneralSettings: ResolverTypeWrapper<BlogGeneralSettings>;
  BlogHierarchicalContentNode: ResolversTypes['BlogMediaItem'] | ResolversTypes['BlogPage'];
  BlogHierarchicalContentNodeToContentNodeAncestorsConnection: ResolverTypeWrapper<BlogHierarchicalContentNodeToContentNodeAncestorsConnection>;
  BlogHierarchicalContentNodeToContentNodeAncestorsConnectionEdge: ResolverTypeWrapper<BlogHierarchicalContentNodeToContentNodeAncestorsConnectionEdge>;
  BlogHierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs: BlogHierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs;
  BlogHierarchicalContentNodeToContentNodeChildrenConnection: ResolverTypeWrapper<BlogHierarchicalContentNodeToContentNodeChildrenConnection>;
  BlogHierarchicalContentNodeToContentNodeChildrenConnectionEdge: ResolverTypeWrapper<BlogHierarchicalContentNodeToContentNodeChildrenConnectionEdge>;
  BlogHierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs: BlogHierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs;
  BlogHierarchicalContentNodeToParentContentNodeConnectionEdge: ResolverTypeWrapper<BlogHierarchicalContentNodeToParentContentNodeConnectionEdge>;
  BlogHierarchicalTermNode: ResolversTypes['BlogCategory'];
  BlogMediaDetails: ResolverTypeWrapper<BlogMediaDetails>;
  BlogMediaItem: ResolverTypeWrapper<BlogMediaItem>;
  BlogMediaItemIdType: BlogMediaItemIdType;
  BlogMediaItemMeta: ResolverTypeWrapper<BlogMediaItemMeta>;
  BlogMediaItemSizeEnum: BlogMediaItemSizeEnum;
  BlogMediaItemStatusEnum: BlogMediaItemStatusEnum;
  BlogMediaItemToCommentConnection: ResolverTypeWrapper<BlogMediaItemToCommentConnection>;
  BlogMediaItemToCommentConnectionEdge: ResolverTypeWrapper<BlogMediaItemToCommentConnectionEdge>;
  BlogMediaItemToCommentConnectionWhereArgs: BlogMediaItemToCommentConnectionWhereArgs;
  BlogMediaSize: ResolverTypeWrapper<BlogMediaSize>;
  BlogMenu: ResolverTypeWrapper<BlogMenu>;
  BlogMenuItem: ResolverTypeWrapper<Omit<BlogMenuItem, 'connectedObject'> & { connectedObject?: Maybe<ResolversTypes['BlogMenuItemObjectUnion']> }>;
  BlogMenuItemLinkable: ResolversTypes['BlogCategory'] | ResolversTypes['BlogPage'] | ResolversTypes['BlogPost'] | ResolversTypes['BlogTag'];
  BlogMenuItemNodeIdTypeEnum: BlogMenuItemNodeIdTypeEnum;
  BlogMenuItemObjectUnion: ResolverTypeWrapper<ResolversUnionTypes['BlogMenuItemObjectUnion']>;
  BlogMenuItemToMenuConnectionEdge: ResolverTypeWrapper<BlogMenuItemToMenuConnectionEdge>;
  BlogMenuItemToMenuItemConnection: ResolverTypeWrapper<BlogMenuItemToMenuItemConnection>;
  BlogMenuItemToMenuItemConnectionEdge: ResolverTypeWrapper<BlogMenuItemToMenuItemConnectionEdge>;
  BlogMenuItemToMenuItemConnectionWhereArgs: BlogMenuItemToMenuItemConnectionWhereArgs;
  BlogMenuItemToMenuItemLinkableConnectionEdge: ResolverTypeWrapper<BlogMenuItemToMenuItemLinkableConnectionEdge>;
  BlogMenuLocationEnum: BlogMenuLocationEnum;
  BlogMenuNodeIdTypeEnum: BlogMenuNodeIdTypeEnum;
  BlogMenuToMenuItemConnection: ResolverTypeWrapper<BlogMenuToMenuItemConnection>;
  BlogMenuToMenuItemConnectionEdge: ResolverTypeWrapper<BlogMenuToMenuItemConnectionEdge>;
  BlogMenuToMenuItemConnectionWhereArgs: BlogMenuToMenuItemConnectionWhereArgs;
  BlogMimeTypeEnum: BlogMimeTypeEnum;
  BlogNode: ResolversTypes['BlogCategory'] | ResolversTypes['BlogComment'] | ResolversTypes['BlogCommentAuthor'] | ResolversTypes['BlogContentType'] | ResolversTypes['BlogEnqueuedScript'] | ResolversTypes['BlogEnqueuedStylesheet'] | ResolversTypes['BlogMediaItem'] | ResolversTypes['BlogMenu'] | ResolversTypes['BlogMenuItem'] | ResolversTypes['BlogPage'] | ResolversTypes['BlogPlugin'] | ResolversTypes['BlogPost'] | ResolversTypes['BlogPostFormat'] | ResolversTypes['BlogTag'] | ResolversTypes['BlogTaxonomy'] | ResolversTypes['BlogTheme'] | ResolversTypes['BlogUser'] | ResolversTypes['BlogUserRole'];
  BlogNodeWithAuthor: ResolversTypes['BlogMediaItem'] | ResolversTypes['BlogPage'] | ResolversTypes['BlogPost'];
  BlogNodeWithAuthorToUserConnectionEdge: ResolverTypeWrapper<BlogNodeWithAuthorToUserConnectionEdge>;
  BlogNodeWithComments: ResolversTypes['BlogMediaItem'] | ResolversTypes['BlogPage'] | ResolversTypes['BlogPost'];
  BlogNodeWithContentEditor: ResolversTypes['BlogPage'] | ResolversTypes['BlogPost'];
  BlogNodeWithExcerpt: ResolversTypes['BlogPost'];
  BlogNodeWithFeaturedImage: ResolversTypes['BlogPage'] | ResolversTypes['BlogPost'];
  BlogNodeWithFeaturedImageToMediaItemConnectionEdge: ResolverTypeWrapper<BlogNodeWithFeaturedImageToMediaItemConnectionEdge>;
  BlogNodeWithPageAttributes: ResolversTypes['BlogPage'];
  BlogNodeWithRevisions: ResolversTypes['BlogPage'] | ResolversTypes['BlogPost'];
  BlogNodeWithRevisionsToContentNodeConnectionEdge: ResolverTypeWrapper<BlogNodeWithRevisionsToContentNodeConnectionEdge>;
  BlogNodeWithTemplate: ResolversTypes['BlogMediaItem'] | ResolversTypes['BlogPage'] | ResolversTypes['BlogPost'];
  BlogNodeWithTitle: ResolversTypes['BlogMediaItem'] | ResolversTypes['BlogPage'] | ResolversTypes['BlogPost'];
  BlogNodeWithTrackbacks: ResolversTypes['BlogPost'];
  BlogOrderEnum: BlogOrderEnum;
  BlogPage: ResolverTypeWrapper<BlogPage>;
  BlogPageIdType: BlogPageIdType;
  BlogPageToCommentConnection: ResolverTypeWrapper<BlogPageToCommentConnection>;
  BlogPageToCommentConnectionEdge: ResolverTypeWrapper<BlogPageToCommentConnectionEdge>;
  BlogPageToCommentConnectionWhereArgs: BlogPageToCommentConnectionWhereArgs;
  BlogPageToPreviewConnectionEdge: ResolverTypeWrapper<BlogPageToPreviewConnectionEdge>;
  BlogPageToRevisionConnection: ResolverTypeWrapper<BlogPageToRevisionConnection>;
  BlogPageToRevisionConnectionEdge: ResolverTypeWrapper<BlogPageToRevisionConnectionEdge>;
  BlogPageToRevisionConnectionWhereArgs: BlogPageToRevisionConnectionWhereArgs;
  BlogPlugin: ResolverTypeWrapper<BlogPlugin>;
  BlogPost: ResolverTypeWrapper<BlogPost>;
  BlogPostCategoriesInput: BlogPostCategoriesInput;
  BlogPostCategoriesNodeInput: BlogPostCategoriesNodeInput;
  BlogPostFormat: ResolverTypeWrapper<BlogPostFormat>;
  BlogPostFormatIdType: BlogPostFormatIdType;
  BlogPostFormatToContentNodeConnection: ResolverTypeWrapper<BlogPostFormatToContentNodeConnection>;
  BlogPostFormatToContentNodeConnectionEdge: ResolverTypeWrapper<BlogPostFormatToContentNodeConnectionEdge>;
  BlogPostFormatToContentNodeConnectionWhereArgs: BlogPostFormatToContentNodeConnectionWhereArgs;
  BlogPostFormatToPostConnection: ResolverTypeWrapper<BlogPostFormatToPostConnection>;
  BlogPostFormatToPostConnectionEdge: ResolverTypeWrapper<BlogPostFormatToPostConnectionEdge>;
  BlogPostFormatToPostConnectionWhereArgs: BlogPostFormatToPostConnectionWhereArgs;
  BlogPostFormatToTaxonomyConnectionEdge: ResolverTypeWrapper<BlogPostFormatToTaxonomyConnectionEdge>;
  BlogPostIdType: BlogPostIdType;
  BlogPostObjectFieldFormatEnum: BlogPostObjectFieldFormatEnum;
  BlogPostObjectsConnectionDateColumnEnum: BlogPostObjectsConnectionDateColumnEnum;
  BlogPostObjectsConnectionOrderbyEnum: BlogPostObjectsConnectionOrderbyEnum;
  BlogPostObjectsConnectionOrderbyInput: BlogPostObjectsConnectionOrderbyInput;
  BlogPostPostFormatsInput: BlogPostPostFormatsInput;
  BlogPostPostFormatsNodeInput: BlogPostPostFormatsNodeInput;
  BlogPostStatusEnum: BlogPostStatusEnum;
  BlogPostTagsInput: BlogPostTagsInput;
  BlogPostTagsNodeInput: BlogPostTagsNodeInput;
  BlogPostToCategoryConnection: ResolverTypeWrapper<BlogPostToCategoryConnection>;
  BlogPostToCategoryConnectionEdge: ResolverTypeWrapper<BlogPostToCategoryConnectionEdge>;
  BlogPostToCategoryConnectionWhereArgs: BlogPostToCategoryConnectionWhereArgs;
  BlogPostToCommentConnection: ResolverTypeWrapper<BlogPostToCommentConnection>;
  BlogPostToCommentConnectionEdge: ResolverTypeWrapper<BlogPostToCommentConnectionEdge>;
  BlogPostToCommentConnectionWhereArgs: BlogPostToCommentConnectionWhereArgs;
  BlogPostToPostFormatConnection: ResolverTypeWrapper<BlogPostToPostFormatConnection>;
  BlogPostToPostFormatConnectionEdge: ResolverTypeWrapper<BlogPostToPostFormatConnectionEdge>;
  BlogPostToPostFormatConnectionWhereArgs: BlogPostToPostFormatConnectionWhereArgs;
  BlogPostToPreviewConnectionEdge: ResolverTypeWrapper<BlogPostToPreviewConnectionEdge>;
  BlogPostToRevisionConnection: ResolverTypeWrapper<BlogPostToRevisionConnection>;
  BlogPostToRevisionConnectionEdge: ResolverTypeWrapper<BlogPostToRevisionConnectionEdge>;
  BlogPostToRevisionConnectionWhereArgs: BlogPostToRevisionConnectionWhereArgs;
  BlogPostToTagConnection: ResolverTypeWrapper<BlogPostToTagConnection>;
  BlogPostToTagConnectionEdge: ResolverTypeWrapper<BlogPostToTagConnectionEdge>;
  BlogPostToTagConnectionWhereArgs: BlogPostToTagConnectionWhereArgs;
  BlogPostToTermNodeConnection: ResolverTypeWrapper<BlogPostToTermNodeConnection>;
  BlogPostToTermNodeConnectionEdge: ResolverTypeWrapper<BlogPostToTermNodeConnectionEdge>;
  BlogPostToTermNodeConnectionWhereArgs: BlogPostToTermNodeConnectionWhereArgs;
  BlogPostTypeLabelDetails: ResolverTypeWrapper<BlogPostTypeLabelDetails>;
  BlogPost_Authoroverride: ResolverTypeWrapper<BlogPost_Authoroverride>;
  BlogPost_Marketing: ResolverTypeWrapper<BlogPost_Marketing>;
  BlogPost_Release: ResolverTypeWrapper<BlogPost_Release>;
  BlogReadingSettings: ResolverTypeWrapper<BlogReadingSettings>;
  BlogRegisterUserInput: BlogRegisterUserInput;
  BlogRegisterUserPayload: ResolverTypeWrapper<BlogRegisterUserPayload>;
  BlogRelationEnum: BlogRelationEnum;
  BlogResetUserPasswordInput: BlogResetUserPasswordInput;
  BlogResetUserPasswordPayload: ResolverTypeWrapper<BlogResetUserPasswordPayload>;
  BlogRestoreCommentInput: BlogRestoreCommentInput;
  BlogRestoreCommentPayload: ResolverTypeWrapper<BlogRestoreCommentPayload>;
  BlogRootMutation: ResolverTypeWrapper<BlogRootMutation>;
  BlogRootQuery: ResolverTypeWrapper<BlogRootQuery>;
  BlogRootQueryToCategoryConnection: ResolverTypeWrapper<BlogRootQueryToCategoryConnection>;
  BlogRootQueryToCategoryConnectionEdge: ResolverTypeWrapper<BlogRootQueryToCategoryConnectionEdge>;
  BlogRootQueryToCategoryConnectionWhereArgs: BlogRootQueryToCategoryConnectionWhereArgs;
  BlogRootQueryToCommentConnection: ResolverTypeWrapper<BlogRootQueryToCommentConnection>;
  BlogRootQueryToCommentConnectionEdge: ResolverTypeWrapper<BlogRootQueryToCommentConnectionEdge>;
  BlogRootQueryToCommentConnectionWhereArgs: BlogRootQueryToCommentConnectionWhereArgs;
  BlogRootQueryToContentNodeConnection: ResolverTypeWrapper<BlogRootQueryToContentNodeConnection>;
  BlogRootQueryToContentNodeConnectionEdge: ResolverTypeWrapper<BlogRootQueryToContentNodeConnectionEdge>;
  BlogRootQueryToContentNodeConnectionWhereArgs: BlogRootQueryToContentNodeConnectionWhereArgs;
  BlogRootQueryToContentRevisionUnionConnection: ResolverTypeWrapper<Omit<BlogRootQueryToContentRevisionUnionConnection, 'nodes'> & { nodes?: Maybe<Array<Maybe<ResolversTypes['BlogContentRevisionUnion']>>> }>;
  BlogRootQueryToContentRevisionUnionConnectionEdge: ResolverTypeWrapper<Omit<BlogRootQueryToContentRevisionUnionConnectionEdge, 'node'> & { node?: Maybe<ResolversTypes['BlogContentRevisionUnion']> }>;
  BlogRootQueryToContentRevisionUnionConnectionWhereArgs: BlogRootQueryToContentRevisionUnionConnectionWhereArgs;
  BlogRootQueryToContentTypeConnection: ResolverTypeWrapper<BlogRootQueryToContentTypeConnection>;
  BlogRootQueryToContentTypeConnectionEdge: ResolverTypeWrapper<BlogRootQueryToContentTypeConnectionEdge>;
  BlogRootQueryToEnqueuedScriptConnection: ResolverTypeWrapper<BlogRootQueryToEnqueuedScriptConnection>;
  BlogRootQueryToEnqueuedScriptConnectionEdge: ResolverTypeWrapper<BlogRootQueryToEnqueuedScriptConnectionEdge>;
  BlogRootQueryToEnqueuedStylesheetConnection: ResolverTypeWrapper<BlogRootQueryToEnqueuedStylesheetConnection>;
  BlogRootQueryToEnqueuedStylesheetConnectionEdge: ResolverTypeWrapper<BlogRootQueryToEnqueuedStylesheetConnectionEdge>;
  BlogRootQueryToMediaItemConnection: ResolverTypeWrapper<BlogRootQueryToMediaItemConnection>;
  BlogRootQueryToMediaItemConnectionEdge: ResolverTypeWrapper<BlogRootQueryToMediaItemConnectionEdge>;
  BlogRootQueryToMediaItemConnectionWhereArgs: BlogRootQueryToMediaItemConnectionWhereArgs;
  BlogRootQueryToMenuConnection: ResolverTypeWrapper<BlogRootQueryToMenuConnection>;
  BlogRootQueryToMenuConnectionEdge: ResolverTypeWrapper<BlogRootQueryToMenuConnectionEdge>;
  BlogRootQueryToMenuConnectionWhereArgs: BlogRootQueryToMenuConnectionWhereArgs;
  BlogRootQueryToMenuItemConnection: ResolverTypeWrapper<BlogRootQueryToMenuItemConnection>;
  BlogRootQueryToMenuItemConnectionEdge: ResolverTypeWrapper<BlogRootQueryToMenuItemConnectionEdge>;
  BlogRootQueryToMenuItemConnectionWhereArgs: BlogRootQueryToMenuItemConnectionWhereArgs;
  BlogRootQueryToPageConnection: ResolverTypeWrapper<BlogRootQueryToPageConnection>;
  BlogRootQueryToPageConnectionEdge: ResolverTypeWrapper<BlogRootQueryToPageConnectionEdge>;
  BlogRootQueryToPageConnectionWhereArgs: BlogRootQueryToPageConnectionWhereArgs;
  BlogRootQueryToPluginConnection: ResolverTypeWrapper<BlogRootQueryToPluginConnection>;
  BlogRootQueryToPluginConnectionEdge: ResolverTypeWrapper<BlogRootQueryToPluginConnectionEdge>;
  BlogRootQueryToPostConnection: ResolverTypeWrapper<BlogRootQueryToPostConnection>;
  BlogRootQueryToPostConnectionEdge: ResolverTypeWrapper<BlogRootQueryToPostConnectionEdge>;
  BlogRootQueryToPostConnectionWhereArgs: BlogRootQueryToPostConnectionWhereArgs;
  BlogRootQueryToPostFormatConnection: ResolverTypeWrapper<BlogRootQueryToPostFormatConnection>;
  BlogRootQueryToPostFormatConnectionEdge: ResolverTypeWrapper<BlogRootQueryToPostFormatConnectionEdge>;
  BlogRootQueryToPostFormatConnectionWhereArgs: BlogRootQueryToPostFormatConnectionWhereArgs;
  BlogRootQueryToTagConnection: ResolverTypeWrapper<BlogRootQueryToTagConnection>;
  BlogRootQueryToTagConnectionEdge: ResolverTypeWrapper<BlogRootQueryToTagConnectionEdge>;
  BlogRootQueryToTagConnectionWhereArgs: BlogRootQueryToTagConnectionWhereArgs;
  BlogRootQueryToTaxonomyConnection: ResolverTypeWrapper<BlogRootQueryToTaxonomyConnection>;
  BlogRootQueryToTaxonomyConnectionEdge: ResolverTypeWrapper<BlogRootQueryToTaxonomyConnectionEdge>;
  BlogRootQueryToTermNodeConnection: ResolverTypeWrapper<BlogRootQueryToTermNodeConnection>;
  BlogRootQueryToTermNodeConnectionEdge: ResolverTypeWrapper<BlogRootQueryToTermNodeConnectionEdge>;
  BlogRootQueryToTermNodeConnectionWhereArgs: BlogRootQueryToTermNodeConnectionWhereArgs;
  BlogRootQueryToThemeConnection: ResolverTypeWrapper<BlogRootQueryToThemeConnection>;
  BlogRootQueryToThemeConnectionEdge: ResolverTypeWrapper<BlogRootQueryToThemeConnectionEdge>;
  BlogRootQueryToUserConnection: ResolverTypeWrapper<BlogRootQueryToUserConnection>;
  BlogRootQueryToUserConnectionEdge: ResolverTypeWrapper<BlogRootQueryToUserConnectionEdge>;
  BlogRootQueryToUserConnectionWhereArgs: BlogRootQueryToUserConnectionWhereArgs;
  BlogRootQueryToUserRoleConnection: ResolverTypeWrapper<BlogRootQueryToUserRoleConnection>;
  BlogRootQueryToUserRoleConnectionEdge: ResolverTypeWrapper<BlogRootQueryToUserRoleConnectionEdge>;
  BlogSendPasswordResetEmailInput: BlogSendPasswordResetEmailInput;
  BlogSendPasswordResetEmailPayload: ResolverTypeWrapper<BlogSendPasswordResetEmailPayload>;
  BlogSettings: ResolverTypeWrapper<BlogSettings>;
  BlogTag: ResolverTypeWrapper<BlogTag>;
  BlogTagIdType: BlogTagIdType;
  BlogTagToContentNodeConnection: ResolverTypeWrapper<BlogTagToContentNodeConnection>;
  BlogTagToContentNodeConnectionEdge: ResolverTypeWrapper<BlogTagToContentNodeConnectionEdge>;
  BlogTagToContentNodeConnectionWhereArgs: BlogTagToContentNodeConnectionWhereArgs;
  BlogTagToPostConnection: ResolverTypeWrapper<BlogTagToPostConnection>;
  BlogTagToPostConnectionEdge: ResolverTypeWrapper<BlogTagToPostConnectionEdge>;
  BlogTagToPostConnectionWhereArgs: BlogTagToPostConnectionWhereArgs;
  BlogTagToTaxonomyConnectionEdge: ResolverTypeWrapper<BlogTagToTaxonomyConnectionEdge>;
  BlogTaxonomy: ResolverTypeWrapper<BlogTaxonomy>;
  BlogTaxonomyEnum: BlogTaxonomyEnum;
  BlogTaxonomyIdTypeEnum: BlogTaxonomyIdTypeEnum;
  BlogTaxonomyToContentTypeConnection: ResolverTypeWrapper<BlogTaxonomyToContentTypeConnection>;
  BlogTaxonomyToContentTypeConnectionEdge: ResolverTypeWrapper<BlogTaxonomyToContentTypeConnectionEdge>;
  BlogTermNode: ResolversTypes['BlogCategory'] | ResolversTypes['BlogPostFormat'] | ResolversTypes['BlogTag'];
  BlogTermNodeIdTypeEnum: BlogTermNodeIdTypeEnum;
  BlogTermNodeToEnqueuedScriptConnection: ResolverTypeWrapper<BlogTermNodeToEnqueuedScriptConnection>;
  BlogTermNodeToEnqueuedScriptConnectionEdge: ResolverTypeWrapper<BlogTermNodeToEnqueuedScriptConnectionEdge>;
  BlogTermNodeToEnqueuedStylesheetConnection: ResolverTypeWrapper<BlogTermNodeToEnqueuedStylesheetConnection>;
  BlogTermNodeToEnqueuedStylesheetConnectionEdge: ResolverTypeWrapper<BlogTermNodeToEnqueuedStylesheetConnectionEdge>;
  BlogTermObjectsConnectionOrderbyEnum: BlogTermObjectsConnectionOrderbyEnum;
  BlogTheme: ResolverTypeWrapper<BlogTheme>;
  BlogUniformResourceIdentifiable: ResolversTypes['BlogCategory'] | ResolversTypes['BlogContentType'] | ResolversTypes['BlogMediaItem'] | ResolversTypes['BlogPage'] | ResolversTypes['BlogPost'] | ResolversTypes['BlogPostFormat'] | ResolversTypes['BlogTag'] | ResolversTypes['BlogUser'];
  BlogUpdateCategoryInput: BlogUpdateCategoryInput;
  BlogUpdateCategoryPayload: ResolverTypeWrapper<BlogUpdateCategoryPayload>;
  BlogUpdateCommentInput: BlogUpdateCommentInput;
  BlogUpdateCommentPayload: ResolverTypeWrapper<BlogUpdateCommentPayload>;
  BlogUpdateMediaItemInput: BlogUpdateMediaItemInput;
  BlogUpdateMediaItemPayload: ResolverTypeWrapper<BlogUpdateMediaItemPayload>;
  BlogUpdatePageInput: BlogUpdatePageInput;
  BlogUpdatePagePayload: ResolverTypeWrapper<BlogUpdatePagePayload>;
  BlogUpdatePostFormatInput: BlogUpdatePostFormatInput;
  BlogUpdatePostFormatPayload: ResolverTypeWrapper<BlogUpdatePostFormatPayload>;
  BlogUpdatePostInput: BlogUpdatePostInput;
  BlogUpdatePostPayload: ResolverTypeWrapper<BlogUpdatePostPayload>;
  BlogUpdateSettingsInput: BlogUpdateSettingsInput;
  BlogUpdateSettingsPayload: ResolverTypeWrapper<BlogUpdateSettingsPayload>;
  BlogUpdateTagInput: BlogUpdateTagInput;
  BlogUpdateTagPayload: ResolverTypeWrapper<BlogUpdateTagPayload>;
  BlogUpdateUserInput: BlogUpdateUserInput;
  BlogUpdateUserPayload: ResolverTypeWrapper<BlogUpdateUserPayload>;
  BlogUser: ResolverTypeWrapper<BlogUser>;
  BlogUserNodeIdTypeEnum: BlogUserNodeIdTypeEnum;
  BlogUserRole: ResolverTypeWrapper<BlogUserRole>;
  BlogUserRoleEnum: BlogUserRoleEnum;
  BlogUserToCommentConnection: ResolverTypeWrapper<BlogUserToCommentConnection>;
  BlogUserToCommentConnectionEdge: ResolverTypeWrapper<BlogUserToCommentConnectionEdge>;
  BlogUserToCommentConnectionWhereArgs: BlogUserToCommentConnectionWhereArgs;
  BlogUserToContentRevisionUnionConnection: ResolverTypeWrapper<Omit<BlogUserToContentRevisionUnionConnection, 'nodes'> & { nodes?: Maybe<Array<Maybe<ResolversTypes['BlogContentRevisionUnion']>>> }>;
  BlogUserToContentRevisionUnionConnectionEdge: ResolverTypeWrapper<Omit<BlogUserToContentRevisionUnionConnectionEdge, 'node'> & { node?: Maybe<ResolversTypes['BlogContentRevisionUnion']> }>;
  BlogUserToContentRevisionUnionConnectionWhereArgs: BlogUserToContentRevisionUnionConnectionWhereArgs;
  BlogUserToEnqueuedScriptConnection: ResolverTypeWrapper<BlogUserToEnqueuedScriptConnection>;
  BlogUserToEnqueuedScriptConnectionEdge: ResolverTypeWrapper<BlogUserToEnqueuedScriptConnectionEdge>;
  BlogUserToEnqueuedStylesheetConnection: ResolverTypeWrapper<BlogUserToEnqueuedStylesheetConnection>;
  BlogUserToEnqueuedStylesheetConnectionEdge: ResolverTypeWrapper<BlogUserToEnqueuedStylesheetConnectionEdge>;
  BlogUserToMediaItemConnection: ResolverTypeWrapper<BlogUserToMediaItemConnection>;
  BlogUserToMediaItemConnectionEdge: ResolverTypeWrapper<BlogUserToMediaItemConnectionEdge>;
  BlogUserToMediaItemConnectionWhereArgs: BlogUserToMediaItemConnectionWhereArgs;
  BlogUserToPageConnection: ResolverTypeWrapper<BlogUserToPageConnection>;
  BlogUserToPageConnectionEdge: ResolverTypeWrapper<BlogUserToPageConnectionEdge>;
  BlogUserToPageConnectionWhereArgs: BlogUserToPageConnectionWhereArgs;
  BlogUserToPostConnection: ResolverTypeWrapper<BlogUserToPostConnection>;
  BlogUserToPostConnectionEdge: ResolverTypeWrapper<BlogUserToPostConnectionEdge>;
  BlogUserToPostConnectionWhereArgs: BlogUserToPostConnectionWhereArgs;
  BlogUserToUserRoleConnection: ResolverTypeWrapper<BlogUserToUserRoleConnection>;
  BlogUserToUserRoleConnectionEdge: ResolverTypeWrapper<BlogUserToUserRoleConnectionEdge>;
  BlogUsersConnectionOrderbyEnum: BlogUsersConnectionOrderbyEnum;
  BlogUsersConnectionOrderbyInput: BlogUsersConnectionOrderbyInput;
  BlogUsersConnectionSearchColumnEnum: BlogUsersConnectionSearchColumnEnum;
  BlogWPPageInfo: ResolverTypeWrapper<BlogWpPageInfo>;
  BlogWritingSettings: ResolverTypeWrapper<BlogWritingSettings>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
  CalendarCalendarEvent: ResolverTypeWrapper<CalendarCalendarEvent>;
  CalendarDateTime: ResolverTypeWrapper<Scalars['CalendarDateTime']>;
  CalendarFormat: CalendarFormat;
  CalendarJSONObject: ResolverTypeWrapper<Scalars['CalendarJSONObject']>;
  CalendarMutation: ResolverTypeWrapper<CalendarMutation>;
  CalendarOrder: CalendarOrder;
  CalendarQuery: ResolverTypeWrapper<CalendarQuery>;
  ClearAffectedRowsOutput: ResolverTypeWrapper<ClearAffectedRowsOutput>;
  ClearAggregateEmailTemplate: ResolverTypeWrapper<ClearAggregateEmailTemplate>;
  ClearAggregateEvent: ResolverTypeWrapper<ClearAggregateEvent>;
  ClearAggregateEventGroup: ResolverTypeWrapper<ClearAggregateEventGroup>;
  ClearAggregateEventRestriction: ResolverTypeWrapper<ClearAggregateEventRestriction>;
  ClearAggregateMailingListMember: ResolverTypeWrapper<ClearAggregateMailingListMember>;
  ClearAggregatePayment: ResolverTypeWrapper<ClearAggregatePayment>;
  ClearAggregatePerson: ResolverTypeWrapper<ClearAggregatePerson>;
  ClearAggregatePromoCode: ResolverTypeWrapper<ClearAggregatePromoCode>;
  ClearAggregateScheduleItem: ResolverTypeWrapper<ClearAggregateScheduleItem>;
  ClearAggregateSponsor: ResolverTypeWrapper<ClearAggregateSponsor>;
  ClearAggregateTicket: ResolverTypeWrapper<ClearAggregateTicket>;
  ClearAggregateVenue: ResolverTypeWrapper<ClearAggregateVenue>;
  ClearAggregateWebhook: ResolverTypeWrapper<ClearAggregateWebhook>;
  ClearBoolFieldUpdateOperationsInput: ClearBoolFieldUpdateOperationsInput;
  ClearBoolFilter: ClearBoolFilter;
  ClearBoolWithAggregatesFilter: ClearBoolWithAggregatesFilter;
  ClearDateTime: ResolverTypeWrapper<Scalars['ClearDateTime']>;
  ClearDateTimeFieldUpdateOperationsInput: ClearDateTimeFieldUpdateOperationsInput;
  ClearDateTimeFilter: ClearDateTimeFilter;
  ClearDateTimeNullableFilter: ClearDateTimeNullableFilter;
  ClearDateTimeNullableWithAggregatesFilter: ClearDateTimeNullableWithAggregatesFilter;
  ClearDateTimeWithAggregatesFilter: ClearDateTimeWithAggregatesFilter;
  ClearDiscountType: ClearDiscountType;
  ClearEmailTemplate: ResolverTypeWrapper<ClearEmailTemplate>;
  ClearEmailTemplateCount: ResolverTypeWrapper<ClearEmailTemplateCount>;
  ClearEmailTemplateCountAggregate: ResolverTypeWrapper<ClearEmailTemplateCountAggregate>;
  ClearEmailTemplateCountOrderByAggregateInput: ClearEmailTemplateCountOrderByAggregateInput;
  ClearEmailTemplateCreateInput: ClearEmailTemplateCreateInput;
  ClearEmailTemplateCreateManyInput: ClearEmailTemplateCreateManyInput;
  ClearEmailTemplateCreateNestedManyWithoutSentToInput: ClearEmailTemplateCreateNestedManyWithoutSentToInput;
  ClearEmailTemplateCreateOrConnectWithoutSentToInput: ClearEmailTemplateCreateOrConnectWithoutSentToInput;
  ClearEmailTemplateCreateWithoutSentToInput: ClearEmailTemplateCreateWithoutSentToInput;
  ClearEmailTemplateGroupBy: ResolverTypeWrapper<ClearEmailTemplateGroupBy>;
  ClearEmailTemplateListRelationFilter: ClearEmailTemplateListRelationFilter;
  ClearEmailTemplateMaxAggregate: ResolverTypeWrapper<ClearEmailTemplateMaxAggregate>;
  ClearEmailTemplateMaxOrderByAggregateInput: ClearEmailTemplateMaxOrderByAggregateInput;
  ClearEmailTemplateMinAggregate: ResolverTypeWrapper<ClearEmailTemplateMinAggregate>;
  ClearEmailTemplateMinOrderByAggregateInput: ClearEmailTemplateMinOrderByAggregateInput;
  ClearEmailTemplateOrderByRelationAggregateInput: ClearEmailTemplateOrderByRelationAggregateInput;
  ClearEmailTemplateOrderByWithAggregationInput: ClearEmailTemplateOrderByWithAggregationInput;
  ClearEmailTemplateOrderByWithRelationInput: ClearEmailTemplateOrderByWithRelationInput;
  ClearEmailTemplateScalarFieldEnum: ClearEmailTemplateScalarFieldEnum;
  ClearEmailTemplateScalarWhereInput: ClearEmailTemplateScalarWhereInput;
  ClearEmailTemplateScalarWhereWithAggregatesInput: ClearEmailTemplateScalarWhereWithAggregatesInput;
  ClearEmailTemplateUpdateInput: ClearEmailTemplateUpdateInput;
  ClearEmailTemplateUpdateManyMutationInput: ClearEmailTemplateUpdateManyMutationInput;
  ClearEmailTemplateUpdateManyWithWhereWithoutSentToInput: ClearEmailTemplateUpdateManyWithWhereWithoutSentToInput;
  ClearEmailTemplateUpdateManyWithoutSentToInput: ClearEmailTemplateUpdateManyWithoutSentToInput;
  ClearEmailTemplateUpdateWithWhereUniqueWithoutSentToInput: ClearEmailTemplateUpdateWithWhereUniqueWithoutSentToInput;
  ClearEmailTemplateUpdateWithoutSentToInput: ClearEmailTemplateUpdateWithoutSentToInput;
  ClearEmailTemplateUpsertWithWhereUniqueWithoutSentToInput: ClearEmailTemplateUpsertWithWhereUniqueWithoutSentToInput;
  ClearEmailTemplateWhereInput: ClearEmailTemplateWhereInput;
  ClearEmailTemplateWhereUniqueInput: ClearEmailTemplateWhereUniqueInput;
  ClearEmailWhenFrom: ClearEmailWhenFrom;
  ClearEnumDiscountTypeFieldUpdateOperationsInput: ClearEnumDiscountTypeFieldUpdateOperationsInput;
  ClearEnumDiscountTypeFilter: ClearEnumDiscountTypeFilter;
  ClearEnumDiscountTypeWithAggregatesFilter: ClearEnumDiscountTypeWithAggregatesFilter;
  ClearEnumEmailWhenFromFieldUpdateOperationsInput: ClearEnumEmailWhenFromFieldUpdateOperationsInput;
  ClearEnumEmailWhenFromFilter: ClearEnumEmailWhenFromFilter;
  ClearEnumEmailWhenFromWithAggregatesFilter: ClearEnumEmailWhenFromWithAggregatesFilter;
  ClearEnumTicketTypeFieldUpdateOperationsInput: ClearEnumTicketTypeFieldUpdateOperationsInput;
  ClearEnumTicketTypeFilter: ClearEnumTicketTypeFilter;
  ClearEnumTicketTypeWithAggregatesFilter: ClearEnumTicketTypeWithAggregatesFilter;
  ClearEnumWebhookServiceFieldUpdateOperationsInput: ClearEnumWebhookServiceFieldUpdateOperationsInput;
  ClearEnumWebhookServiceFilter: ClearEnumWebhookServiceFilter;
  ClearEnumWebhookServiceWithAggregatesFilter: ClearEnumWebhookServiceWithAggregatesFilter;
  ClearEnumWebhookTypeFieldUpdateOperationsInput: ClearEnumWebhookTypeFieldUpdateOperationsInput;
  ClearEnumWebhookTypeFilter: ClearEnumWebhookTypeFilter;
  ClearEnumWebhookTypeWithAggregatesFilter: ClearEnumWebhookTypeWithAggregatesFilter;
  ClearEvent: ResolverTypeWrapper<ClearEvent>;
  ClearEventAvgAggregate: ResolverTypeWrapper<ClearEventAvgAggregate>;
  ClearEventAvgOrderByAggregateInput: ClearEventAvgOrderByAggregateInput;
  ClearEventCount: ResolverTypeWrapper<ClearEventCount>;
  ClearEventCountAggregate: ResolverTypeWrapper<ClearEventCountAggregate>;
  ClearEventCountOrderByAggregateInput: ClearEventCountOrderByAggregateInput;
  ClearEventCreateInput: ClearEventCreateInput;
  ClearEventCreateManyEventGroupInput: ClearEventCreateManyEventGroupInput;
  ClearEventCreateManyEventGroupInputEnvelope: ClearEventCreateManyEventGroupInputEnvelope;
  ClearEventCreateManyInput: ClearEventCreateManyInput;
  ClearEventCreateManyVenueInput: ClearEventCreateManyVenueInput;
  ClearEventCreateManyVenueInputEnvelope: ClearEventCreateManyVenueInputEnvelope;
  ClearEventCreateNestedManyWithoutEventGroupInput: ClearEventCreateNestedManyWithoutEventGroupInput;
  ClearEventCreateNestedManyWithoutEventRestrictionsInput: ClearEventCreateNestedManyWithoutEventRestrictionsInput;
  ClearEventCreateNestedManyWithoutInterestedEmailsInput: ClearEventCreateNestedManyWithoutInterestedEmailsInput;
  ClearEventCreateNestedManyWithoutVenueInput: ClearEventCreateNestedManyWithoutVenueInput;
  ClearEventCreateNestedOneWithoutPromoCodesInput: ClearEventCreateNestedOneWithoutPromoCodesInput;
  ClearEventCreateNestedOneWithoutScheduleInput: ClearEventCreateNestedOneWithoutScheduleInput;
  ClearEventCreateNestedOneWithoutSponsorsInput: ClearEventCreateNestedOneWithoutSponsorsInput;
  ClearEventCreateNestedOneWithoutTicketsInput: ClearEventCreateNestedOneWithoutTicketsInput;
  ClearEventCreateNestedOneWithoutWebhooksInput: ClearEventCreateNestedOneWithoutWebhooksInput;
  ClearEventCreateOrConnectWithoutEventGroupInput: ClearEventCreateOrConnectWithoutEventGroupInput;
  ClearEventCreateOrConnectWithoutEventRestrictionsInput: ClearEventCreateOrConnectWithoutEventRestrictionsInput;
  ClearEventCreateOrConnectWithoutInterestedEmailsInput: ClearEventCreateOrConnectWithoutInterestedEmailsInput;
  ClearEventCreateOrConnectWithoutPromoCodesInput: ClearEventCreateOrConnectWithoutPromoCodesInput;
  ClearEventCreateOrConnectWithoutScheduleInput: ClearEventCreateOrConnectWithoutScheduleInput;
  ClearEventCreateOrConnectWithoutSponsorsInput: ClearEventCreateOrConnectWithoutSponsorsInput;
  ClearEventCreateOrConnectWithoutTicketsInput: ClearEventCreateOrConnectWithoutTicketsInput;
  ClearEventCreateOrConnectWithoutVenueInput: ClearEventCreateOrConnectWithoutVenueInput;
  ClearEventCreateOrConnectWithoutWebhooksInput: ClearEventCreateOrConnectWithoutWebhooksInput;
  ClearEventCreateWithoutEventGroupInput: ClearEventCreateWithoutEventGroupInput;
  ClearEventCreateWithoutEventRestrictionsInput: ClearEventCreateWithoutEventRestrictionsInput;
  ClearEventCreateWithoutInterestedEmailsInput: ClearEventCreateWithoutInterestedEmailsInput;
  ClearEventCreateWithoutPromoCodesInput: ClearEventCreateWithoutPromoCodesInput;
  ClearEventCreateWithoutScheduleInput: ClearEventCreateWithoutScheduleInput;
  ClearEventCreateWithoutSponsorsInput: ClearEventCreateWithoutSponsorsInput;
  ClearEventCreateWithoutTicketsInput: ClearEventCreateWithoutTicketsInput;
  ClearEventCreateWithoutVenueInput: ClearEventCreateWithoutVenueInput;
  ClearEventCreateWithoutWebhooksInput: ClearEventCreateWithoutWebhooksInput;
  ClearEventCreatecontentfulEventRestrictionsInput: ClearEventCreatecontentfulEventRestrictionsInput;
  ClearEventCreatemanagersInput: ClearEventCreatemanagersInput;
  ClearEventGroup: ResolverTypeWrapper<ClearEventGroup>;
  ClearEventGroupAvgAggregate: ResolverTypeWrapper<ClearEventGroupAvgAggregate>;
  ClearEventGroupAvgOrderByAggregateInput: ClearEventGroupAvgOrderByAggregateInput;
  ClearEventGroupBy: ResolverTypeWrapper<ClearEventGroupBy>;
  ClearEventGroupCount: ResolverTypeWrapper<ClearEventGroupCount>;
  ClearEventGroupCountAggregate: ResolverTypeWrapper<ClearEventGroupCountAggregate>;
  ClearEventGroupCountOrderByAggregateInput: ClearEventGroupCountOrderByAggregateInput;
  ClearEventGroupCreateInput: ClearEventGroupCreateInput;
  ClearEventGroupCreateManyInput: ClearEventGroupCreateManyInput;
  ClearEventGroupCreateNestedOneWithoutEventsInput: ClearEventGroupCreateNestedOneWithoutEventsInput;
  ClearEventGroupCreateNestedOneWithoutPromoCodesInput: ClearEventGroupCreateNestedOneWithoutPromoCodesInput;
  ClearEventGroupCreateNestedOneWithoutScheduleInput: ClearEventGroupCreateNestedOneWithoutScheduleInput;
  ClearEventGroupCreateNestedOneWithoutWebhooksInput: ClearEventGroupCreateNestedOneWithoutWebhooksInput;
  ClearEventGroupCreateOrConnectWithoutEventsInput: ClearEventGroupCreateOrConnectWithoutEventsInput;
  ClearEventGroupCreateOrConnectWithoutPromoCodesInput: ClearEventGroupCreateOrConnectWithoutPromoCodesInput;
  ClearEventGroupCreateOrConnectWithoutScheduleInput: ClearEventGroupCreateOrConnectWithoutScheduleInput;
  ClearEventGroupCreateOrConnectWithoutWebhooksInput: ClearEventGroupCreateOrConnectWithoutWebhooksInput;
  ClearEventGroupCreateWithoutEventsInput: ClearEventGroupCreateWithoutEventsInput;
  ClearEventGroupCreateWithoutPromoCodesInput: ClearEventGroupCreateWithoutPromoCodesInput;
  ClearEventGroupCreateWithoutScheduleInput: ClearEventGroupCreateWithoutScheduleInput;
  ClearEventGroupCreateWithoutWebhooksInput: ClearEventGroupCreateWithoutWebhooksInput;
  ClearEventGroupGroupBy: ResolverTypeWrapper<ClearEventGroupGroupBy>;
  ClearEventGroupMaxAggregate: ResolverTypeWrapper<ClearEventGroupMaxAggregate>;
  ClearEventGroupMaxOrderByAggregateInput: ClearEventGroupMaxOrderByAggregateInput;
  ClearEventGroupMinAggregate: ResolverTypeWrapper<ClearEventGroupMinAggregate>;
  ClearEventGroupMinOrderByAggregateInput: ClearEventGroupMinOrderByAggregateInput;
  ClearEventGroupOrderByWithAggregationInput: ClearEventGroupOrderByWithAggregationInput;
  ClearEventGroupOrderByWithRelationInput: ClearEventGroupOrderByWithRelationInput;
  ClearEventGroupRelationFilter: ClearEventGroupRelationFilter;
  ClearEventGroupScalarFieldEnum: ClearEventGroupScalarFieldEnum;
  ClearEventGroupScalarWhereWithAggregatesInput: ClearEventGroupScalarWhereWithAggregatesInput;
  ClearEventGroupSumAggregate: ResolverTypeWrapper<ClearEventGroupSumAggregate>;
  ClearEventGroupSumOrderByAggregateInput: ClearEventGroupSumOrderByAggregateInput;
  ClearEventGroupUpdateInput: ClearEventGroupUpdateInput;
  ClearEventGroupUpdateManyMutationInput: ClearEventGroupUpdateManyMutationInput;
  ClearEventGroupUpdateOneRequiredWithoutEventsInput: ClearEventGroupUpdateOneRequiredWithoutEventsInput;
  ClearEventGroupUpdateOneWithoutPromoCodesInput: ClearEventGroupUpdateOneWithoutPromoCodesInput;
  ClearEventGroupUpdateOneWithoutScheduleInput: ClearEventGroupUpdateOneWithoutScheduleInput;
  ClearEventGroupUpdateOneWithoutWebhooksInput: ClearEventGroupUpdateOneWithoutWebhooksInput;
  ClearEventGroupUpdateWithoutEventsInput: ClearEventGroupUpdateWithoutEventsInput;
  ClearEventGroupUpdateWithoutPromoCodesInput: ClearEventGroupUpdateWithoutPromoCodesInput;
  ClearEventGroupUpdateWithoutScheduleInput: ClearEventGroupUpdateWithoutScheduleInput;
  ClearEventGroupUpdateWithoutWebhooksInput: ClearEventGroupUpdateWithoutWebhooksInput;
  ClearEventGroupUpsertWithoutEventsInput: ClearEventGroupUpsertWithoutEventsInput;
  ClearEventGroupUpsertWithoutPromoCodesInput: ClearEventGroupUpsertWithoutPromoCodesInput;
  ClearEventGroupUpsertWithoutScheduleInput: ClearEventGroupUpsertWithoutScheduleInput;
  ClearEventGroupUpsertWithoutWebhooksInput: ClearEventGroupUpsertWithoutWebhooksInput;
  ClearEventGroupWhereInput: ClearEventGroupWhereInput;
  ClearEventGroupWhereUniqueInput: ClearEventGroupWhereUniqueInput;
  ClearEventListRelationFilter: ClearEventListRelationFilter;
  ClearEventMaxAggregate: ResolverTypeWrapper<ClearEventMaxAggregate>;
  ClearEventMaxOrderByAggregateInput: ClearEventMaxOrderByAggregateInput;
  ClearEventMinAggregate: ResolverTypeWrapper<ClearEventMinAggregate>;
  ClearEventMinOrderByAggregateInput: ClearEventMinOrderByAggregateInput;
  ClearEventOrderByRelationAggregateInput: ClearEventOrderByRelationAggregateInput;
  ClearEventOrderByWithAggregationInput: ClearEventOrderByWithAggregationInput;
  ClearEventOrderByWithRelationInput: ClearEventOrderByWithRelationInput;
  ClearEventRelationFilter: ClearEventRelationFilter;
  ClearEventRestriction: ResolverTypeWrapper<ClearEventRestriction>;
  ClearEventRestrictionCount: ResolverTypeWrapper<ClearEventRestrictionCount>;
  ClearEventRestrictionCountAggregate: ResolverTypeWrapper<ClearEventRestrictionCountAggregate>;
  ClearEventRestrictionCountOrderByAggregateInput: ClearEventRestrictionCountOrderByAggregateInput;
  ClearEventRestrictionCreateInput: ClearEventRestrictionCreateInput;
  ClearEventRestrictionCreateManyInput: ClearEventRestrictionCreateManyInput;
  ClearEventRestrictionCreateNestedManyWithoutEventsInput: ClearEventRestrictionCreateNestedManyWithoutEventsInput;
  ClearEventRestrictionCreateOrConnectWithoutEventsInput: ClearEventRestrictionCreateOrConnectWithoutEventsInput;
  ClearEventRestrictionCreateWithoutEventsInput: ClearEventRestrictionCreateWithoutEventsInput;
  ClearEventRestrictionGroupBy: ResolverTypeWrapper<ClearEventRestrictionGroupBy>;
  ClearEventRestrictionListRelationFilter: ClearEventRestrictionListRelationFilter;
  ClearEventRestrictionMaxAggregate: ResolverTypeWrapper<ClearEventRestrictionMaxAggregate>;
  ClearEventRestrictionMaxOrderByAggregateInput: ClearEventRestrictionMaxOrderByAggregateInput;
  ClearEventRestrictionMinAggregate: ResolverTypeWrapper<ClearEventRestrictionMinAggregate>;
  ClearEventRestrictionMinOrderByAggregateInput: ClearEventRestrictionMinOrderByAggregateInput;
  ClearEventRestrictionOrderByRelationAggregateInput: ClearEventRestrictionOrderByRelationAggregateInput;
  ClearEventRestrictionOrderByWithAggregationInput: ClearEventRestrictionOrderByWithAggregationInput;
  ClearEventRestrictionOrderByWithRelationInput: ClearEventRestrictionOrderByWithRelationInput;
  ClearEventRestrictionScalarFieldEnum: ClearEventRestrictionScalarFieldEnum;
  ClearEventRestrictionScalarWhereInput: ClearEventRestrictionScalarWhereInput;
  ClearEventRestrictionScalarWhereWithAggregatesInput: ClearEventRestrictionScalarWhereWithAggregatesInput;
  ClearEventRestrictionUpdateInput: ClearEventRestrictionUpdateInput;
  ClearEventRestrictionUpdateManyMutationInput: ClearEventRestrictionUpdateManyMutationInput;
  ClearEventRestrictionUpdateManyWithWhereWithoutEventsInput: ClearEventRestrictionUpdateManyWithWhereWithoutEventsInput;
  ClearEventRestrictionUpdateManyWithoutEventsInput: ClearEventRestrictionUpdateManyWithoutEventsInput;
  ClearEventRestrictionUpdateWithWhereUniqueWithoutEventsInput: ClearEventRestrictionUpdateWithWhereUniqueWithoutEventsInput;
  ClearEventRestrictionUpdateWithoutEventsInput: ClearEventRestrictionUpdateWithoutEventsInput;
  ClearEventRestrictionUpsertWithWhereUniqueWithoutEventsInput: ClearEventRestrictionUpsertWithWhereUniqueWithoutEventsInput;
  ClearEventRestrictionWhereInput: ClearEventRestrictionWhereInput;
  ClearEventRestrictionWhereUniqueInput: ClearEventRestrictionWhereUniqueInput;
  ClearEventScalarFieldEnum: ClearEventScalarFieldEnum;
  ClearEventScalarWhereInput: ClearEventScalarWhereInput;
  ClearEventScalarWhereWithAggregatesInput: ClearEventScalarWhereWithAggregatesInput;
  ClearEventSumAggregate: ResolverTypeWrapper<ClearEventSumAggregate>;
  ClearEventSumOrderByAggregateInput: ClearEventSumOrderByAggregateInput;
  ClearEventUpdateInput: ClearEventUpdateInput;
  ClearEventUpdateManyMutationInput: ClearEventUpdateManyMutationInput;
  ClearEventUpdateManyWithWhereWithoutEventGroupInput: ClearEventUpdateManyWithWhereWithoutEventGroupInput;
  ClearEventUpdateManyWithWhereWithoutEventRestrictionsInput: ClearEventUpdateManyWithWhereWithoutEventRestrictionsInput;
  ClearEventUpdateManyWithWhereWithoutInterestedEmailsInput: ClearEventUpdateManyWithWhereWithoutInterestedEmailsInput;
  ClearEventUpdateManyWithWhereWithoutVenueInput: ClearEventUpdateManyWithWhereWithoutVenueInput;
  ClearEventUpdateManyWithoutEventGroupInput: ClearEventUpdateManyWithoutEventGroupInput;
  ClearEventUpdateManyWithoutEventRestrictionsInput: ClearEventUpdateManyWithoutEventRestrictionsInput;
  ClearEventUpdateManyWithoutInterestedEmailsInput: ClearEventUpdateManyWithoutInterestedEmailsInput;
  ClearEventUpdateManyWithoutVenueInput: ClearEventUpdateManyWithoutVenueInput;
  ClearEventUpdateOneRequiredWithoutTicketsInput: ClearEventUpdateOneRequiredWithoutTicketsInput;
  ClearEventUpdateOneWithoutPromoCodesInput: ClearEventUpdateOneWithoutPromoCodesInput;
  ClearEventUpdateOneWithoutScheduleInput: ClearEventUpdateOneWithoutScheduleInput;
  ClearEventUpdateOneWithoutSponsorsInput: ClearEventUpdateOneWithoutSponsorsInput;
  ClearEventUpdateOneWithoutWebhooksInput: ClearEventUpdateOneWithoutWebhooksInput;
  ClearEventUpdateWithWhereUniqueWithoutEventGroupInput: ClearEventUpdateWithWhereUniqueWithoutEventGroupInput;
  ClearEventUpdateWithWhereUniqueWithoutEventRestrictionsInput: ClearEventUpdateWithWhereUniqueWithoutEventRestrictionsInput;
  ClearEventUpdateWithWhereUniqueWithoutInterestedEmailsInput: ClearEventUpdateWithWhereUniqueWithoutInterestedEmailsInput;
  ClearEventUpdateWithWhereUniqueWithoutVenueInput: ClearEventUpdateWithWhereUniqueWithoutVenueInput;
  ClearEventUpdateWithoutEventGroupInput: ClearEventUpdateWithoutEventGroupInput;
  ClearEventUpdateWithoutEventRestrictionsInput: ClearEventUpdateWithoutEventRestrictionsInput;
  ClearEventUpdateWithoutInterestedEmailsInput: ClearEventUpdateWithoutInterestedEmailsInput;
  ClearEventUpdateWithoutPromoCodesInput: ClearEventUpdateWithoutPromoCodesInput;
  ClearEventUpdateWithoutScheduleInput: ClearEventUpdateWithoutScheduleInput;
  ClearEventUpdateWithoutSponsorsInput: ClearEventUpdateWithoutSponsorsInput;
  ClearEventUpdateWithoutTicketsInput: ClearEventUpdateWithoutTicketsInput;
  ClearEventUpdateWithoutVenueInput: ClearEventUpdateWithoutVenueInput;
  ClearEventUpdateWithoutWebhooksInput: ClearEventUpdateWithoutWebhooksInput;
  ClearEventUpdatecontentfulEventRestrictionsInput: ClearEventUpdatecontentfulEventRestrictionsInput;
  ClearEventUpdatemanagersInput: ClearEventUpdatemanagersInput;
  ClearEventUpsertWithWhereUniqueWithoutEventGroupInput: ClearEventUpsertWithWhereUniqueWithoutEventGroupInput;
  ClearEventUpsertWithWhereUniqueWithoutEventRestrictionsInput: ClearEventUpsertWithWhereUniqueWithoutEventRestrictionsInput;
  ClearEventUpsertWithWhereUniqueWithoutInterestedEmailsInput: ClearEventUpsertWithWhereUniqueWithoutInterestedEmailsInput;
  ClearEventUpsertWithWhereUniqueWithoutVenueInput: ClearEventUpsertWithWhereUniqueWithoutVenueInput;
  ClearEventUpsertWithoutPromoCodesInput: ClearEventUpsertWithoutPromoCodesInput;
  ClearEventUpsertWithoutScheduleInput: ClearEventUpsertWithoutScheduleInput;
  ClearEventUpsertWithoutSponsorsInput: ClearEventUpsertWithoutSponsorsInput;
  ClearEventUpsertWithoutTicketsInput: ClearEventUpsertWithoutTicketsInput;
  ClearEventUpsertWithoutWebhooksInput: ClearEventUpsertWithoutWebhooksInput;
  ClearEventWhereInput: ClearEventWhereInput;
  ClearEventWhereUniqueInput: ClearEventWhereUniqueInput;
  ClearFloatFieldUpdateOperationsInput: ClearFloatFieldUpdateOperationsInput;
  ClearFloatFilter: ClearFloatFilter;
  ClearFloatNullableFilter: ClearFloatNullableFilter;
  ClearFloatNullableWithAggregatesFilter: ClearFloatNullableWithAggregatesFilter;
  ClearFloatWithAggregatesFilter: ClearFloatWithAggregatesFilter;
  ClearIntFieldUpdateOperationsInput: ClearIntFieldUpdateOperationsInput;
  ClearIntFilter: ClearIntFilter;
  ClearIntNullableFilter: ClearIntNullableFilter;
  ClearIntNullableWithAggregatesFilter: ClearIntNullableWithAggregatesFilter;
  ClearIntWithAggregatesFilter: ClearIntWithAggregatesFilter;
  ClearJSON: ResolverTypeWrapper<Scalars['ClearJSON']>;
  ClearJSONObject: ResolverTypeWrapper<Scalars['ClearJSONObject']>;
  ClearJsonNullableFilter: ClearJsonNullableFilter;
  ClearJsonNullableWithAggregatesFilter: ClearJsonNullableWithAggregatesFilter;
  ClearMailingListMember: ResolverTypeWrapper<ClearMailingListMember>;
  ClearMailingListMemberCount: ResolverTypeWrapper<ClearMailingListMemberCount>;
  ClearMailingListMemberCountAggregate: ResolverTypeWrapper<ClearMailingListMemberCountAggregate>;
  ClearMailingListMemberCountOrderByAggregateInput: ClearMailingListMemberCountOrderByAggregateInput;
  ClearMailingListMemberCreateInput: ClearMailingListMemberCreateInput;
  ClearMailingListMemberCreateManyInput: ClearMailingListMemberCreateManyInput;
  ClearMailingListMemberCreateNestedManyWithoutInterestedInEventsInput: ClearMailingListMemberCreateNestedManyWithoutInterestedInEventsInput;
  ClearMailingListMemberCreateOrConnectWithoutInterestedInEventsInput: ClearMailingListMemberCreateOrConnectWithoutInterestedInEventsInput;
  ClearMailingListMemberCreateWithoutInterestedInEventsInput: ClearMailingListMemberCreateWithoutInterestedInEventsInput;
  ClearMailingListMemberGroupBy: ResolverTypeWrapper<ClearMailingListMemberGroupBy>;
  ClearMailingListMemberListRelationFilter: ClearMailingListMemberListRelationFilter;
  ClearMailingListMemberMaxAggregate: ResolverTypeWrapper<ClearMailingListMemberMaxAggregate>;
  ClearMailingListMemberMaxOrderByAggregateInput: ClearMailingListMemberMaxOrderByAggregateInput;
  ClearMailingListMemberMinAggregate: ResolverTypeWrapper<ClearMailingListMemberMinAggregate>;
  ClearMailingListMemberMinOrderByAggregateInput: ClearMailingListMemberMinOrderByAggregateInput;
  ClearMailingListMemberOrderByRelationAggregateInput: ClearMailingListMemberOrderByRelationAggregateInput;
  ClearMailingListMemberOrderByWithAggregationInput: ClearMailingListMemberOrderByWithAggregationInput;
  ClearMailingListMemberOrderByWithRelationInput: ClearMailingListMemberOrderByWithRelationInput;
  ClearMailingListMemberScalarFieldEnum: ClearMailingListMemberScalarFieldEnum;
  ClearMailingListMemberScalarWhereInput: ClearMailingListMemberScalarWhereInput;
  ClearMailingListMemberScalarWhereWithAggregatesInput: ClearMailingListMemberScalarWhereWithAggregatesInput;
  ClearMailingListMemberUpdateInput: ClearMailingListMemberUpdateInput;
  ClearMailingListMemberUpdateManyMutationInput: ClearMailingListMemberUpdateManyMutationInput;
  ClearMailingListMemberUpdateManyWithWhereWithoutInterestedInEventsInput: ClearMailingListMemberUpdateManyWithWhereWithoutInterestedInEventsInput;
  ClearMailingListMemberUpdateManyWithoutInterestedInEventsInput: ClearMailingListMemberUpdateManyWithoutInterestedInEventsInput;
  ClearMailingListMemberUpdateWithWhereUniqueWithoutInterestedInEventsInput: ClearMailingListMemberUpdateWithWhereUniqueWithoutInterestedInEventsInput;
  ClearMailingListMemberUpdateWithoutInterestedInEventsInput: ClearMailingListMemberUpdateWithoutInterestedInEventsInput;
  ClearMailingListMemberUpsertWithWhereUniqueWithoutInterestedInEventsInput: ClearMailingListMemberUpsertWithWhereUniqueWithoutInterestedInEventsInput;
  ClearMailingListMemberWhereInput: ClearMailingListMemberWhereInput;
  ClearMailingListMemberWhereUniqueInput: ClearMailingListMemberWhereUniqueInput;
  ClearMutation: ResolverTypeWrapper<ClearMutation>;
  ClearNestedBoolFilter: ClearNestedBoolFilter;
  ClearNestedBoolWithAggregatesFilter: ClearNestedBoolWithAggregatesFilter;
  ClearNestedDateTimeFilter: ClearNestedDateTimeFilter;
  ClearNestedDateTimeNullableFilter: ClearNestedDateTimeNullableFilter;
  ClearNestedDateTimeNullableWithAggregatesFilter: ClearNestedDateTimeNullableWithAggregatesFilter;
  ClearNestedDateTimeWithAggregatesFilter: ClearNestedDateTimeWithAggregatesFilter;
  ClearNestedEnumDiscountTypeFilter: ClearNestedEnumDiscountTypeFilter;
  ClearNestedEnumDiscountTypeWithAggregatesFilter: ClearNestedEnumDiscountTypeWithAggregatesFilter;
  ClearNestedEnumEmailWhenFromFilter: ClearNestedEnumEmailWhenFromFilter;
  ClearNestedEnumEmailWhenFromWithAggregatesFilter: ClearNestedEnumEmailWhenFromWithAggregatesFilter;
  ClearNestedEnumTicketTypeFilter: ClearNestedEnumTicketTypeFilter;
  ClearNestedEnumTicketTypeWithAggregatesFilter: ClearNestedEnumTicketTypeWithAggregatesFilter;
  ClearNestedEnumWebhookServiceFilter: ClearNestedEnumWebhookServiceFilter;
  ClearNestedEnumWebhookServiceWithAggregatesFilter: ClearNestedEnumWebhookServiceWithAggregatesFilter;
  ClearNestedEnumWebhookTypeFilter: ClearNestedEnumWebhookTypeFilter;
  ClearNestedEnumWebhookTypeWithAggregatesFilter: ClearNestedEnumWebhookTypeWithAggregatesFilter;
  ClearNestedFloatFilter: ClearNestedFloatFilter;
  ClearNestedFloatNullableFilter: ClearNestedFloatNullableFilter;
  ClearNestedFloatNullableWithAggregatesFilter: ClearNestedFloatNullableWithAggregatesFilter;
  ClearNestedFloatWithAggregatesFilter: ClearNestedFloatWithAggregatesFilter;
  ClearNestedIntFilter: ClearNestedIntFilter;
  ClearNestedIntNullableFilter: ClearNestedIntNullableFilter;
  ClearNestedIntNullableWithAggregatesFilter: ClearNestedIntNullableWithAggregatesFilter;
  ClearNestedIntWithAggregatesFilter: ClearNestedIntWithAggregatesFilter;
  ClearNestedJsonNullableFilter: ClearNestedJsonNullableFilter;
  ClearNestedStringFilter: ClearNestedStringFilter;
  ClearNestedStringNullableFilter: ClearNestedStringNullableFilter;
  ClearNestedStringNullableWithAggregatesFilter: ClearNestedStringNullableWithAggregatesFilter;
  ClearNestedStringWithAggregatesFilter: ClearNestedStringWithAggregatesFilter;
  ClearNullableDateTimeFieldUpdateOperationsInput: ClearNullableDateTimeFieldUpdateOperationsInput;
  ClearNullableFloatFieldUpdateOperationsInput: ClearNullableFloatFieldUpdateOperationsInput;
  ClearNullableIntFieldUpdateOperationsInput: ClearNullableIntFieldUpdateOperationsInput;
  ClearNullableStringFieldUpdateOperationsInput: ClearNullableStringFieldUpdateOperationsInput;
  ClearPayment: ResolverTypeWrapper<ClearPayment>;
  ClearPaymentCount: ResolverTypeWrapper<ClearPaymentCount>;
  ClearPaymentCountAggregate: ResolverTypeWrapper<ClearPaymentCountAggregate>;
  ClearPaymentCountOrderByAggregateInput: ClearPaymentCountOrderByAggregateInput;
  ClearPaymentCreateInput: ClearPaymentCreateInput;
  ClearPaymentCreateManyInput: ClearPaymentCreateManyInput;
  ClearPaymentCreateNestedOneWithoutTicketsInput: ClearPaymentCreateNestedOneWithoutTicketsInput;
  ClearPaymentCreateOrConnectWithoutTicketsInput: ClearPaymentCreateOrConnectWithoutTicketsInput;
  ClearPaymentCreateWithoutTicketsInput: ClearPaymentCreateWithoutTicketsInput;
  ClearPaymentGroupBy: ResolverTypeWrapper<ClearPaymentGroupBy>;
  ClearPaymentMaxAggregate: ResolverTypeWrapper<ClearPaymentMaxAggregate>;
  ClearPaymentMaxOrderByAggregateInput: ClearPaymentMaxOrderByAggregateInput;
  ClearPaymentMinAggregate: ResolverTypeWrapper<ClearPaymentMinAggregate>;
  ClearPaymentMinOrderByAggregateInput: ClearPaymentMinOrderByAggregateInput;
  ClearPaymentOrderByWithAggregationInput: ClearPaymentOrderByWithAggregationInput;
  ClearPaymentOrderByWithRelationInput: ClearPaymentOrderByWithRelationInput;
  ClearPaymentProvider: ClearPaymentProvider;
  ClearPaymentRelationFilter: ClearPaymentRelationFilter;
  ClearPaymentScalarFieldEnum: ClearPaymentScalarFieldEnum;
  ClearPaymentScalarWhereWithAggregatesInput: ClearPaymentScalarWhereWithAggregatesInput;
  ClearPaymentUpdateInput: ClearPaymentUpdateInput;
  ClearPaymentUpdateManyMutationInput: ClearPaymentUpdateManyMutationInput;
  ClearPaymentUpdateOneWithoutTicketsInput: ClearPaymentUpdateOneWithoutTicketsInput;
  ClearPaymentUpdateWithoutTicketsInput: ClearPaymentUpdateWithoutTicketsInput;
  ClearPaymentUpsertWithoutTicketsInput: ClearPaymentUpsertWithoutTicketsInput;
  ClearPaymentWhereInput: ClearPaymentWhereInput;
  ClearPaymentWhereUniqueInput: ClearPaymentWhereUniqueInput;
  ClearPerson: ResolverTypeWrapper<ClearPerson>;
  ClearPersonAvgAggregate: ResolverTypeWrapper<ClearPersonAvgAggregate>;
  ClearPersonAvgOrderByAggregateInput: ClearPersonAvgOrderByAggregateInput;
  ClearPersonCount: ResolverTypeWrapper<ClearPersonCount>;
  ClearPersonCountAggregate: ResolverTypeWrapper<ClearPersonCountAggregate>;
  ClearPersonCountOrderByAggregateInput: ClearPersonCountOrderByAggregateInput;
  ClearPersonCreateInput: ClearPersonCreateInput;
  ClearPersonCreateManyInput: ClearPersonCreateManyInput;
  ClearPersonCreateNestedOneWithoutTicketInput: ClearPersonCreateNestedOneWithoutTicketInput;
  ClearPersonCreateOrConnectWithoutTicketInput: ClearPersonCreateOrConnectWithoutTicketInput;
  ClearPersonCreateWithoutTicketInput: ClearPersonCreateWithoutTicketInput;
  ClearPersonGroupBy: ResolverTypeWrapper<ClearPersonGroupBy>;
  ClearPersonMaxAggregate: ResolverTypeWrapper<ClearPersonMaxAggregate>;
  ClearPersonMaxOrderByAggregateInput: ClearPersonMaxOrderByAggregateInput;
  ClearPersonMinAggregate: ResolverTypeWrapper<ClearPersonMinAggregate>;
  ClearPersonMinOrderByAggregateInput: ClearPersonMinOrderByAggregateInput;
  ClearPersonOrderByWithAggregationInput: ClearPersonOrderByWithAggregationInput;
  ClearPersonOrderByWithRelationInput: ClearPersonOrderByWithRelationInput;
  ClearPersonRelationFilter: ClearPersonRelationFilter;
  ClearPersonScalarFieldEnum: ClearPersonScalarFieldEnum;
  ClearPersonScalarWhereWithAggregatesInput: ClearPersonScalarWhereWithAggregatesInput;
  ClearPersonSumAggregate: ResolverTypeWrapper<ClearPersonSumAggregate>;
  ClearPersonSumOrderByAggregateInput: ClearPersonSumOrderByAggregateInput;
  ClearPersonUpdateInput: ClearPersonUpdateInput;
  ClearPersonUpdateManyMutationInput: ClearPersonUpdateManyMutationInput;
  ClearPersonUpdateOneWithoutTicketInput: ClearPersonUpdateOneWithoutTicketInput;
  ClearPersonUpdateWithoutTicketInput: ClearPersonUpdateWithoutTicketInput;
  ClearPersonUpsertWithoutTicketInput: ClearPersonUpsertWithoutTicketInput;
  ClearPersonWhereInput: ClearPersonWhereInput;
  ClearPersonWhereUniqueInput: ClearPersonWhereUniqueInput;
  ClearPromoCode: ResolverTypeWrapper<ClearPromoCode>;
  ClearPromoCodeAvgAggregate: ResolverTypeWrapper<ClearPromoCodeAvgAggregate>;
  ClearPromoCodeAvgOrderByAggregateInput: ClearPromoCodeAvgOrderByAggregateInput;
  ClearPromoCodeCount: ResolverTypeWrapper<ClearPromoCodeCount>;
  ClearPromoCodeCountAggregate: ResolverTypeWrapper<ClearPromoCodeCountAggregate>;
  ClearPromoCodeCountOrderByAggregateInput: ClearPromoCodeCountOrderByAggregateInput;
  ClearPromoCodeCreateInput: ClearPromoCodeCreateInput;
  ClearPromoCodeCreateManyEventGroupInput: ClearPromoCodeCreateManyEventGroupInput;
  ClearPromoCodeCreateManyEventGroupInputEnvelope: ClearPromoCodeCreateManyEventGroupInputEnvelope;
  ClearPromoCodeCreateManyEventInput: ClearPromoCodeCreateManyEventInput;
  ClearPromoCodeCreateManyEventInputEnvelope: ClearPromoCodeCreateManyEventInputEnvelope;
  ClearPromoCodeCreateManyInput: ClearPromoCodeCreateManyInput;
  ClearPromoCodeCreateNestedManyWithoutEventGroupInput: ClearPromoCodeCreateNestedManyWithoutEventGroupInput;
  ClearPromoCodeCreateNestedManyWithoutEventInput: ClearPromoCodeCreateNestedManyWithoutEventInput;
  ClearPromoCodeCreateNestedOneWithoutTicketsInput: ClearPromoCodeCreateNestedOneWithoutTicketsInput;
  ClearPromoCodeCreateOrConnectWithoutEventGroupInput: ClearPromoCodeCreateOrConnectWithoutEventGroupInput;
  ClearPromoCodeCreateOrConnectWithoutEventInput: ClearPromoCodeCreateOrConnectWithoutEventInput;
  ClearPromoCodeCreateOrConnectWithoutTicketsInput: ClearPromoCodeCreateOrConnectWithoutTicketsInput;
  ClearPromoCodeCreateWithoutEventGroupInput: ClearPromoCodeCreateWithoutEventGroupInput;
  ClearPromoCodeCreateWithoutEventInput: ClearPromoCodeCreateWithoutEventInput;
  ClearPromoCodeCreateWithoutTicketsInput: ClearPromoCodeCreateWithoutTicketsInput;
  ClearPromoCodeGroupBy: ResolverTypeWrapper<ClearPromoCodeGroupBy>;
  ClearPromoCodeListRelationFilter: ClearPromoCodeListRelationFilter;
  ClearPromoCodeMaxAggregate: ResolverTypeWrapper<ClearPromoCodeMaxAggregate>;
  ClearPromoCodeMaxOrderByAggregateInput: ClearPromoCodeMaxOrderByAggregateInput;
  ClearPromoCodeMinAggregate: ResolverTypeWrapper<ClearPromoCodeMinAggregate>;
  ClearPromoCodeMinOrderByAggregateInput: ClearPromoCodeMinOrderByAggregateInput;
  ClearPromoCodeOrderByRelationAggregateInput: ClearPromoCodeOrderByRelationAggregateInput;
  ClearPromoCodeOrderByWithAggregationInput: ClearPromoCodeOrderByWithAggregationInput;
  ClearPromoCodeOrderByWithRelationInput: ClearPromoCodeOrderByWithRelationInput;
  ClearPromoCodeRelationFilter: ClearPromoCodeRelationFilter;
  ClearPromoCodeScalarFieldEnum: ClearPromoCodeScalarFieldEnum;
  ClearPromoCodeScalarWhereInput: ClearPromoCodeScalarWhereInput;
  ClearPromoCodeScalarWhereWithAggregatesInput: ClearPromoCodeScalarWhereWithAggregatesInput;
  ClearPromoCodeSumAggregate: ResolverTypeWrapper<ClearPromoCodeSumAggregate>;
  ClearPromoCodeSumOrderByAggregateInput: ClearPromoCodeSumOrderByAggregateInput;
  ClearPromoCodeUpdateInput: ClearPromoCodeUpdateInput;
  ClearPromoCodeUpdateManyMutationInput: ClearPromoCodeUpdateManyMutationInput;
  ClearPromoCodeUpdateManyWithWhereWithoutEventGroupInput: ClearPromoCodeUpdateManyWithWhereWithoutEventGroupInput;
  ClearPromoCodeUpdateManyWithWhereWithoutEventInput: ClearPromoCodeUpdateManyWithWhereWithoutEventInput;
  ClearPromoCodeUpdateManyWithoutEventGroupInput: ClearPromoCodeUpdateManyWithoutEventGroupInput;
  ClearPromoCodeUpdateManyWithoutEventInput: ClearPromoCodeUpdateManyWithoutEventInput;
  ClearPromoCodeUpdateOneWithoutTicketsInput: ClearPromoCodeUpdateOneWithoutTicketsInput;
  ClearPromoCodeUpdateWithWhereUniqueWithoutEventGroupInput: ClearPromoCodeUpdateWithWhereUniqueWithoutEventGroupInput;
  ClearPromoCodeUpdateWithWhereUniqueWithoutEventInput: ClearPromoCodeUpdateWithWhereUniqueWithoutEventInput;
  ClearPromoCodeUpdateWithoutEventGroupInput: ClearPromoCodeUpdateWithoutEventGroupInput;
  ClearPromoCodeUpdateWithoutEventInput: ClearPromoCodeUpdateWithoutEventInput;
  ClearPromoCodeUpdateWithoutTicketsInput: ClearPromoCodeUpdateWithoutTicketsInput;
  ClearPromoCodeUpsertWithWhereUniqueWithoutEventGroupInput: ClearPromoCodeUpsertWithWhereUniqueWithoutEventGroupInput;
  ClearPromoCodeUpsertWithWhereUniqueWithoutEventInput: ClearPromoCodeUpsertWithWhereUniqueWithoutEventInput;
  ClearPromoCodeUpsertWithoutTicketsInput: ClearPromoCodeUpsertWithoutTicketsInput;
  ClearPromoCodeWhereInput: ClearPromoCodeWhereInput;
  ClearPromoCodeWhereUniqueInput: ClearPromoCodeWhereUniqueInput;
  ClearPublicPerson: ResolverTypeWrapper<ClearPublicPerson>;
  ClearQuery: ResolverTypeWrapper<ClearQuery>;
  ClearQueryMode: ClearQueryMode;
  ClearScheduleItem: ResolverTypeWrapper<ClearScheduleItem>;
  ClearScheduleItemCountAggregate: ResolverTypeWrapper<ClearScheduleItemCountAggregate>;
  ClearScheduleItemCountOrderByAggregateInput: ClearScheduleItemCountOrderByAggregateInput;
  ClearScheduleItemCreateInput: ClearScheduleItemCreateInput;
  ClearScheduleItemCreateManyEventGroupInput: ClearScheduleItemCreateManyEventGroupInput;
  ClearScheduleItemCreateManyEventGroupInputEnvelope: ClearScheduleItemCreateManyEventGroupInputEnvelope;
  ClearScheduleItemCreateManyEventInput: ClearScheduleItemCreateManyEventInput;
  ClearScheduleItemCreateManyEventInputEnvelope: ClearScheduleItemCreateManyEventInputEnvelope;
  ClearScheduleItemCreateManyInput: ClearScheduleItemCreateManyInput;
  ClearScheduleItemCreateNestedManyWithoutEventGroupInput: ClearScheduleItemCreateNestedManyWithoutEventGroupInput;
  ClearScheduleItemCreateNestedManyWithoutEventInput: ClearScheduleItemCreateNestedManyWithoutEventInput;
  ClearScheduleItemCreateOrConnectWithoutEventGroupInput: ClearScheduleItemCreateOrConnectWithoutEventGroupInput;
  ClearScheduleItemCreateOrConnectWithoutEventInput: ClearScheduleItemCreateOrConnectWithoutEventInput;
  ClearScheduleItemCreateWithoutEventGroupInput: ClearScheduleItemCreateWithoutEventGroupInput;
  ClearScheduleItemCreateWithoutEventInput: ClearScheduleItemCreateWithoutEventInput;
  ClearScheduleItemGroupBy: ResolverTypeWrapper<ClearScheduleItemGroupBy>;
  ClearScheduleItemListRelationFilter: ClearScheduleItemListRelationFilter;
  ClearScheduleItemMaxAggregate: ResolverTypeWrapper<ClearScheduleItemMaxAggregate>;
  ClearScheduleItemMaxOrderByAggregateInput: ClearScheduleItemMaxOrderByAggregateInput;
  ClearScheduleItemMinAggregate: ResolverTypeWrapper<ClearScheduleItemMinAggregate>;
  ClearScheduleItemMinOrderByAggregateInput: ClearScheduleItemMinOrderByAggregateInput;
  ClearScheduleItemOrderByRelationAggregateInput: ClearScheduleItemOrderByRelationAggregateInput;
  ClearScheduleItemOrderByWithAggregationInput: ClearScheduleItemOrderByWithAggregationInput;
  ClearScheduleItemOrderByWithRelationInput: ClearScheduleItemOrderByWithRelationInput;
  ClearScheduleItemScalarFieldEnum: ClearScheduleItemScalarFieldEnum;
  ClearScheduleItemScalarWhereInput: ClearScheduleItemScalarWhereInput;
  ClearScheduleItemScalarWhereWithAggregatesInput: ClearScheduleItemScalarWhereWithAggregatesInput;
  ClearScheduleItemUpdateInput: ClearScheduleItemUpdateInput;
  ClearScheduleItemUpdateManyMutationInput: ClearScheduleItemUpdateManyMutationInput;
  ClearScheduleItemUpdateManyWithWhereWithoutEventGroupInput: ClearScheduleItemUpdateManyWithWhereWithoutEventGroupInput;
  ClearScheduleItemUpdateManyWithWhereWithoutEventInput: ClearScheduleItemUpdateManyWithWhereWithoutEventInput;
  ClearScheduleItemUpdateManyWithoutEventGroupInput: ClearScheduleItemUpdateManyWithoutEventGroupInput;
  ClearScheduleItemUpdateManyWithoutEventInput: ClearScheduleItemUpdateManyWithoutEventInput;
  ClearScheduleItemUpdateWithWhereUniqueWithoutEventGroupInput: ClearScheduleItemUpdateWithWhereUniqueWithoutEventGroupInput;
  ClearScheduleItemUpdateWithWhereUniqueWithoutEventInput: ClearScheduleItemUpdateWithWhereUniqueWithoutEventInput;
  ClearScheduleItemUpdateWithoutEventGroupInput: ClearScheduleItemUpdateWithoutEventGroupInput;
  ClearScheduleItemUpdateWithoutEventInput: ClearScheduleItemUpdateWithoutEventInput;
  ClearScheduleItemUpsertWithWhereUniqueWithoutEventGroupInput: ClearScheduleItemUpsertWithWhereUniqueWithoutEventGroupInput;
  ClearScheduleItemUpsertWithWhereUniqueWithoutEventInput: ClearScheduleItemUpsertWithWhereUniqueWithoutEventInput;
  ClearScheduleItemWhereInput: ClearScheduleItemWhereInput;
  ClearScheduleItemWhereUniqueInput: ClearScheduleItemWhereUniqueInput;
  ClearScholarshipReason: ClearScholarshipReason;
  ClearSortOrder: ClearSortOrder;
  ClearSponsor: ResolverTypeWrapper<ClearSponsor>;
  ClearSponsorAvgAggregate: ResolverTypeWrapper<ClearSponsorAvgAggregate>;
  ClearSponsorAvgOrderByAggregateInput: ClearSponsorAvgOrderByAggregateInput;
  ClearSponsorCountAggregate: ResolverTypeWrapper<ClearSponsorCountAggregate>;
  ClearSponsorCountOrderByAggregateInput: ClearSponsorCountOrderByAggregateInput;
  ClearSponsorCreateInput: ClearSponsorCreateInput;
  ClearSponsorCreateManyEventInput: ClearSponsorCreateManyEventInput;
  ClearSponsorCreateManyEventInputEnvelope: ClearSponsorCreateManyEventInputEnvelope;
  ClearSponsorCreateManyInput: ClearSponsorCreateManyInput;
  ClearSponsorCreateNestedManyWithoutEventInput: ClearSponsorCreateNestedManyWithoutEventInput;
  ClearSponsorCreateOrConnectWithoutEventInput: ClearSponsorCreateOrConnectWithoutEventInput;
  ClearSponsorCreateWithoutEventInput: ClearSponsorCreateWithoutEventInput;
  ClearSponsorGroupBy: ResolverTypeWrapper<ClearSponsorGroupBy>;
  ClearSponsorListRelationFilter: ClearSponsorListRelationFilter;
  ClearSponsorMaxAggregate: ResolverTypeWrapper<ClearSponsorMaxAggregate>;
  ClearSponsorMaxOrderByAggregateInput: ClearSponsorMaxOrderByAggregateInput;
  ClearSponsorMinAggregate: ResolverTypeWrapper<ClearSponsorMinAggregate>;
  ClearSponsorMinOrderByAggregateInput: ClearSponsorMinOrderByAggregateInput;
  ClearSponsorOrderByRelationAggregateInput: ClearSponsorOrderByRelationAggregateInput;
  ClearSponsorOrderByWithAggregationInput: ClearSponsorOrderByWithAggregationInput;
  ClearSponsorOrderByWithRelationInput: ClearSponsorOrderByWithRelationInput;
  ClearSponsorScalarFieldEnum: ClearSponsorScalarFieldEnum;
  ClearSponsorScalarWhereInput: ClearSponsorScalarWhereInput;
  ClearSponsorScalarWhereWithAggregatesInput: ClearSponsorScalarWhereWithAggregatesInput;
  ClearSponsorSumAggregate: ResolverTypeWrapper<ClearSponsorSumAggregate>;
  ClearSponsorSumOrderByAggregateInput: ClearSponsorSumOrderByAggregateInput;
  ClearSponsorUpdateInput: ClearSponsorUpdateInput;
  ClearSponsorUpdateManyMutationInput: ClearSponsorUpdateManyMutationInput;
  ClearSponsorUpdateManyWithWhereWithoutEventInput: ClearSponsorUpdateManyWithWhereWithoutEventInput;
  ClearSponsorUpdateManyWithoutEventInput: ClearSponsorUpdateManyWithoutEventInput;
  ClearSponsorUpdateWithWhereUniqueWithoutEventInput: ClearSponsorUpdateWithWhereUniqueWithoutEventInput;
  ClearSponsorUpdateWithoutEventInput: ClearSponsorUpdateWithoutEventInput;
  ClearSponsorUpsertWithWhereUniqueWithoutEventInput: ClearSponsorUpsertWithWhereUniqueWithoutEventInput;
  ClearSponsorWhereInput: ClearSponsorWhereInput;
  ClearSponsorWhereUniqueInput: ClearSponsorWhereUniqueInput;
  ClearStringFieldUpdateOperationsInput: ClearStringFieldUpdateOperationsInput;
  ClearStringFilter: ClearStringFilter;
  ClearStringNullableFilter: ClearStringNullableFilter;
  ClearStringNullableListFilter: ClearStringNullableListFilter;
  ClearStringNullableWithAggregatesFilter: ClearStringNullableWithAggregatesFilter;
  ClearStringWithAggregatesFilter: ClearStringWithAggregatesFilter;
  ClearTeam: ResolverTypeWrapper<ClearTeam>;
  ClearTicket: ResolverTypeWrapper<ClearTicket>;
  ClearTicketAvgAggregate: ResolverTypeWrapper<ClearTicketAvgAggregate>;
  ClearTicketAvgOrderByAggregateInput: ClearTicketAvgOrderByAggregateInput;
  ClearTicketCount: ResolverTypeWrapper<ClearTicketCount>;
  ClearTicketCountAggregate: ResolverTypeWrapper<ClearTicketCountAggregate>;
  ClearTicketCountOrderByAggregateInput: ClearTicketCountOrderByAggregateInput;
  ClearTicketCreateInput: ClearTicketCreateInput;
  ClearTicketCreateManyEventInput: ClearTicketCreateManyEventInput;
  ClearTicketCreateManyEventInputEnvelope: ClearTicketCreateManyEventInputEnvelope;
  ClearTicketCreateManyGuardianInput: ClearTicketCreateManyGuardianInput;
  ClearTicketCreateManyGuardianInputEnvelope: ClearTicketCreateManyGuardianInputEnvelope;
  ClearTicketCreateManyInput: ClearTicketCreateManyInput;
  ClearTicketCreateManyPaymentInput: ClearTicketCreateManyPaymentInput;
  ClearTicketCreateManyPaymentInputEnvelope: ClearTicketCreateManyPaymentInputEnvelope;
  ClearTicketCreateManyPromoCodeInput: ClearTicketCreateManyPromoCodeInput;
  ClearTicketCreateManyPromoCodeInputEnvelope: ClearTicketCreateManyPromoCodeInputEnvelope;
  ClearTicketCreateNestedManyWithoutEventInput: ClearTicketCreateNestedManyWithoutEventInput;
  ClearTicketCreateNestedManyWithoutGuardianInput: ClearTicketCreateNestedManyWithoutGuardianInput;
  ClearTicketCreateNestedManyWithoutPaymentInput: ClearTicketCreateNestedManyWithoutPaymentInput;
  ClearTicketCreateNestedManyWithoutPromoCodeInput: ClearTicketCreateNestedManyWithoutPromoCodeInput;
  ClearTicketCreateNestedManyWithoutSentEmailsInput: ClearTicketCreateNestedManyWithoutSentEmailsInput;
  ClearTicketCreateOrConnectWithoutEventInput: ClearTicketCreateOrConnectWithoutEventInput;
  ClearTicketCreateOrConnectWithoutGuardianInput: ClearTicketCreateOrConnectWithoutGuardianInput;
  ClearTicketCreateOrConnectWithoutPaymentInput: ClearTicketCreateOrConnectWithoutPaymentInput;
  ClearTicketCreateOrConnectWithoutPromoCodeInput: ClearTicketCreateOrConnectWithoutPromoCodeInput;
  ClearTicketCreateOrConnectWithoutSentEmailsInput: ClearTicketCreateOrConnectWithoutSentEmailsInput;
  ClearTicketCreateWithoutEventInput: ClearTicketCreateWithoutEventInput;
  ClearTicketCreateWithoutGuardianInput: ClearTicketCreateWithoutGuardianInput;
  ClearTicketCreateWithoutPaymentInput: ClearTicketCreateWithoutPaymentInput;
  ClearTicketCreateWithoutPromoCodeInput: ClearTicketCreateWithoutPromoCodeInput;
  ClearTicketCreateWithoutSentEmailsInput: ClearTicketCreateWithoutSentEmailsInput;
  ClearTicketGroupBy: ResolverTypeWrapper<ClearTicketGroupBy>;
  ClearTicketListRelationFilter: ClearTicketListRelationFilter;
  ClearTicketMaxAggregate: ResolverTypeWrapper<ClearTicketMaxAggregate>;
  ClearTicketMaxOrderByAggregateInput: ClearTicketMaxOrderByAggregateInput;
  ClearTicketMinAggregate: ResolverTypeWrapper<ClearTicketMinAggregate>;
  ClearTicketMinOrderByAggregateInput: ClearTicketMinOrderByAggregateInput;
  ClearTicketOrderByRelationAggregateInput: ClearTicketOrderByRelationAggregateInput;
  ClearTicketOrderByWithAggregationInput: ClearTicketOrderByWithAggregationInput;
  ClearTicketOrderByWithRelationInput: ClearTicketOrderByWithRelationInput;
  ClearTicketScalarFieldEnum: ClearTicketScalarFieldEnum;
  ClearTicketScalarWhereInput: ClearTicketScalarWhereInput;
  ClearTicketScalarWhereWithAggregatesInput: ClearTicketScalarWhereWithAggregatesInput;
  ClearTicketSumAggregate: ResolverTypeWrapper<ClearTicketSumAggregate>;
  ClearTicketSumOrderByAggregateInput: ClearTicketSumOrderByAggregateInput;
  ClearTicketType: ClearTicketType;
  ClearTicketUpdateInput: ClearTicketUpdateInput;
  ClearTicketUpdateManyMutationInput: ClearTicketUpdateManyMutationInput;
  ClearTicketUpdateManyWithWhereWithoutEventInput: ClearTicketUpdateManyWithWhereWithoutEventInput;
  ClearTicketUpdateManyWithWhereWithoutGuardianInput: ClearTicketUpdateManyWithWhereWithoutGuardianInput;
  ClearTicketUpdateManyWithWhereWithoutPaymentInput: ClearTicketUpdateManyWithWhereWithoutPaymentInput;
  ClearTicketUpdateManyWithWhereWithoutPromoCodeInput: ClearTicketUpdateManyWithWhereWithoutPromoCodeInput;
  ClearTicketUpdateManyWithWhereWithoutSentEmailsInput: ClearTicketUpdateManyWithWhereWithoutSentEmailsInput;
  ClearTicketUpdateManyWithoutEventInput: ClearTicketUpdateManyWithoutEventInput;
  ClearTicketUpdateManyWithoutGuardianInput: ClearTicketUpdateManyWithoutGuardianInput;
  ClearTicketUpdateManyWithoutPaymentInput: ClearTicketUpdateManyWithoutPaymentInput;
  ClearTicketUpdateManyWithoutPromoCodeInput: ClearTicketUpdateManyWithoutPromoCodeInput;
  ClearTicketUpdateManyWithoutSentEmailsInput: ClearTicketUpdateManyWithoutSentEmailsInput;
  ClearTicketUpdateWithWhereUniqueWithoutEventInput: ClearTicketUpdateWithWhereUniqueWithoutEventInput;
  ClearTicketUpdateWithWhereUniqueWithoutGuardianInput: ClearTicketUpdateWithWhereUniqueWithoutGuardianInput;
  ClearTicketUpdateWithWhereUniqueWithoutPaymentInput: ClearTicketUpdateWithWhereUniqueWithoutPaymentInput;
  ClearTicketUpdateWithWhereUniqueWithoutPromoCodeInput: ClearTicketUpdateWithWhereUniqueWithoutPromoCodeInput;
  ClearTicketUpdateWithWhereUniqueWithoutSentEmailsInput: ClearTicketUpdateWithWhereUniqueWithoutSentEmailsInput;
  ClearTicketUpdateWithoutEventInput: ClearTicketUpdateWithoutEventInput;
  ClearTicketUpdateWithoutGuardianInput: ClearTicketUpdateWithoutGuardianInput;
  ClearTicketUpdateWithoutPaymentInput: ClearTicketUpdateWithoutPaymentInput;
  ClearTicketUpdateWithoutPromoCodeInput: ClearTicketUpdateWithoutPromoCodeInput;
  ClearTicketUpdateWithoutSentEmailsInput: ClearTicketUpdateWithoutSentEmailsInput;
  ClearTicketUpsertWithWhereUniqueWithoutEventInput: ClearTicketUpsertWithWhereUniqueWithoutEventInput;
  ClearTicketUpsertWithWhereUniqueWithoutGuardianInput: ClearTicketUpsertWithWhereUniqueWithoutGuardianInput;
  ClearTicketUpsertWithWhereUniqueWithoutPaymentInput: ClearTicketUpsertWithWhereUniqueWithoutPaymentInput;
  ClearTicketUpsertWithWhereUniqueWithoutPromoCodeInput: ClearTicketUpsertWithWhereUniqueWithoutPromoCodeInput;
  ClearTicketUpsertWithWhereUniqueWithoutSentEmailsInput: ClearTicketUpsertWithWhereUniqueWithoutSentEmailsInput;
  ClearTicketWhereInput: ClearTicketWhereInput;
  ClearTicketWhereUniqueInput: ClearTicketWhereUniqueInput;
  ClearVenue: ResolverTypeWrapper<ClearVenue>;
  ClearVenueAvgAggregate: ResolverTypeWrapper<ClearVenueAvgAggregate>;
  ClearVenueAvgOrderByAggregateInput: ClearVenueAvgOrderByAggregateInput;
  ClearVenueCount: ResolverTypeWrapper<ClearVenueCount>;
  ClearVenueCountAggregate: ResolverTypeWrapper<ClearVenueCountAggregate>;
  ClearVenueCountOrderByAggregateInput: ClearVenueCountOrderByAggregateInput;
  ClearVenueCreateInput: ClearVenueCreateInput;
  ClearVenueCreateManyInput: ClearVenueCreateManyInput;
  ClearVenueCreateNestedOneWithoutEventsInput: ClearVenueCreateNestedOneWithoutEventsInput;
  ClearVenueCreateOrConnectWithoutEventsInput: ClearVenueCreateOrConnectWithoutEventsInput;
  ClearVenueCreateWithoutEventsInput: ClearVenueCreateWithoutEventsInput;
  ClearVenueGroupBy: ResolverTypeWrapper<ClearVenueGroupBy>;
  ClearVenueMaxAggregate: ResolverTypeWrapper<ClearVenueMaxAggregate>;
  ClearVenueMaxOrderByAggregateInput: ClearVenueMaxOrderByAggregateInput;
  ClearVenueMinAggregate: ResolverTypeWrapper<ClearVenueMinAggregate>;
  ClearVenueMinOrderByAggregateInput: ClearVenueMinOrderByAggregateInput;
  ClearVenueOrderByWithAggregationInput: ClearVenueOrderByWithAggregationInput;
  ClearVenueOrderByWithRelationInput: ClearVenueOrderByWithRelationInput;
  ClearVenueRelationFilter: ClearVenueRelationFilter;
  ClearVenueScalarFieldEnum: ClearVenueScalarFieldEnum;
  ClearVenueScalarWhereWithAggregatesInput: ClearVenueScalarWhereWithAggregatesInput;
  ClearVenueSumAggregate: ResolverTypeWrapper<ClearVenueSumAggregate>;
  ClearVenueSumOrderByAggregateInput: ClearVenueSumOrderByAggregateInput;
  ClearVenueUpdateInput: ClearVenueUpdateInput;
  ClearVenueUpdateManyMutationInput: ClearVenueUpdateManyMutationInput;
  ClearVenueUpdateOneWithoutEventsInput: ClearVenueUpdateOneWithoutEventsInput;
  ClearVenueUpdateWithoutEventsInput: ClearVenueUpdateWithoutEventsInput;
  ClearVenueUpsertWithoutEventsInput: ClearVenueUpsertWithoutEventsInput;
  ClearVenueWhereInput: ClearVenueWhereInput;
  ClearVenueWhereUniqueInput: ClearVenueWhereUniqueInput;
  ClearWebhook: ResolverTypeWrapper<ClearWebhook>;
  ClearWebhookCountAggregate: ResolverTypeWrapper<ClearWebhookCountAggregate>;
  ClearWebhookCountOrderByAggregateInput: ClearWebhookCountOrderByAggregateInput;
  ClearWebhookCreateInput: ClearWebhookCreateInput;
  ClearWebhookCreateManyEventGroupInput: ClearWebhookCreateManyEventGroupInput;
  ClearWebhookCreateManyEventGroupInputEnvelope: ClearWebhookCreateManyEventGroupInputEnvelope;
  ClearWebhookCreateManyEventInput: ClearWebhookCreateManyEventInput;
  ClearWebhookCreateManyEventInputEnvelope: ClearWebhookCreateManyEventInputEnvelope;
  ClearWebhookCreateManyInput: ClearWebhookCreateManyInput;
  ClearWebhookCreateNestedManyWithoutEventGroupInput: ClearWebhookCreateNestedManyWithoutEventGroupInput;
  ClearWebhookCreateNestedManyWithoutEventInput: ClearWebhookCreateNestedManyWithoutEventInput;
  ClearWebhookCreateOrConnectWithoutEventGroupInput: ClearWebhookCreateOrConnectWithoutEventGroupInput;
  ClearWebhookCreateOrConnectWithoutEventInput: ClearWebhookCreateOrConnectWithoutEventInput;
  ClearWebhookCreateWithoutEventGroupInput: ClearWebhookCreateWithoutEventGroupInput;
  ClearWebhookCreateWithoutEventInput: ClearWebhookCreateWithoutEventInput;
  ClearWebhookGroupBy: ResolverTypeWrapper<ClearWebhookGroupBy>;
  ClearWebhookListRelationFilter: ClearWebhookListRelationFilter;
  ClearWebhookMaxAggregate: ResolverTypeWrapper<ClearWebhookMaxAggregate>;
  ClearWebhookMaxOrderByAggregateInput: ClearWebhookMaxOrderByAggregateInput;
  ClearWebhookMinAggregate: ResolverTypeWrapper<ClearWebhookMinAggregate>;
  ClearWebhookMinOrderByAggregateInput: ClearWebhookMinOrderByAggregateInput;
  ClearWebhookOrderByRelationAggregateInput: ClearWebhookOrderByRelationAggregateInput;
  ClearWebhookOrderByWithAggregationInput: ClearWebhookOrderByWithAggregationInput;
  ClearWebhookOrderByWithRelationInput: ClearWebhookOrderByWithRelationInput;
  ClearWebhookScalarFieldEnum: ClearWebhookScalarFieldEnum;
  ClearWebhookScalarWhereInput: ClearWebhookScalarWhereInput;
  ClearWebhookScalarWhereWithAggregatesInput: ClearWebhookScalarWhereWithAggregatesInput;
  ClearWebhookService: ClearWebhookService;
  ClearWebhookType: ClearWebhookType;
  ClearWebhookUpdateInput: ClearWebhookUpdateInput;
  ClearWebhookUpdateManyMutationInput: ClearWebhookUpdateManyMutationInput;
  ClearWebhookUpdateManyWithWhereWithoutEventGroupInput: ClearWebhookUpdateManyWithWhereWithoutEventGroupInput;
  ClearWebhookUpdateManyWithWhereWithoutEventInput: ClearWebhookUpdateManyWithWhereWithoutEventInput;
  ClearWebhookUpdateManyWithoutEventGroupInput: ClearWebhookUpdateManyWithoutEventGroupInput;
  ClearWebhookUpdateManyWithoutEventInput: ClearWebhookUpdateManyWithoutEventInput;
  ClearWebhookUpdateWithWhereUniqueWithoutEventGroupInput: ClearWebhookUpdateWithWhereUniqueWithoutEventGroupInput;
  ClearWebhookUpdateWithWhereUniqueWithoutEventInput: ClearWebhookUpdateWithWhereUniqueWithoutEventInput;
  ClearWebhookUpdateWithoutEventGroupInput: ClearWebhookUpdateWithoutEventGroupInput;
  ClearWebhookUpdateWithoutEventInput: ClearWebhookUpdateWithoutEventInput;
  ClearWebhookUpsertWithWhereUniqueWithoutEventGroupInput: ClearWebhookUpsertWithWhereUniqueWithoutEventGroupInput;
  ClearWebhookUpsertWithWhereUniqueWithoutEventInput: ClearWebhookUpsertWithWhereUniqueWithoutEventInput;
  ClearWebhookWhereInput: ClearWebhookWhereInput;
  ClearWebhookWhereUniqueInput: ClearWebhookWhereUniqueInput;
  CmsAnnouncement: ResolverTypeWrapper<CmsAnnouncement>;
  CmsAnnouncementCollection: ResolverTypeWrapper<CmsAnnouncementCollection>;
  CmsAnnouncementFilter: CmsAnnouncementFilter;
  CmsAnnouncementLinkingCollections: ResolverTypeWrapper<CmsAnnouncementLinkingCollections>;
  CmsAnnouncementOrder: CmsAnnouncementOrder;
  CmsAnnouncementProgramCollection: ResolverTypeWrapper<CmsAnnouncementProgramCollection>;
  CmsAsset: ResolverTypeWrapper<CmsAsset>;
  CmsAssetCollection: ResolverTypeWrapper<CmsAssetCollection>;
  CmsAssetFilter: CmsAssetFilter;
  CmsAssetLinkingCollections: ResolverTypeWrapper<CmsAssetLinkingCollections>;
  CmsAssetOrder: CmsAssetOrder;
  CmsAward: ResolverTypeWrapper<CmsAward>;
  CmsAwardCollection: ResolverTypeWrapper<CmsAwardCollection>;
  CmsAwardFilter: CmsAwardFilter;
  CmsAwardLinkingCollections: ResolverTypeWrapper<CmsAwardLinkingCollections>;
  CmsAwardOrder: CmsAwardOrder;
  CmsAwardProgramsCollection: ResolverTypeWrapper<CmsAwardProgramsCollection>;
  CmsBadge: ResolverTypeWrapper<CmsBadge>;
  CmsBadgeCollection: ResolverTypeWrapper<CmsBadgeCollection>;
  CmsBadgeFilter: CmsBadgeFilter;
  CmsBadgeLinkingCollections: ResolverTypeWrapper<CmsBadgeLinkingCollections>;
  CmsBadgeOrder: CmsBadgeOrder;
  CmsBumper: ResolverTypeWrapper<CmsBumper>;
  CmsBumperCollection: ResolverTypeWrapper<CmsBumperCollection>;
  CmsBumperFilter: CmsBumperFilter;
  CmsBumperLinkingCollections: ResolverTypeWrapper<CmsBumperLinkingCollections>;
  CmsBumperOrder: CmsBumperOrder;
  CmsCircle: ResolverTypeWrapper<Scalars['CmsCircle']>;
  CmsCommunityPartner: ResolverTypeWrapper<CmsCommunityPartner>;
  CmsCommunityPartnerCollection: ResolverTypeWrapper<CmsCommunityPartnerCollection>;
  CmsCommunityPartnerFilter: CmsCommunityPartnerFilter;
  CmsCommunityPartnerLinkingCollections: ResolverTypeWrapper<CmsCommunityPartnerLinkingCollections>;
  CmsCommunityPartnerOrder: CmsCommunityPartnerOrder;
  CmsCommunityPartnerRegionCollection: ResolverTypeWrapper<CmsCommunityPartnerRegionCollection>;
  CmsContentTypeString: ResolverTypeWrapper<CmsContentTypeString>;
  CmsContentTypeStringCollection: ResolverTypeWrapper<CmsContentTypeStringCollection>;
  CmsContentTypeStringFilter: CmsContentTypeStringFilter;
  CmsContentTypeStringLinkingCollections: ResolverTypeWrapper<CmsContentTypeStringLinkingCollections>;
  CmsContentTypeStringOrder: CmsContentTypeStringOrder;
  CmsContentTypeStringRichValue: ResolverTypeWrapper<CmsContentTypeStringRichValue>;
  CmsContentTypeStringRichValueAssets: ResolverTypeWrapper<CmsContentTypeStringRichValueAssets>;
  CmsContentTypeStringRichValueEntries: ResolverTypeWrapper<CmsContentTypeStringRichValueEntries>;
  CmsContentTypeStringRichValueLinks: ResolverTypeWrapper<CmsContentTypeStringRichValueLinks>;
  CmsContentTypeStringSubvalueCollection: ResolverTypeWrapper<CmsContentTypeStringSubvalueCollection>;
  CmsContentfulMetadata: ResolverTypeWrapper<CmsContentfulMetadata>;
  CmsContentfulMetadataFilter: CmsContentfulMetadataFilter;
  CmsContentfulMetadataTagsFilter: CmsContentfulMetadataTagsFilter;
  CmsContentfulTag: ResolverTypeWrapper<CmsContentfulTag>;
  CmsDateTime: ResolverTypeWrapper<Scalars['CmsDateTime']>;
  CmsDimension: ResolverTypeWrapper<Scalars['CmsDimension']>;
  CmsEntry: ResolversTypes['CmsAnnouncement'] | ResolversTypes['CmsAward'] | ResolversTypes['CmsBadge'] | ResolversTypes['CmsBumper'] | ResolversTypes['CmsCommunityPartner'] | ResolversTypes['CmsContentTypeString'] | ResolversTypes['CmsEvent'] | ResolversTypes['CmsEventRestriction'] | ResolversTypes['CmsFaq'] | ResolversTypes['CmsForm'] | ResolversTypes['CmsGlobalSponsor'] | ResolversTypes['CmsHiringCompany'] | ResolversTypes['CmsHiringPost'] | ResolversTypes['CmsLegalDocument'] | ResolversTypes['CmsLocalizationConfig'] | ResolversTypes['CmsNewsCoverage'] | ResolversTypes['CmsPressPhoto'] | ResolversTypes['CmsProgram'] | ResolversTypes['CmsRegion'] | ResolversTypes['CmsSite'] | ResolversTypes['CmsSocialMedia'] | ResolversTypes['CmsStockMusic'] | ResolversTypes['CmsTestimonial'];
  CmsEntryCollection: ResolverTypeWrapper<CmsEntryCollection>;
  CmsEntryFilter: CmsEntryFilter;
  CmsEntryOrder: CmsEntryOrder;
  CmsEvent: ResolverTypeWrapper<CmsEvent>;
  CmsEventCollection: ResolverTypeWrapper<CmsEventCollection>;
  CmsEventFilter: CmsEventFilter;
  CmsEventLinkingCollections: ResolverTypeWrapper<CmsEventLinkingCollections>;
  CmsEventNotice: ResolverTypeWrapper<CmsEventNotice>;
  CmsEventNoticeAssets: ResolverTypeWrapper<CmsEventNoticeAssets>;
  CmsEventNoticeEntries: ResolverTypeWrapper<CmsEventNoticeEntries>;
  CmsEventNoticeLinks: ResolverTypeWrapper<CmsEventNoticeLinks>;
  CmsEventOrder: CmsEventOrder;
  CmsEventRestriction: ResolverTypeWrapper<CmsEventRestriction>;
  CmsEventRestrictionApplicableProgramsCollection: ResolverTypeWrapper<CmsEventRestrictionApplicableProgramsCollection>;
  CmsEventRestrictionCollection: ResolverTypeWrapper<CmsEventRestrictionCollection>;
  CmsEventRestrictionFilter: CmsEventRestrictionFilter;
  CmsEventRestrictionLinkingCollections: ResolverTypeWrapper<CmsEventRestrictionLinkingCollections>;
  CmsEventRestrictionOrder: CmsEventRestrictionOrder;
  CmsFaq: ResolverTypeWrapper<CmsFaq>;
  CmsFaqAnswer: ResolverTypeWrapper<CmsFaqAnswer>;
  CmsFaqAnswerAssets: ResolverTypeWrapper<CmsFaqAnswerAssets>;
  CmsFaqAnswerEntries: ResolverTypeWrapper<CmsFaqAnswerEntries>;
  CmsFaqAnswerLinks: ResolverTypeWrapper<CmsFaqAnswerLinks>;
  CmsFaqCollection: ResolverTypeWrapper<CmsFaqCollection>;
  CmsFaqFilter: CmsFaqFilter;
  CmsFaqLinkingCollections: ResolverTypeWrapper<CmsFaqLinkingCollections>;
  CmsFaqOrder: CmsFaqOrder;
  CmsFaqRelatedAnswersCollection: ResolverTypeWrapper<CmsFaqRelatedAnswersCollection>;
  CmsForm: ResolverTypeWrapper<CmsForm>;
  CmsFormCollection: ResolverTypeWrapper<CmsFormCollection>;
  CmsFormDetails: ResolverTypeWrapper<CmsFormDetails>;
  CmsFormDetailsAssets: ResolverTypeWrapper<CmsFormDetailsAssets>;
  CmsFormDetailsEntries: ResolverTypeWrapper<CmsFormDetailsEntries>;
  CmsFormDetailsLinks: ResolverTypeWrapper<CmsFormDetailsLinks>;
  CmsFormFilter: CmsFormFilter;
  CmsFormLinkingCollections: ResolverTypeWrapper<CmsFormLinkingCollections>;
  CmsFormOrder: CmsFormOrder;
  CmsFormSidebar: ResolverTypeWrapper<CmsFormSidebar>;
  CmsFormSidebarAssets: ResolverTypeWrapper<CmsFormSidebarAssets>;
  CmsFormSidebarEntries: ResolverTypeWrapper<CmsFormSidebarEntries>;
  CmsFormSidebarLinks: ResolverTypeWrapper<CmsFormSidebarLinks>;
  CmsGlobalSponsor: ResolverTypeWrapper<CmsGlobalSponsor>;
  CmsGlobalSponsorCollection: ResolverTypeWrapper<CmsGlobalSponsorCollection>;
  CmsGlobalSponsorFilter: CmsGlobalSponsorFilter;
  CmsGlobalSponsorLinkingCollections: ResolverTypeWrapper<CmsGlobalSponsorLinkingCollections>;
  CmsGlobalSponsorOrder: CmsGlobalSponsorOrder;
  CmsHexColor: ResolverTypeWrapper<Scalars['CmsHexColor']>;
  CmsHiringCompany: ResolverTypeWrapper<CmsHiringCompany>;
  CmsHiringCompanyCollection: ResolverTypeWrapper<CmsHiringCompanyCollection>;
  CmsHiringCompanyDescription: ResolverTypeWrapper<CmsHiringCompanyDescription>;
  CmsHiringCompanyDescriptionAssets: ResolverTypeWrapper<CmsHiringCompanyDescriptionAssets>;
  CmsHiringCompanyDescriptionEntries: ResolverTypeWrapper<CmsHiringCompanyDescriptionEntries>;
  CmsHiringCompanyDescriptionLinks: ResolverTypeWrapper<CmsHiringCompanyDescriptionLinks>;
  CmsHiringCompanyFilter: CmsHiringCompanyFilter;
  CmsHiringCompanyLinkingCollections: ResolverTypeWrapper<CmsHiringCompanyLinkingCollections>;
  CmsHiringCompanyOrder: CmsHiringCompanyOrder;
  CmsHiringPost: ResolverTypeWrapper<CmsHiringPost>;
  CmsHiringPostCollection: ResolverTypeWrapper<CmsHiringPostCollection>;
  CmsHiringPostDescription: ResolverTypeWrapper<CmsHiringPostDescription>;
  CmsHiringPostDescriptionAssets: ResolverTypeWrapper<CmsHiringPostDescriptionAssets>;
  CmsHiringPostDescriptionEntries: ResolverTypeWrapper<CmsHiringPostDescriptionEntries>;
  CmsHiringPostDescriptionLinks: ResolverTypeWrapper<CmsHiringPostDescriptionLinks>;
  CmsHiringPostFilter: CmsHiringPostFilter;
  CmsHiringPostLinkingCollections: ResolverTypeWrapper<CmsHiringPostLinkingCollections>;
  CmsHiringPostOrder: CmsHiringPostOrder;
  CmsHiringPostRegionsCollection: ResolverTypeWrapper<CmsHiringPostRegionsCollection>;
  CmsImageFormat: CmsImageFormat;
  CmsImageResizeFocus: CmsImageResizeFocus;
  CmsImageResizeStrategy: CmsImageResizeStrategy;
  CmsImageTransformOptions: CmsImageTransformOptions;
  CmsJSON: ResolverTypeWrapper<Scalars['CmsJSON']>;
  CmsLegalDocument: ResolverTypeWrapper<CmsLegalDocument>;
  CmsLegalDocumentCollection: ResolverTypeWrapper<CmsLegalDocumentCollection>;
  CmsLegalDocumentFilter: CmsLegalDocumentFilter;
  CmsLegalDocumentLinkingCollections: ResolverTypeWrapper<CmsLegalDocumentLinkingCollections>;
  CmsLegalDocumentOrder: CmsLegalDocumentOrder;
  CmsLocalizationConfig: ResolverTypeWrapper<CmsLocalizationConfig>;
  CmsLocalizationConfigCollection: ResolverTypeWrapper<CmsLocalizationConfigCollection>;
  CmsLocalizationConfigFilter: CmsLocalizationConfigFilter;
  CmsLocalizationConfigLinkingCollections: ResolverTypeWrapper<CmsLocalizationConfigLinkingCollections>;
  CmsLocalizationConfigOrder: CmsLocalizationConfigOrder;
  CmsLocalizationConfigRequiredEventRestrictionsCollection: ResolverTypeWrapper<CmsLocalizationConfigRequiredEventRestrictionsCollection>;
  CmsLocation: ResolverTypeWrapper<CmsLocation>;
  CmsNewsCoverage: ResolverTypeWrapper<CmsNewsCoverage>;
  CmsNewsCoverageCollection: ResolverTypeWrapper<CmsNewsCoverageCollection>;
  CmsNewsCoverageFilter: CmsNewsCoverageFilter;
  CmsNewsCoverageLinkingCollections: ResolverTypeWrapper<CmsNewsCoverageLinkingCollections>;
  CmsNewsCoverageOrder: CmsNewsCoverageOrder;
  CmsPressPhoto: ResolverTypeWrapper<CmsPressPhoto>;
  CmsPressPhotoCollection: ResolverTypeWrapper<CmsPressPhotoCollection>;
  CmsPressPhotoFilter: CmsPressPhotoFilter;
  CmsPressPhotoLinkingCollections: ResolverTypeWrapper<CmsPressPhotoLinkingCollections>;
  CmsPressPhotoOrder: CmsPressPhotoOrder;
  CmsProgram: ResolverTypeWrapper<CmsProgram>;
  CmsProgramCollection: ResolverTypeWrapper<CmsProgramCollection>;
  CmsProgramEducationDetails: ResolverTypeWrapper<CmsProgramEducationDetails>;
  CmsProgramEducationDetailsAssets: ResolverTypeWrapper<CmsProgramEducationDetailsAssets>;
  CmsProgramEducationDetailsEntries: ResolverTypeWrapper<CmsProgramEducationDetailsEntries>;
  CmsProgramEducationDetailsLinks: ResolverTypeWrapper<CmsProgramEducationDetailsLinks>;
  CmsProgramEligibility: ResolverTypeWrapper<CmsProgramEligibility>;
  CmsProgramEligibilityAssets: ResolverTypeWrapper<CmsProgramEligibilityAssets>;
  CmsProgramEligibilityEntries: ResolverTypeWrapper<CmsProgramEligibilityEntries>;
  CmsProgramEligibilityLinks: ResolverTypeWrapper<CmsProgramEligibilityLinks>;
  CmsProgramFilter: CmsProgramFilter;
  CmsProgramLinkingCollections: ResolverTypeWrapper<CmsProgramLinkingCollections>;
  CmsProgramOrder: CmsProgramOrder;
  CmsProgramPresentingSponsorsCollection: ResolverTypeWrapper<CmsProgramPresentingSponsorsCollection>;
  CmsProgramVolunteerBlurb: ResolverTypeWrapper<CmsProgramVolunteerBlurb>;
  CmsProgramVolunteerBlurbAssets: ResolverTypeWrapper<CmsProgramVolunteerBlurbAssets>;
  CmsProgramVolunteerBlurbEntries: ResolverTypeWrapper<CmsProgramVolunteerBlurbEntries>;
  CmsProgramVolunteerBlurbLinks: ResolverTypeWrapper<CmsProgramVolunteerBlurbLinks>;
  CmsProgramVolunteerDetails: ResolverTypeWrapper<CmsProgramVolunteerDetails>;
  CmsProgramVolunteerDetailsAssets: ResolverTypeWrapper<CmsProgramVolunteerDetailsAssets>;
  CmsProgramVolunteerDetailsEntries: ResolverTypeWrapper<CmsProgramVolunteerDetailsEntries>;
  CmsProgramVolunteerDetailsLinks: ResolverTypeWrapper<CmsProgramVolunteerDetailsLinks>;
  CmsQuality: ResolverTypeWrapper<Scalars['CmsQuality']>;
  CmsQuery: ResolverTypeWrapper<CmsQuery>;
  CmsRectangle: ResolverTypeWrapper<Scalars['CmsRectangle']>;
  CmsRegion: ResolverTypeWrapper<CmsRegion>;
  CmsRegionCollection: ResolverTypeWrapper<CmsRegionCollection>;
  CmsRegionFilter: CmsRegionFilter;
  CmsRegionLinkingCollections: ResolverTypeWrapper<CmsRegionLinkingCollections>;
  CmsRegionOrder: CmsRegionOrder;
  CmsSite: ResolverTypeWrapper<CmsSite>;
  CmsSiteCollection: ResolverTypeWrapper<CmsSiteCollection>;
  CmsSiteFilter: CmsSiteFilter;
  CmsSiteLinkingCollections: ResolverTypeWrapper<CmsSiteLinkingCollections>;
  CmsSiteOrder: CmsSiteOrder;
  CmsSocialMedia: ResolverTypeWrapper<CmsSocialMedia>;
  CmsSocialMediaCollection: ResolverTypeWrapper<CmsSocialMediaCollection>;
  CmsSocialMediaFilter: CmsSocialMediaFilter;
  CmsSocialMediaLinkingCollections: ResolverTypeWrapper<CmsSocialMediaLinkingCollections>;
  CmsSocialMediaOrder: CmsSocialMediaOrder;
  CmsStockMusic: ResolverTypeWrapper<CmsStockMusic>;
  CmsStockMusicCollection: ResolverTypeWrapper<CmsStockMusicCollection>;
  CmsStockMusicFilter: CmsStockMusicFilter;
  CmsStockMusicLinkingCollections: ResolverTypeWrapper<CmsStockMusicLinkingCollections>;
  CmsStockMusicOrder: CmsStockMusicOrder;
  CmsSys: ResolverTypeWrapper<CmsSys>;
  CmsSysFilter: CmsSysFilter;
  CmsTestimonial: ResolverTypeWrapper<CmsTestimonial>;
  CmsTestimonialCollection: ResolverTypeWrapper<CmsTestimonialCollection>;
  CmsTestimonialFilter: CmsTestimonialFilter;
  CmsTestimonialLinkingCollections: ResolverTypeWrapper<CmsTestimonialLinkingCollections>;
  CmsTestimonialOrder: CmsTestimonialOrder;
  CmscfEventNestedFilter: CmscfEventNestedFilter;
  CmscfGlobalSponsorNestedFilter: CmscfGlobalSponsorNestedFilter;
  CmscfHiringCompanyNestedFilter: CmscfHiringCompanyNestedFilter;
  CmscfLocalizationConfigNestedFilter: CmscfLocalizationConfigNestedFilter;
  CmscfProgramNestedFilter: CmscfProgramNestedFilter;
  CmscfRegionNestedFilter: CmscfRegionNestedFilter;
  EmailJSONObject: ResolverTypeWrapper<Scalars['EmailJSONObject']>;
  EmailMutation: ResolverTypeWrapper<EmailMutation>;
  EmailQuery: ResolverTypeWrapper<EmailQuery>;
  Float: ResolverTypeWrapper<Scalars['Float']>;
  GeoGeoResult: ResolverTypeWrapper<GeoGeoResult>;
  GeoQuery: ResolverTypeWrapper<GeoQuery>;
  GithubContributor: ResolverTypeWrapper<GithubContributor>;
  GithubQuery: ResolverTypeWrapper<GithubQuery>;
  ID: ResolverTypeWrapper<Scalars['ID']>;
  Int: ResolverTypeWrapper<Scalars['Int']>;
  JSONObject: ResolverTypeWrapper<Scalars['JSONObject']>;
  LabsDateTime: ResolverTypeWrapper<Scalars['LabsDateTime']>;
  LabsEvent: ResolverTypeWrapper<LabsEvent>;
  LabsGtLtEq: LabsGtLtEq;
  LabsIdOrUsernameInput: LabsIdOrUsernameInput;
  LabsJSON: ResolverTypeWrapper<Scalars['LabsJSON']>;
  LabsJSONObject: ResolverTypeWrapper<Scalars['LabsJSONObject']>;
  LabsMatch: ResolverTypeWrapper<LabsMatch>;
  LabsMentor: ResolverTypeWrapper<LabsMentor>;
  LabsMentorApplyInput: LabsMentorApplyInput;
  LabsMentorCreateInput: LabsMentorCreateInput;
  LabsMentorEditInput: LabsMentorEditInput;
  LabsMentorFilterInput: LabsMentorFilterInput;
  LabsMentorStatus: LabsMentorStatus;
  LabsMutation: ResolverTypeWrapper<LabsMutation>;
  LabsPersonType: LabsPersonType;
  LabsPreference: ResolverTypeWrapper<LabsPreference>;
  LabsProject: ResolverTypeWrapper<LabsProject>;
  LabsProjectCreateInput: LabsProjectCreateInput;
  LabsProjectEditInput: LabsProjectEditInput;
  LabsProjectStatus: LabsProjectStatus;
  LabsQuery: ResolverTypeWrapper<LabsQuery>;
  LabsRejectionReason: LabsRejectionReason;
  LabsStat: ResolverTypeWrapper<LabsStat>;
  LabsStudent: ResolverTypeWrapper<LabsStudent>;
  LabsStudentApplyInput: LabsStudentApplyInput;
  LabsStudentCreateInput: LabsStudentCreateInput;
  LabsStudentEditInput: LabsStudentEditInput;
  LabsStudentFilterInput: LabsStudentFilterInput;
  LabsStudentStatus: LabsStudentStatus;
  LabsSurvey: ResolverTypeWrapper<LabsSurvey>;
  LabsSurveyCreateInput: LabsSurveyCreateInput;
  LabsSurveyOccurence: ResolverTypeWrapper<LabsSurveyOccurence>;
  LabsSurveyRespondInput: LabsSurveyRespondInput;
  LabsSurveyResponse: ResolverTypeWrapper<LabsSurveyResponse>;
  LabsTag: ResolverTypeWrapper<LabsTag>;
  LabsTagCreateInput: LabsTagCreateInput;
  LabsTagEditInput: LabsTagEditInput;
  LabsTagTrainingSubmission: ResolverTypeWrapper<LabsTagTrainingSubmission>;
  LabsTagType: LabsTagType;
  LabsTrack: LabsTrack;
  LabsTrackRecommendation: ResolverTypeWrapper<LabsTrackRecommendation>;
  Mutation: ResolverTypeWrapper<{}>;
  Query: ResolverTypeWrapper<{}>;
  ShowcaseAddReactionsInput: ShowcaseAddReactionsInput;
  ShowcaseAward: ResolverTypeWrapper<ShowcaseAward>;
  ShowcaseCreateJudgingPoolInput: ShowcaseCreateJudgingPoolInput;
  ShowcaseCreateProjectInput: ShowcaseCreateProjectInput;
  ShowcaseDateTime: ResolverTypeWrapper<Scalars['ShowcaseDateTime']>;
  ShowcaseEditPhotoInput: ShowcaseEditPhotoInput;
  ShowcaseEditProjectInput: ShowcaseEditProjectInput;
  ShowcaseImportPhotoInput: ShowcaseImportPhotoInput;
  ShowcaseJudgement: ResolverTypeWrapper<ShowcaseJudgement>;
  ShowcaseJudgingCriteria: ResolverTypeWrapper<ShowcaseJudgingCriteria>;
  ShowcaseJudgingCriteriaInput: ShowcaseJudgingCriteriaInput;
  ShowcaseJudgingPool: ResolverTypeWrapper<ShowcaseJudgingPool>;
  ShowcaseJudgingResult: ResolverTypeWrapper<ShowcaseJudgingResult>;
  ShowcaseJudgingResultSubValue: ResolverTypeWrapper<ShowcaseJudgingResultSubValue>;
  ShowcaseMedia: ResolverTypeWrapper<ShowcaseMedia>;
  ShowcaseMediaFilterType: ShowcaseMediaFilterType;
  ShowcaseMediaTopic: ShowcaseMediaTopic;
  ShowcaseMediaType: ShowcaseMediaType;
  ShowcaseMember: ResolverTypeWrapper<ShowcaseMember>;
  ShowcaseMetadata: ResolverTypeWrapper<ShowcaseMetadata>;
  ShowcaseMetadataVisibility: ShowcaseMetadataVisibility;
  ShowcaseMetadataWhere: ShowcaseMetadataWhere;
  ShowcaseMetricAggregate: ResolverTypeWrapper<ShowcaseMetricAggregate>;
  ShowcaseMetricTimeSeries: ResolverTypeWrapper<ShowcaseMetricTimeSeries>;
  ShowcaseMutation: ResolverTypeWrapper<ShowcaseMutation>;
  ShowcasePeerJudgement: ResolverTypeWrapper<ShowcasePeerJudgement>;
  ShowcasePhoto: ResolverTypeWrapper<ShowcasePhoto>;
  ShowcasePhotoOrderByArg: ShowcasePhotoOrderByArg;
  ShowcasePhotosWhere: ShowcasePhotosWhere;
  ShowcaseProject: ResolverTypeWrapper<ShowcaseProject>;
  ShowcaseProjectOrderByArg: ShowcaseProjectOrderByArg;
  ShowcaseProjectType: ShowcaseProjectType;
  ShowcaseProjectsWhere: ShowcaseProjectsWhere;
  ShowcaseQuery: ResolverTypeWrapper<ShowcaseQuery>;
  ShowcaseReactionCount: ResolverTypeWrapper<ShowcaseReactionCount>;
  ShowcaseReactionType: ShowcaseReactionType;
  ShowcaseResizeStrategy: ShowcaseResizeStrategy;
  ShowyourworkDateTime: ResolverTypeWrapper<Scalars['ShowyourworkDateTime']>;
  ShowyourworkDiscordMessage: ResolverTypeWrapper<ShowyourworkDiscordMessage>;
  ShowyourworkQuery: ResolverTypeWrapper<ShowyourworkQuery>;
  ShowyourworkResizeStrategy: ShowyourworkResizeStrategy;
  String: ResolverTypeWrapper<Scalars['String']>;
  Subscription: ResolverTypeWrapper<{}>;
  TwitchLiveStatus: ResolverTypeWrapper<TwitchLiveStatus>;
  TwitchQuery: ResolverTypeWrapper<TwitchQuery>;
  Upload: ResolverTypeWrapper<Scalars['Upload']>;
}>;

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = ResolversObject<{
  AccountBadge: AccountBadge;
  AccountBadgeInput: AccountBadgeInput;
  AccountDiscordInformation: AccountDiscordInformation;
  AccountDiscordTokenInfoInput: AccountDiscordTokenInfoInput;
  AccountDisplayedBadgeInput: AccountDisplayedBadgeInput;
  AccountMutation: AccountMutation;
  AccountQuery: AccountQuery;
  AccountRole: AccountRole;
  AccountSubscriptionBadge: AccountSubscriptionBadge;
  AccountSubscriptionUser: AccountSubscriptionUser;
  AccountUpdateUserInput: AccountUpdateUserInput;
  AccountUser: AccountUser;
  AccountUserPictureTransformInput: AccountUserPictureTransformInput;
  AccountUserSearch: AccountUserSearch;
  AccountUserWhereInput: AccountUserWhereInput;
  AdvisorAdvisor: AdvisorAdvisor;
  AdvisorAdvisorCreateInput: AdvisorAdvisorCreateInput;
  AdvisorAdvisorLimitInput: AdvisorAdvisorLimitInput;
  AdvisorAdvisorWhereInput: AdvisorAdvisorWhereInput;
  AdvisorDateTime: Scalars['AdvisorDateTime'];
  AdvisorEventParticipation: AdvisorEventParticipation;
  AdvisorEventParticipationCreateInput: AdvisorEventParticipationCreateInput;
  AdvisorJSONObject: Scalars['AdvisorJSONObject'];
  AdvisorMutation: AdvisorMutation;
  AdvisorPendingRequests: AdvisorPendingRequests;
  AdvisorProfile: AdvisorProfile;
  AdvisorProfileCreateInput: AdvisorProfileCreateInput;
  AdvisorProfileEditInput: AdvisorProfileEditInput;
  AdvisorQuery: AdvisorQuery;
  AdvisorRecommendation: AdvisorRecommendation;
  AdvisorRecommendationCreateInput: AdvisorRecommendationCreateInput;
  AdvisorRecommendationEditInput: AdvisorRecommendationEditInput;
  AdvisorRemainingRequestsByAdvisorType: AdvisorRemainingRequestsByAdvisorType;
  AdvisorRemainingRequestsType: AdvisorRemainingRequestsType;
  AdvisorRequest: AdvisorRequest;
  AdvisorRequestAssignment: AdvisorRequestAssignment;
  AdvisorRequestCount: AdvisorRequestCount;
  AdvisorRequestCountWhereInput: AdvisorRequestCountWhereInput;
  AdvisorTag: AdvisorTag;
  AdvisorTagCreateInput: AdvisorTagCreateInput;
  BlogAcfFieldGroup: ResolversParentTypes['BlogCategory_Display'] | ResolversParentTypes['BlogPost_Authoroverride'] | ResolversParentTypes['BlogPost_Marketing'] | ResolversParentTypes['BlogPost_Release'];
  BlogAvatar: BlogAvatar;
  BlogCategory: BlogCategory;
  BlogCategoryToAncestorsCategoryConnection: BlogCategoryToAncestorsCategoryConnection;
  BlogCategoryToAncestorsCategoryConnectionEdge: BlogCategoryToAncestorsCategoryConnectionEdge;
  BlogCategoryToCategoryConnection: BlogCategoryToCategoryConnection;
  BlogCategoryToCategoryConnectionEdge: BlogCategoryToCategoryConnectionEdge;
  BlogCategoryToCategoryConnectionWhereArgs: BlogCategoryToCategoryConnectionWhereArgs;
  BlogCategoryToContentNodeConnection: BlogCategoryToContentNodeConnection;
  BlogCategoryToContentNodeConnectionEdge: BlogCategoryToContentNodeConnectionEdge;
  BlogCategoryToContentNodeConnectionWhereArgs: BlogCategoryToContentNodeConnectionWhereArgs;
  BlogCategoryToParentCategoryConnectionEdge: BlogCategoryToParentCategoryConnectionEdge;
  BlogCategoryToPostConnection: BlogCategoryToPostConnection;
  BlogCategoryToPostConnectionEdge: BlogCategoryToPostConnectionEdge;
  BlogCategoryToPostConnectionWhereArgs: BlogCategoryToPostConnectionWhereArgs;
  BlogCategoryToTaxonomyConnectionEdge: BlogCategoryToTaxonomyConnectionEdge;
  BlogCategory_Display: BlogCategory_Display;
  BlogComment: BlogComment;
  BlogCommentAuthor: BlogCommentAuthor;
  BlogCommentToCommentConnection: BlogCommentToCommentConnection;
  BlogCommentToCommentConnectionEdge: BlogCommentToCommentConnectionEdge;
  BlogCommentToCommentConnectionWhereArgs: BlogCommentToCommentConnectionWhereArgs;
  BlogCommentToCommenterConnectionEdge: BlogCommentToCommenterConnectionEdge;
  BlogCommentToContentNodeConnectionEdge: BlogCommentToContentNodeConnectionEdge;
  BlogCommentToParentCommentConnectionEdge: BlogCommentToParentCommentConnectionEdge;
  BlogCommentToParentCommentConnectionWhereArgs: BlogCommentToParentCommentConnectionWhereArgs;
  BlogCommenter: ResolversParentTypes['BlogCommentAuthor'] | ResolversParentTypes['BlogUser'];
  BlogContentNode: ResolversParentTypes['BlogMediaItem'] | ResolversParentTypes['BlogPage'] | ResolversParentTypes['BlogPost'];
  BlogContentNodeToContentTypeConnectionEdge: BlogContentNodeToContentTypeConnectionEdge;
  BlogContentNodeToEditLastConnectionEdge: BlogContentNodeToEditLastConnectionEdge;
  BlogContentNodeToEditLockConnectionEdge: BlogContentNodeToEditLockConnectionEdge;
  BlogContentNodeToEnqueuedScriptConnection: BlogContentNodeToEnqueuedScriptConnection;
  BlogContentNodeToEnqueuedScriptConnectionEdge: BlogContentNodeToEnqueuedScriptConnectionEdge;
  BlogContentNodeToEnqueuedStylesheetConnection: BlogContentNodeToEnqueuedStylesheetConnection;
  BlogContentNodeToEnqueuedStylesheetConnectionEdge: BlogContentNodeToEnqueuedStylesheetConnectionEdge;
  BlogContentRevisionUnion: ResolversUnionTypes['BlogContentRevisionUnion'];
  BlogContentTemplate: ResolversParentTypes['BlogDefaultTemplate'];
  BlogContentType: BlogContentType;
  BlogContentTypeToContentNodeConnection: BlogContentTypeToContentNodeConnection;
  BlogContentTypeToContentNodeConnectionEdge: BlogContentTypeToContentNodeConnectionEdge;
  BlogContentTypeToContentNodeConnectionWhereArgs: BlogContentTypeToContentNodeConnectionWhereArgs;
  BlogContentTypeToTaxonomyConnection: BlogContentTypeToTaxonomyConnection;
  BlogContentTypeToTaxonomyConnectionEdge: BlogContentTypeToTaxonomyConnectionEdge;
  BlogCreateCategoryInput: BlogCreateCategoryInput;
  BlogCreateCategoryPayload: BlogCreateCategoryPayload;
  BlogCreateCommentInput: BlogCreateCommentInput;
  BlogCreateCommentPayload: BlogCreateCommentPayload;
  BlogCreateMediaItemInput: BlogCreateMediaItemInput;
  BlogCreateMediaItemPayload: BlogCreateMediaItemPayload;
  BlogCreatePageInput: BlogCreatePageInput;
  BlogCreatePagePayload: BlogCreatePagePayload;
  BlogCreatePostFormatInput: BlogCreatePostFormatInput;
  BlogCreatePostFormatPayload: BlogCreatePostFormatPayload;
  BlogCreatePostInput: BlogCreatePostInput;
  BlogCreatePostPayload: BlogCreatePostPayload;
  BlogCreateTagInput: BlogCreateTagInput;
  BlogCreateTagPayload: BlogCreateTagPayload;
  BlogCreateUserInput: BlogCreateUserInput;
  BlogCreateUserPayload: BlogCreateUserPayload;
  BlogDatabaseIdentifier: ResolversParentTypes['BlogCategory'] | ResolversParentTypes['BlogComment'] | ResolversParentTypes['BlogMediaItem'] | ResolversParentTypes['BlogMenu'] | ResolversParentTypes['BlogMenuItem'] | ResolversParentTypes['BlogPage'] | ResolversParentTypes['BlogPost'] | ResolversParentTypes['BlogPostFormat'] | ResolversParentTypes['BlogTag'] | ResolversParentTypes['BlogUser'];
  BlogDateInput: BlogDateInput;
  BlogDateQueryInput: BlogDateQueryInput;
  BlogDefaultTemplate: BlogDefaultTemplate;
  BlogDeleteCategoryInput: BlogDeleteCategoryInput;
  BlogDeleteCategoryPayload: BlogDeleteCategoryPayload;
  BlogDeleteCommentInput: BlogDeleteCommentInput;
  BlogDeleteCommentPayload: BlogDeleteCommentPayload;
  BlogDeleteMediaItemInput: BlogDeleteMediaItemInput;
  BlogDeleteMediaItemPayload: BlogDeleteMediaItemPayload;
  BlogDeletePageInput: BlogDeletePageInput;
  BlogDeletePagePayload: BlogDeletePagePayload;
  BlogDeletePostFormatInput: BlogDeletePostFormatInput;
  BlogDeletePostFormatPayload: BlogDeletePostFormatPayload;
  BlogDeletePostInput: BlogDeletePostInput;
  BlogDeletePostPayload: BlogDeletePostPayload;
  BlogDeleteTagInput: BlogDeleteTagInput;
  BlogDeleteTagPayload: BlogDeleteTagPayload;
  BlogDeleteUserInput: BlogDeleteUserInput;
  BlogDeleteUserPayload: BlogDeleteUserPayload;
  BlogDiscussionSettings: BlogDiscussionSettings;
  BlogEnqueuedAsset: ResolversParentTypes['BlogEnqueuedScript'] | ResolversParentTypes['BlogEnqueuedStylesheet'];
  BlogEnqueuedScript: BlogEnqueuedScript;
  BlogEnqueuedStylesheet: BlogEnqueuedStylesheet;
  BlogGeneralSettings: BlogGeneralSettings;
  BlogHierarchicalContentNode: ResolversParentTypes['BlogMediaItem'] | ResolversParentTypes['BlogPage'];
  BlogHierarchicalContentNodeToContentNodeAncestorsConnection: BlogHierarchicalContentNodeToContentNodeAncestorsConnection;
  BlogHierarchicalContentNodeToContentNodeAncestorsConnectionEdge: BlogHierarchicalContentNodeToContentNodeAncestorsConnectionEdge;
  BlogHierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs: BlogHierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs;
  BlogHierarchicalContentNodeToContentNodeChildrenConnection: BlogHierarchicalContentNodeToContentNodeChildrenConnection;
  BlogHierarchicalContentNodeToContentNodeChildrenConnectionEdge: BlogHierarchicalContentNodeToContentNodeChildrenConnectionEdge;
  BlogHierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs: BlogHierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs;
  BlogHierarchicalContentNodeToParentContentNodeConnectionEdge: BlogHierarchicalContentNodeToParentContentNodeConnectionEdge;
  BlogHierarchicalTermNode: ResolversParentTypes['BlogCategory'];
  BlogMediaDetails: BlogMediaDetails;
  BlogMediaItem: BlogMediaItem;
  BlogMediaItemMeta: BlogMediaItemMeta;
  BlogMediaItemToCommentConnection: BlogMediaItemToCommentConnection;
  BlogMediaItemToCommentConnectionEdge: BlogMediaItemToCommentConnectionEdge;
  BlogMediaItemToCommentConnectionWhereArgs: BlogMediaItemToCommentConnectionWhereArgs;
  BlogMediaSize: BlogMediaSize;
  BlogMenu: BlogMenu;
  BlogMenuItem: Omit<BlogMenuItem, 'connectedObject'> & { connectedObject?: Maybe<ResolversParentTypes['BlogMenuItemObjectUnion']> };
  BlogMenuItemLinkable: ResolversParentTypes['BlogCategory'] | ResolversParentTypes['BlogPage'] | ResolversParentTypes['BlogPost'] | ResolversParentTypes['BlogTag'];
  BlogMenuItemObjectUnion: ResolversUnionTypes['BlogMenuItemObjectUnion'];
  BlogMenuItemToMenuConnectionEdge: BlogMenuItemToMenuConnectionEdge;
  BlogMenuItemToMenuItemConnection: BlogMenuItemToMenuItemConnection;
  BlogMenuItemToMenuItemConnectionEdge: BlogMenuItemToMenuItemConnectionEdge;
  BlogMenuItemToMenuItemConnectionWhereArgs: BlogMenuItemToMenuItemConnectionWhereArgs;
  BlogMenuItemToMenuItemLinkableConnectionEdge: BlogMenuItemToMenuItemLinkableConnectionEdge;
  BlogMenuToMenuItemConnection: BlogMenuToMenuItemConnection;
  BlogMenuToMenuItemConnectionEdge: BlogMenuToMenuItemConnectionEdge;
  BlogMenuToMenuItemConnectionWhereArgs: BlogMenuToMenuItemConnectionWhereArgs;
  BlogNode: ResolversParentTypes['BlogCategory'] | ResolversParentTypes['BlogComment'] | ResolversParentTypes['BlogCommentAuthor'] | ResolversParentTypes['BlogContentType'] | ResolversParentTypes['BlogEnqueuedScript'] | ResolversParentTypes['BlogEnqueuedStylesheet'] | ResolversParentTypes['BlogMediaItem'] | ResolversParentTypes['BlogMenu'] | ResolversParentTypes['BlogMenuItem'] | ResolversParentTypes['BlogPage'] | ResolversParentTypes['BlogPlugin'] | ResolversParentTypes['BlogPost'] | ResolversParentTypes['BlogPostFormat'] | ResolversParentTypes['BlogTag'] | ResolversParentTypes['BlogTaxonomy'] | ResolversParentTypes['BlogTheme'] | ResolversParentTypes['BlogUser'] | ResolversParentTypes['BlogUserRole'];
  BlogNodeWithAuthor: ResolversParentTypes['BlogMediaItem'] | ResolversParentTypes['BlogPage'] | ResolversParentTypes['BlogPost'];
  BlogNodeWithAuthorToUserConnectionEdge: BlogNodeWithAuthorToUserConnectionEdge;
  BlogNodeWithComments: ResolversParentTypes['BlogMediaItem'] | ResolversParentTypes['BlogPage'] | ResolversParentTypes['BlogPost'];
  BlogNodeWithContentEditor: ResolversParentTypes['BlogPage'] | ResolversParentTypes['BlogPost'];
  BlogNodeWithExcerpt: ResolversParentTypes['BlogPost'];
  BlogNodeWithFeaturedImage: ResolversParentTypes['BlogPage'] | ResolversParentTypes['BlogPost'];
  BlogNodeWithFeaturedImageToMediaItemConnectionEdge: BlogNodeWithFeaturedImageToMediaItemConnectionEdge;
  BlogNodeWithPageAttributes: ResolversParentTypes['BlogPage'];
  BlogNodeWithRevisions: ResolversParentTypes['BlogPage'] | ResolversParentTypes['BlogPost'];
  BlogNodeWithRevisionsToContentNodeConnectionEdge: BlogNodeWithRevisionsToContentNodeConnectionEdge;
  BlogNodeWithTemplate: ResolversParentTypes['BlogMediaItem'] | ResolversParentTypes['BlogPage'] | ResolversParentTypes['BlogPost'];
  BlogNodeWithTitle: ResolversParentTypes['BlogMediaItem'] | ResolversParentTypes['BlogPage'] | ResolversParentTypes['BlogPost'];
  BlogNodeWithTrackbacks: ResolversParentTypes['BlogPost'];
  BlogPage: BlogPage;
  BlogPageToCommentConnection: BlogPageToCommentConnection;
  BlogPageToCommentConnectionEdge: BlogPageToCommentConnectionEdge;
  BlogPageToCommentConnectionWhereArgs: BlogPageToCommentConnectionWhereArgs;
  BlogPageToPreviewConnectionEdge: BlogPageToPreviewConnectionEdge;
  BlogPageToRevisionConnection: BlogPageToRevisionConnection;
  BlogPageToRevisionConnectionEdge: BlogPageToRevisionConnectionEdge;
  BlogPageToRevisionConnectionWhereArgs: BlogPageToRevisionConnectionWhereArgs;
  BlogPlugin: BlogPlugin;
  BlogPost: BlogPost;
  BlogPostCategoriesInput: BlogPostCategoriesInput;
  BlogPostCategoriesNodeInput: BlogPostCategoriesNodeInput;
  BlogPostFormat: BlogPostFormat;
  BlogPostFormatToContentNodeConnection: BlogPostFormatToContentNodeConnection;
  BlogPostFormatToContentNodeConnectionEdge: BlogPostFormatToContentNodeConnectionEdge;
  BlogPostFormatToContentNodeConnectionWhereArgs: BlogPostFormatToContentNodeConnectionWhereArgs;
  BlogPostFormatToPostConnection: BlogPostFormatToPostConnection;
  BlogPostFormatToPostConnectionEdge: BlogPostFormatToPostConnectionEdge;
  BlogPostFormatToPostConnectionWhereArgs: BlogPostFormatToPostConnectionWhereArgs;
  BlogPostFormatToTaxonomyConnectionEdge: BlogPostFormatToTaxonomyConnectionEdge;
  BlogPostObjectsConnectionOrderbyInput: BlogPostObjectsConnectionOrderbyInput;
  BlogPostPostFormatsInput: BlogPostPostFormatsInput;
  BlogPostPostFormatsNodeInput: BlogPostPostFormatsNodeInput;
  BlogPostTagsInput: BlogPostTagsInput;
  BlogPostTagsNodeInput: BlogPostTagsNodeInput;
  BlogPostToCategoryConnection: BlogPostToCategoryConnection;
  BlogPostToCategoryConnectionEdge: BlogPostToCategoryConnectionEdge;
  BlogPostToCategoryConnectionWhereArgs: BlogPostToCategoryConnectionWhereArgs;
  BlogPostToCommentConnection: BlogPostToCommentConnection;
  BlogPostToCommentConnectionEdge: BlogPostToCommentConnectionEdge;
  BlogPostToCommentConnectionWhereArgs: BlogPostToCommentConnectionWhereArgs;
  BlogPostToPostFormatConnection: BlogPostToPostFormatConnection;
  BlogPostToPostFormatConnectionEdge: BlogPostToPostFormatConnectionEdge;
  BlogPostToPostFormatConnectionWhereArgs: BlogPostToPostFormatConnectionWhereArgs;
  BlogPostToPreviewConnectionEdge: BlogPostToPreviewConnectionEdge;
  BlogPostToRevisionConnection: BlogPostToRevisionConnection;
  BlogPostToRevisionConnectionEdge: BlogPostToRevisionConnectionEdge;
  BlogPostToRevisionConnectionWhereArgs: BlogPostToRevisionConnectionWhereArgs;
  BlogPostToTagConnection: BlogPostToTagConnection;
  BlogPostToTagConnectionEdge: BlogPostToTagConnectionEdge;
  BlogPostToTagConnectionWhereArgs: BlogPostToTagConnectionWhereArgs;
  BlogPostToTermNodeConnection: BlogPostToTermNodeConnection;
  BlogPostToTermNodeConnectionEdge: BlogPostToTermNodeConnectionEdge;
  BlogPostToTermNodeConnectionWhereArgs: BlogPostToTermNodeConnectionWhereArgs;
  BlogPostTypeLabelDetails: BlogPostTypeLabelDetails;
  BlogPost_Authoroverride: BlogPost_Authoroverride;
  BlogPost_Marketing: BlogPost_Marketing;
  BlogPost_Release: BlogPost_Release;
  BlogReadingSettings: BlogReadingSettings;
  BlogRegisterUserInput: BlogRegisterUserInput;
  BlogRegisterUserPayload: BlogRegisterUserPayload;
  BlogResetUserPasswordInput: BlogResetUserPasswordInput;
  BlogResetUserPasswordPayload: BlogResetUserPasswordPayload;
  BlogRestoreCommentInput: BlogRestoreCommentInput;
  BlogRestoreCommentPayload: BlogRestoreCommentPayload;
  BlogRootMutation: BlogRootMutation;
  BlogRootQuery: BlogRootQuery;
  BlogRootQueryToCategoryConnection: BlogRootQueryToCategoryConnection;
  BlogRootQueryToCategoryConnectionEdge: BlogRootQueryToCategoryConnectionEdge;
  BlogRootQueryToCategoryConnectionWhereArgs: BlogRootQueryToCategoryConnectionWhereArgs;
  BlogRootQueryToCommentConnection: BlogRootQueryToCommentConnection;
  BlogRootQueryToCommentConnectionEdge: BlogRootQueryToCommentConnectionEdge;
  BlogRootQueryToCommentConnectionWhereArgs: BlogRootQueryToCommentConnectionWhereArgs;
  BlogRootQueryToContentNodeConnection: BlogRootQueryToContentNodeConnection;
  BlogRootQueryToContentNodeConnectionEdge: BlogRootQueryToContentNodeConnectionEdge;
  BlogRootQueryToContentNodeConnectionWhereArgs: BlogRootQueryToContentNodeConnectionWhereArgs;
  BlogRootQueryToContentRevisionUnionConnection: Omit<BlogRootQueryToContentRevisionUnionConnection, 'nodes'> & { nodes?: Maybe<Array<Maybe<ResolversParentTypes['BlogContentRevisionUnion']>>> };
  BlogRootQueryToContentRevisionUnionConnectionEdge: Omit<BlogRootQueryToContentRevisionUnionConnectionEdge, 'node'> & { node?: Maybe<ResolversParentTypes['BlogContentRevisionUnion']> };
  BlogRootQueryToContentRevisionUnionConnectionWhereArgs: BlogRootQueryToContentRevisionUnionConnectionWhereArgs;
  BlogRootQueryToContentTypeConnection: BlogRootQueryToContentTypeConnection;
  BlogRootQueryToContentTypeConnectionEdge: BlogRootQueryToContentTypeConnectionEdge;
  BlogRootQueryToEnqueuedScriptConnection: BlogRootQueryToEnqueuedScriptConnection;
  BlogRootQueryToEnqueuedScriptConnectionEdge: BlogRootQueryToEnqueuedScriptConnectionEdge;
  BlogRootQueryToEnqueuedStylesheetConnection: BlogRootQueryToEnqueuedStylesheetConnection;
  BlogRootQueryToEnqueuedStylesheetConnectionEdge: BlogRootQueryToEnqueuedStylesheetConnectionEdge;
  BlogRootQueryToMediaItemConnection: BlogRootQueryToMediaItemConnection;
  BlogRootQueryToMediaItemConnectionEdge: BlogRootQueryToMediaItemConnectionEdge;
  BlogRootQueryToMediaItemConnectionWhereArgs: BlogRootQueryToMediaItemConnectionWhereArgs;
  BlogRootQueryToMenuConnection: BlogRootQueryToMenuConnection;
  BlogRootQueryToMenuConnectionEdge: BlogRootQueryToMenuConnectionEdge;
  BlogRootQueryToMenuConnectionWhereArgs: BlogRootQueryToMenuConnectionWhereArgs;
  BlogRootQueryToMenuItemConnection: BlogRootQueryToMenuItemConnection;
  BlogRootQueryToMenuItemConnectionEdge: BlogRootQueryToMenuItemConnectionEdge;
  BlogRootQueryToMenuItemConnectionWhereArgs: BlogRootQueryToMenuItemConnectionWhereArgs;
  BlogRootQueryToPageConnection: BlogRootQueryToPageConnection;
  BlogRootQueryToPageConnectionEdge: BlogRootQueryToPageConnectionEdge;
  BlogRootQueryToPageConnectionWhereArgs: BlogRootQueryToPageConnectionWhereArgs;
  BlogRootQueryToPluginConnection: BlogRootQueryToPluginConnection;
  BlogRootQueryToPluginConnectionEdge: BlogRootQueryToPluginConnectionEdge;
  BlogRootQueryToPostConnection: BlogRootQueryToPostConnection;
  BlogRootQueryToPostConnectionEdge: BlogRootQueryToPostConnectionEdge;
  BlogRootQueryToPostConnectionWhereArgs: BlogRootQueryToPostConnectionWhereArgs;
  BlogRootQueryToPostFormatConnection: BlogRootQueryToPostFormatConnection;
  BlogRootQueryToPostFormatConnectionEdge: BlogRootQueryToPostFormatConnectionEdge;
  BlogRootQueryToPostFormatConnectionWhereArgs: BlogRootQueryToPostFormatConnectionWhereArgs;
  BlogRootQueryToTagConnection: BlogRootQueryToTagConnection;
  BlogRootQueryToTagConnectionEdge: BlogRootQueryToTagConnectionEdge;
  BlogRootQueryToTagConnectionWhereArgs: BlogRootQueryToTagConnectionWhereArgs;
  BlogRootQueryToTaxonomyConnection: BlogRootQueryToTaxonomyConnection;
  BlogRootQueryToTaxonomyConnectionEdge: BlogRootQueryToTaxonomyConnectionEdge;
  BlogRootQueryToTermNodeConnection: BlogRootQueryToTermNodeConnection;
  BlogRootQueryToTermNodeConnectionEdge: BlogRootQueryToTermNodeConnectionEdge;
  BlogRootQueryToTermNodeConnectionWhereArgs: BlogRootQueryToTermNodeConnectionWhereArgs;
  BlogRootQueryToThemeConnection: BlogRootQueryToThemeConnection;
  BlogRootQueryToThemeConnectionEdge: BlogRootQueryToThemeConnectionEdge;
  BlogRootQueryToUserConnection: BlogRootQueryToUserConnection;
  BlogRootQueryToUserConnectionEdge: BlogRootQueryToUserConnectionEdge;
  BlogRootQueryToUserConnectionWhereArgs: BlogRootQueryToUserConnectionWhereArgs;
  BlogRootQueryToUserRoleConnection: BlogRootQueryToUserRoleConnection;
  BlogRootQueryToUserRoleConnectionEdge: BlogRootQueryToUserRoleConnectionEdge;
  BlogSendPasswordResetEmailInput: BlogSendPasswordResetEmailInput;
  BlogSendPasswordResetEmailPayload: BlogSendPasswordResetEmailPayload;
  BlogSettings: BlogSettings;
  BlogTag: BlogTag;
  BlogTagToContentNodeConnection: BlogTagToContentNodeConnection;
  BlogTagToContentNodeConnectionEdge: BlogTagToContentNodeConnectionEdge;
  BlogTagToContentNodeConnectionWhereArgs: BlogTagToContentNodeConnectionWhereArgs;
  BlogTagToPostConnection: BlogTagToPostConnection;
  BlogTagToPostConnectionEdge: BlogTagToPostConnectionEdge;
  BlogTagToPostConnectionWhereArgs: BlogTagToPostConnectionWhereArgs;
  BlogTagToTaxonomyConnectionEdge: BlogTagToTaxonomyConnectionEdge;
  BlogTaxonomy: BlogTaxonomy;
  BlogTaxonomyToContentTypeConnection: BlogTaxonomyToContentTypeConnection;
  BlogTaxonomyToContentTypeConnectionEdge: BlogTaxonomyToContentTypeConnectionEdge;
  BlogTermNode: ResolversParentTypes['BlogCategory'] | ResolversParentTypes['BlogPostFormat'] | ResolversParentTypes['BlogTag'];
  BlogTermNodeToEnqueuedScriptConnection: BlogTermNodeToEnqueuedScriptConnection;
  BlogTermNodeToEnqueuedScriptConnectionEdge: BlogTermNodeToEnqueuedScriptConnectionEdge;
  BlogTermNodeToEnqueuedStylesheetConnection: BlogTermNodeToEnqueuedStylesheetConnection;
  BlogTermNodeToEnqueuedStylesheetConnectionEdge: BlogTermNodeToEnqueuedStylesheetConnectionEdge;
  BlogTheme: BlogTheme;
  BlogUniformResourceIdentifiable: ResolversParentTypes['BlogCategory'] | ResolversParentTypes['BlogContentType'] | ResolversParentTypes['BlogMediaItem'] | ResolversParentTypes['BlogPage'] | ResolversParentTypes['BlogPost'] | ResolversParentTypes['BlogPostFormat'] | ResolversParentTypes['BlogTag'] | ResolversParentTypes['BlogUser'];
  BlogUpdateCategoryInput: BlogUpdateCategoryInput;
  BlogUpdateCategoryPayload: BlogUpdateCategoryPayload;
  BlogUpdateCommentInput: BlogUpdateCommentInput;
  BlogUpdateCommentPayload: BlogUpdateCommentPayload;
  BlogUpdateMediaItemInput: BlogUpdateMediaItemInput;
  BlogUpdateMediaItemPayload: BlogUpdateMediaItemPayload;
  BlogUpdatePageInput: BlogUpdatePageInput;
  BlogUpdatePagePayload: BlogUpdatePagePayload;
  BlogUpdatePostFormatInput: BlogUpdatePostFormatInput;
  BlogUpdatePostFormatPayload: BlogUpdatePostFormatPayload;
  BlogUpdatePostInput: BlogUpdatePostInput;
  BlogUpdatePostPayload: BlogUpdatePostPayload;
  BlogUpdateSettingsInput: BlogUpdateSettingsInput;
  BlogUpdateSettingsPayload: BlogUpdateSettingsPayload;
  BlogUpdateTagInput: BlogUpdateTagInput;
  BlogUpdateTagPayload: BlogUpdateTagPayload;
  BlogUpdateUserInput: BlogUpdateUserInput;
  BlogUpdateUserPayload: BlogUpdateUserPayload;
  BlogUser: BlogUser;
  BlogUserRole: BlogUserRole;
  BlogUserToCommentConnection: BlogUserToCommentConnection;
  BlogUserToCommentConnectionEdge: BlogUserToCommentConnectionEdge;
  BlogUserToCommentConnectionWhereArgs: BlogUserToCommentConnectionWhereArgs;
  BlogUserToContentRevisionUnionConnection: Omit<BlogUserToContentRevisionUnionConnection, 'nodes'> & { nodes?: Maybe<Array<Maybe<ResolversParentTypes['BlogContentRevisionUnion']>>> };
  BlogUserToContentRevisionUnionConnectionEdge: Omit<BlogUserToContentRevisionUnionConnectionEdge, 'node'> & { node?: Maybe<ResolversParentTypes['BlogContentRevisionUnion']> };
  BlogUserToContentRevisionUnionConnectionWhereArgs: BlogUserToContentRevisionUnionConnectionWhereArgs;
  BlogUserToEnqueuedScriptConnection: BlogUserToEnqueuedScriptConnection;
  BlogUserToEnqueuedScriptConnectionEdge: BlogUserToEnqueuedScriptConnectionEdge;
  BlogUserToEnqueuedStylesheetConnection: BlogUserToEnqueuedStylesheetConnection;
  BlogUserToEnqueuedStylesheetConnectionEdge: BlogUserToEnqueuedStylesheetConnectionEdge;
  BlogUserToMediaItemConnection: BlogUserToMediaItemConnection;
  BlogUserToMediaItemConnectionEdge: BlogUserToMediaItemConnectionEdge;
  BlogUserToMediaItemConnectionWhereArgs: BlogUserToMediaItemConnectionWhereArgs;
  BlogUserToPageConnection: BlogUserToPageConnection;
  BlogUserToPageConnectionEdge: BlogUserToPageConnectionEdge;
  BlogUserToPageConnectionWhereArgs: BlogUserToPageConnectionWhereArgs;
  BlogUserToPostConnection: BlogUserToPostConnection;
  BlogUserToPostConnectionEdge: BlogUserToPostConnectionEdge;
  BlogUserToPostConnectionWhereArgs: BlogUserToPostConnectionWhereArgs;
  BlogUserToUserRoleConnection: BlogUserToUserRoleConnection;
  BlogUserToUserRoleConnectionEdge: BlogUserToUserRoleConnectionEdge;
  BlogUsersConnectionOrderbyInput: BlogUsersConnectionOrderbyInput;
  BlogWPPageInfo: BlogWpPageInfo;
  BlogWritingSettings: BlogWritingSettings;
  Boolean: Scalars['Boolean'];
  CalendarCalendarEvent: CalendarCalendarEvent;
  CalendarDateTime: Scalars['CalendarDateTime'];
  CalendarJSONObject: Scalars['CalendarJSONObject'];
  CalendarMutation: CalendarMutation;
  CalendarQuery: CalendarQuery;
  ClearAffectedRowsOutput: ClearAffectedRowsOutput;
  ClearAggregateEmailTemplate: ClearAggregateEmailTemplate;
  ClearAggregateEvent: ClearAggregateEvent;
  ClearAggregateEventGroup: ClearAggregateEventGroup;
  ClearAggregateEventRestriction: ClearAggregateEventRestriction;
  ClearAggregateMailingListMember: ClearAggregateMailingListMember;
  ClearAggregatePayment: ClearAggregatePayment;
  ClearAggregatePerson: ClearAggregatePerson;
  ClearAggregatePromoCode: ClearAggregatePromoCode;
  ClearAggregateScheduleItem: ClearAggregateScheduleItem;
  ClearAggregateSponsor: ClearAggregateSponsor;
  ClearAggregateTicket: ClearAggregateTicket;
  ClearAggregateVenue: ClearAggregateVenue;
  ClearAggregateWebhook: ClearAggregateWebhook;
  ClearBoolFieldUpdateOperationsInput: ClearBoolFieldUpdateOperationsInput;
  ClearBoolFilter: ClearBoolFilter;
  ClearBoolWithAggregatesFilter: ClearBoolWithAggregatesFilter;
  ClearDateTime: Scalars['ClearDateTime'];
  ClearDateTimeFieldUpdateOperationsInput: ClearDateTimeFieldUpdateOperationsInput;
  ClearDateTimeFilter: ClearDateTimeFilter;
  ClearDateTimeNullableFilter: ClearDateTimeNullableFilter;
  ClearDateTimeNullableWithAggregatesFilter: ClearDateTimeNullableWithAggregatesFilter;
  ClearDateTimeWithAggregatesFilter: ClearDateTimeWithAggregatesFilter;
  ClearEmailTemplate: ClearEmailTemplate;
  ClearEmailTemplateCount: ClearEmailTemplateCount;
  ClearEmailTemplateCountAggregate: ClearEmailTemplateCountAggregate;
  ClearEmailTemplateCountOrderByAggregateInput: ClearEmailTemplateCountOrderByAggregateInput;
  ClearEmailTemplateCreateInput: ClearEmailTemplateCreateInput;
  ClearEmailTemplateCreateManyInput: ClearEmailTemplateCreateManyInput;
  ClearEmailTemplateCreateNestedManyWithoutSentToInput: ClearEmailTemplateCreateNestedManyWithoutSentToInput;
  ClearEmailTemplateCreateOrConnectWithoutSentToInput: ClearEmailTemplateCreateOrConnectWithoutSentToInput;
  ClearEmailTemplateCreateWithoutSentToInput: ClearEmailTemplateCreateWithoutSentToInput;
  ClearEmailTemplateGroupBy: ClearEmailTemplateGroupBy;
  ClearEmailTemplateListRelationFilter: ClearEmailTemplateListRelationFilter;
  ClearEmailTemplateMaxAggregate: ClearEmailTemplateMaxAggregate;
  ClearEmailTemplateMaxOrderByAggregateInput: ClearEmailTemplateMaxOrderByAggregateInput;
  ClearEmailTemplateMinAggregate: ClearEmailTemplateMinAggregate;
  ClearEmailTemplateMinOrderByAggregateInput: ClearEmailTemplateMinOrderByAggregateInput;
  ClearEmailTemplateOrderByRelationAggregateInput: ClearEmailTemplateOrderByRelationAggregateInput;
  ClearEmailTemplateOrderByWithAggregationInput: ClearEmailTemplateOrderByWithAggregationInput;
  ClearEmailTemplateOrderByWithRelationInput: ClearEmailTemplateOrderByWithRelationInput;
  ClearEmailTemplateScalarWhereInput: ClearEmailTemplateScalarWhereInput;
  ClearEmailTemplateScalarWhereWithAggregatesInput: ClearEmailTemplateScalarWhereWithAggregatesInput;
  ClearEmailTemplateUpdateInput: ClearEmailTemplateUpdateInput;
  ClearEmailTemplateUpdateManyMutationInput: ClearEmailTemplateUpdateManyMutationInput;
  ClearEmailTemplateUpdateManyWithWhereWithoutSentToInput: ClearEmailTemplateUpdateManyWithWhereWithoutSentToInput;
  ClearEmailTemplateUpdateManyWithoutSentToInput: ClearEmailTemplateUpdateManyWithoutSentToInput;
  ClearEmailTemplateUpdateWithWhereUniqueWithoutSentToInput: ClearEmailTemplateUpdateWithWhereUniqueWithoutSentToInput;
  ClearEmailTemplateUpdateWithoutSentToInput: ClearEmailTemplateUpdateWithoutSentToInput;
  ClearEmailTemplateUpsertWithWhereUniqueWithoutSentToInput: ClearEmailTemplateUpsertWithWhereUniqueWithoutSentToInput;
  ClearEmailTemplateWhereInput: ClearEmailTemplateWhereInput;
  ClearEmailTemplateWhereUniqueInput: ClearEmailTemplateWhereUniqueInput;
  ClearEnumDiscountTypeFieldUpdateOperationsInput: ClearEnumDiscountTypeFieldUpdateOperationsInput;
  ClearEnumDiscountTypeFilter: ClearEnumDiscountTypeFilter;
  ClearEnumDiscountTypeWithAggregatesFilter: ClearEnumDiscountTypeWithAggregatesFilter;
  ClearEnumEmailWhenFromFieldUpdateOperationsInput: ClearEnumEmailWhenFromFieldUpdateOperationsInput;
  ClearEnumEmailWhenFromFilter: ClearEnumEmailWhenFromFilter;
  ClearEnumEmailWhenFromWithAggregatesFilter: ClearEnumEmailWhenFromWithAggregatesFilter;
  ClearEnumTicketTypeFieldUpdateOperationsInput: ClearEnumTicketTypeFieldUpdateOperationsInput;
  ClearEnumTicketTypeFilter: ClearEnumTicketTypeFilter;
  ClearEnumTicketTypeWithAggregatesFilter: ClearEnumTicketTypeWithAggregatesFilter;
  ClearEnumWebhookServiceFieldUpdateOperationsInput: ClearEnumWebhookServiceFieldUpdateOperationsInput;
  ClearEnumWebhookServiceFilter: ClearEnumWebhookServiceFilter;
  ClearEnumWebhookServiceWithAggregatesFilter: ClearEnumWebhookServiceWithAggregatesFilter;
  ClearEnumWebhookTypeFieldUpdateOperationsInput: ClearEnumWebhookTypeFieldUpdateOperationsInput;
  ClearEnumWebhookTypeFilter: ClearEnumWebhookTypeFilter;
  ClearEnumWebhookTypeWithAggregatesFilter: ClearEnumWebhookTypeWithAggregatesFilter;
  ClearEvent: ClearEvent;
  ClearEventAvgAggregate: ClearEventAvgAggregate;
  ClearEventAvgOrderByAggregateInput: ClearEventAvgOrderByAggregateInput;
  ClearEventCount: ClearEventCount;
  ClearEventCountAggregate: ClearEventCountAggregate;
  ClearEventCountOrderByAggregateInput: ClearEventCountOrderByAggregateInput;
  ClearEventCreateInput: ClearEventCreateInput;
  ClearEventCreateManyEventGroupInput: ClearEventCreateManyEventGroupInput;
  ClearEventCreateManyEventGroupInputEnvelope: ClearEventCreateManyEventGroupInputEnvelope;
  ClearEventCreateManyInput: ClearEventCreateManyInput;
  ClearEventCreateManyVenueInput: ClearEventCreateManyVenueInput;
  ClearEventCreateManyVenueInputEnvelope: ClearEventCreateManyVenueInputEnvelope;
  ClearEventCreateNestedManyWithoutEventGroupInput: ClearEventCreateNestedManyWithoutEventGroupInput;
  ClearEventCreateNestedManyWithoutEventRestrictionsInput: ClearEventCreateNestedManyWithoutEventRestrictionsInput;
  ClearEventCreateNestedManyWithoutInterestedEmailsInput: ClearEventCreateNestedManyWithoutInterestedEmailsInput;
  ClearEventCreateNestedManyWithoutVenueInput: ClearEventCreateNestedManyWithoutVenueInput;
  ClearEventCreateNestedOneWithoutPromoCodesInput: ClearEventCreateNestedOneWithoutPromoCodesInput;
  ClearEventCreateNestedOneWithoutScheduleInput: ClearEventCreateNestedOneWithoutScheduleInput;
  ClearEventCreateNestedOneWithoutSponsorsInput: ClearEventCreateNestedOneWithoutSponsorsInput;
  ClearEventCreateNestedOneWithoutTicketsInput: ClearEventCreateNestedOneWithoutTicketsInput;
  ClearEventCreateNestedOneWithoutWebhooksInput: ClearEventCreateNestedOneWithoutWebhooksInput;
  ClearEventCreateOrConnectWithoutEventGroupInput: ClearEventCreateOrConnectWithoutEventGroupInput;
  ClearEventCreateOrConnectWithoutEventRestrictionsInput: ClearEventCreateOrConnectWithoutEventRestrictionsInput;
  ClearEventCreateOrConnectWithoutInterestedEmailsInput: ClearEventCreateOrConnectWithoutInterestedEmailsInput;
  ClearEventCreateOrConnectWithoutPromoCodesInput: ClearEventCreateOrConnectWithoutPromoCodesInput;
  ClearEventCreateOrConnectWithoutScheduleInput: ClearEventCreateOrConnectWithoutScheduleInput;
  ClearEventCreateOrConnectWithoutSponsorsInput: ClearEventCreateOrConnectWithoutSponsorsInput;
  ClearEventCreateOrConnectWithoutTicketsInput: ClearEventCreateOrConnectWithoutTicketsInput;
  ClearEventCreateOrConnectWithoutVenueInput: ClearEventCreateOrConnectWithoutVenueInput;
  ClearEventCreateOrConnectWithoutWebhooksInput: ClearEventCreateOrConnectWithoutWebhooksInput;
  ClearEventCreateWithoutEventGroupInput: ClearEventCreateWithoutEventGroupInput;
  ClearEventCreateWithoutEventRestrictionsInput: ClearEventCreateWithoutEventRestrictionsInput;
  ClearEventCreateWithoutInterestedEmailsInput: ClearEventCreateWithoutInterestedEmailsInput;
  ClearEventCreateWithoutPromoCodesInput: ClearEventCreateWithoutPromoCodesInput;
  ClearEventCreateWithoutScheduleInput: ClearEventCreateWithoutScheduleInput;
  ClearEventCreateWithoutSponsorsInput: ClearEventCreateWithoutSponsorsInput;
  ClearEventCreateWithoutTicketsInput: ClearEventCreateWithoutTicketsInput;
  ClearEventCreateWithoutVenueInput: ClearEventCreateWithoutVenueInput;
  ClearEventCreateWithoutWebhooksInput: ClearEventCreateWithoutWebhooksInput;
  ClearEventCreatecontentfulEventRestrictionsInput: ClearEventCreatecontentfulEventRestrictionsInput;
  ClearEventCreatemanagersInput: ClearEventCreatemanagersInput;
  ClearEventGroup: ClearEventGroup;
  ClearEventGroupAvgAggregate: ClearEventGroupAvgAggregate;
  ClearEventGroupAvgOrderByAggregateInput: ClearEventGroupAvgOrderByAggregateInput;
  ClearEventGroupBy: ClearEventGroupBy;
  ClearEventGroupCount: ClearEventGroupCount;
  ClearEventGroupCountAggregate: ClearEventGroupCountAggregate;
  ClearEventGroupCountOrderByAggregateInput: ClearEventGroupCountOrderByAggregateInput;
  ClearEventGroupCreateInput: ClearEventGroupCreateInput;
  ClearEventGroupCreateManyInput: ClearEventGroupCreateManyInput;
  ClearEventGroupCreateNestedOneWithoutEventsInput: ClearEventGroupCreateNestedOneWithoutEventsInput;
  ClearEventGroupCreateNestedOneWithoutPromoCodesInput: ClearEventGroupCreateNestedOneWithoutPromoCodesInput;
  ClearEventGroupCreateNestedOneWithoutScheduleInput: ClearEventGroupCreateNestedOneWithoutScheduleInput;
  ClearEventGroupCreateNestedOneWithoutWebhooksInput: ClearEventGroupCreateNestedOneWithoutWebhooksInput;
  ClearEventGroupCreateOrConnectWithoutEventsInput: ClearEventGroupCreateOrConnectWithoutEventsInput;
  ClearEventGroupCreateOrConnectWithoutPromoCodesInput: ClearEventGroupCreateOrConnectWithoutPromoCodesInput;
  ClearEventGroupCreateOrConnectWithoutScheduleInput: ClearEventGroupCreateOrConnectWithoutScheduleInput;
  ClearEventGroupCreateOrConnectWithoutWebhooksInput: ClearEventGroupCreateOrConnectWithoutWebhooksInput;
  ClearEventGroupCreateWithoutEventsInput: ClearEventGroupCreateWithoutEventsInput;
  ClearEventGroupCreateWithoutPromoCodesInput: ClearEventGroupCreateWithoutPromoCodesInput;
  ClearEventGroupCreateWithoutScheduleInput: ClearEventGroupCreateWithoutScheduleInput;
  ClearEventGroupCreateWithoutWebhooksInput: ClearEventGroupCreateWithoutWebhooksInput;
  ClearEventGroupGroupBy: ClearEventGroupGroupBy;
  ClearEventGroupMaxAggregate: ClearEventGroupMaxAggregate;
  ClearEventGroupMaxOrderByAggregateInput: ClearEventGroupMaxOrderByAggregateInput;
  ClearEventGroupMinAggregate: ClearEventGroupMinAggregate;
  ClearEventGroupMinOrderByAggregateInput: ClearEventGroupMinOrderByAggregateInput;
  ClearEventGroupOrderByWithAggregationInput: ClearEventGroupOrderByWithAggregationInput;
  ClearEventGroupOrderByWithRelationInput: ClearEventGroupOrderByWithRelationInput;
  ClearEventGroupRelationFilter: ClearEventGroupRelationFilter;
  ClearEventGroupScalarWhereWithAggregatesInput: ClearEventGroupScalarWhereWithAggregatesInput;
  ClearEventGroupSumAggregate: ClearEventGroupSumAggregate;
  ClearEventGroupSumOrderByAggregateInput: ClearEventGroupSumOrderByAggregateInput;
  ClearEventGroupUpdateInput: ClearEventGroupUpdateInput;
  ClearEventGroupUpdateManyMutationInput: ClearEventGroupUpdateManyMutationInput;
  ClearEventGroupUpdateOneRequiredWithoutEventsInput: ClearEventGroupUpdateOneRequiredWithoutEventsInput;
  ClearEventGroupUpdateOneWithoutPromoCodesInput: ClearEventGroupUpdateOneWithoutPromoCodesInput;
  ClearEventGroupUpdateOneWithoutScheduleInput: ClearEventGroupUpdateOneWithoutScheduleInput;
  ClearEventGroupUpdateOneWithoutWebhooksInput: ClearEventGroupUpdateOneWithoutWebhooksInput;
  ClearEventGroupUpdateWithoutEventsInput: ClearEventGroupUpdateWithoutEventsInput;
  ClearEventGroupUpdateWithoutPromoCodesInput: ClearEventGroupUpdateWithoutPromoCodesInput;
  ClearEventGroupUpdateWithoutScheduleInput: ClearEventGroupUpdateWithoutScheduleInput;
  ClearEventGroupUpdateWithoutWebhooksInput: ClearEventGroupUpdateWithoutWebhooksInput;
  ClearEventGroupUpsertWithoutEventsInput: ClearEventGroupUpsertWithoutEventsInput;
  ClearEventGroupUpsertWithoutPromoCodesInput: ClearEventGroupUpsertWithoutPromoCodesInput;
  ClearEventGroupUpsertWithoutScheduleInput: ClearEventGroupUpsertWithoutScheduleInput;
  ClearEventGroupUpsertWithoutWebhooksInput: ClearEventGroupUpsertWithoutWebhooksInput;
  ClearEventGroupWhereInput: ClearEventGroupWhereInput;
  ClearEventGroupWhereUniqueInput: ClearEventGroupWhereUniqueInput;
  ClearEventListRelationFilter: ClearEventListRelationFilter;
  ClearEventMaxAggregate: ClearEventMaxAggregate;
  ClearEventMaxOrderByAggregateInput: ClearEventMaxOrderByAggregateInput;
  ClearEventMinAggregate: ClearEventMinAggregate;
  ClearEventMinOrderByAggregateInput: ClearEventMinOrderByAggregateInput;
  ClearEventOrderByRelationAggregateInput: ClearEventOrderByRelationAggregateInput;
  ClearEventOrderByWithAggregationInput: ClearEventOrderByWithAggregationInput;
  ClearEventOrderByWithRelationInput: ClearEventOrderByWithRelationInput;
  ClearEventRelationFilter: ClearEventRelationFilter;
  ClearEventRestriction: ClearEventRestriction;
  ClearEventRestrictionCount: ClearEventRestrictionCount;
  ClearEventRestrictionCountAggregate: ClearEventRestrictionCountAggregate;
  ClearEventRestrictionCountOrderByAggregateInput: ClearEventRestrictionCountOrderByAggregateInput;
  ClearEventRestrictionCreateInput: ClearEventRestrictionCreateInput;
  ClearEventRestrictionCreateManyInput: ClearEventRestrictionCreateManyInput;
  ClearEventRestrictionCreateNestedManyWithoutEventsInput: ClearEventRestrictionCreateNestedManyWithoutEventsInput;
  ClearEventRestrictionCreateOrConnectWithoutEventsInput: ClearEventRestrictionCreateOrConnectWithoutEventsInput;
  ClearEventRestrictionCreateWithoutEventsInput: ClearEventRestrictionCreateWithoutEventsInput;
  ClearEventRestrictionGroupBy: ClearEventRestrictionGroupBy;
  ClearEventRestrictionListRelationFilter: ClearEventRestrictionListRelationFilter;
  ClearEventRestrictionMaxAggregate: ClearEventRestrictionMaxAggregate;
  ClearEventRestrictionMaxOrderByAggregateInput: ClearEventRestrictionMaxOrderByAggregateInput;
  ClearEventRestrictionMinAggregate: ClearEventRestrictionMinAggregate;
  ClearEventRestrictionMinOrderByAggregateInput: ClearEventRestrictionMinOrderByAggregateInput;
  ClearEventRestrictionOrderByRelationAggregateInput: ClearEventRestrictionOrderByRelationAggregateInput;
  ClearEventRestrictionOrderByWithAggregationInput: ClearEventRestrictionOrderByWithAggregationInput;
  ClearEventRestrictionOrderByWithRelationInput: ClearEventRestrictionOrderByWithRelationInput;
  ClearEventRestrictionScalarWhereInput: ClearEventRestrictionScalarWhereInput;
  ClearEventRestrictionScalarWhereWithAggregatesInput: ClearEventRestrictionScalarWhereWithAggregatesInput;
  ClearEventRestrictionUpdateInput: ClearEventRestrictionUpdateInput;
  ClearEventRestrictionUpdateManyMutationInput: ClearEventRestrictionUpdateManyMutationInput;
  ClearEventRestrictionUpdateManyWithWhereWithoutEventsInput: ClearEventRestrictionUpdateManyWithWhereWithoutEventsInput;
  ClearEventRestrictionUpdateManyWithoutEventsInput: ClearEventRestrictionUpdateManyWithoutEventsInput;
  ClearEventRestrictionUpdateWithWhereUniqueWithoutEventsInput: ClearEventRestrictionUpdateWithWhereUniqueWithoutEventsInput;
  ClearEventRestrictionUpdateWithoutEventsInput: ClearEventRestrictionUpdateWithoutEventsInput;
  ClearEventRestrictionUpsertWithWhereUniqueWithoutEventsInput: ClearEventRestrictionUpsertWithWhereUniqueWithoutEventsInput;
  ClearEventRestrictionWhereInput: ClearEventRestrictionWhereInput;
  ClearEventRestrictionWhereUniqueInput: ClearEventRestrictionWhereUniqueInput;
  ClearEventScalarWhereInput: ClearEventScalarWhereInput;
  ClearEventScalarWhereWithAggregatesInput: ClearEventScalarWhereWithAggregatesInput;
  ClearEventSumAggregate: ClearEventSumAggregate;
  ClearEventSumOrderByAggregateInput: ClearEventSumOrderByAggregateInput;
  ClearEventUpdateInput: ClearEventUpdateInput;
  ClearEventUpdateManyMutationInput: ClearEventUpdateManyMutationInput;
  ClearEventUpdateManyWithWhereWithoutEventGroupInput: ClearEventUpdateManyWithWhereWithoutEventGroupInput;
  ClearEventUpdateManyWithWhereWithoutEventRestrictionsInput: ClearEventUpdateManyWithWhereWithoutEventRestrictionsInput;
  ClearEventUpdateManyWithWhereWithoutInterestedEmailsInput: ClearEventUpdateManyWithWhereWithoutInterestedEmailsInput;
  ClearEventUpdateManyWithWhereWithoutVenueInput: ClearEventUpdateManyWithWhereWithoutVenueInput;
  ClearEventUpdateManyWithoutEventGroupInput: ClearEventUpdateManyWithoutEventGroupInput;
  ClearEventUpdateManyWithoutEventRestrictionsInput: ClearEventUpdateManyWithoutEventRestrictionsInput;
  ClearEventUpdateManyWithoutInterestedEmailsInput: ClearEventUpdateManyWithoutInterestedEmailsInput;
  ClearEventUpdateManyWithoutVenueInput: ClearEventUpdateManyWithoutVenueInput;
  ClearEventUpdateOneRequiredWithoutTicketsInput: ClearEventUpdateOneRequiredWithoutTicketsInput;
  ClearEventUpdateOneWithoutPromoCodesInput: ClearEventUpdateOneWithoutPromoCodesInput;
  ClearEventUpdateOneWithoutScheduleInput: ClearEventUpdateOneWithoutScheduleInput;
  ClearEventUpdateOneWithoutSponsorsInput: ClearEventUpdateOneWithoutSponsorsInput;
  ClearEventUpdateOneWithoutWebhooksInput: ClearEventUpdateOneWithoutWebhooksInput;
  ClearEventUpdateWithWhereUniqueWithoutEventGroupInput: ClearEventUpdateWithWhereUniqueWithoutEventGroupInput;
  ClearEventUpdateWithWhereUniqueWithoutEventRestrictionsInput: ClearEventUpdateWithWhereUniqueWithoutEventRestrictionsInput;
  ClearEventUpdateWithWhereUniqueWithoutInterestedEmailsInput: ClearEventUpdateWithWhereUniqueWithoutInterestedEmailsInput;
  ClearEventUpdateWithWhereUniqueWithoutVenueInput: ClearEventUpdateWithWhereUniqueWithoutVenueInput;
  ClearEventUpdateWithoutEventGroupInput: ClearEventUpdateWithoutEventGroupInput;
  ClearEventUpdateWithoutEventRestrictionsInput: ClearEventUpdateWithoutEventRestrictionsInput;
  ClearEventUpdateWithoutInterestedEmailsInput: ClearEventUpdateWithoutInterestedEmailsInput;
  ClearEventUpdateWithoutPromoCodesInput: ClearEventUpdateWithoutPromoCodesInput;
  ClearEventUpdateWithoutScheduleInput: ClearEventUpdateWithoutScheduleInput;
  ClearEventUpdateWithoutSponsorsInput: ClearEventUpdateWithoutSponsorsInput;
  ClearEventUpdateWithoutTicketsInput: ClearEventUpdateWithoutTicketsInput;
  ClearEventUpdateWithoutVenueInput: ClearEventUpdateWithoutVenueInput;
  ClearEventUpdateWithoutWebhooksInput: ClearEventUpdateWithoutWebhooksInput;
  ClearEventUpdatecontentfulEventRestrictionsInput: ClearEventUpdatecontentfulEventRestrictionsInput;
  ClearEventUpdatemanagersInput: ClearEventUpdatemanagersInput;
  ClearEventUpsertWithWhereUniqueWithoutEventGroupInput: ClearEventUpsertWithWhereUniqueWithoutEventGroupInput;
  ClearEventUpsertWithWhereUniqueWithoutEventRestrictionsInput: ClearEventUpsertWithWhereUniqueWithoutEventRestrictionsInput;
  ClearEventUpsertWithWhereUniqueWithoutInterestedEmailsInput: ClearEventUpsertWithWhereUniqueWithoutInterestedEmailsInput;
  ClearEventUpsertWithWhereUniqueWithoutVenueInput: ClearEventUpsertWithWhereUniqueWithoutVenueInput;
  ClearEventUpsertWithoutPromoCodesInput: ClearEventUpsertWithoutPromoCodesInput;
  ClearEventUpsertWithoutScheduleInput: ClearEventUpsertWithoutScheduleInput;
  ClearEventUpsertWithoutSponsorsInput: ClearEventUpsertWithoutSponsorsInput;
  ClearEventUpsertWithoutTicketsInput: ClearEventUpsertWithoutTicketsInput;
  ClearEventUpsertWithoutWebhooksInput: ClearEventUpsertWithoutWebhooksInput;
  ClearEventWhereInput: ClearEventWhereInput;
  ClearEventWhereUniqueInput: ClearEventWhereUniqueInput;
  ClearFloatFieldUpdateOperationsInput: ClearFloatFieldUpdateOperationsInput;
  ClearFloatFilter: ClearFloatFilter;
  ClearFloatNullableFilter: ClearFloatNullableFilter;
  ClearFloatNullableWithAggregatesFilter: ClearFloatNullableWithAggregatesFilter;
  ClearFloatWithAggregatesFilter: ClearFloatWithAggregatesFilter;
  ClearIntFieldUpdateOperationsInput: ClearIntFieldUpdateOperationsInput;
  ClearIntFilter: ClearIntFilter;
  ClearIntNullableFilter: ClearIntNullableFilter;
  ClearIntNullableWithAggregatesFilter: ClearIntNullableWithAggregatesFilter;
  ClearIntWithAggregatesFilter: ClearIntWithAggregatesFilter;
  ClearJSON: Scalars['ClearJSON'];
  ClearJSONObject: Scalars['ClearJSONObject'];
  ClearJsonNullableFilter: ClearJsonNullableFilter;
  ClearJsonNullableWithAggregatesFilter: ClearJsonNullableWithAggregatesFilter;
  ClearMailingListMember: ClearMailingListMember;
  ClearMailingListMemberCount: ClearMailingListMemberCount;
  ClearMailingListMemberCountAggregate: ClearMailingListMemberCountAggregate;
  ClearMailingListMemberCountOrderByAggregateInput: ClearMailingListMemberCountOrderByAggregateInput;
  ClearMailingListMemberCreateInput: ClearMailingListMemberCreateInput;
  ClearMailingListMemberCreateManyInput: ClearMailingListMemberCreateManyInput;
  ClearMailingListMemberCreateNestedManyWithoutInterestedInEventsInput: ClearMailingListMemberCreateNestedManyWithoutInterestedInEventsInput;
  ClearMailingListMemberCreateOrConnectWithoutInterestedInEventsInput: ClearMailingListMemberCreateOrConnectWithoutInterestedInEventsInput;
  ClearMailingListMemberCreateWithoutInterestedInEventsInput: ClearMailingListMemberCreateWithoutInterestedInEventsInput;
  ClearMailingListMemberGroupBy: ClearMailingListMemberGroupBy;
  ClearMailingListMemberListRelationFilter: ClearMailingListMemberListRelationFilter;
  ClearMailingListMemberMaxAggregate: ClearMailingListMemberMaxAggregate;
  ClearMailingListMemberMaxOrderByAggregateInput: ClearMailingListMemberMaxOrderByAggregateInput;
  ClearMailingListMemberMinAggregate: ClearMailingListMemberMinAggregate;
  ClearMailingListMemberMinOrderByAggregateInput: ClearMailingListMemberMinOrderByAggregateInput;
  ClearMailingListMemberOrderByRelationAggregateInput: ClearMailingListMemberOrderByRelationAggregateInput;
  ClearMailingListMemberOrderByWithAggregationInput: ClearMailingListMemberOrderByWithAggregationInput;
  ClearMailingListMemberOrderByWithRelationInput: ClearMailingListMemberOrderByWithRelationInput;
  ClearMailingListMemberScalarWhereInput: ClearMailingListMemberScalarWhereInput;
  ClearMailingListMemberScalarWhereWithAggregatesInput: ClearMailingListMemberScalarWhereWithAggregatesInput;
  ClearMailingListMemberUpdateInput: ClearMailingListMemberUpdateInput;
  ClearMailingListMemberUpdateManyMutationInput: ClearMailingListMemberUpdateManyMutationInput;
  ClearMailingListMemberUpdateManyWithWhereWithoutInterestedInEventsInput: ClearMailingListMemberUpdateManyWithWhereWithoutInterestedInEventsInput;
  ClearMailingListMemberUpdateManyWithoutInterestedInEventsInput: ClearMailingListMemberUpdateManyWithoutInterestedInEventsInput;
  ClearMailingListMemberUpdateWithWhereUniqueWithoutInterestedInEventsInput: ClearMailingListMemberUpdateWithWhereUniqueWithoutInterestedInEventsInput;
  ClearMailingListMemberUpdateWithoutInterestedInEventsInput: ClearMailingListMemberUpdateWithoutInterestedInEventsInput;
  ClearMailingListMemberUpsertWithWhereUniqueWithoutInterestedInEventsInput: ClearMailingListMemberUpsertWithWhereUniqueWithoutInterestedInEventsInput;
  ClearMailingListMemberWhereInput: ClearMailingListMemberWhereInput;
  ClearMailingListMemberWhereUniqueInput: ClearMailingListMemberWhereUniqueInput;
  ClearMutation: ClearMutation;
  ClearNestedBoolFilter: ClearNestedBoolFilter;
  ClearNestedBoolWithAggregatesFilter: ClearNestedBoolWithAggregatesFilter;
  ClearNestedDateTimeFilter: ClearNestedDateTimeFilter;
  ClearNestedDateTimeNullableFilter: ClearNestedDateTimeNullableFilter;
  ClearNestedDateTimeNullableWithAggregatesFilter: ClearNestedDateTimeNullableWithAggregatesFilter;
  ClearNestedDateTimeWithAggregatesFilter: ClearNestedDateTimeWithAggregatesFilter;
  ClearNestedEnumDiscountTypeFilter: ClearNestedEnumDiscountTypeFilter;
  ClearNestedEnumDiscountTypeWithAggregatesFilter: ClearNestedEnumDiscountTypeWithAggregatesFilter;
  ClearNestedEnumEmailWhenFromFilter: ClearNestedEnumEmailWhenFromFilter;
  ClearNestedEnumEmailWhenFromWithAggregatesFilter: ClearNestedEnumEmailWhenFromWithAggregatesFilter;
  ClearNestedEnumTicketTypeFilter: ClearNestedEnumTicketTypeFilter;
  ClearNestedEnumTicketTypeWithAggregatesFilter: ClearNestedEnumTicketTypeWithAggregatesFilter;
  ClearNestedEnumWebhookServiceFilter: ClearNestedEnumWebhookServiceFilter;
  ClearNestedEnumWebhookServiceWithAggregatesFilter: ClearNestedEnumWebhookServiceWithAggregatesFilter;
  ClearNestedEnumWebhookTypeFilter: ClearNestedEnumWebhookTypeFilter;
  ClearNestedEnumWebhookTypeWithAggregatesFilter: ClearNestedEnumWebhookTypeWithAggregatesFilter;
  ClearNestedFloatFilter: ClearNestedFloatFilter;
  ClearNestedFloatNullableFilter: ClearNestedFloatNullableFilter;
  ClearNestedFloatNullableWithAggregatesFilter: ClearNestedFloatNullableWithAggregatesFilter;
  ClearNestedFloatWithAggregatesFilter: ClearNestedFloatWithAggregatesFilter;
  ClearNestedIntFilter: ClearNestedIntFilter;
  ClearNestedIntNullableFilter: ClearNestedIntNullableFilter;
  ClearNestedIntNullableWithAggregatesFilter: ClearNestedIntNullableWithAggregatesFilter;
  ClearNestedIntWithAggregatesFilter: ClearNestedIntWithAggregatesFilter;
  ClearNestedJsonNullableFilter: ClearNestedJsonNullableFilter;
  ClearNestedStringFilter: ClearNestedStringFilter;
  ClearNestedStringNullableFilter: ClearNestedStringNullableFilter;
  ClearNestedStringNullableWithAggregatesFilter: ClearNestedStringNullableWithAggregatesFilter;
  ClearNestedStringWithAggregatesFilter: ClearNestedStringWithAggregatesFilter;
  ClearNullableDateTimeFieldUpdateOperationsInput: ClearNullableDateTimeFieldUpdateOperationsInput;
  ClearNullableFloatFieldUpdateOperationsInput: ClearNullableFloatFieldUpdateOperationsInput;
  ClearNullableIntFieldUpdateOperationsInput: ClearNullableIntFieldUpdateOperationsInput;
  ClearNullableStringFieldUpdateOperationsInput: ClearNullableStringFieldUpdateOperationsInput;
  ClearPayment: ClearPayment;
  ClearPaymentCount: ClearPaymentCount;
  ClearPaymentCountAggregate: ClearPaymentCountAggregate;
  ClearPaymentCountOrderByAggregateInput: ClearPaymentCountOrderByAggregateInput;
  ClearPaymentCreateInput: ClearPaymentCreateInput;
  ClearPaymentCreateManyInput: ClearPaymentCreateManyInput;
  ClearPaymentCreateNestedOneWithoutTicketsInput: ClearPaymentCreateNestedOneWithoutTicketsInput;
  ClearPaymentCreateOrConnectWithoutTicketsInput: ClearPaymentCreateOrConnectWithoutTicketsInput;
  ClearPaymentCreateWithoutTicketsInput: ClearPaymentCreateWithoutTicketsInput;
  ClearPaymentGroupBy: ClearPaymentGroupBy;
  ClearPaymentMaxAggregate: ClearPaymentMaxAggregate;
  ClearPaymentMaxOrderByAggregateInput: ClearPaymentMaxOrderByAggregateInput;
  ClearPaymentMinAggregate: ClearPaymentMinAggregate;
  ClearPaymentMinOrderByAggregateInput: ClearPaymentMinOrderByAggregateInput;
  ClearPaymentOrderByWithAggregationInput: ClearPaymentOrderByWithAggregationInput;
  ClearPaymentOrderByWithRelationInput: ClearPaymentOrderByWithRelationInput;
  ClearPaymentRelationFilter: ClearPaymentRelationFilter;
  ClearPaymentScalarWhereWithAggregatesInput: ClearPaymentScalarWhereWithAggregatesInput;
  ClearPaymentUpdateInput: ClearPaymentUpdateInput;
  ClearPaymentUpdateManyMutationInput: ClearPaymentUpdateManyMutationInput;
  ClearPaymentUpdateOneWithoutTicketsInput: ClearPaymentUpdateOneWithoutTicketsInput;
  ClearPaymentUpdateWithoutTicketsInput: ClearPaymentUpdateWithoutTicketsInput;
  ClearPaymentUpsertWithoutTicketsInput: ClearPaymentUpsertWithoutTicketsInput;
  ClearPaymentWhereInput: ClearPaymentWhereInput;
  ClearPaymentWhereUniqueInput: ClearPaymentWhereUniqueInput;
  ClearPerson: ClearPerson;
  ClearPersonAvgAggregate: ClearPersonAvgAggregate;
  ClearPersonAvgOrderByAggregateInput: ClearPersonAvgOrderByAggregateInput;
  ClearPersonCount: ClearPersonCount;
  ClearPersonCountAggregate: ClearPersonCountAggregate;
  ClearPersonCountOrderByAggregateInput: ClearPersonCountOrderByAggregateInput;
  ClearPersonCreateInput: ClearPersonCreateInput;
  ClearPersonCreateManyInput: ClearPersonCreateManyInput;
  ClearPersonCreateNestedOneWithoutTicketInput: ClearPersonCreateNestedOneWithoutTicketInput;
  ClearPersonCreateOrConnectWithoutTicketInput: ClearPersonCreateOrConnectWithoutTicketInput;
  ClearPersonCreateWithoutTicketInput: ClearPersonCreateWithoutTicketInput;
  ClearPersonGroupBy: ClearPersonGroupBy;
  ClearPersonMaxAggregate: ClearPersonMaxAggregate;
  ClearPersonMaxOrderByAggregateInput: ClearPersonMaxOrderByAggregateInput;
  ClearPersonMinAggregate: ClearPersonMinAggregate;
  ClearPersonMinOrderByAggregateInput: ClearPersonMinOrderByAggregateInput;
  ClearPersonOrderByWithAggregationInput: ClearPersonOrderByWithAggregationInput;
  ClearPersonOrderByWithRelationInput: ClearPersonOrderByWithRelationInput;
  ClearPersonRelationFilter: ClearPersonRelationFilter;
  ClearPersonScalarWhereWithAggregatesInput: ClearPersonScalarWhereWithAggregatesInput;
  ClearPersonSumAggregate: ClearPersonSumAggregate;
  ClearPersonSumOrderByAggregateInput: ClearPersonSumOrderByAggregateInput;
  ClearPersonUpdateInput: ClearPersonUpdateInput;
  ClearPersonUpdateManyMutationInput: ClearPersonUpdateManyMutationInput;
  ClearPersonUpdateOneWithoutTicketInput: ClearPersonUpdateOneWithoutTicketInput;
  ClearPersonUpdateWithoutTicketInput: ClearPersonUpdateWithoutTicketInput;
  ClearPersonUpsertWithoutTicketInput: ClearPersonUpsertWithoutTicketInput;
  ClearPersonWhereInput: ClearPersonWhereInput;
  ClearPersonWhereUniqueInput: ClearPersonWhereUniqueInput;
  ClearPromoCode: ClearPromoCode;
  ClearPromoCodeAvgAggregate: ClearPromoCodeAvgAggregate;
  ClearPromoCodeAvgOrderByAggregateInput: ClearPromoCodeAvgOrderByAggregateInput;
  ClearPromoCodeCount: ClearPromoCodeCount;
  ClearPromoCodeCountAggregate: ClearPromoCodeCountAggregate;
  ClearPromoCodeCountOrderByAggregateInput: ClearPromoCodeCountOrderByAggregateInput;
  ClearPromoCodeCreateInput: ClearPromoCodeCreateInput;
  ClearPromoCodeCreateManyEventGroupInput: ClearPromoCodeCreateManyEventGroupInput;
  ClearPromoCodeCreateManyEventGroupInputEnvelope: ClearPromoCodeCreateManyEventGroupInputEnvelope;
  ClearPromoCodeCreateManyEventInput: ClearPromoCodeCreateManyEventInput;
  ClearPromoCodeCreateManyEventInputEnvelope: ClearPromoCodeCreateManyEventInputEnvelope;
  ClearPromoCodeCreateManyInput: ClearPromoCodeCreateManyInput;
  ClearPromoCodeCreateNestedManyWithoutEventGroupInput: ClearPromoCodeCreateNestedManyWithoutEventGroupInput;
  ClearPromoCodeCreateNestedManyWithoutEventInput: ClearPromoCodeCreateNestedManyWithoutEventInput;
  ClearPromoCodeCreateNestedOneWithoutTicketsInput: ClearPromoCodeCreateNestedOneWithoutTicketsInput;
  ClearPromoCodeCreateOrConnectWithoutEventGroupInput: ClearPromoCodeCreateOrConnectWithoutEventGroupInput;
  ClearPromoCodeCreateOrConnectWithoutEventInput: ClearPromoCodeCreateOrConnectWithoutEventInput;
  ClearPromoCodeCreateOrConnectWithoutTicketsInput: ClearPromoCodeCreateOrConnectWithoutTicketsInput;
  ClearPromoCodeCreateWithoutEventGroupInput: ClearPromoCodeCreateWithoutEventGroupInput;
  ClearPromoCodeCreateWithoutEventInput: ClearPromoCodeCreateWithoutEventInput;
  ClearPromoCodeCreateWithoutTicketsInput: ClearPromoCodeCreateWithoutTicketsInput;
  ClearPromoCodeGroupBy: ClearPromoCodeGroupBy;
  ClearPromoCodeListRelationFilter: ClearPromoCodeListRelationFilter;
  ClearPromoCodeMaxAggregate: ClearPromoCodeMaxAggregate;
  ClearPromoCodeMaxOrderByAggregateInput: ClearPromoCodeMaxOrderByAggregateInput;
  ClearPromoCodeMinAggregate: ClearPromoCodeMinAggregate;
  ClearPromoCodeMinOrderByAggregateInput: ClearPromoCodeMinOrderByAggregateInput;
  ClearPromoCodeOrderByRelationAggregateInput: ClearPromoCodeOrderByRelationAggregateInput;
  ClearPromoCodeOrderByWithAggregationInput: ClearPromoCodeOrderByWithAggregationInput;
  ClearPromoCodeOrderByWithRelationInput: ClearPromoCodeOrderByWithRelationInput;
  ClearPromoCodeRelationFilter: ClearPromoCodeRelationFilter;
  ClearPromoCodeScalarWhereInput: ClearPromoCodeScalarWhereInput;
  ClearPromoCodeScalarWhereWithAggregatesInput: ClearPromoCodeScalarWhereWithAggregatesInput;
  ClearPromoCodeSumAggregate: ClearPromoCodeSumAggregate;
  ClearPromoCodeSumOrderByAggregateInput: ClearPromoCodeSumOrderByAggregateInput;
  ClearPromoCodeUpdateInput: ClearPromoCodeUpdateInput;
  ClearPromoCodeUpdateManyMutationInput: ClearPromoCodeUpdateManyMutationInput;
  ClearPromoCodeUpdateManyWithWhereWithoutEventGroupInput: ClearPromoCodeUpdateManyWithWhereWithoutEventGroupInput;
  ClearPromoCodeUpdateManyWithWhereWithoutEventInput: ClearPromoCodeUpdateManyWithWhereWithoutEventInput;
  ClearPromoCodeUpdateManyWithoutEventGroupInput: ClearPromoCodeUpdateManyWithoutEventGroupInput;
  ClearPromoCodeUpdateManyWithoutEventInput: ClearPromoCodeUpdateManyWithoutEventInput;
  ClearPromoCodeUpdateOneWithoutTicketsInput: ClearPromoCodeUpdateOneWithoutTicketsInput;
  ClearPromoCodeUpdateWithWhereUniqueWithoutEventGroupInput: ClearPromoCodeUpdateWithWhereUniqueWithoutEventGroupInput;
  ClearPromoCodeUpdateWithWhereUniqueWithoutEventInput: ClearPromoCodeUpdateWithWhereUniqueWithoutEventInput;
  ClearPromoCodeUpdateWithoutEventGroupInput: ClearPromoCodeUpdateWithoutEventGroupInput;
  ClearPromoCodeUpdateWithoutEventInput: ClearPromoCodeUpdateWithoutEventInput;
  ClearPromoCodeUpdateWithoutTicketsInput: ClearPromoCodeUpdateWithoutTicketsInput;
  ClearPromoCodeUpsertWithWhereUniqueWithoutEventGroupInput: ClearPromoCodeUpsertWithWhereUniqueWithoutEventGroupInput;
  ClearPromoCodeUpsertWithWhereUniqueWithoutEventInput: ClearPromoCodeUpsertWithWhereUniqueWithoutEventInput;
  ClearPromoCodeUpsertWithoutTicketsInput: ClearPromoCodeUpsertWithoutTicketsInput;
  ClearPromoCodeWhereInput: ClearPromoCodeWhereInput;
  ClearPromoCodeWhereUniqueInput: ClearPromoCodeWhereUniqueInput;
  ClearPublicPerson: ClearPublicPerson;
  ClearQuery: ClearQuery;
  ClearScheduleItem: ClearScheduleItem;
  ClearScheduleItemCountAggregate: ClearScheduleItemCountAggregate;
  ClearScheduleItemCountOrderByAggregateInput: ClearScheduleItemCountOrderByAggregateInput;
  ClearScheduleItemCreateInput: ClearScheduleItemCreateInput;
  ClearScheduleItemCreateManyEventGroupInput: ClearScheduleItemCreateManyEventGroupInput;
  ClearScheduleItemCreateManyEventGroupInputEnvelope: ClearScheduleItemCreateManyEventGroupInputEnvelope;
  ClearScheduleItemCreateManyEventInput: ClearScheduleItemCreateManyEventInput;
  ClearScheduleItemCreateManyEventInputEnvelope: ClearScheduleItemCreateManyEventInputEnvelope;
  ClearScheduleItemCreateManyInput: ClearScheduleItemCreateManyInput;
  ClearScheduleItemCreateNestedManyWithoutEventGroupInput: ClearScheduleItemCreateNestedManyWithoutEventGroupInput;
  ClearScheduleItemCreateNestedManyWithoutEventInput: ClearScheduleItemCreateNestedManyWithoutEventInput;
  ClearScheduleItemCreateOrConnectWithoutEventGroupInput: ClearScheduleItemCreateOrConnectWithoutEventGroupInput;
  ClearScheduleItemCreateOrConnectWithoutEventInput: ClearScheduleItemCreateOrConnectWithoutEventInput;
  ClearScheduleItemCreateWithoutEventGroupInput: ClearScheduleItemCreateWithoutEventGroupInput;
  ClearScheduleItemCreateWithoutEventInput: ClearScheduleItemCreateWithoutEventInput;
  ClearScheduleItemGroupBy: ClearScheduleItemGroupBy;
  ClearScheduleItemListRelationFilter: ClearScheduleItemListRelationFilter;
  ClearScheduleItemMaxAggregate: ClearScheduleItemMaxAggregate;
  ClearScheduleItemMaxOrderByAggregateInput: ClearScheduleItemMaxOrderByAggregateInput;
  ClearScheduleItemMinAggregate: ClearScheduleItemMinAggregate;
  ClearScheduleItemMinOrderByAggregateInput: ClearScheduleItemMinOrderByAggregateInput;
  ClearScheduleItemOrderByRelationAggregateInput: ClearScheduleItemOrderByRelationAggregateInput;
  ClearScheduleItemOrderByWithAggregationInput: ClearScheduleItemOrderByWithAggregationInput;
  ClearScheduleItemOrderByWithRelationInput: ClearScheduleItemOrderByWithRelationInput;
  ClearScheduleItemScalarWhereInput: ClearScheduleItemScalarWhereInput;
  ClearScheduleItemScalarWhereWithAggregatesInput: ClearScheduleItemScalarWhereWithAggregatesInput;
  ClearScheduleItemUpdateInput: ClearScheduleItemUpdateInput;
  ClearScheduleItemUpdateManyMutationInput: ClearScheduleItemUpdateManyMutationInput;
  ClearScheduleItemUpdateManyWithWhereWithoutEventGroupInput: ClearScheduleItemUpdateManyWithWhereWithoutEventGroupInput;
  ClearScheduleItemUpdateManyWithWhereWithoutEventInput: ClearScheduleItemUpdateManyWithWhereWithoutEventInput;
  ClearScheduleItemUpdateManyWithoutEventGroupInput: ClearScheduleItemUpdateManyWithoutEventGroupInput;
  ClearScheduleItemUpdateManyWithoutEventInput: ClearScheduleItemUpdateManyWithoutEventInput;
  ClearScheduleItemUpdateWithWhereUniqueWithoutEventGroupInput: ClearScheduleItemUpdateWithWhereUniqueWithoutEventGroupInput;
  ClearScheduleItemUpdateWithWhereUniqueWithoutEventInput: ClearScheduleItemUpdateWithWhereUniqueWithoutEventInput;
  ClearScheduleItemUpdateWithoutEventGroupInput: ClearScheduleItemUpdateWithoutEventGroupInput;
  ClearScheduleItemUpdateWithoutEventInput: ClearScheduleItemUpdateWithoutEventInput;
  ClearScheduleItemUpsertWithWhereUniqueWithoutEventGroupInput: ClearScheduleItemUpsertWithWhereUniqueWithoutEventGroupInput;
  ClearScheduleItemUpsertWithWhereUniqueWithoutEventInput: ClearScheduleItemUpsertWithWhereUniqueWithoutEventInput;
  ClearScheduleItemWhereInput: ClearScheduleItemWhereInput;
  ClearScheduleItemWhereUniqueInput: ClearScheduleItemWhereUniqueInput;
  ClearSponsor: ClearSponsor;
  ClearSponsorAvgAggregate: ClearSponsorAvgAggregate;
  ClearSponsorAvgOrderByAggregateInput: ClearSponsorAvgOrderByAggregateInput;
  ClearSponsorCountAggregate: ClearSponsorCountAggregate;
  ClearSponsorCountOrderByAggregateInput: ClearSponsorCountOrderByAggregateInput;
  ClearSponsorCreateInput: ClearSponsorCreateInput;
  ClearSponsorCreateManyEventInput: ClearSponsorCreateManyEventInput;
  ClearSponsorCreateManyEventInputEnvelope: ClearSponsorCreateManyEventInputEnvelope;
  ClearSponsorCreateManyInput: ClearSponsorCreateManyInput;
  ClearSponsorCreateNestedManyWithoutEventInput: ClearSponsorCreateNestedManyWithoutEventInput;
  ClearSponsorCreateOrConnectWithoutEventInput: ClearSponsorCreateOrConnectWithoutEventInput;
  ClearSponsorCreateWithoutEventInput: ClearSponsorCreateWithoutEventInput;
  ClearSponsorGroupBy: ClearSponsorGroupBy;
  ClearSponsorListRelationFilter: ClearSponsorListRelationFilter;
  ClearSponsorMaxAggregate: ClearSponsorMaxAggregate;
  ClearSponsorMaxOrderByAggregateInput: ClearSponsorMaxOrderByAggregateInput;
  ClearSponsorMinAggregate: ClearSponsorMinAggregate;
  ClearSponsorMinOrderByAggregateInput: ClearSponsorMinOrderByAggregateInput;
  ClearSponsorOrderByRelationAggregateInput: ClearSponsorOrderByRelationAggregateInput;
  ClearSponsorOrderByWithAggregationInput: ClearSponsorOrderByWithAggregationInput;
  ClearSponsorOrderByWithRelationInput: ClearSponsorOrderByWithRelationInput;
  ClearSponsorScalarWhereInput: ClearSponsorScalarWhereInput;
  ClearSponsorScalarWhereWithAggregatesInput: ClearSponsorScalarWhereWithAggregatesInput;
  ClearSponsorSumAggregate: ClearSponsorSumAggregate;
  ClearSponsorSumOrderByAggregateInput: ClearSponsorSumOrderByAggregateInput;
  ClearSponsorUpdateInput: ClearSponsorUpdateInput;
  ClearSponsorUpdateManyMutationInput: ClearSponsorUpdateManyMutationInput;
  ClearSponsorUpdateManyWithWhereWithoutEventInput: ClearSponsorUpdateManyWithWhereWithoutEventInput;
  ClearSponsorUpdateManyWithoutEventInput: ClearSponsorUpdateManyWithoutEventInput;
  ClearSponsorUpdateWithWhereUniqueWithoutEventInput: ClearSponsorUpdateWithWhereUniqueWithoutEventInput;
  ClearSponsorUpdateWithoutEventInput: ClearSponsorUpdateWithoutEventInput;
  ClearSponsorUpsertWithWhereUniqueWithoutEventInput: ClearSponsorUpsertWithWhereUniqueWithoutEventInput;
  ClearSponsorWhereInput: ClearSponsorWhereInput;
  ClearSponsorWhereUniqueInput: ClearSponsorWhereUniqueInput;
  ClearStringFieldUpdateOperationsInput: ClearStringFieldUpdateOperationsInput;
  ClearStringFilter: ClearStringFilter;
  ClearStringNullableFilter: ClearStringNullableFilter;
  ClearStringNullableListFilter: ClearStringNullableListFilter;
  ClearStringNullableWithAggregatesFilter: ClearStringNullableWithAggregatesFilter;
  ClearStringWithAggregatesFilter: ClearStringWithAggregatesFilter;
  ClearTeam: ClearTeam;
  ClearTicket: ClearTicket;
  ClearTicketAvgAggregate: ClearTicketAvgAggregate;
  ClearTicketAvgOrderByAggregateInput: ClearTicketAvgOrderByAggregateInput;
  ClearTicketCount: ClearTicketCount;
  ClearTicketCountAggregate: ClearTicketCountAggregate;
  ClearTicketCountOrderByAggregateInput: ClearTicketCountOrderByAggregateInput;
  ClearTicketCreateInput: ClearTicketCreateInput;
  ClearTicketCreateManyEventInput: ClearTicketCreateManyEventInput;
  ClearTicketCreateManyEventInputEnvelope: ClearTicketCreateManyEventInputEnvelope;
  ClearTicketCreateManyGuardianInput: ClearTicketCreateManyGuardianInput;
  ClearTicketCreateManyGuardianInputEnvelope: ClearTicketCreateManyGuardianInputEnvelope;
  ClearTicketCreateManyInput: ClearTicketCreateManyInput;
  ClearTicketCreateManyPaymentInput: ClearTicketCreateManyPaymentInput;
  ClearTicketCreateManyPaymentInputEnvelope: ClearTicketCreateManyPaymentInputEnvelope;
  ClearTicketCreateManyPromoCodeInput: ClearTicketCreateManyPromoCodeInput;
  ClearTicketCreateManyPromoCodeInputEnvelope: ClearTicketCreateManyPromoCodeInputEnvelope;
  ClearTicketCreateNestedManyWithoutEventInput: ClearTicketCreateNestedManyWithoutEventInput;
  ClearTicketCreateNestedManyWithoutGuardianInput: ClearTicketCreateNestedManyWithoutGuardianInput;
  ClearTicketCreateNestedManyWithoutPaymentInput: ClearTicketCreateNestedManyWithoutPaymentInput;
  ClearTicketCreateNestedManyWithoutPromoCodeInput: ClearTicketCreateNestedManyWithoutPromoCodeInput;
  ClearTicketCreateNestedManyWithoutSentEmailsInput: ClearTicketCreateNestedManyWithoutSentEmailsInput;
  ClearTicketCreateOrConnectWithoutEventInput: ClearTicketCreateOrConnectWithoutEventInput;
  ClearTicketCreateOrConnectWithoutGuardianInput: ClearTicketCreateOrConnectWithoutGuardianInput;
  ClearTicketCreateOrConnectWithoutPaymentInput: ClearTicketCreateOrConnectWithoutPaymentInput;
  ClearTicketCreateOrConnectWithoutPromoCodeInput: ClearTicketCreateOrConnectWithoutPromoCodeInput;
  ClearTicketCreateOrConnectWithoutSentEmailsInput: ClearTicketCreateOrConnectWithoutSentEmailsInput;
  ClearTicketCreateWithoutEventInput: ClearTicketCreateWithoutEventInput;
  ClearTicketCreateWithoutGuardianInput: ClearTicketCreateWithoutGuardianInput;
  ClearTicketCreateWithoutPaymentInput: ClearTicketCreateWithoutPaymentInput;
  ClearTicketCreateWithoutPromoCodeInput: ClearTicketCreateWithoutPromoCodeInput;
  ClearTicketCreateWithoutSentEmailsInput: ClearTicketCreateWithoutSentEmailsInput;
  ClearTicketGroupBy: ClearTicketGroupBy;
  ClearTicketListRelationFilter: ClearTicketListRelationFilter;
  ClearTicketMaxAggregate: ClearTicketMaxAggregate;
  ClearTicketMaxOrderByAggregateInput: ClearTicketMaxOrderByAggregateInput;
  ClearTicketMinAggregate: ClearTicketMinAggregate;
  ClearTicketMinOrderByAggregateInput: ClearTicketMinOrderByAggregateInput;
  ClearTicketOrderByRelationAggregateInput: ClearTicketOrderByRelationAggregateInput;
  ClearTicketOrderByWithAggregationInput: ClearTicketOrderByWithAggregationInput;
  ClearTicketOrderByWithRelationInput: ClearTicketOrderByWithRelationInput;
  ClearTicketScalarWhereInput: ClearTicketScalarWhereInput;
  ClearTicketScalarWhereWithAggregatesInput: ClearTicketScalarWhereWithAggregatesInput;
  ClearTicketSumAggregate: ClearTicketSumAggregate;
  ClearTicketSumOrderByAggregateInput: ClearTicketSumOrderByAggregateInput;
  ClearTicketUpdateInput: ClearTicketUpdateInput;
  ClearTicketUpdateManyMutationInput: ClearTicketUpdateManyMutationInput;
  ClearTicketUpdateManyWithWhereWithoutEventInput: ClearTicketUpdateManyWithWhereWithoutEventInput;
  ClearTicketUpdateManyWithWhereWithoutGuardianInput: ClearTicketUpdateManyWithWhereWithoutGuardianInput;
  ClearTicketUpdateManyWithWhereWithoutPaymentInput: ClearTicketUpdateManyWithWhereWithoutPaymentInput;
  ClearTicketUpdateManyWithWhereWithoutPromoCodeInput: ClearTicketUpdateManyWithWhereWithoutPromoCodeInput;
  ClearTicketUpdateManyWithWhereWithoutSentEmailsInput: ClearTicketUpdateManyWithWhereWithoutSentEmailsInput;
  ClearTicketUpdateManyWithoutEventInput: ClearTicketUpdateManyWithoutEventInput;
  ClearTicketUpdateManyWithoutGuardianInput: ClearTicketUpdateManyWithoutGuardianInput;
  ClearTicketUpdateManyWithoutPaymentInput: ClearTicketUpdateManyWithoutPaymentInput;
  ClearTicketUpdateManyWithoutPromoCodeInput: ClearTicketUpdateManyWithoutPromoCodeInput;
  ClearTicketUpdateManyWithoutSentEmailsInput: ClearTicketUpdateManyWithoutSentEmailsInput;
  ClearTicketUpdateWithWhereUniqueWithoutEventInput: ClearTicketUpdateWithWhereUniqueWithoutEventInput;
  ClearTicketUpdateWithWhereUniqueWithoutGuardianInput: ClearTicketUpdateWithWhereUniqueWithoutGuardianInput;
  ClearTicketUpdateWithWhereUniqueWithoutPaymentInput: ClearTicketUpdateWithWhereUniqueWithoutPaymentInput;
  ClearTicketUpdateWithWhereUniqueWithoutPromoCodeInput: ClearTicketUpdateWithWhereUniqueWithoutPromoCodeInput;
  ClearTicketUpdateWithWhereUniqueWithoutSentEmailsInput: ClearTicketUpdateWithWhereUniqueWithoutSentEmailsInput;
  ClearTicketUpdateWithoutEventInput: ClearTicketUpdateWithoutEventInput;
  ClearTicketUpdateWithoutGuardianInput: ClearTicketUpdateWithoutGuardianInput;
  ClearTicketUpdateWithoutPaymentInput: ClearTicketUpdateWithoutPaymentInput;
  ClearTicketUpdateWithoutPromoCodeInput: ClearTicketUpdateWithoutPromoCodeInput;
  ClearTicketUpdateWithoutSentEmailsInput: ClearTicketUpdateWithoutSentEmailsInput;
  ClearTicketUpsertWithWhereUniqueWithoutEventInput: ClearTicketUpsertWithWhereUniqueWithoutEventInput;
  ClearTicketUpsertWithWhereUniqueWithoutGuardianInput: ClearTicketUpsertWithWhereUniqueWithoutGuardianInput;
  ClearTicketUpsertWithWhereUniqueWithoutPaymentInput: ClearTicketUpsertWithWhereUniqueWithoutPaymentInput;
  ClearTicketUpsertWithWhereUniqueWithoutPromoCodeInput: ClearTicketUpsertWithWhereUniqueWithoutPromoCodeInput;
  ClearTicketUpsertWithWhereUniqueWithoutSentEmailsInput: ClearTicketUpsertWithWhereUniqueWithoutSentEmailsInput;
  ClearTicketWhereInput: ClearTicketWhereInput;
  ClearTicketWhereUniqueInput: ClearTicketWhereUniqueInput;
  ClearVenue: ClearVenue;
  ClearVenueAvgAggregate: ClearVenueAvgAggregate;
  ClearVenueAvgOrderByAggregateInput: ClearVenueAvgOrderByAggregateInput;
  ClearVenueCount: ClearVenueCount;
  ClearVenueCountAggregate: ClearVenueCountAggregate;
  ClearVenueCountOrderByAggregateInput: ClearVenueCountOrderByAggregateInput;
  ClearVenueCreateInput: ClearVenueCreateInput;
  ClearVenueCreateManyInput: ClearVenueCreateManyInput;
  ClearVenueCreateNestedOneWithoutEventsInput: ClearVenueCreateNestedOneWithoutEventsInput;
  ClearVenueCreateOrConnectWithoutEventsInput: ClearVenueCreateOrConnectWithoutEventsInput;
  ClearVenueCreateWithoutEventsInput: ClearVenueCreateWithoutEventsInput;
  ClearVenueGroupBy: ClearVenueGroupBy;
  ClearVenueMaxAggregate: ClearVenueMaxAggregate;
  ClearVenueMaxOrderByAggregateInput: ClearVenueMaxOrderByAggregateInput;
  ClearVenueMinAggregate: ClearVenueMinAggregate;
  ClearVenueMinOrderByAggregateInput: ClearVenueMinOrderByAggregateInput;
  ClearVenueOrderByWithAggregationInput: ClearVenueOrderByWithAggregationInput;
  ClearVenueOrderByWithRelationInput: ClearVenueOrderByWithRelationInput;
  ClearVenueRelationFilter: ClearVenueRelationFilter;
  ClearVenueScalarWhereWithAggregatesInput: ClearVenueScalarWhereWithAggregatesInput;
  ClearVenueSumAggregate: ClearVenueSumAggregate;
  ClearVenueSumOrderByAggregateInput: ClearVenueSumOrderByAggregateInput;
  ClearVenueUpdateInput: ClearVenueUpdateInput;
  ClearVenueUpdateManyMutationInput: ClearVenueUpdateManyMutationInput;
  ClearVenueUpdateOneWithoutEventsInput: ClearVenueUpdateOneWithoutEventsInput;
  ClearVenueUpdateWithoutEventsInput: ClearVenueUpdateWithoutEventsInput;
  ClearVenueUpsertWithoutEventsInput: ClearVenueUpsertWithoutEventsInput;
  ClearVenueWhereInput: ClearVenueWhereInput;
  ClearVenueWhereUniqueInput: ClearVenueWhereUniqueInput;
  ClearWebhook: ClearWebhook;
  ClearWebhookCountAggregate: ClearWebhookCountAggregate;
  ClearWebhookCountOrderByAggregateInput: ClearWebhookCountOrderByAggregateInput;
  ClearWebhookCreateInput: ClearWebhookCreateInput;
  ClearWebhookCreateManyEventGroupInput: ClearWebhookCreateManyEventGroupInput;
  ClearWebhookCreateManyEventGroupInputEnvelope: ClearWebhookCreateManyEventGroupInputEnvelope;
  ClearWebhookCreateManyEventInput: ClearWebhookCreateManyEventInput;
  ClearWebhookCreateManyEventInputEnvelope: ClearWebhookCreateManyEventInputEnvelope;
  ClearWebhookCreateManyInput: ClearWebhookCreateManyInput;
  ClearWebhookCreateNestedManyWithoutEventGroupInput: ClearWebhookCreateNestedManyWithoutEventGroupInput;
  ClearWebhookCreateNestedManyWithoutEventInput: ClearWebhookCreateNestedManyWithoutEventInput;
  ClearWebhookCreateOrConnectWithoutEventGroupInput: ClearWebhookCreateOrConnectWithoutEventGroupInput;
  ClearWebhookCreateOrConnectWithoutEventInput: ClearWebhookCreateOrConnectWithoutEventInput;
  ClearWebhookCreateWithoutEventGroupInput: ClearWebhookCreateWithoutEventGroupInput;
  ClearWebhookCreateWithoutEventInput: ClearWebhookCreateWithoutEventInput;
  ClearWebhookGroupBy: ClearWebhookGroupBy;
  ClearWebhookListRelationFilter: ClearWebhookListRelationFilter;
  ClearWebhookMaxAggregate: ClearWebhookMaxAggregate;
  ClearWebhookMaxOrderByAggregateInput: ClearWebhookMaxOrderByAggregateInput;
  ClearWebhookMinAggregate: ClearWebhookMinAggregate;
  ClearWebhookMinOrderByAggregateInput: ClearWebhookMinOrderByAggregateInput;
  ClearWebhookOrderByRelationAggregateInput: ClearWebhookOrderByRelationAggregateInput;
  ClearWebhookOrderByWithAggregationInput: ClearWebhookOrderByWithAggregationInput;
  ClearWebhookOrderByWithRelationInput: ClearWebhookOrderByWithRelationInput;
  ClearWebhookScalarWhereInput: ClearWebhookScalarWhereInput;
  ClearWebhookScalarWhereWithAggregatesInput: ClearWebhookScalarWhereWithAggregatesInput;
  ClearWebhookUpdateInput: ClearWebhookUpdateInput;
  ClearWebhookUpdateManyMutationInput: ClearWebhookUpdateManyMutationInput;
  ClearWebhookUpdateManyWithWhereWithoutEventGroupInput: ClearWebhookUpdateManyWithWhereWithoutEventGroupInput;
  ClearWebhookUpdateManyWithWhereWithoutEventInput: ClearWebhookUpdateManyWithWhereWithoutEventInput;
  ClearWebhookUpdateManyWithoutEventGroupInput: ClearWebhookUpdateManyWithoutEventGroupInput;
  ClearWebhookUpdateManyWithoutEventInput: ClearWebhookUpdateManyWithoutEventInput;
  ClearWebhookUpdateWithWhereUniqueWithoutEventGroupInput: ClearWebhookUpdateWithWhereUniqueWithoutEventGroupInput;
  ClearWebhookUpdateWithWhereUniqueWithoutEventInput: ClearWebhookUpdateWithWhereUniqueWithoutEventInput;
  ClearWebhookUpdateWithoutEventGroupInput: ClearWebhookUpdateWithoutEventGroupInput;
  ClearWebhookUpdateWithoutEventInput: ClearWebhookUpdateWithoutEventInput;
  ClearWebhookUpsertWithWhereUniqueWithoutEventGroupInput: ClearWebhookUpsertWithWhereUniqueWithoutEventGroupInput;
  ClearWebhookUpsertWithWhereUniqueWithoutEventInput: ClearWebhookUpsertWithWhereUniqueWithoutEventInput;
  ClearWebhookWhereInput: ClearWebhookWhereInput;
  ClearWebhookWhereUniqueInput: ClearWebhookWhereUniqueInput;
  CmsAnnouncement: CmsAnnouncement;
  CmsAnnouncementCollection: CmsAnnouncementCollection;
  CmsAnnouncementFilter: CmsAnnouncementFilter;
  CmsAnnouncementLinkingCollections: CmsAnnouncementLinkingCollections;
  CmsAnnouncementProgramCollection: CmsAnnouncementProgramCollection;
  CmsAsset: CmsAsset;
  CmsAssetCollection: CmsAssetCollection;
  CmsAssetFilter: CmsAssetFilter;
  CmsAssetLinkingCollections: CmsAssetLinkingCollections;
  CmsAward: CmsAward;
  CmsAwardCollection: CmsAwardCollection;
  CmsAwardFilter: CmsAwardFilter;
  CmsAwardLinkingCollections: CmsAwardLinkingCollections;
  CmsAwardProgramsCollection: CmsAwardProgramsCollection;
  CmsBadge: CmsBadge;
  CmsBadgeCollection: CmsBadgeCollection;
  CmsBadgeFilter: CmsBadgeFilter;
  CmsBadgeLinkingCollections: CmsBadgeLinkingCollections;
  CmsBumper: CmsBumper;
  CmsBumperCollection: CmsBumperCollection;
  CmsBumperFilter: CmsBumperFilter;
  CmsBumperLinkingCollections: CmsBumperLinkingCollections;
  CmsCircle: Scalars['CmsCircle'];
  CmsCommunityPartner: CmsCommunityPartner;
  CmsCommunityPartnerCollection: CmsCommunityPartnerCollection;
  CmsCommunityPartnerFilter: CmsCommunityPartnerFilter;
  CmsCommunityPartnerLinkingCollections: CmsCommunityPartnerLinkingCollections;
  CmsCommunityPartnerRegionCollection: CmsCommunityPartnerRegionCollection;
  CmsContentTypeString: CmsContentTypeString;
  CmsContentTypeStringCollection: CmsContentTypeStringCollection;
  CmsContentTypeStringFilter: CmsContentTypeStringFilter;
  CmsContentTypeStringLinkingCollections: CmsContentTypeStringLinkingCollections;
  CmsContentTypeStringRichValue: CmsContentTypeStringRichValue;
  CmsContentTypeStringRichValueAssets: CmsContentTypeStringRichValueAssets;
  CmsContentTypeStringRichValueEntries: CmsContentTypeStringRichValueEntries;
  CmsContentTypeStringRichValueLinks: CmsContentTypeStringRichValueLinks;
  CmsContentTypeStringSubvalueCollection: CmsContentTypeStringSubvalueCollection;
  CmsContentfulMetadata: CmsContentfulMetadata;
  CmsContentfulMetadataFilter: CmsContentfulMetadataFilter;
  CmsContentfulMetadataTagsFilter: CmsContentfulMetadataTagsFilter;
  CmsContentfulTag: CmsContentfulTag;
  CmsDateTime: Scalars['CmsDateTime'];
  CmsDimension: Scalars['CmsDimension'];
  CmsEntry: ResolversParentTypes['CmsAnnouncement'] | ResolversParentTypes['CmsAward'] | ResolversParentTypes['CmsBadge'] | ResolversParentTypes['CmsBumper'] | ResolversParentTypes['CmsCommunityPartner'] | ResolversParentTypes['CmsContentTypeString'] | ResolversParentTypes['CmsEvent'] | ResolversParentTypes['CmsEventRestriction'] | ResolversParentTypes['CmsFaq'] | ResolversParentTypes['CmsForm'] | ResolversParentTypes['CmsGlobalSponsor'] | ResolversParentTypes['CmsHiringCompany'] | ResolversParentTypes['CmsHiringPost'] | ResolversParentTypes['CmsLegalDocument'] | ResolversParentTypes['CmsLocalizationConfig'] | ResolversParentTypes['CmsNewsCoverage'] | ResolversParentTypes['CmsPressPhoto'] | ResolversParentTypes['CmsProgram'] | ResolversParentTypes['CmsRegion'] | ResolversParentTypes['CmsSite'] | ResolversParentTypes['CmsSocialMedia'] | ResolversParentTypes['CmsStockMusic'] | ResolversParentTypes['CmsTestimonial'];
  CmsEntryCollection: CmsEntryCollection;
  CmsEntryFilter: CmsEntryFilter;
  CmsEvent: CmsEvent;
  CmsEventCollection: CmsEventCollection;
  CmsEventFilter: CmsEventFilter;
  CmsEventLinkingCollections: CmsEventLinkingCollections;
  CmsEventNotice: CmsEventNotice;
  CmsEventNoticeAssets: CmsEventNoticeAssets;
  CmsEventNoticeEntries: CmsEventNoticeEntries;
  CmsEventNoticeLinks: CmsEventNoticeLinks;
  CmsEventRestriction: CmsEventRestriction;
  CmsEventRestrictionApplicableProgramsCollection: CmsEventRestrictionApplicableProgramsCollection;
  CmsEventRestrictionCollection: CmsEventRestrictionCollection;
  CmsEventRestrictionFilter: CmsEventRestrictionFilter;
  CmsEventRestrictionLinkingCollections: CmsEventRestrictionLinkingCollections;
  CmsFaq: CmsFaq;
  CmsFaqAnswer: CmsFaqAnswer;
  CmsFaqAnswerAssets: CmsFaqAnswerAssets;
  CmsFaqAnswerEntries: CmsFaqAnswerEntries;
  CmsFaqAnswerLinks: CmsFaqAnswerLinks;
  CmsFaqCollection: CmsFaqCollection;
  CmsFaqFilter: CmsFaqFilter;
  CmsFaqLinkingCollections: CmsFaqLinkingCollections;
  CmsFaqRelatedAnswersCollection: CmsFaqRelatedAnswersCollection;
  CmsForm: CmsForm;
  CmsFormCollection: CmsFormCollection;
  CmsFormDetails: CmsFormDetails;
  CmsFormDetailsAssets: CmsFormDetailsAssets;
  CmsFormDetailsEntries: CmsFormDetailsEntries;
  CmsFormDetailsLinks: CmsFormDetailsLinks;
  CmsFormFilter: CmsFormFilter;
  CmsFormLinkingCollections: CmsFormLinkingCollections;
  CmsFormSidebar: CmsFormSidebar;
  CmsFormSidebarAssets: CmsFormSidebarAssets;
  CmsFormSidebarEntries: CmsFormSidebarEntries;
  CmsFormSidebarLinks: CmsFormSidebarLinks;
  CmsGlobalSponsor: CmsGlobalSponsor;
  CmsGlobalSponsorCollection: CmsGlobalSponsorCollection;
  CmsGlobalSponsorFilter: CmsGlobalSponsorFilter;
  CmsGlobalSponsorLinkingCollections: CmsGlobalSponsorLinkingCollections;
  CmsHexColor: Scalars['CmsHexColor'];
  CmsHiringCompany: CmsHiringCompany;
  CmsHiringCompanyCollection: CmsHiringCompanyCollection;
  CmsHiringCompanyDescription: CmsHiringCompanyDescription;
  CmsHiringCompanyDescriptionAssets: CmsHiringCompanyDescriptionAssets;
  CmsHiringCompanyDescriptionEntries: CmsHiringCompanyDescriptionEntries;
  CmsHiringCompanyDescriptionLinks: CmsHiringCompanyDescriptionLinks;
  CmsHiringCompanyFilter: CmsHiringCompanyFilter;
  CmsHiringCompanyLinkingCollections: CmsHiringCompanyLinkingCollections;
  CmsHiringPost: CmsHiringPost;
  CmsHiringPostCollection: CmsHiringPostCollection;
  CmsHiringPostDescription: CmsHiringPostDescription;
  CmsHiringPostDescriptionAssets: CmsHiringPostDescriptionAssets;
  CmsHiringPostDescriptionEntries: CmsHiringPostDescriptionEntries;
  CmsHiringPostDescriptionLinks: CmsHiringPostDescriptionLinks;
  CmsHiringPostFilter: CmsHiringPostFilter;
  CmsHiringPostLinkingCollections: CmsHiringPostLinkingCollections;
  CmsHiringPostRegionsCollection: CmsHiringPostRegionsCollection;
  CmsImageTransformOptions: CmsImageTransformOptions;
  CmsJSON: Scalars['CmsJSON'];
  CmsLegalDocument: CmsLegalDocument;
  CmsLegalDocumentCollection: CmsLegalDocumentCollection;
  CmsLegalDocumentFilter: CmsLegalDocumentFilter;
  CmsLegalDocumentLinkingCollections: CmsLegalDocumentLinkingCollections;
  CmsLocalizationConfig: CmsLocalizationConfig;
  CmsLocalizationConfigCollection: CmsLocalizationConfigCollection;
  CmsLocalizationConfigFilter: CmsLocalizationConfigFilter;
  CmsLocalizationConfigLinkingCollections: CmsLocalizationConfigLinkingCollections;
  CmsLocalizationConfigRequiredEventRestrictionsCollection: CmsLocalizationConfigRequiredEventRestrictionsCollection;
  CmsLocation: CmsLocation;
  CmsNewsCoverage: CmsNewsCoverage;
  CmsNewsCoverageCollection: CmsNewsCoverageCollection;
  CmsNewsCoverageFilter: CmsNewsCoverageFilter;
  CmsNewsCoverageLinkingCollections: CmsNewsCoverageLinkingCollections;
  CmsPressPhoto: CmsPressPhoto;
  CmsPressPhotoCollection: CmsPressPhotoCollection;
  CmsPressPhotoFilter: CmsPressPhotoFilter;
  CmsPressPhotoLinkingCollections: CmsPressPhotoLinkingCollections;
  CmsProgram: CmsProgram;
  CmsProgramCollection: CmsProgramCollection;
  CmsProgramEducationDetails: CmsProgramEducationDetails;
  CmsProgramEducationDetailsAssets: CmsProgramEducationDetailsAssets;
  CmsProgramEducationDetailsEntries: CmsProgramEducationDetailsEntries;
  CmsProgramEducationDetailsLinks: CmsProgramEducationDetailsLinks;
  CmsProgramEligibility: CmsProgramEligibility;
  CmsProgramEligibilityAssets: CmsProgramEligibilityAssets;
  CmsProgramEligibilityEntries: CmsProgramEligibilityEntries;
  CmsProgramEligibilityLinks: CmsProgramEligibilityLinks;
  CmsProgramFilter: CmsProgramFilter;
  CmsProgramLinkingCollections: CmsProgramLinkingCollections;
  CmsProgramPresentingSponsorsCollection: CmsProgramPresentingSponsorsCollection;
  CmsProgramVolunteerBlurb: CmsProgramVolunteerBlurb;
  CmsProgramVolunteerBlurbAssets: CmsProgramVolunteerBlurbAssets;
  CmsProgramVolunteerBlurbEntries: CmsProgramVolunteerBlurbEntries;
  CmsProgramVolunteerBlurbLinks: CmsProgramVolunteerBlurbLinks;
  CmsProgramVolunteerDetails: CmsProgramVolunteerDetails;
  CmsProgramVolunteerDetailsAssets: CmsProgramVolunteerDetailsAssets;
  CmsProgramVolunteerDetailsEntries: CmsProgramVolunteerDetailsEntries;
  CmsProgramVolunteerDetailsLinks: CmsProgramVolunteerDetailsLinks;
  CmsQuality: Scalars['CmsQuality'];
  CmsQuery: CmsQuery;
  CmsRectangle: Scalars['CmsRectangle'];
  CmsRegion: CmsRegion;
  CmsRegionCollection: CmsRegionCollection;
  CmsRegionFilter: CmsRegionFilter;
  CmsRegionLinkingCollections: CmsRegionLinkingCollections;
  CmsSite: CmsSite;
  CmsSiteCollection: CmsSiteCollection;
  CmsSiteFilter: CmsSiteFilter;
  CmsSiteLinkingCollections: CmsSiteLinkingCollections;
  CmsSocialMedia: CmsSocialMedia;
  CmsSocialMediaCollection: CmsSocialMediaCollection;
  CmsSocialMediaFilter: CmsSocialMediaFilter;
  CmsSocialMediaLinkingCollections: CmsSocialMediaLinkingCollections;
  CmsStockMusic: CmsStockMusic;
  CmsStockMusicCollection: CmsStockMusicCollection;
  CmsStockMusicFilter: CmsStockMusicFilter;
  CmsStockMusicLinkingCollections: CmsStockMusicLinkingCollections;
  CmsSys: CmsSys;
  CmsSysFilter: CmsSysFilter;
  CmsTestimonial: CmsTestimonial;
  CmsTestimonialCollection: CmsTestimonialCollection;
  CmsTestimonialFilter: CmsTestimonialFilter;
  CmsTestimonialLinkingCollections: CmsTestimonialLinkingCollections;
  CmscfEventNestedFilter: CmscfEventNestedFilter;
  CmscfGlobalSponsorNestedFilter: CmscfGlobalSponsorNestedFilter;
  CmscfHiringCompanyNestedFilter: CmscfHiringCompanyNestedFilter;
  CmscfLocalizationConfigNestedFilter: CmscfLocalizationConfigNestedFilter;
  CmscfProgramNestedFilter: CmscfProgramNestedFilter;
  CmscfRegionNestedFilter: CmscfRegionNestedFilter;
  EmailJSONObject: Scalars['EmailJSONObject'];
  EmailMutation: EmailMutation;
  EmailQuery: EmailQuery;
  Float: Scalars['Float'];
  GeoGeoResult: GeoGeoResult;
  GeoQuery: GeoQuery;
  GithubContributor: GithubContributor;
  GithubQuery: GithubQuery;
  ID: Scalars['ID'];
  Int: Scalars['Int'];
  JSONObject: Scalars['JSONObject'];
  LabsDateTime: Scalars['LabsDateTime'];
  LabsEvent: LabsEvent;
  LabsGtLtEq: LabsGtLtEq;
  LabsIdOrUsernameInput: LabsIdOrUsernameInput;
  LabsJSON: Scalars['LabsJSON'];
  LabsJSONObject: Scalars['LabsJSONObject'];
  LabsMatch: LabsMatch;
  LabsMentor: LabsMentor;
  LabsMentorApplyInput: LabsMentorApplyInput;
  LabsMentorCreateInput: LabsMentorCreateInput;
  LabsMentorEditInput: LabsMentorEditInput;
  LabsMentorFilterInput: LabsMentorFilterInput;
  LabsMutation: LabsMutation;
  LabsPreference: LabsPreference;
  LabsProject: LabsProject;
  LabsProjectCreateInput: LabsProjectCreateInput;
  LabsProjectEditInput: LabsProjectEditInput;
  LabsQuery: LabsQuery;
  LabsStat: LabsStat;
  LabsStudent: LabsStudent;
  LabsStudentApplyInput: LabsStudentApplyInput;
  LabsStudentCreateInput: LabsStudentCreateInput;
  LabsStudentEditInput: LabsStudentEditInput;
  LabsStudentFilterInput: LabsStudentFilterInput;
  LabsSurvey: LabsSurvey;
  LabsSurveyCreateInput: LabsSurveyCreateInput;
  LabsSurveyOccurence: LabsSurveyOccurence;
  LabsSurveyRespondInput: LabsSurveyRespondInput;
  LabsSurveyResponse: LabsSurveyResponse;
  LabsTag: LabsTag;
  LabsTagCreateInput: LabsTagCreateInput;
  LabsTagEditInput: LabsTagEditInput;
  LabsTagTrainingSubmission: LabsTagTrainingSubmission;
  LabsTrackRecommendation: LabsTrackRecommendation;
  Mutation: {};
  Query: {};
  ShowcaseAddReactionsInput: ShowcaseAddReactionsInput;
  ShowcaseAward: ShowcaseAward;
  ShowcaseCreateJudgingPoolInput: ShowcaseCreateJudgingPoolInput;
  ShowcaseCreateProjectInput: ShowcaseCreateProjectInput;
  ShowcaseDateTime: Scalars['ShowcaseDateTime'];
  ShowcaseEditPhotoInput: ShowcaseEditPhotoInput;
  ShowcaseEditProjectInput: ShowcaseEditProjectInput;
  ShowcaseImportPhotoInput: ShowcaseImportPhotoInput;
  ShowcaseJudgement: ShowcaseJudgement;
  ShowcaseJudgingCriteria: ShowcaseJudgingCriteria;
  ShowcaseJudgingCriteriaInput: ShowcaseJudgingCriteriaInput;
  ShowcaseJudgingPool: ShowcaseJudgingPool;
  ShowcaseJudgingResult: ShowcaseJudgingResult;
  ShowcaseJudgingResultSubValue: ShowcaseJudgingResultSubValue;
  ShowcaseMedia: ShowcaseMedia;
  ShowcaseMember: ShowcaseMember;
  ShowcaseMetadata: ShowcaseMetadata;
  ShowcaseMetadataWhere: ShowcaseMetadataWhere;
  ShowcaseMetricAggregate: ShowcaseMetricAggregate;
  ShowcaseMetricTimeSeries: ShowcaseMetricTimeSeries;
  ShowcaseMutation: ShowcaseMutation;
  ShowcasePeerJudgement: ShowcasePeerJudgement;
  ShowcasePhoto: ShowcasePhoto;
  ShowcasePhotosWhere: ShowcasePhotosWhere;
  ShowcaseProject: ShowcaseProject;
  ShowcaseProjectsWhere: ShowcaseProjectsWhere;
  ShowcaseQuery: ShowcaseQuery;
  ShowcaseReactionCount: ShowcaseReactionCount;
  ShowyourworkDateTime: Scalars['ShowyourworkDateTime'];
  ShowyourworkDiscordMessage: ShowyourworkDiscordMessage;
  ShowyourworkQuery: ShowyourworkQuery;
  String: Scalars['String'];
  Subscription: {};
  TwitchLiveStatus: TwitchLiveStatus;
  TwitchQuery: TwitchQuery;
  Upload: Scalars['Upload'];
}>;

export type AccountBadgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AccountBadge'] = ResolversParentTypes['AccountBadge']> = ResolversObject<{
  details?: Resolver<Maybe<ResolversTypes['CmsBadge']>, ParentType, ContextType>;
  displayed?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  expiresUtc?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AccountDiscordInformationResolvers<ContextType = any, ParentType extends ResolversParentTypes['AccountDiscordInformation'] = ResolversParentTypes['AccountDiscordInformation']> = ResolversObject<{
  avatar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  discriminator?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  handle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  tag?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  username?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AccountMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['AccountMutation'] = ResolversParentTypes['AccountMutation']> = ResolversObject<{
  addRole?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<AccountMutationAddRoleArgs, 'id' | 'roleId'>>;
  addRoleByCode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<AccountMutationAddRoleByCodeArgs, 'code' | 'where'>>;
  grantBadge?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<AccountMutationGrantBadgeArgs, 'badge' | 'where'>>;
  linkDiscord?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<AccountMutationLinkDiscordArgs, 'discordId' | 'userId'>>;
  pizzaOrTurtleCult?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<AccountMutationPizzaOrTurtleCultArgs, 'pizzaOrTurtle' | 'where'>>;
  revokeBadge?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<AccountMutationRevokeBadgeArgs, 'badge' | 'where'>>;
  setDiscordToken?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<AccountMutationSetDiscordTokenArgs, 'tokenInfo' | 'where'>>;
  setDisplayedBadges?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<AccountMutationSetDisplayedBadgesArgs, 'where'>>;
  unlinkDiscord?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<AccountMutationUnlinkDiscordArgs, 'userId'>>;
  updateUser?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<AccountMutationUpdateUserArgs, 'updates' | 'username'>>;
  uploadProfilePicture?: Resolver<ResolversTypes['String'], ParentType, ContextType, RequireFields<AccountMutationUploadProfilePictureArgs, 'upload' | 'where'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AccountQueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['AccountQuery'] = ResolversParentTypes['AccountQuery']> = ResolversObject<{
  getDiscordToken?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, RequireFields<AccountQueryGetDiscordTokenArgs, 'discordId'>>;
  getDiscordUsers?: Resolver<Array<Maybe<ResolversTypes['AccountUser']>>, ParentType, ContextType>;
  getUser?: Resolver<Maybe<ResolversTypes['AccountUser']>, ParentType, ContextType, RequireFields<AccountQueryGetUserArgs, 'where'>>;
  roleUsers?: Resolver<Array<Maybe<ResolversTypes['AccountUser']>>, ParentType, ContextType, RequireFields<AccountQueryRoleUsersArgs, 'roleId'>>;
  roles?: Resolver<Array<Maybe<ResolversTypes['AccountRole']>>, ParentType, ContextType>;
  searchUsers?: Resolver<Array<Maybe<ResolversTypes['AccountUser']>>, ParentType, ContextType, RequireFields<AccountQuerySearchUsersArgs, 'where'>>;
  userRoles?: Resolver<Array<Maybe<ResolversTypes['AccountRole']>>, ParentType, ContextType, RequireFields<AccountQueryUserRolesArgs, 'id'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AccountRoleResolvers<ContextType = any, ParentType extends ResolversParentTypes['AccountRole'] = ResolversParentTypes['AccountRole']> = ResolversObject<{
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AccountSubscriptionBadgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AccountSubscriptionBadge'] = ResolversParentTypes['AccountSubscriptionBadge']> = ResolversObject<{
  badge?: Resolver<ResolversTypes['AccountBadge'], ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  user?: Resolver<ResolversTypes['AccountSubscriptionUser'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AccountSubscriptionUserResolvers<ContextType = any, ParentType extends ResolversParentTypes['AccountSubscriptionUser'] = ResolversParentTypes['AccountSubscriptionUser']> = ResolversObject<{
  badges?: Resolver<Maybe<Array<Maybe<ResolversTypes['AccountBadge']>>>, ParentType, ContextType>;
  bio?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  discordId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  picture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pronoun?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  roles?: Resolver<Maybe<Array<Maybe<ResolversTypes['AccountRole']>>>, ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AccountUserResolvers<ContextType = any, ParentType extends ResolversParentTypes['AccountUser'] = ResolversParentTypes['AccountUser']> = ResolversObject<{
  acceptTos?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  badges?: Resolver<Array<ResolversTypes['AccountBadge']>, ParentType, ContextType, Partial<AccountUserBadgesArgs>>;
  bio?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  blocked?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  discordId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  discordInformation?: Resolver<Maybe<ResolversTypes['AccountDiscordInformation']>, ParentType, ContextType>;
  displayNameFormat?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  familyName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  githubUsername?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  givenName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phoneNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  picture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<AccountUserPictureArgs>>;
  pronoun?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  roles?: Resolver<Array<ResolversTypes['AccountRole']>, ParentType, ContextType>;
  sites?: Resolver<Maybe<Array<Maybe<ResolversTypes['CmsSite']>>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  username?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AdvisorAdvisorResolvers<ContextType = any, ParentType extends ResolversParentTypes['AdvisorAdvisor'] = ResolversParentTypes['AdvisorAdvisor']> = ResolversObject<{
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  familyName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  givenName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  interviewsPerWeek?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  resumesPerWeek?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface AdvisorDateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['AdvisorDateTime'], any> {
  name: 'AdvisorDateTime';
}

export type AdvisorEventParticipationResolvers<ContextType = any, ParentType extends ResolversParentTypes['AdvisorEventParticipation'] = ResolversParentTypes['AdvisorEventParticipation']> = ResolversObject<{
  awardIds?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['AdvisorProfile'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface AdvisorJsonObjectScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['AdvisorJSONObject'], any> {
  name: 'AdvisorJSONObject';
}

export type AdvisorMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['AdvisorMutation'] = ResolversParentTypes['AdvisorMutation']> = ResolversObject<{
  createAdvisor?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<AdvisorMutationCreateAdvisorArgs, 'data'>>;
  createEventParticipation?: Resolver<ResolversTypes['AdvisorEventParticipation'], ParentType, ContextType, RequireFields<AdvisorMutationCreateEventParticipationArgs, 'data' | 'username'>>;
  createProfile?: Resolver<ResolversTypes['AdvisorProfile'], ParentType, ContextType, RequireFields<AdvisorMutationCreateProfileArgs, 'data'>>;
  createRecommendation?: Resolver<ResolversTypes['AdvisorRecommendation'], ParentType, ContextType, RequireFields<AdvisorMutationCreateRecommendationArgs, 'data' | 'username'>>;
  createRequest?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<AdvisorMutationCreateRequestArgs, 'email' | 'familyName' | 'givenName' | 'type'>>;
  createTag?: Resolver<ResolversTypes['AdvisorTag'], ParentType, ContextType, RequireFields<AdvisorMutationCreateTagArgs, 'data'>>;
  deleteTag?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<AdvisorMutationDeleteTagArgs, 'id'>>;
  editAdvisorLimits?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<AdvisorMutationEditAdvisorLimitsArgs, 'limits' | 'where'>>;
  editProfile?: Resolver<ResolversTypes['AdvisorProfile'], ParentType, ContextType, RequireFields<AdvisorMutationEditProfileArgs, 'data'>>;
  editRecommendation?: Resolver<ResolversTypes['AdvisorRecommendation'], ParentType, ContextType, RequireFields<AdvisorMutationEditRecommendationArgs, 'data' | 'id'>>;
  getAdvisors?: Resolver<Array<ResolversTypes['AdvisorAdvisor']>, ParentType, ContextType>;
  respondRequest?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<AdvisorMutationRespondRequestArgs, 'request'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AdvisorPendingRequestsResolvers<ContextType = any, ParentType extends ResolversParentTypes['AdvisorPendingRequests'] = ResolversParentTypes['AdvisorPendingRequests']> = ResolversObject<{
  pendingRequests?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  requestType?: Resolver<ResolversTypes['AdvisorRequestType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AdvisorProfileResolvers<ContextType = any, ParentType extends ResolversParentTypes['AdvisorProfile'] = ResolversParentTypes['AdvisorProfile']> = ResolversObject<{
  bio?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['AdvisorDateTime'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  eventParticipation?: Resolver<Array<ResolversTypes['AdvisorEventParticipation']>, ParentType, ContextType>;
  experience?: Resolver<Array<ResolversTypes['AdvisorTag']>, ParentType, ContextType>;
  familyName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  givenName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  gradHighSchoolAt?: Resolver<Maybe<ResolversTypes['AdvisorDateTime']>, ParentType, ContextType>;
  gradUniversityAt?: Resolver<Maybe<ResolversTypes['AdvisorDateTime']>, ParentType, ContextType>;
  recommendations?: Resolver<Array<ResolversTypes['AdvisorRecommendation']>, ParentType, ContextType>;
  searchFullTimeAt?: Resolver<Maybe<ResolversTypes['AdvisorDateTime']>, ParentType, ContextType>;
  searchInternships?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  searchOpen?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  underrepresentedEthnicity?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  underrepresentedGender?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['AdvisorDateTime'], ParentType, ContextType>;
  urlGithub?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  urlLinkedIn?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  urlResume?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  urlWebsite?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  username?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  workFteAt?: Resolver<Maybe<ResolversTypes['AdvisorDateTime']>, ParentType, ContextType>;
  workInternAt?: Resolver<Maybe<ResolversTypes['AdvisorDateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AdvisorQueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['AdvisorQuery'] = ResolversParentTypes['AdvisorQuery']> = ResolversObject<{
  buildResumePackage?: Resolver<ResolversTypes['String'], ParentType, ContextType, RequireFields<AdvisorQueryBuildResumePackageArgs, 'username'>>;
  getRequest?: Resolver<ResolversTypes['AdvisorRequest'], ParentType, ContextType, RequireFields<AdvisorQueryGetRequestArgs, 'request'>>;
  getRequestAssignment?: Resolver<ResolversTypes['AdvisorRequestAssignment'], ParentType, ContextType, RequireFields<AdvisorQueryGetRequestAssignmentArgs, 'request'>>;
  pendingRequests?: Resolver<Array<ResolversTypes['AdvisorPendingRequests']>, ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['AdvisorProfile'], ParentType, ContextType, Partial<AdvisorQueryProfileArgs>>;
  remainingRequests?: Resolver<Array<ResolversTypes['AdvisorRemainingRequestsType']>, ParentType, ContextType>;
  servedRequests?: Resolver<Array<ResolversTypes['AdvisorRequestCount']>, ParentType, ContextType, Partial<AdvisorQueryServedRequestsArgs>>;
  submittedRequests?: Resolver<Array<ResolversTypes['AdvisorRequestCount']>, ParentType, ContextType, Partial<AdvisorQuerySubmittedRequestsArgs>>;
  tags?: Resolver<Array<ResolversTypes['AdvisorTag']>, ParentType, ContextType, Partial<AdvisorQueryTagsArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AdvisorRecommendationResolvers<ContextType = any, ParentType extends ResolversParentTypes['AdvisorRecommendation'] = ResolversParentTypes['AdvisorRecommendation']> = ResolversObject<{
  createdAt?: Resolver<ResolversTypes['AdvisorDateTime'], ParentType, ContextType>;
  employer?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  familyName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  givenName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['AdvisorProfile'], ParentType, ContextType>;
  recommendation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  relation?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  skillEngineering?: Resolver<Maybe<ResolversTypes['AdvisorRecommendationRating']>, ParentType, ContextType>;
  skillInterpersonal?: Resolver<Maybe<ResolversTypes['AdvisorRecommendationRating']>, ParentType, ContextType>;
  skillTechnical?: Resolver<Maybe<ResolversTypes['AdvisorRecommendationRating']>, ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['AdvisorDateTime'], ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AdvisorRemainingRequestsByAdvisorTypeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AdvisorRemainingRequestsByAdvisorType'] = ResolversParentTypes['AdvisorRemainingRequestsByAdvisorType']> = ResolversObject<{
  advisorType?: Resolver<ResolversTypes['AdvisorAdvisorType'], ParentType, ContextType>;
  remainingRequests?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AdvisorRemainingRequestsTypeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AdvisorRemainingRequestsType'] = ResolversParentTypes['AdvisorRemainingRequestsType']> = ResolversObject<{
  advisorTypes?: Resolver<Array<ResolversTypes['AdvisorRemainingRequestsByAdvisorType']>, ParentType, ContextType>;
  requestType?: Resolver<ResolversTypes['AdvisorRequestType'], ParentType, ContextType>;
  totalRemainingRequests?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AdvisorRequestResolvers<ContextType = any, ParentType extends ResolversParentTypes['AdvisorRequest'] = ResolversParentTypes['AdvisorRequest']> = ResolversObject<{
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  familyName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  givenName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  resumeUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['AdvisorRequestType'], ParentType, ContextType>;
  username?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AdvisorRequestAssignmentResolvers<ContextType = any, ParentType extends ResolversParentTypes['AdvisorRequestAssignment'] = ResolversParentTypes['AdvisorRequestAssignment']> = ResolversObject<{
  request?: Resolver<ResolversTypes['AdvisorRequest'], ParentType, ContextType>;
  response?: Resolver<Maybe<ResolversTypes['AdvisorJSONObject']>, ParentType, ContextType>;
  responseFile?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AdvisorRequestCountResolvers<ContextType = any, ParentType extends ResolversParentTypes['AdvisorRequestCount'] = ResolversParentTypes['AdvisorRequestCount']> = ResolversObject<{
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  familyName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  givenName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  practiceInterviews?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  resumeReviews?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AdvisorTagResolvers<ContextType = any, ParentType extends ResolversParentTypes['AdvisorTag'] = ResolversParentTypes['AdvisorTag']> = ResolversObject<{
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  profiles?: Resolver<Array<ResolversTypes['AdvisorProfile']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['AdvisorTagType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogAcfFieldGroupResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogAcfFieldGroup'] = ResolversParentTypes['BlogAcfFieldGroup']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogCategory_Display' | 'BlogPost_Authoroverride' | 'BlogPost_Marketing' | 'BlogPost_Release', ParentType, ContextType>;
  fieldGroupName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;

export type BlogAvatarResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogAvatar'] = ResolversParentTypes['BlogAvatar']> = ResolversObject<{
  default?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  extraAttr?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  forceDefault?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  foundAvatar?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  height?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  rating?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  scheme?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  width?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCategoryResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCategory'] = ResolversParentTypes['BlogCategory']> = ResolversObject<{
  ancestors?: Resolver<Maybe<ResolversTypes['BlogCategoryToAncestorsCategoryConnection']>, ParentType, ContextType, Partial<BlogCategoryAncestorsArgs>>;
  categoryId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  children?: Resolver<Maybe<ResolversTypes['BlogCategoryToCategoryConnection']>, ParentType, ContextType, Partial<BlogCategoryChildrenArgs>>;
  contentNodes?: Resolver<Maybe<ResolversTypes['BlogCategoryToContentNodeConnection']>, ParentType, ContextType, Partial<BlogCategoryContentNodesArgs>>;
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  databaseId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  display?: Resolver<Maybe<ResolversTypes['BlogCategory_Display']>, ParentType, ContextType>;
  enqueuedScripts?: Resolver<Maybe<ResolversTypes['BlogTermNodeToEnqueuedScriptConnection']>, ParentType, ContextType, Partial<BlogCategoryEnqueuedScriptsArgs>>;
  enqueuedStylesheets?: Resolver<Maybe<ResolversTypes['BlogTermNodeToEnqueuedStylesheetConnection']>, ParentType, ContextType, Partial<BlogCategoryEnqueuedStylesheetsArgs>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isContentNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isTermNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  parent?: Resolver<Maybe<ResolversTypes['BlogCategoryToParentCategoryConnectionEdge']>, ParentType, ContextType>;
  parentDatabaseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  parentId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  posts?: Resolver<Maybe<ResolversTypes['BlogCategoryToPostConnection']>, ParentType, ContextType, Partial<BlogCategoryPostsArgs>>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  taxonomy?: Resolver<Maybe<ResolversTypes['BlogCategoryToTaxonomyConnectionEdge']>, ParentType, ContextType>;
  taxonomyName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  termGroupId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  termTaxonomyId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  uri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCategoryToAncestorsCategoryConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCategoryToAncestorsCategoryConnection'] = ResolversParentTypes['BlogCategoryToAncestorsCategoryConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogCategoryToAncestorsCategoryConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogCategory']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCategoryToAncestorsCategoryConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCategoryToAncestorsCategoryConnectionEdge'] = ResolversParentTypes['BlogCategoryToAncestorsCategoryConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogCategory']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCategoryToCategoryConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCategoryToCategoryConnection'] = ResolversParentTypes['BlogCategoryToCategoryConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogCategoryToCategoryConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogCategory']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCategoryToCategoryConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCategoryToCategoryConnectionEdge'] = ResolversParentTypes['BlogCategoryToCategoryConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogCategory']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCategoryToContentNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCategoryToContentNodeConnection'] = ResolversParentTypes['BlogCategoryToContentNodeConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogCategoryToContentNodeConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogContentNode']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCategoryToContentNodeConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCategoryToContentNodeConnectionEdge'] = ResolversParentTypes['BlogCategoryToContentNodeConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogContentNode']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCategoryToParentCategoryConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCategoryToParentCategoryConnectionEdge'] = ResolversParentTypes['BlogCategoryToParentCategoryConnectionEdge']> = ResolversObject<{
  node?: Resolver<Maybe<ResolversTypes['BlogCategory']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCategoryToPostConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCategoryToPostConnection'] = ResolversParentTypes['BlogCategoryToPostConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogCategoryToPostConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPost']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCategoryToPostConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCategoryToPostConnectionEdge'] = ResolversParentTypes['BlogCategoryToPostConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCategoryToTaxonomyConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCategoryToTaxonomyConnectionEdge'] = ResolversParentTypes['BlogCategoryToTaxonomyConnectionEdge']> = ResolversObject<{
  node?: Resolver<Maybe<ResolversTypes['BlogTaxonomy']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCategory_DisplayResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCategory_Display'] = ResolversParentTypes['BlogCategory_Display']> = ResolversObject<{
  color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fieldGroupName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCommentResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogComment'] = ResolversParentTypes['BlogComment']> = ResolversObject<{
  agent?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  approved?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  author?: Resolver<Maybe<ResolversTypes['BlogCommentToCommenterConnectionEdge']>, ParentType, ContextType>;
  authorIp?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  commentId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  commentedOn?: Resolver<Maybe<ResolversTypes['BlogCommentToContentNodeConnectionEdge']>, ParentType, ContextType>;
  content?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<BlogCommentContentArgs>>;
  databaseId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dateGmt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  karma?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  parent?: Resolver<Maybe<ResolversTypes['BlogCommentToParentCommentConnectionEdge']>, ParentType, ContextType, Partial<BlogCommentParentArgs>>;
  parentDatabaseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  parentId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  replies?: Resolver<Maybe<ResolversTypes['BlogCommentToCommentConnection']>, ParentType, ContextType, Partial<BlogCommentRepliesArgs>>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCommentAuthorResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCommentAuthor'] = ResolversParentTypes['BlogCommentAuthor']> = ResolversObject<{
  databaseId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCommentToCommentConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCommentToCommentConnection'] = ResolversParentTypes['BlogCommentToCommentConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogCommentToCommentConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogComment']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCommentToCommentConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCommentToCommentConnectionEdge'] = ResolversParentTypes['BlogCommentToCommentConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogComment']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCommentToCommenterConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCommentToCommenterConnectionEdge'] = ResolversParentTypes['BlogCommentToCommenterConnectionEdge']> = ResolversObject<{
  node?: Resolver<Maybe<ResolversTypes['BlogCommenter']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCommentToContentNodeConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCommentToContentNodeConnectionEdge'] = ResolversParentTypes['BlogCommentToContentNodeConnectionEdge']> = ResolversObject<{
  node?: Resolver<Maybe<ResolversTypes['BlogContentNode']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCommentToParentCommentConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCommentToParentCommentConnectionEdge'] = ResolversParentTypes['BlogCommentToParentCommentConnectionEdge']> = ResolversObject<{
  node?: Resolver<Maybe<ResolversTypes['BlogComment']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCommenterResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCommenter'] = ResolversParentTypes['BlogCommenter']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogCommentAuthor' | 'BlogUser', ParentType, ContextType>;
  databaseId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;

export type BlogContentNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogContentNode'] = ResolversParentTypes['BlogContentNode']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogMediaItem' | 'BlogPage' | 'BlogPost', ParentType, ContextType>;
  contentType?: Resolver<Maybe<ResolversTypes['BlogContentNodeToContentTypeConnectionEdge']>, ParentType, ContextType>;
  contentTypeName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  databaseId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dateGmt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  desiredSlug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  editingLockedBy?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEditLockConnectionEdge']>, ParentType, ContextType>;
  enclosure?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  enqueuedScripts?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEnqueuedScriptConnection']>, ParentType, ContextType, Partial<BlogContentNodeEnqueuedScriptsArgs>>;
  enqueuedStylesheets?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEnqueuedStylesheetConnection']>, ParentType, ContextType, Partial<BlogContentNodeEnqueuedStylesheetsArgs>>;
  guid?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isContentNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isPreview?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isTermNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  lastEditedBy?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEditLastConnectionEdge']>, ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  modified?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  modifiedGmt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  previewRevisionDatabaseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  previewRevisionId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['BlogContentTemplate']>, ParentType, ContextType>;
  uri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;

export type BlogContentNodeToContentTypeConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogContentNodeToContentTypeConnectionEdge'] = ResolversParentTypes['BlogContentNodeToContentTypeConnectionEdge']> = ResolversObject<{
  node?: Resolver<Maybe<ResolversTypes['BlogContentType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogContentNodeToEditLastConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogContentNodeToEditLastConnectionEdge'] = ResolversParentTypes['BlogContentNodeToEditLastConnectionEdge']> = ResolversObject<{
  node?: Resolver<Maybe<ResolversTypes['BlogUser']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogContentNodeToEditLockConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogContentNodeToEditLockConnectionEdge'] = ResolversParentTypes['BlogContentNodeToEditLockConnectionEdge']> = ResolversObject<{
  lockTimestamp?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogUser']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogContentNodeToEnqueuedScriptConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogContentNodeToEnqueuedScriptConnection'] = ResolversParentTypes['BlogContentNodeToEnqueuedScriptConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogContentNodeToEnqueuedScriptConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogEnqueuedScript']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogContentNodeToEnqueuedScriptConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogContentNodeToEnqueuedScriptConnectionEdge'] = ResolversParentTypes['BlogContentNodeToEnqueuedScriptConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogEnqueuedScript']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogContentNodeToEnqueuedStylesheetConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogContentNodeToEnqueuedStylesheetConnection'] = ResolversParentTypes['BlogContentNodeToEnqueuedStylesheetConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogContentNodeToEnqueuedStylesheetConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogEnqueuedStylesheet']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogContentNodeToEnqueuedStylesheetConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogContentNodeToEnqueuedStylesheetConnectionEdge'] = ResolversParentTypes['BlogContentNodeToEnqueuedStylesheetConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogEnqueuedStylesheet']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogContentRevisionUnionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogContentRevisionUnion'] = ResolversParentTypes['BlogContentRevisionUnion']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogPage' | 'BlogPost', ParentType, ContextType>;
}>;

export type BlogContentTemplateResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogContentTemplate'] = ResolversParentTypes['BlogContentTemplate']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogDefaultTemplate', ParentType, ContextType>;
  templateName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;

export type BlogContentTypeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogContentType'] = ResolversParentTypes['BlogContentType']> = ResolversObject<{
  canExport?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  connectedTaxonomies?: Resolver<Maybe<ResolversTypes['BlogContentTypeToTaxonomyConnection']>, ParentType, ContextType, Partial<BlogContentTypeConnectedTaxonomiesArgs>>;
  contentNodes?: Resolver<Maybe<ResolversTypes['BlogContentTypeToContentNodeConnection']>, ParentType, ContextType, Partial<BlogContentTypeContentNodesArgs>>;
  deleteWithUser?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  excludeFromSearch?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  graphqlPluralName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  graphqlSingleName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hasArchive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  hierarchical?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isContentNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isFrontPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isPostsPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isTermNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  labels?: Resolver<Maybe<ResolversTypes['BlogPostTypeLabelDetails']>, ParentType, ContextType>;
  menuIcon?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  menuPosition?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  public?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  publiclyQueryable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  restBase?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  restControllerClass?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  showInAdminBar?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  showInGraphql?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  showInMenu?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  showInNavMenus?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  showInRest?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  showUi?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  uri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogContentTypeToContentNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogContentTypeToContentNodeConnection'] = ResolversParentTypes['BlogContentTypeToContentNodeConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogContentTypeToContentNodeConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogContentNode']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogContentTypeToContentNodeConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogContentTypeToContentNodeConnectionEdge'] = ResolversParentTypes['BlogContentTypeToContentNodeConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogContentNode']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogContentTypeToTaxonomyConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogContentTypeToTaxonomyConnection'] = ResolversParentTypes['BlogContentTypeToTaxonomyConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogContentTypeToTaxonomyConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogTaxonomy']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogContentTypeToTaxonomyConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogContentTypeToTaxonomyConnectionEdge'] = ResolversParentTypes['BlogContentTypeToTaxonomyConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogTaxonomy']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCreateCategoryPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCreateCategoryPayload'] = ResolversParentTypes['BlogCreateCategoryPayload']> = ResolversObject<{
  category?: Resolver<Maybe<ResolversTypes['BlogCategory']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCreateCommentPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCreateCommentPayload'] = ResolversParentTypes['BlogCreateCommentPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  comment?: Resolver<Maybe<ResolversTypes['BlogComment']>, ParentType, ContextType>;
  success?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCreateMediaItemPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCreateMediaItemPayload'] = ResolversParentTypes['BlogCreateMediaItemPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mediaItem?: Resolver<Maybe<ResolversTypes['BlogMediaItem']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCreatePagePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCreatePagePayload'] = ResolversParentTypes['BlogCreatePagePayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  page?: Resolver<Maybe<ResolversTypes['BlogPage']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCreatePostFormatPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCreatePostFormatPayload'] = ResolversParentTypes['BlogCreatePostFormatPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postFormat?: Resolver<Maybe<ResolversTypes['BlogPostFormat']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCreatePostPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCreatePostPayload'] = ResolversParentTypes['BlogCreatePostPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  post?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCreateTagPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCreateTagPayload'] = ResolversParentTypes['BlogCreateTagPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tag?: Resolver<Maybe<ResolversTypes['BlogTag']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogCreateUserPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogCreateUserPayload'] = ResolversParentTypes['BlogCreateUserPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['BlogUser']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogDatabaseIdentifierResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogDatabaseIdentifier'] = ResolversParentTypes['BlogDatabaseIdentifier']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogCategory' | 'BlogComment' | 'BlogMediaItem' | 'BlogMenu' | 'BlogMenuItem' | 'BlogPage' | 'BlogPost' | 'BlogPostFormat' | 'BlogTag' | 'BlogUser', ParentType, ContextType>;
  databaseId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
}>;

export type BlogDefaultTemplateResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogDefaultTemplate'] = ResolversParentTypes['BlogDefaultTemplate']> = ResolversObject<{
  templateName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogDeleteCategoryPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogDeleteCategoryPayload'] = ResolversParentTypes['BlogDeleteCategoryPayload']> = ResolversObject<{
  category?: Resolver<Maybe<ResolversTypes['BlogCategory']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogDeleteCommentPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogDeleteCommentPayload'] = ResolversParentTypes['BlogDeleteCommentPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  comment?: Resolver<Maybe<ResolversTypes['BlogComment']>, ParentType, ContextType>;
  deletedId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogDeleteMediaItemPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogDeleteMediaItemPayload'] = ResolversParentTypes['BlogDeleteMediaItemPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  mediaItem?: Resolver<Maybe<ResolversTypes['BlogMediaItem']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogDeletePagePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogDeletePagePayload'] = ResolversParentTypes['BlogDeletePagePayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  page?: Resolver<Maybe<ResolversTypes['BlogPage']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogDeletePostFormatPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogDeletePostFormatPayload'] = ResolversParentTypes['BlogDeletePostFormatPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  postFormat?: Resolver<Maybe<ResolversTypes['BlogPostFormat']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogDeletePostPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogDeletePostPayload'] = ResolversParentTypes['BlogDeletePostPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  post?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogDeleteTagPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogDeleteTagPayload'] = ResolversParentTypes['BlogDeleteTagPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  tag?: Resolver<Maybe<ResolversTypes['BlogTag']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogDeleteUserPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogDeleteUserPayload'] = ResolversParentTypes['BlogDeleteUserPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['BlogUser']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogDiscussionSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogDiscussionSettings'] = ResolversParentTypes['BlogDiscussionSettings']> = ResolversObject<{
  defaultCommentStatus?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  defaultPingStatus?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogEnqueuedAssetResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogEnqueuedAsset'] = ResolversParentTypes['BlogEnqueuedAsset']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogEnqueuedScript' | 'BlogEnqueuedStylesheet', ParentType, ContextType>;
  args?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  dependencies?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogEnqueuedScript']>>>, ParentType, ContextType>;
  extra?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  handle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  src?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  version?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;

export type BlogEnqueuedScriptResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogEnqueuedScript'] = ResolversParentTypes['BlogEnqueuedScript']> = ResolversObject<{
  args?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  dependencies?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogEnqueuedScript']>>>, ParentType, ContextType>;
  extra?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  handle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  src?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  version?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogEnqueuedStylesheetResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogEnqueuedStylesheet'] = ResolversParentTypes['BlogEnqueuedStylesheet']> = ResolversObject<{
  args?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  dependencies?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogEnqueuedScript']>>>, ParentType, ContextType>;
  extra?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  handle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  src?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  version?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogGeneralSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogGeneralSettings'] = ResolversParentTypes['BlogGeneralSettings']> = ResolversObject<{
  dateFormat?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  language?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  startOfWeek?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  timeFormat?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  timezone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogHierarchicalContentNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogHierarchicalContentNode'] = ResolversParentTypes['BlogHierarchicalContentNode']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogMediaItem' | 'BlogPage', ParentType, ContextType>;
  ancestors?: Resolver<Maybe<ResolversTypes['BlogHierarchicalContentNodeToContentNodeAncestorsConnection']>, ParentType, ContextType, Partial<BlogHierarchicalContentNodeAncestorsArgs>>;
  children?: Resolver<Maybe<ResolversTypes['BlogHierarchicalContentNodeToContentNodeChildrenConnection']>, ParentType, ContextType, Partial<BlogHierarchicalContentNodeChildrenArgs>>;
  parent?: Resolver<Maybe<ResolversTypes['BlogHierarchicalContentNodeToParentContentNodeConnectionEdge']>, ParentType, ContextType>;
  parentDatabaseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  parentId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
}>;

export type BlogHierarchicalContentNodeToContentNodeAncestorsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogHierarchicalContentNodeToContentNodeAncestorsConnection'] = ResolversParentTypes['BlogHierarchicalContentNodeToContentNodeAncestorsConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogHierarchicalContentNodeToContentNodeAncestorsConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogContentNode']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogHierarchicalContentNodeToContentNodeAncestorsConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogHierarchicalContentNodeToContentNodeAncestorsConnectionEdge'] = ResolversParentTypes['BlogHierarchicalContentNodeToContentNodeAncestorsConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogContentNode']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogHierarchicalContentNodeToContentNodeChildrenConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogHierarchicalContentNodeToContentNodeChildrenConnection'] = ResolversParentTypes['BlogHierarchicalContentNodeToContentNodeChildrenConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogHierarchicalContentNodeToContentNodeChildrenConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogContentNode']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogHierarchicalContentNodeToContentNodeChildrenConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogHierarchicalContentNodeToContentNodeChildrenConnectionEdge'] = ResolversParentTypes['BlogHierarchicalContentNodeToContentNodeChildrenConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogContentNode']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogHierarchicalContentNodeToParentContentNodeConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogHierarchicalContentNodeToParentContentNodeConnectionEdge'] = ResolversParentTypes['BlogHierarchicalContentNodeToParentContentNodeConnectionEdge']> = ResolversObject<{
  node?: Resolver<Maybe<ResolversTypes['BlogContentNode']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogHierarchicalTermNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogHierarchicalTermNode'] = ResolversParentTypes['BlogHierarchicalTermNode']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogCategory', ParentType, ContextType>;
  parentDatabaseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  parentId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
}>;

export type BlogMediaDetailsResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogMediaDetails'] = ResolversParentTypes['BlogMediaDetails']> = ResolversObject<{
  file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  height?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  meta?: Resolver<Maybe<ResolversTypes['BlogMediaItemMeta']>, ParentType, ContextType>;
  sizes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogMediaSize']>>>, ParentType, ContextType>;
  width?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogMediaItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogMediaItem'] = ResolversParentTypes['BlogMediaItem']> = ResolversObject<{
  altText?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ancestors?: Resolver<Maybe<ResolversTypes['BlogHierarchicalContentNodeToContentNodeAncestorsConnection']>, ParentType, ContextType, Partial<BlogMediaItemAncestorsArgs>>;
  authorDatabaseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  authorId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  caption?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<BlogMediaItemCaptionArgs>>;
  children?: Resolver<Maybe<ResolversTypes['BlogHierarchicalContentNodeToContentNodeChildrenConnection']>, ParentType, ContextType, Partial<BlogMediaItemChildrenArgs>>;
  commentCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  commentStatus?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  comments?: Resolver<Maybe<ResolversTypes['BlogMediaItemToCommentConnection']>, ParentType, ContextType, Partial<BlogMediaItemCommentsArgs>>;
  contentType?: Resolver<Maybe<ResolversTypes['BlogContentNodeToContentTypeConnectionEdge']>, ParentType, ContextType>;
  contentTypeName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  databaseId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dateGmt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<BlogMediaItemDescriptionArgs>>;
  desiredSlug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  editingLockedBy?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEditLockConnectionEdge']>, ParentType, ContextType>;
  enclosure?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  enqueuedScripts?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEnqueuedScriptConnection']>, ParentType, ContextType, Partial<BlogMediaItemEnqueuedScriptsArgs>>;
  enqueuedStylesheets?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEnqueuedStylesheetConnection']>, ParentType, ContextType, Partial<BlogMediaItemEnqueuedStylesheetsArgs>>;
  fileSize?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType, Partial<BlogMediaItemFileSizeArgs>>;
  guid?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isContentNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isPreview?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isTermNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  lastEditedBy?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEditLastConnectionEdge']>, ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mediaDetails?: Resolver<Maybe<ResolversTypes['BlogMediaDetails']>, ParentType, ContextType>;
  mediaItemId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  mediaItemUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mediaType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mimeType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  modified?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  modifiedGmt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  parent?: Resolver<Maybe<ResolversTypes['BlogHierarchicalContentNodeToParentContentNodeConnectionEdge']>, ParentType, ContextType>;
  parentDatabaseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  parentId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  previewRevisionDatabaseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  previewRevisionId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  sizes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<BlogMediaItemSizesArgs>>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sourceUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<BlogMediaItemSourceUrlArgs>>;
  srcSet?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<BlogMediaItemSrcSetArgs>>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['BlogContentTemplate']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<BlogMediaItemTitleArgs>>;
  uri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  wpAuthor?: Resolver<Maybe<ResolversTypes['BlogNodeWithAuthorToUserConnectionEdge']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogMediaItemMetaResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogMediaItemMeta'] = ResolversParentTypes['BlogMediaItemMeta']> = ResolversObject<{
  aperture?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  camera?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  caption?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  copyright?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdTimestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  credit?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  focalLength?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  iso?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  keywords?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  orientation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shutterSpeed?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogMediaItemToCommentConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogMediaItemToCommentConnection'] = ResolversParentTypes['BlogMediaItemToCommentConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogMediaItemToCommentConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogComment']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogMediaItemToCommentConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogMediaItemToCommentConnectionEdge'] = ResolversParentTypes['BlogMediaItemToCommentConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogComment']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogMediaSizeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogMediaSize'] = ResolversParentTypes['BlogMediaSize']> = ResolversObject<{
  file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fileSize?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  height?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mimeType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sourceUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  width?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogMenuResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogMenu'] = ResolversParentTypes['BlogMenu']> = ResolversObject<{
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  databaseId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  locations?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogMenuLocationEnum']>>>, ParentType, ContextType>;
  menuId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  menuItems?: Resolver<Maybe<ResolversTypes['BlogMenuToMenuItemConnection']>, ParentType, ContextType, Partial<BlogMenuMenuItemsArgs>>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogMenuItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogMenuItem'] = ResolversParentTypes['BlogMenuItem']> = ResolversObject<{
  childItems?: Resolver<Maybe<ResolversTypes['BlogMenuItemToMenuItemConnection']>, ParentType, ContextType, Partial<BlogMenuItemChildItemsArgs>>;
  connectedNode?: Resolver<Maybe<ResolversTypes['BlogMenuItemToMenuItemLinkableConnectionEdge']>, ParentType, ContextType>;
  connectedObject?: Resolver<Maybe<ResolversTypes['BlogMenuItemObjectUnion']>, ParentType, ContextType>;
  cssClasses?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  databaseId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  linkRelationship?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  locations?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogMenuLocationEnum']>>>, ParentType, ContextType>;
  menu?: Resolver<Maybe<ResolversTypes['BlogMenuItemToMenuConnectionEdge']>, ParentType, ContextType>;
  menuItemId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  parentDatabaseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  parentId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  target?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogMenuItemLinkableResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogMenuItemLinkable'] = ResolversParentTypes['BlogMenuItemLinkable']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogCategory' | 'BlogPage' | 'BlogPost' | 'BlogTag', ParentType, ContextType>;
  databaseId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  uri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;

export type BlogMenuItemObjectUnionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogMenuItemObjectUnion'] = ResolversParentTypes['BlogMenuItemObjectUnion']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogCategory' | 'BlogPage' | 'BlogPost' | 'BlogTag', ParentType, ContextType>;
}>;

export type BlogMenuItemToMenuConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogMenuItemToMenuConnectionEdge'] = ResolversParentTypes['BlogMenuItemToMenuConnectionEdge']> = ResolversObject<{
  node?: Resolver<Maybe<ResolversTypes['BlogMenu']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogMenuItemToMenuItemConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogMenuItemToMenuItemConnection'] = ResolversParentTypes['BlogMenuItemToMenuItemConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogMenuItemToMenuItemConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogMenuItem']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogMenuItemToMenuItemConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogMenuItemToMenuItemConnectionEdge'] = ResolversParentTypes['BlogMenuItemToMenuItemConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogMenuItem']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogMenuItemToMenuItemLinkableConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogMenuItemToMenuItemLinkableConnectionEdge'] = ResolversParentTypes['BlogMenuItemToMenuItemLinkableConnectionEdge']> = ResolversObject<{
  node?: Resolver<Maybe<ResolversTypes['BlogMenuItemLinkable']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogMenuToMenuItemConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogMenuToMenuItemConnection'] = ResolversParentTypes['BlogMenuToMenuItemConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogMenuToMenuItemConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogMenuItem']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogMenuToMenuItemConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogMenuToMenuItemConnectionEdge'] = ResolversParentTypes['BlogMenuToMenuItemConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogMenuItem']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogNode'] = ResolversParentTypes['BlogNode']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogCategory' | 'BlogComment' | 'BlogCommentAuthor' | 'BlogContentType' | 'BlogEnqueuedScript' | 'BlogEnqueuedStylesheet' | 'BlogMediaItem' | 'BlogMenu' | 'BlogMenuItem' | 'BlogPage' | 'BlogPlugin' | 'BlogPost' | 'BlogPostFormat' | 'BlogTag' | 'BlogTaxonomy' | 'BlogTheme' | 'BlogUser' | 'BlogUserRole', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
}>;

export type BlogNodeWithAuthorResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogNodeWithAuthor'] = ResolversParentTypes['BlogNodeWithAuthor']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogMediaItem' | 'BlogPage' | 'BlogPost', ParentType, ContextType>;
  authorDatabaseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  authorId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  wpAuthor?: Resolver<Maybe<ResolversTypes['BlogNodeWithAuthorToUserConnectionEdge']>, ParentType, ContextType>;
}>;

export type BlogNodeWithAuthorToUserConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogNodeWithAuthorToUserConnectionEdge'] = ResolversParentTypes['BlogNodeWithAuthorToUserConnectionEdge']> = ResolversObject<{
  node?: Resolver<Maybe<ResolversTypes['BlogUser']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogNodeWithCommentsResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogNodeWithComments'] = ResolversParentTypes['BlogNodeWithComments']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogMediaItem' | 'BlogPage' | 'BlogPost', ParentType, ContextType>;
  commentCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  commentStatus?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;

export type BlogNodeWithContentEditorResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogNodeWithContentEditor'] = ResolversParentTypes['BlogNodeWithContentEditor']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogPage' | 'BlogPost', ParentType, ContextType>;
  content?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<BlogNodeWithContentEditorContentArgs>>;
}>;

export type BlogNodeWithExcerptResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogNodeWithExcerpt'] = ResolversParentTypes['BlogNodeWithExcerpt']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogPost', ParentType, ContextType>;
  excerpt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<BlogNodeWithExcerptExcerptArgs>>;
}>;

export type BlogNodeWithFeaturedImageResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogNodeWithFeaturedImage'] = ResolversParentTypes['BlogNodeWithFeaturedImage']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogPage' | 'BlogPost', ParentType, ContextType>;
  contentType?: Resolver<Maybe<ResolversTypes['BlogContentNodeToContentTypeConnectionEdge']>, ParentType, ContextType>;
  contentTypeName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  databaseId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dateGmt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  desiredSlug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  editingLockedBy?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEditLockConnectionEdge']>, ParentType, ContextType>;
  enclosure?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  enqueuedScripts?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEnqueuedScriptConnection']>, ParentType, ContextType, Partial<BlogNodeWithFeaturedImageEnqueuedScriptsArgs>>;
  enqueuedStylesheets?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEnqueuedStylesheetConnection']>, ParentType, ContextType, Partial<BlogNodeWithFeaturedImageEnqueuedStylesheetsArgs>>;
  featuredImage?: Resolver<Maybe<ResolversTypes['BlogNodeWithFeaturedImageToMediaItemConnectionEdge']>, ParentType, ContextType>;
  featuredImageDatabaseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  featuredImageId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  guid?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isContentNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isPreview?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isTermNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  lastEditedBy?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEditLastConnectionEdge']>, ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  modified?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  modifiedGmt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  previewRevisionDatabaseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  previewRevisionId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['BlogContentTemplate']>, ParentType, ContextType>;
  uri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;

export type BlogNodeWithFeaturedImageToMediaItemConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogNodeWithFeaturedImageToMediaItemConnectionEdge'] = ResolversParentTypes['BlogNodeWithFeaturedImageToMediaItemConnectionEdge']> = ResolversObject<{
  node?: Resolver<Maybe<ResolversTypes['BlogMediaItem']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogNodeWithPageAttributesResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogNodeWithPageAttributes'] = ResolversParentTypes['BlogNodeWithPageAttributes']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogPage', ParentType, ContextType>;
  menuOrder?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
}>;

export type BlogNodeWithRevisionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogNodeWithRevisions'] = ResolversParentTypes['BlogNodeWithRevisions']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogPage' | 'BlogPost', ParentType, ContextType>;
  isRevision?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  revisionOf?: Resolver<Maybe<ResolversTypes['BlogNodeWithRevisionsToContentNodeConnectionEdge']>, ParentType, ContextType>;
}>;

export type BlogNodeWithRevisionsToContentNodeConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogNodeWithRevisionsToContentNodeConnectionEdge'] = ResolversParentTypes['BlogNodeWithRevisionsToContentNodeConnectionEdge']> = ResolversObject<{
  node?: Resolver<Maybe<ResolversTypes['BlogContentNode']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogNodeWithTemplateResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogNodeWithTemplate'] = ResolversParentTypes['BlogNodeWithTemplate']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogMediaItem' | 'BlogPage' | 'BlogPost', ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['BlogContentTemplate']>, ParentType, ContextType>;
}>;

export type BlogNodeWithTitleResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogNodeWithTitle'] = ResolversParentTypes['BlogNodeWithTitle']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogMediaItem' | 'BlogPage' | 'BlogPost', ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<BlogNodeWithTitleTitleArgs>>;
}>;

export type BlogNodeWithTrackbacksResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogNodeWithTrackbacks'] = ResolversParentTypes['BlogNodeWithTrackbacks']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogPost', ParentType, ContextType>;
  pingStatus?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pinged?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  toPing?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
}>;

export type BlogPageResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPage'] = ResolversParentTypes['BlogPage']> = ResolversObject<{
  ancestors?: Resolver<Maybe<ResolversTypes['BlogHierarchicalContentNodeToContentNodeAncestorsConnection']>, ParentType, ContextType, Partial<BlogPageAncestorsArgs>>;
  authorDatabaseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  authorId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  children?: Resolver<Maybe<ResolversTypes['BlogHierarchicalContentNodeToContentNodeChildrenConnection']>, ParentType, ContextType, Partial<BlogPageChildrenArgs>>;
  commentCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  commentStatus?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  comments?: Resolver<Maybe<ResolversTypes['BlogPageToCommentConnection']>, ParentType, ContextType, Partial<BlogPageCommentsArgs>>;
  content?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<BlogPageContentArgs>>;
  contentType?: Resolver<Maybe<ResolversTypes['BlogContentNodeToContentTypeConnectionEdge']>, ParentType, ContextType>;
  contentTypeName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  databaseId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dateGmt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  desiredSlug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  editingLockedBy?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEditLockConnectionEdge']>, ParentType, ContextType>;
  enclosure?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  enqueuedScripts?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEnqueuedScriptConnection']>, ParentType, ContextType, Partial<BlogPageEnqueuedScriptsArgs>>;
  enqueuedStylesheets?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEnqueuedStylesheetConnection']>, ParentType, ContextType, Partial<BlogPageEnqueuedStylesheetsArgs>>;
  featuredImage?: Resolver<Maybe<ResolversTypes['BlogNodeWithFeaturedImageToMediaItemConnectionEdge']>, ParentType, ContextType>;
  featuredImageDatabaseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  featuredImageId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  guid?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isContentNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isFrontPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isPostsPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isPreview?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isPrivacyPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isRevision?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isTermNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  lastEditedBy?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEditLastConnectionEdge']>, ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  menuOrder?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  modified?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  modifiedGmt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pageId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  parent?: Resolver<Maybe<ResolversTypes['BlogHierarchicalContentNodeToParentContentNodeConnectionEdge']>, ParentType, ContextType>;
  parentDatabaseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  parentId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  preview?: Resolver<Maybe<ResolversTypes['BlogPageToPreviewConnectionEdge']>, ParentType, ContextType>;
  previewRevisionDatabaseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  previewRevisionId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  revisionOf?: Resolver<Maybe<ResolversTypes['BlogNodeWithRevisionsToContentNodeConnectionEdge']>, ParentType, ContextType>;
  revisions?: Resolver<Maybe<ResolversTypes['BlogPageToRevisionConnection']>, ParentType, ContextType, Partial<BlogPageRevisionsArgs>>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['BlogContentTemplate']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<BlogPageTitleArgs>>;
  uri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  wpAuthor?: Resolver<Maybe<ResolversTypes['BlogNodeWithAuthorToUserConnectionEdge']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPageToCommentConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPageToCommentConnection'] = ResolversParentTypes['BlogPageToCommentConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPageToCommentConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogComment']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPageToCommentConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPageToCommentConnectionEdge'] = ResolversParentTypes['BlogPageToCommentConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogComment']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPageToPreviewConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPageToPreviewConnectionEdge'] = ResolversParentTypes['BlogPageToPreviewConnectionEdge']> = ResolversObject<{
  node?: Resolver<Maybe<ResolversTypes['BlogPage']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPageToRevisionConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPageToRevisionConnection'] = ResolversParentTypes['BlogPageToRevisionConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPageToRevisionConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPage']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPageToRevisionConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPageToRevisionConnectionEdge'] = ResolversParentTypes['BlogPageToRevisionConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogPage']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPluginResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPlugin'] = ResolversParentTypes['BlogPlugin']> = ResolversObject<{
  author?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  authorUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pluginUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  version?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPost'] = ResolversParentTypes['BlogPost']> = ResolversObject<{
  author?: Resolver<Maybe<ResolversTypes['AccountUser']>, ParentType, ContextType>;
  authorDatabaseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  authorId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  authorOverride?: Resolver<Maybe<ResolversTypes['BlogPost_Authoroverride']>, ParentType, ContextType>;
  categories?: Resolver<Maybe<ResolversTypes['BlogPostToCategoryConnection']>, ParentType, ContextType, Partial<BlogPostCategoriesArgs>>;
  commentCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  commentStatus?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  comments?: Resolver<Maybe<ResolversTypes['BlogPostToCommentConnection']>, ParentType, ContextType, Partial<BlogPostCommentsArgs>>;
  content?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<BlogPostContentArgs>>;
  contentType?: Resolver<Maybe<ResolversTypes['BlogContentNodeToContentTypeConnectionEdge']>, ParentType, ContextType>;
  contentTypeName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  databaseId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dateGmt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  desiredSlug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  editingLockedBy?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEditLockConnectionEdge']>, ParentType, ContextType>;
  enclosure?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  enqueuedScripts?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEnqueuedScriptConnection']>, ParentType, ContextType, Partial<BlogPostEnqueuedScriptsArgs>>;
  enqueuedStylesheets?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEnqueuedStylesheetConnection']>, ParentType, ContextType, Partial<BlogPostEnqueuedStylesheetsArgs>>;
  excerpt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<BlogPostExcerptArgs>>;
  featuredImage?: Resolver<Maybe<ResolversTypes['BlogNodeWithFeaturedImageToMediaItemConnectionEdge']>, ParentType, ContextType>;
  featuredImageDatabaseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  featuredImageId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  guid?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isContentNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isPreview?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isRevision?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isSticky?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isTermNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  lastEditedBy?: Resolver<Maybe<ResolversTypes['BlogContentNodeToEditLastConnectionEdge']>, ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  marketing?: Resolver<Maybe<ResolversTypes['BlogPost_Marketing']>, ParentType, ContextType>;
  modified?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  modifiedGmt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pingStatus?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pinged?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  postFormats?: Resolver<Maybe<ResolversTypes['BlogPostToPostFormatConnection']>, ParentType, ContextType, Partial<BlogPostPostFormatsArgs>>;
  postId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  preview?: Resolver<Maybe<ResolversTypes['BlogPostToPreviewConnectionEdge']>, ParentType, ContextType>;
  previewRevisionDatabaseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  previewRevisionId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  release?: Resolver<Maybe<ResolversTypes['BlogPost_Release']>, ParentType, ContextType>;
  revisionOf?: Resolver<Maybe<ResolversTypes['BlogNodeWithRevisionsToContentNodeConnectionEdge']>, ParentType, ContextType>;
  revisions?: Resolver<Maybe<ResolversTypes['BlogPostToRevisionConnection']>, ParentType, ContextType, Partial<BlogPostRevisionsArgs>>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<ResolversTypes['BlogPostToTagConnection']>, ParentType, ContextType, Partial<BlogPostTagsArgs>>;
  template?: Resolver<Maybe<ResolversTypes['BlogContentTemplate']>, ParentType, ContextType>;
  terms?: Resolver<Maybe<ResolversTypes['BlogPostToTermNodeConnection']>, ParentType, ContextType, Partial<BlogPostTermsArgs>>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<BlogPostTitleArgs>>;
  toPing?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  uri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  wpAuthor?: Resolver<Maybe<ResolversTypes['BlogNodeWithAuthorToUserConnectionEdge']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostFormatResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostFormat'] = ResolversParentTypes['BlogPostFormat']> = ResolversObject<{
  contentNodes?: Resolver<Maybe<ResolversTypes['BlogPostFormatToContentNodeConnection']>, ParentType, ContextType, Partial<BlogPostFormatContentNodesArgs>>;
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  databaseId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  enqueuedScripts?: Resolver<Maybe<ResolversTypes['BlogTermNodeToEnqueuedScriptConnection']>, ParentType, ContextType, Partial<BlogPostFormatEnqueuedScriptsArgs>>;
  enqueuedStylesheets?: Resolver<Maybe<ResolversTypes['BlogTermNodeToEnqueuedStylesheetConnection']>, ParentType, ContextType, Partial<BlogPostFormatEnqueuedStylesheetsArgs>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isContentNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isTermNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postFormatId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  posts?: Resolver<Maybe<ResolversTypes['BlogPostFormatToPostConnection']>, ParentType, ContextType, Partial<BlogPostFormatPostsArgs>>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  taxonomy?: Resolver<Maybe<ResolversTypes['BlogPostFormatToTaxonomyConnectionEdge']>, ParentType, ContextType>;
  taxonomyName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  termGroupId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  termTaxonomyId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  uri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostFormatToContentNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostFormatToContentNodeConnection'] = ResolversParentTypes['BlogPostFormatToContentNodeConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPostFormatToContentNodeConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogContentNode']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostFormatToContentNodeConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostFormatToContentNodeConnectionEdge'] = ResolversParentTypes['BlogPostFormatToContentNodeConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogContentNode']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostFormatToPostConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostFormatToPostConnection'] = ResolversParentTypes['BlogPostFormatToPostConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPostFormatToPostConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPost']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostFormatToPostConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostFormatToPostConnectionEdge'] = ResolversParentTypes['BlogPostFormatToPostConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostFormatToTaxonomyConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostFormatToTaxonomyConnectionEdge'] = ResolversParentTypes['BlogPostFormatToTaxonomyConnectionEdge']> = ResolversObject<{
  node?: Resolver<Maybe<ResolversTypes['BlogTaxonomy']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostToCategoryConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostToCategoryConnection'] = ResolversParentTypes['BlogPostToCategoryConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPostToCategoryConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogCategory']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostToCategoryConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostToCategoryConnectionEdge'] = ResolversParentTypes['BlogPostToCategoryConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogCategory']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostToCommentConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostToCommentConnection'] = ResolversParentTypes['BlogPostToCommentConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPostToCommentConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogComment']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostToCommentConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostToCommentConnectionEdge'] = ResolversParentTypes['BlogPostToCommentConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogComment']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostToPostFormatConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostToPostFormatConnection'] = ResolversParentTypes['BlogPostToPostFormatConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPostToPostFormatConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPostFormat']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostToPostFormatConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostToPostFormatConnectionEdge'] = ResolversParentTypes['BlogPostToPostFormatConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogPostFormat']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostToPreviewConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostToPreviewConnectionEdge'] = ResolversParentTypes['BlogPostToPreviewConnectionEdge']> = ResolversObject<{
  node?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostToRevisionConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostToRevisionConnection'] = ResolversParentTypes['BlogPostToRevisionConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPostToRevisionConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPost']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostToRevisionConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostToRevisionConnectionEdge'] = ResolversParentTypes['BlogPostToRevisionConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostToTagConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostToTagConnection'] = ResolversParentTypes['BlogPostToTagConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPostToTagConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogTag']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostToTagConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostToTagConnectionEdge'] = ResolversParentTypes['BlogPostToTagConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogTag']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostToTermNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostToTermNodeConnection'] = ResolversParentTypes['BlogPostToTermNodeConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPostToTermNodeConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogTermNode']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostToTermNodeConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostToTermNodeConnectionEdge'] = ResolversParentTypes['BlogPostToTermNodeConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogTermNode']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPostTypeLabelDetailsResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPostTypeLabelDetails'] = ResolversParentTypes['BlogPostTypeLabelDetails']> = ResolversObject<{
  addNew?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addNewItem?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  allItems?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  archives?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  attributes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  editItem?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  featuredImage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  filterItemsList?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  insertIntoItem?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  itemsList?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  itemsListNavigation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  menuName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  newItem?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  notFound?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  notFoundInTrash?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  parentItemColon?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  removeFeaturedImage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  searchItems?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  setFeaturedImage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  singularName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uploadedToThisItem?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  useFeaturedImage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  viewItem?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  viewItems?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPost_AuthoroverrideResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPost_Authoroverride'] = ResolversParentTypes['BlogPost_Authoroverride']> = ResolversObject<{
  fieldGroupName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPost_MarketingResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPost_Marketing'] = ResolversParentTypes['BlogPost_Marketing']> = ResolversObject<{
  audience?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fieldGroupName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogPost_ReleaseResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogPost_Release'] = ResolversParentTypes['BlogPost_Release']> = ResolversObject<{
  contact?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fieldGroupName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  location?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  quote?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogReadingSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogReadingSettings'] = ResolversParentTypes['BlogReadingSettings']> = ResolversObject<{
  postsPerPage?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRegisterUserPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRegisterUserPayload'] = ResolversParentTypes['BlogRegisterUserPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['BlogUser']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogResetUserPasswordPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogResetUserPasswordPayload'] = ResolversParentTypes['BlogResetUserPasswordPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['BlogUser']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRestoreCommentPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRestoreCommentPayload'] = ResolversParentTypes['BlogRestoreCommentPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  comment?: Resolver<Maybe<ResolversTypes['BlogComment']>, ParentType, ContextType>;
  restoredId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootMutation'] = ResolversParentTypes['BlogRootMutation']> = ResolversObject<{
  createComment?: Resolver<Maybe<ResolversTypes['BlogCreateCommentPayload']>, ParentType, ContextType, RequireFields<BlogRootMutationCreateCommentArgs, 'input'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQuery'] = ResolversParentTypes['BlogRootQuery']> = ResolversObject<{
  post?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType, RequireFields<BlogRootQueryPostArgs, 'id'>>;
  posts?: Resolver<Maybe<ResolversTypes['BlogRootQueryToPostConnection']>, ParentType, ContextType, Partial<BlogRootQueryPostsArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToCategoryConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToCategoryConnection'] = ResolversParentTypes['BlogRootQueryToCategoryConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToCategoryConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogCategory']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToCategoryConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToCategoryConnectionEdge'] = ResolversParentTypes['BlogRootQueryToCategoryConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogCategory']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToCommentConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToCommentConnection'] = ResolversParentTypes['BlogRootQueryToCommentConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToCommentConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogComment']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToCommentConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToCommentConnectionEdge'] = ResolversParentTypes['BlogRootQueryToCommentConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogComment']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToContentNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToContentNodeConnection'] = ResolversParentTypes['BlogRootQueryToContentNodeConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToContentNodeConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogContentNode']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToContentNodeConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToContentNodeConnectionEdge'] = ResolversParentTypes['BlogRootQueryToContentNodeConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogContentNode']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToContentRevisionUnionConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToContentRevisionUnionConnection'] = ResolversParentTypes['BlogRootQueryToContentRevisionUnionConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToContentRevisionUnionConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogContentRevisionUnion']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToContentRevisionUnionConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToContentRevisionUnionConnectionEdge'] = ResolversParentTypes['BlogRootQueryToContentRevisionUnionConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogContentRevisionUnion']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToContentTypeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToContentTypeConnection'] = ResolversParentTypes['BlogRootQueryToContentTypeConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToContentTypeConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogContentType']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToContentTypeConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToContentTypeConnectionEdge'] = ResolversParentTypes['BlogRootQueryToContentTypeConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogContentType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToEnqueuedScriptConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToEnqueuedScriptConnection'] = ResolversParentTypes['BlogRootQueryToEnqueuedScriptConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToEnqueuedScriptConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogEnqueuedScript']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToEnqueuedScriptConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToEnqueuedScriptConnectionEdge'] = ResolversParentTypes['BlogRootQueryToEnqueuedScriptConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogEnqueuedScript']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToEnqueuedStylesheetConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToEnqueuedStylesheetConnection'] = ResolversParentTypes['BlogRootQueryToEnqueuedStylesheetConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToEnqueuedStylesheetConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogEnqueuedStylesheet']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToEnqueuedStylesheetConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToEnqueuedStylesheetConnectionEdge'] = ResolversParentTypes['BlogRootQueryToEnqueuedStylesheetConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogEnqueuedStylesheet']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToMediaItemConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToMediaItemConnection'] = ResolversParentTypes['BlogRootQueryToMediaItemConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToMediaItemConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogMediaItem']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToMediaItemConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToMediaItemConnectionEdge'] = ResolversParentTypes['BlogRootQueryToMediaItemConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogMediaItem']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToMenuConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToMenuConnection'] = ResolversParentTypes['BlogRootQueryToMenuConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToMenuConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogMenu']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToMenuConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToMenuConnectionEdge'] = ResolversParentTypes['BlogRootQueryToMenuConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogMenu']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToMenuItemConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToMenuItemConnection'] = ResolversParentTypes['BlogRootQueryToMenuItemConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToMenuItemConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogMenuItem']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToMenuItemConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToMenuItemConnectionEdge'] = ResolversParentTypes['BlogRootQueryToMenuItemConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogMenuItem']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToPageConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToPageConnection'] = ResolversParentTypes['BlogRootQueryToPageConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToPageConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPage']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToPageConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToPageConnectionEdge'] = ResolversParentTypes['BlogRootQueryToPageConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogPage']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToPluginConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToPluginConnection'] = ResolversParentTypes['BlogRootQueryToPluginConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToPluginConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPlugin']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToPluginConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToPluginConnectionEdge'] = ResolversParentTypes['BlogRootQueryToPluginConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogPlugin']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToPostConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToPostConnection'] = ResolversParentTypes['BlogRootQueryToPostConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToPostConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPost']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToPostConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToPostConnectionEdge'] = ResolversParentTypes['BlogRootQueryToPostConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToPostFormatConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToPostFormatConnection'] = ResolversParentTypes['BlogRootQueryToPostFormatConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToPostFormatConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPostFormat']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToPostFormatConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToPostFormatConnectionEdge'] = ResolversParentTypes['BlogRootQueryToPostFormatConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogPostFormat']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToTagConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToTagConnection'] = ResolversParentTypes['BlogRootQueryToTagConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToTagConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogTag']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToTagConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToTagConnectionEdge'] = ResolversParentTypes['BlogRootQueryToTagConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogTag']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToTaxonomyConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToTaxonomyConnection'] = ResolversParentTypes['BlogRootQueryToTaxonomyConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToTaxonomyConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogTaxonomy']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToTaxonomyConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToTaxonomyConnectionEdge'] = ResolversParentTypes['BlogRootQueryToTaxonomyConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogTaxonomy']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToTermNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToTermNodeConnection'] = ResolversParentTypes['BlogRootQueryToTermNodeConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToTermNodeConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogTermNode']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToTermNodeConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToTermNodeConnectionEdge'] = ResolversParentTypes['BlogRootQueryToTermNodeConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogTermNode']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToThemeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToThemeConnection'] = ResolversParentTypes['BlogRootQueryToThemeConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToThemeConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogTheme']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToThemeConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToThemeConnectionEdge'] = ResolversParentTypes['BlogRootQueryToThemeConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogTheme']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToUserConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToUserConnection'] = ResolversParentTypes['BlogRootQueryToUserConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToUserConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogUser']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToUserConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToUserConnectionEdge'] = ResolversParentTypes['BlogRootQueryToUserConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogUser']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToUserRoleConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToUserRoleConnection'] = ResolversParentTypes['BlogRootQueryToUserRoleConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogRootQueryToUserRoleConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogUserRole']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogRootQueryToUserRoleConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogRootQueryToUserRoleConnectionEdge'] = ResolversParentTypes['BlogRootQueryToUserRoleConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogUserRole']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogSendPasswordResetEmailPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogSendPasswordResetEmailPayload'] = ResolversParentTypes['BlogSendPasswordResetEmailPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['BlogUser']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogSettings'] = ResolversParentTypes['BlogSettings']> = ResolversObject<{
  discussionSettingsDefaultCommentStatus?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  discussionSettingsDefaultPingStatus?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  generalSettingsDateFormat?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  generalSettingsDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  generalSettingsEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  generalSettingsLanguage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  generalSettingsStartOfWeek?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  generalSettingsTimeFormat?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  generalSettingsTimezone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  generalSettingsTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  generalSettingsUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  readingSettingsPostsPerPage?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  writingSettingsDefaultCategory?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  writingSettingsDefaultPostFormat?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  writingSettingsUseSmilies?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogTagResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogTag'] = ResolversParentTypes['BlogTag']> = ResolversObject<{
  contentNodes?: Resolver<Maybe<ResolversTypes['BlogTagToContentNodeConnection']>, ParentType, ContextType, Partial<BlogTagContentNodesArgs>>;
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  databaseId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  enqueuedScripts?: Resolver<Maybe<ResolversTypes['BlogTermNodeToEnqueuedScriptConnection']>, ParentType, ContextType, Partial<BlogTagEnqueuedScriptsArgs>>;
  enqueuedStylesheets?: Resolver<Maybe<ResolversTypes['BlogTermNodeToEnqueuedStylesheetConnection']>, ParentType, ContextType, Partial<BlogTagEnqueuedStylesheetsArgs>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isContentNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isTermNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  posts?: Resolver<Maybe<ResolversTypes['BlogTagToPostConnection']>, ParentType, ContextType, Partial<BlogTagPostsArgs>>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tagId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  taxonomy?: Resolver<Maybe<ResolversTypes['BlogTagToTaxonomyConnectionEdge']>, ParentType, ContextType>;
  taxonomyName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  termGroupId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  termTaxonomyId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  uri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogTagToContentNodeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogTagToContentNodeConnection'] = ResolversParentTypes['BlogTagToContentNodeConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogTagToContentNodeConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogContentNode']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogTagToContentNodeConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogTagToContentNodeConnectionEdge'] = ResolversParentTypes['BlogTagToContentNodeConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogContentNode']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogTagToPostConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogTagToPostConnection'] = ResolversParentTypes['BlogTagToPostConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogTagToPostConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPost']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogTagToPostConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogTagToPostConnectionEdge'] = ResolversParentTypes['BlogTagToPostConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogTagToTaxonomyConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogTagToTaxonomyConnectionEdge'] = ResolversParentTypes['BlogTagToTaxonomyConnectionEdge']> = ResolversObject<{
  node?: Resolver<Maybe<ResolversTypes['BlogTaxonomy']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogTaxonomyResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogTaxonomy'] = ResolversParentTypes['BlogTaxonomy']> = ResolversObject<{
  connectedContentTypes?: Resolver<Maybe<ResolversTypes['BlogTaxonomyToContentTypeConnection']>, ParentType, ContextType, Partial<BlogTaxonomyConnectedContentTypesArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  graphqlPluralName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  graphqlSingleName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hierarchical?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  public?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  restBase?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  restControllerClass?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  showCloud?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  showInAdminColumn?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  showInGraphql?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  showInMenu?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  showInNavMenus?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  showInQuickEdit?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  showInRest?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  showUi?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogTaxonomyToContentTypeConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogTaxonomyToContentTypeConnection'] = ResolversParentTypes['BlogTaxonomyToContentTypeConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogTaxonomyToContentTypeConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogContentType']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogTaxonomyToContentTypeConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogTaxonomyToContentTypeConnectionEdge'] = ResolversParentTypes['BlogTaxonomyToContentTypeConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogContentType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogTermNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogTermNode'] = ResolversParentTypes['BlogTermNode']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogCategory' | 'BlogPostFormat' | 'BlogTag', ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  databaseId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  enqueuedScripts?: Resolver<Maybe<ResolversTypes['BlogTermNodeToEnqueuedScriptConnection']>, ParentType, ContextType, Partial<BlogTermNodeEnqueuedScriptsArgs>>;
  enqueuedStylesheets?: Resolver<Maybe<ResolversTypes['BlogTermNodeToEnqueuedStylesheetConnection']>, ParentType, ContextType, Partial<BlogTermNodeEnqueuedStylesheetsArgs>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isContentNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isTermNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  taxonomyName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  termGroupId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  termTaxonomyId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  uri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;

export type BlogTermNodeToEnqueuedScriptConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogTermNodeToEnqueuedScriptConnection'] = ResolversParentTypes['BlogTermNodeToEnqueuedScriptConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogTermNodeToEnqueuedScriptConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogEnqueuedScript']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogTermNodeToEnqueuedScriptConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogTermNodeToEnqueuedScriptConnectionEdge'] = ResolversParentTypes['BlogTermNodeToEnqueuedScriptConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogEnqueuedScript']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogTermNodeToEnqueuedStylesheetConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogTermNodeToEnqueuedStylesheetConnection'] = ResolversParentTypes['BlogTermNodeToEnqueuedStylesheetConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogTermNodeToEnqueuedStylesheetConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogEnqueuedStylesheet']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogTermNodeToEnqueuedStylesheetConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogTermNodeToEnqueuedStylesheetConnectionEdge'] = ResolversParentTypes['BlogTermNodeToEnqueuedStylesheetConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogEnqueuedStylesheet']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogThemeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogTheme'] = ResolversParentTypes['BlogTheme']> = ResolversObject<{
  author?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  authorUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  screenshot?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  themeUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  version?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUniformResourceIdentifiableResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUniformResourceIdentifiable'] = ResolversParentTypes['BlogUniformResourceIdentifiable']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BlogCategory' | 'BlogContentType' | 'BlogMediaItem' | 'BlogPage' | 'BlogPost' | 'BlogPostFormat' | 'BlogTag' | 'BlogUser', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isContentNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isTermNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  uri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;

export type BlogUpdateCategoryPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUpdateCategoryPayload'] = ResolversParentTypes['BlogUpdateCategoryPayload']> = ResolversObject<{
  category?: Resolver<Maybe<ResolversTypes['BlogCategory']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUpdateCommentPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUpdateCommentPayload'] = ResolversParentTypes['BlogUpdateCommentPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  comment?: Resolver<Maybe<ResolversTypes['BlogComment']>, ParentType, ContextType>;
  success?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUpdateMediaItemPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUpdateMediaItemPayload'] = ResolversParentTypes['BlogUpdateMediaItemPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mediaItem?: Resolver<Maybe<ResolversTypes['BlogMediaItem']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUpdatePagePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUpdatePagePayload'] = ResolversParentTypes['BlogUpdatePagePayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  page?: Resolver<Maybe<ResolversTypes['BlogPage']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUpdatePostFormatPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUpdatePostFormatPayload'] = ResolversParentTypes['BlogUpdatePostFormatPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postFormat?: Resolver<Maybe<ResolversTypes['BlogPostFormat']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUpdatePostPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUpdatePostPayload'] = ResolversParentTypes['BlogUpdatePostPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  post?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUpdateSettingsPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUpdateSettingsPayload'] = ResolversParentTypes['BlogUpdateSettingsPayload']> = ResolversObject<{
  allSettings?: Resolver<Maybe<ResolversTypes['BlogSettings']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  discussionSettings?: Resolver<Maybe<ResolversTypes['BlogDiscussionSettings']>, ParentType, ContextType>;
  generalSettings?: Resolver<Maybe<ResolversTypes['BlogGeneralSettings']>, ParentType, ContextType>;
  readingSettings?: Resolver<Maybe<ResolversTypes['BlogReadingSettings']>, ParentType, ContextType>;
  writingSettings?: Resolver<Maybe<ResolversTypes['BlogWritingSettings']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUpdateTagPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUpdateTagPayload'] = ResolversParentTypes['BlogUpdateTagPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tag?: Resolver<Maybe<ResolversTypes['BlogTag']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUpdateUserPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUpdateUserPayload'] = ResolversParentTypes['BlogUpdateUserPayload']> = ResolversObject<{
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['BlogUser']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUserResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUser'] = ResolversParentTypes['BlogUser']> = ResolversObject<{
  avatar?: Resolver<Maybe<ResolversTypes['BlogAvatar']>, ParentType, ContextType, RequireFields<BlogUserAvatarArgs, 'size'>>;
  capKey?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  capabilities?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  comments?: Resolver<Maybe<ResolversTypes['BlogUserToCommentConnection']>, ParentType, ContextType, Partial<BlogUserCommentsArgs>>;
  databaseId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  enqueuedScripts?: Resolver<Maybe<ResolversTypes['BlogUserToEnqueuedScriptConnection']>, ParentType, ContextType, Partial<BlogUserEnqueuedScriptsArgs>>;
  enqueuedStylesheets?: Resolver<Maybe<ResolversTypes['BlogUserToEnqueuedStylesheetConnection']>, ParentType, ContextType, Partial<BlogUserEnqueuedStylesheetsArgs>>;
  extraCapabilities?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isContentNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isTermNode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  locale?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mediaItems?: Resolver<Maybe<ResolversTypes['BlogUserToMediaItemConnection']>, ParentType, ContextType, Partial<BlogUserMediaItemsArgs>>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nicename?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nickname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pages?: Resolver<Maybe<ResolversTypes['BlogUserToPageConnection']>, ParentType, ContextType, Partial<BlogUserPagesArgs>>;
  posts?: Resolver<Maybe<ResolversTypes['BlogUserToPostConnection']>, ParentType, ContextType, Partial<BlogUserPostsArgs>>;
  registeredDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  revisions?: Resolver<Maybe<ResolversTypes['BlogUserToContentRevisionUnionConnection']>, ParentType, ContextType, Partial<BlogUserRevisionsArgs>>;
  roles?: Resolver<Maybe<ResolversTypes['BlogUserToUserRoleConnection']>, ParentType, ContextType, Partial<BlogUserRolesArgs>>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  userId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUserRoleResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUserRole'] = ResolversParentTypes['BlogUserRole']> = ResolversObject<{
  capabilities?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  displayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isRestricted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUserToCommentConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUserToCommentConnection'] = ResolversParentTypes['BlogUserToCommentConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogUserToCommentConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogComment']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUserToCommentConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUserToCommentConnectionEdge'] = ResolversParentTypes['BlogUserToCommentConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogComment']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUserToContentRevisionUnionConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUserToContentRevisionUnionConnection'] = ResolversParentTypes['BlogUserToContentRevisionUnionConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogUserToContentRevisionUnionConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogContentRevisionUnion']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUserToContentRevisionUnionConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUserToContentRevisionUnionConnectionEdge'] = ResolversParentTypes['BlogUserToContentRevisionUnionConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogContentRevisionUnion']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUserToEnqueuedScriptConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUserToEnqueuedScriptConnection'] = ResolversParentTypes['BlogUserToEnqueuedScriptConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogUserToEnqueuedScriptConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogEnqueuedScript']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUserToEnqueuedScriptConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUserToEnqueuedScriptConnectionEdge'] = ResolversParentTypes['BlogUserToEnqueuedScriptConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogEnqueuedScript']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUserToEnqueuedStylesheetConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUserToEnqueuedStylesheetConnection'] = ResolversParentTypes['BlogUserToEnqueuedStylesheetConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogUserToEnqueuedStylesheetConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogEnqueuedStylesheet']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUserToEnqueuedStylesheetConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUserToEnqueuedStylesheetConnectionEdge'] = ResolversParentTypes['BlogUserToEnqueuedStylesheetConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogEnqueuedStylesheet']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUserToMediaItemConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUserToMediaItemConnection'] = ResolversParentTypes['BlogUserToMediaItemConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogUserToMediaItemConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogMediaItem']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUserToMediaItemConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUserToMediaItemConnectionEdge'] = ResolversParentTypes['BlogUserToMediaItemConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogMediaItem']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUserToPageConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUserToPageConnection'] = ResolversParentTypes['BlogUserToPageConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogUserToPageConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPage']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUserToPageConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUserToPageConnectionEdge'] = ResolversParentTypes['BlogUserToPageConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogPage']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUserToPostConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUserToPostConnection'] = ResolversParentTypes['BlogUserToPostConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogUserToPostConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogPost']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUserToPostConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUserToPostConnectionEdge'] = ResolversParentTypes['BlogUserToPostConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogPost']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUserToUserRoleConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUserToUserRoleConnection'] = ResolversParentTypes['BlogUserToUserRoleConnection']> = ResolversObject<{
  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogUserToUserRoleConnectionEdge']>>>, ParentType, ContextType>;
  nodes?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlogUserRole']>>>, ParentType, ContextType>;
  pageInfo?: Resolver<Maybe<ResolversTypes['BlogWPPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogUserToUserRoleConnectionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogUserToUserRoleConnectionEdge'] = ResolversParentTypes['BlogUserToUserRoleConnectionEdge']> = ResolversObject<{
  cursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['BlogUserRole']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogWpPageInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogWPPageInfo'] = ResolversParentTypes['BlogWPPageInfo']> = ResolversObject<{
  endCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hasNextPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  hasPreviousPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  startCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BlogWritingSettingsResolvers<ContextType = any, ParentType extends ResolversParentTypes['BlogWritingSettings'] = ResolversParentTypes['BlogWritingSettings']> = ResolversObject<{
  defaultCategory?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  defaultPostFormat?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  useSmilies?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CalendarCalendarEventResolvers<ContextType = any, ParentType extends ResolversParentTypes['CalendarCalendarEvent'] = ResolversParentTypes['CalendarCalendarEvent']> = ResolversObject<{
  calendarId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  calendarName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  end?: Resolver<ResolversTypes['CalendarDateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  location?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['CalendarJSONObject'], ParentType, ContextType>;
  start?: Resolver<ResolversTypes['CalendarDateTime'], ParentType, ContextType>;
  subscriberCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface CalendarDateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['CalendarDateTime'], any> {
  name: 'CalendarDateTime';
}

export interface CalendarJsonObjectScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['CalendarJSONObject'], any> {
  name: 'CalendarJSONObject';
}

export type CalendarMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['CalendarMutation'] = ResolversParentTypes['CalendarMutation']> = ResolversObject<{
  subscribe?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<CalendarMutationSubscribeArgs, 'calendarId' | 'destination' | 'eventId'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CalendarQueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['CalendarQuery'] = ResolversParentTypes['CalendarQuery']> = ResolversObject<{
  event?: Resolver<Maybe<ResolversTypes['CalendarCalendarEvent']>, ParentType, ContextType, RequireFields<CalendarQueryEventArgs, 'format' | 'id'>>;
  events?: Resolver<Array<ResolversTypes['CalendarCalendarEvent']>, ParentType, ContextType, RequireFields<CalendarQueryEventsArgs, 'after' | 'before' | 'format' | 'order' | 'skip' | 'take'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearAffectedRowsOutputResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearAffectedRowsOutput'] = ResolversParentTypes['ClearAffectedRowsOutput']> = ResolversObject<{
  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearAggregateEmailTemplateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearAggregateEmailTemplate'] = ResolversParentTypes['ClearAggregateEmailTemplate']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearEmailTemplateCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearEmailTemplateMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearEmailTemplateMinAggregate']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearAggregateEventResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearAggregateEvent'] = ResolversParentTypes['ClearAggregateEvent']> = ResolversObject<{
  _avg?: Resolver<Maybe<ResolversTypes['ClearEventAvgAggregate']>, ParentType, ContextType>;
  _count?: Resolver<Maybe<ResolversTypes['ClearEventCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearEventMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearEventMinAggregate']>, ParentType, ContextType>;
  _sum?: Resolver<Maybe<ResolversTypes['ClearEventSumAggregate']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearAggregateEventGroupResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearAggregateEventGroup'] = ResolversParentTypes['ClearAggregateEventGroup']> = ResolversObject<{
  _avg?: Resolver<Maybe<ResolversTypes['ClearEventGroupAvgAggregate']>, ParentType, ContextType>;
  _count?: Resolver<Maybe<ResolversTypes['ClearEventGroupCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearEventGroupMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearEventGroupMinAggregate']>, ParentType, ContextType>;
  _sum?: Resolver<Maybe<ResolversTypes['ClearEventGroupSumAggregate']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearAggregateEventRestrictionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearAggregateEventRestriction'] = ResolversParentTypes['ClearAggregateEventRestriction']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearEventRestrictionCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearEventRestrictionMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearEventRestrictionMinAggregate']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearAggregateMailingListMemberResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearAggregateMailingListMember'] = ResolversParentTypes['ClearAggregateMailingListMember']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearMailingListMemberCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearMailingListMemberMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearMailingListMemberMinAggregate']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearAggregatePaymentResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearAggregatePayment'] = ResolversParentTypes['ClearAggregatePayment']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearPaymentCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearPaymentMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearPaymentMinAggregate']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearAggregatePersonResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearAggregatePerson'] = ResolversParentTypes['ClearAggregatePerson']> = ResolversObject<{
  _avg?: Resolver<Maybe<ResolversTypes['ClearPersonAvgAggregate']>, ParentType, ContextType>;
  _count?: Resolver<Maybe<ResolversTypes['ClearPersonCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearPersonMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearPersonMinAggregate']>, ParentType, ContextType>;
  _sum?: Resolver<Maybe<ResolversTypes['ClearPersonSumAggregate']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearAggregatePromoCodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearAggregatePromoCode'] = ResolversParentTypes['ClearAggregatePromoCode']> = ResolversObject<{
  _avg?: Resolver<Maybe<ResolversTypes['ClearPromoCodeAvgAggregate']>, ParentType, ContextType>;
  _count?: Resolver<Maybe<ResolversTypes['ClearPromoCodeCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearPromoCodeMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearPromoCodeMinAggregate']>, ParentType, ContextType>;
  _sum?: Resolver<Maybe<ResolversTypes['ClearPromoCodeSumAggregate']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearAggregateScheduleItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearAggregateScheduleItem'] = ResolversParentTypes['ClearAggregateScheduleItem']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearScheduleItemCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearScheduleItemMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearScheduleItemMinAggregate']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearAggregateSponsorResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearAggregateSponsor'] = ResolversParentTypes['ClearAggregateSponsor']> = ResolversObject<{
  _avg?: Resolver<Maybe<ResolversTypes['ClearSponsorAvgAggregate']>, ParentType, ContextType>;
  _count?: Resolver<Maybe<ResolversTypes['ClearSponsorCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearSponsorMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearSponsorMinAggregate']>, ParentType, ContextType>;
  _sum?: Resolver<Maybe<ResolversTypes['ClearSponsorSumAggregate']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearAggregateTicketResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearAggregateTicket'] = ResolversParentTypes['ClearAggregateTicket']> = ResolversObject<{
  _avg?: Resolver<Maybe<ResolversTypes['ClearTicketAvgAggregate']>, ParentType, ContextType>;
  _count?: Resolver<Maybe<ResolversTypes['ClearTicketCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearTicketMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearTicketMinAggregate']>, ParentType, ContextType>;
  _sum?: Resolver<Maybe<ResolversTypes['ClearTicketSumAggregate']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearAggregateVenueResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearAggregateVenue'] = ResolversParentTypes['ClearAggregateVenue']> = ResolversObject<{
  _avg?: Resolver<Maybe<ResolversTypes['ClearVenueAvgAggregate']>, ParentType, ContextType>;
  _count?: Resolver<Maybe<ResolversTypes['ClearVenueCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearVenueMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearVenueMinAggregate']>, ParentType, ContextType>;
  _sum?: Resolver<Maybe<ResolversTypes['ClearVenueSumAggregate']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearAggregateWebhookResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearAggregateWebhook'] = ResolversParentTypes['ClearAggregateWebhook']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearWebhookCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearWebhookMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearWebhookMinAggregate']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface ClearDateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['ClearDateTime'], any> {
  name: 'ClearDateTime';
}

export type ClearEmailTemplateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEmailTemplate'] = ResolversParentTypes['ClearEmailTemplate']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearEmailTemplateCount']>, ParentType, ContextType>;
  automatic?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  extraFilters?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  fromEmail?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fromName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  getMetadata?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, RequireFields<ClearEmailTemplateGetMetadataArgs, 'key'>>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  marketing?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  previewEmailBody?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  replyTo?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  sendAfterEvent?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sendInWorkHours?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sendLate?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sendParent?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sendText?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sendTo?: Resolver<ResolversTypes['ClearTicketType'], ParentType, ContextType>;
  sentTo?: Resolver<Array<ResolversTypes['ClearTicket']>, ParentType, ContextType, Partial<ClearEmailTemplateSentToArgs>>;
  subject?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  template?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  textMsg?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  when?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  whenFrom?: Resolver<ResolversTypes['ClearEmailWhenFrom'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEmailTemplateCountResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEmailTemplateCount'] = ResolversParentTypes['ClearEmailTemplateCount']> = ResolversObject<{
  sentTo?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEmailTemplateCountAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEmailTemplateCountAggregate'] = ResolversParentTypes['ClearEmailTemplateCountAggregate']> = ResolversObject<{
  _all?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  automatic?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  extraFilters?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  fromEmail?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  fromName?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  marketing?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  replyTo?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  sendAfterEvent?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  sendInWorkHours?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  sendLate?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  sendParent?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  sendText?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  sendTo?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  subject?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  template?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  textMsg?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  when?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  whenFrom?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEmailTemplateGroupByResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEmailTemplateGroupBy'] = ResolversParentTypes['ClearEmailTemplateGroupBy']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearEmailTemplateCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearEmailTemplateMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearEmailTemplateMinAggregate']>, ParentType, ContextType>;
  automatic?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  extraFilters?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  fromEmail?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fromName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  marketing?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  replyTo?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  sendAfterEvent?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sendInWorkHours?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sendLate?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sendParent?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sendText?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sendTo?: Resolver<ResolversTypes['ClearTicketType'], ParentType, ContextType>;
  subject?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  template?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  textMsg?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  when?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  whenFrom?: Resolver<ResolversTypes['ClearEmailWhenFrom'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEmailTemplateMaxAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEmailTemplateMaxAggregate'] = ResolversParentTypes['ClearEmailTemplateMaxAggregate']> = ResolversObject<{
  automatic?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  fromEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fromName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  marketing?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  replyTo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sendAfterEvent?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sendInWorkHours?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sendLate?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sendParent?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sendText?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sendTo?: Resolver<Maybe<ResolversTypes['ClearTicketType']>, ParentType, ContextType>;
  subject?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  textMsg?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  when?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  whenFrom?: Resolver<Maybe<ResolversTypes['ClearEmailWhenFrom']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEmailTemplateMinAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEmailTemplateMinAggregate'] = ResolversParentTypes['ClearEmailTemplateMinAggregate']> = ResolversObject<{
  automatic?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  fromEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fromName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  marketing?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  replyTo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sendAfterEvent?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sendInWorkHours?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sendLate?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sendParent?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sendText?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sendTo?: Resolver<Maybe<ResolversTypes['ClearTicketType']>, ParentType, ContextType>;
  subject?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  textMsg?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  when?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  whenFrom?: Resolver<Maybe<ResolversTypes['ClearEmailWhenFrom']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEvent'] = ResolversParentTypes['ClearEvent']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearEventCount']>, ParentType, ContextType>;
  activeTicketPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  adultWaiverId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  canEarlyBirdRegister?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  canRegister?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  checkPromoCode?: Resolver<ResolversTypes['ClearJSONObject'], ParentType, ContextType, RequireFields<ClearEventCheckPromoCodeArgs, 'code'>>;
  cmsEventRestrictions?: Resolver<Array<ResolversTypes['CmsEventRestriction']>, ParentType, ContextType, Partial<ClearEventCmsEventRestrictionsArgs>>;
  contentfulEventRestrictions?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  contentfulWebname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  displayDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  displayTime?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  earlyBirdCutoff?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  earlyBirdPrice?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  endDate?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  eventGroup?: Resolver<ResolversTypes['ClearEventGroup'], ParentType, ContextType>;
  eventGroupId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  eventRestrictions?: Resolver<Array<ResolversTypes['ClearEventRestriction']>, ParentType, ContextType, Partial<ClearEventEventRestrictionsArgs>>;
  getMetadata?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, RequireFields<ClearEventGetMetadataArgs, 'key'>>;
  groupPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  interestedEmails?: Resolver<Array<ResolversTypes['ClearMailingListMember']>, ParentType, ContextType, Partial<ClearEventInterestedEmailsArgs>>;
  majorityAge?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  managers?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  maxAge?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  minAge?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  minorWaiverId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  overnightMinAge?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  promoCodes?: Resolver<Array<ResolversTypes['ClearPromoCode']>, ParentType, ContextType, Partial<ClearEventPromoCodesArgs>>;
  region?: Resolver<Maybe<ResolversTypes['CmsRegion']>, ParentType, ContextType, Partial<ClearEventRegionArgs>>;
  registrationCutoff?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  registrationsOpen?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  remainingTickets?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  requiresPromoCode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  schedule?: Resolver<Array<ResolversTypes['ClearScheduleItem']>, ParentType, ContextType, Partial<ClearEventScheduleArgs>>;
  showcaseId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  soldTickets?: Resolver<ResolversTypes['Float'], ParentType, ContextType, RequireFields<ClearEventSoldTicketsArgs, 'onlyStudents'>>;
  sponsors?: Resolver<Array<ResolversTypes['ClearSponsor']>, ParentType, ContextType, Partial<ClearEventSponsorsArgs>>;
  startDate?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  team?: Resolver<ResolversTypes['ClearTeam'], ParentType, ContextType>;
  ticketPrice?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  tickets?: Resolver<Array<ResolversTypes['ClearTicket']>, ParentType, ContextType, Partial<ClearEventTicketsArgs>>;
  timezone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  venue?: Resolver<Maybe<ResolversTypes['ClearVenue']>, ParentType, ContextType>;
  venueId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  waiverBook?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  webhooks?: Resolver<Array<ResolversTypes['ClearWebhook']>, ParentType, ContextType, Partial<ClearEventWebhooksArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventAvgAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventAvgAggregate'] = ResolversParentTypes['ClearEventAvgAggregate']> = ResolversObject<{
  earlyBirdPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  groupPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  majorityAge?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  maxAge?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  minAge?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  overnightMinAge?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  ticketPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventCountResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventCount'] = ResolversParentTypes['ClearEventCount']> = ResolversObject<{
  eventRestrictions?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  interestedEmails?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  promoCodes?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  schedule?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  sponsors?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  tickets?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  webhooks?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventCountAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventCountAggregate'] = ResolversParentTypes['ClearEventCountAggregate']> = ResolversObject<{
  _all?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  adultWaiverId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  contentfulEventRestrictions?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  contentfulWebname?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  earlyBirdCutoff?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  earlyBirdPrice?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  endDate?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  eventGroupId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  groupPrice?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  majorityAge?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  managers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  maxAge?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  minAge?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  minorWaiverId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  overnightMinAge?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  registrationCutoff?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  registrationsOpen?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  requiresPromoCode?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  showcaseId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  startDate?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  ticketPrice?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timezone?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  venueId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventGroupResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventGroup'] = ResolversParentTypes['ClearEventGroup']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearEventGroupCount']>, ParentType, ContextType>;
  cmsEventGroup?: Resolver<Maybe<ResolversTypes['CmsEvent']>, ParentType, ContextType, Partial<ClearEventGroupCmsEventGroupArgs>>;
  contentfulId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  displayDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  earlyBirdCutoff?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  earlyBirdPrice?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  endDate?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  events?: Resolver<Array<ResolversTypes['ClearEvent']>, ParentType, ContextType, Partial<ClearEventGroupEventsArgs>>;
  getMetadata?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, RequireFields<ClearEventGroupGetMetadataArgs, 'key'>>;
  groupPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  promoCodes?: Resolver<Array<ResolversTypes['ClearPromoCode']>, ParentType, ContextType, Partial<ClearEventGroupPromoCodesArgs>>;
  registrationCutoff?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  schedule?: Resolver<Array<ResolversTypes['ClearScheduleItem']>, ParentType, ContextType, Partial<ClearEventGroupScheduleArgs>>;
  showcaseId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  startDate?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  ticketPrice?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  webhooks?: Resolver<Array<ResolversTypes['ClearWebhook']>, ParentType, ContextType, Partial<ClearEventGroupWebhooksArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventGroupAvgAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventGroupAvgAggregate'] = ResolversParentTypes['ClearEventGroupAvgAggregate']> = ResolversObject<{
  earlyBirdPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  groupPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  ticketPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventGroupByResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventGroupBy'] = ResolversParentTypes['ClearEventGroupBy']> = ResolversObject<{
  _avg?: Resolver<Maybe<ResolversTypes['ClearEventAvgAggregate']>, ParentType, ContextType>;
  _count?: Resolver<Maybe<ResolversTypes['ClearEventCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearEventMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearEventMinAggregate']>, ParentType, ContextType>;
  _sum?: Resolver<Maybe<ResolversTypes['ClearEventSumAggregate']>, ParentType, ContextType>;
  adultWaiverId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contentfulEventRestrictions?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  contentfulWebname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  earlyBirdCutoff?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  earlyBirdPrice?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  endDate?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  eventGroupId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  groupPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  majorityAge?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  managers?: Resolver<Maybe<Array<ResolversTypes['String']>>, ParentType, ContextType>;
  maxAge?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  minAge?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  minorWaiverId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  overnightMinAge?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  registrationCutoff?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  registrationsOpen?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  requiresPromoCode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  showcaseId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  startDate?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  ticketPrice?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  timezone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  venueId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventGroupCountResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventGroupCount'] = ResolversParentTypes['ClearEventGroupCount']> = ResolversObject<{
  events?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  promoCodes?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  schedule?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  webhooks?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventGroupCountAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventGroupCountAggregate'] = ResolversParentTypes['ClearEventGroupCountAggregate']> = ResolversObject<{
  _all?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  contentfulId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  earlyBirdCutoff?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  earlyBirdPrice?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  endDate?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  groupPrice?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  registrationCutoff?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  showcaseId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  startDate?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  ticketPrice?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventGroupGroupByResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventGroupGroupBy'] = ResolversParentTypes['ClearEventGroupGroupBy']> = ResolversObject<{
  _avg?: Resolver<Maybe<ResolversTypes['ClearEventGroupAvgAggregate']>, ParentType, ContextType>;
  _count?: Resolver<Maybe<ResolversTypes['ClearEventGroupCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearEventGroupMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearEventGroupMinAggregate']>, ParentType, ContextType>;
  _sum?: Resolver<Maybe<ResolversTypes['ClearEventGroupSumAggregate']>, ParentType, ContextType>;
  contentfulId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  earlyBirdCutoff?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  earlyBirdPrice?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  endDate?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  groupPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  registrationCutoff?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  showcaseId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  startDate?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  ticketPrice?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventGroupMaxAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventGroupMaxAggregate'] = ResolversParentTypes['ClearEventGroupMaxAggregate']> = ResolversObject<{
  contentfulId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  earlyBirdCutoff?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  earlyBirdPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  endDate?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  groupPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  registrationCutoff?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  showcaseId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  startDate?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  ticketPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventGroupMinAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventGroupMinAggregate'] = ResolversParentTypes['ClearEventGroupMinAggregate']> = ResolversObject<{
  contentfulId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  earlyBirdCutoff?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  earlyBirdPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  endDate?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  groupPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  registrationCutoff?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  showcaseId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  startDate?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  ticketPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventGroupSumAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventGroupSumAggregate'] = ResolversParentTypes['ClearEventGroupSumAggregate']> = ResolversObject<{
  earlyBirdPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  groupPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  ticketPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventMaxAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventMaxAggregate'] = ResolversParentTypes['ClearEventMaxAggregate']> = ResolversObject<{
  adultWaiverId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contentfulWebname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  earlyBirdCutoff?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  earlyBirdPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  endDate?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  eventGroupId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  groupPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  majorityAge?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  maxAge?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  minAge?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  minorWaiverId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  overnightMinAge?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  registrationCutoff?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  registrationsOpen?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  requiresPromoCode?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  showcaseId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  startDate?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  ticketPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  timezone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  venueId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventMinAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventMinAggregate'] = ResolversParentTypes['ClearEventMinAggregate']> = ResolversObject<{
  adultWaiverId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contentfulWebname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  earlyBirdCutoff?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  earlyBirdPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  endDate?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  eventGroupId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  groupPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  majorityAge?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  maxAge?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  minAge?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  minorWaiverId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  overnightMinAge?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  registrationCutoff?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  registrationsOpen?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  requiresPromoCode?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  showcaseId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  startDate?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  ticketPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  timezone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  venueId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventRestrictionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventRestriction'] = ResolversParentTypes['ClearEventRestriction']> = ResolversObject<{
  Events?: Resolver<Array<ResolversTypes['ClearEvent']>, ParentType, ContextType, Partial<ClearEventRestrictionEventsArgs>>;
  _count?: Resolver<Maybe<ResolversTypes['ClearEventRestrictionCount']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  details?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  getMetadata?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, RequireFields<ClearEventRestrictionGetMetadataArgs, 'key'>>;
  iconUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventRestrictionCountResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventRestrictionCount'] = ResolversParentTypes['ClearEventRestrictionCount']> = ResolversObject<{
  Events?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventRestrictionCountAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventRestrictionCountAggregate'] = ResolversParentTypes['ClearEventRestrictionCountAggregate']> = ResolversObject<{
  _all?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  details?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  iconUri?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventRestrictionGroupByResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventRestrictionGroupBy'] = ResolversParentTypes['ClearEventRestrictionGroupBy']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearEventRestrictionCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearEventRestrictionMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearEventRestrictionMinAggregate']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  details?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  iconUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventRestrictionMaxAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventRestrictionMaxAggregate'] = ResolversParentTypes['ClearEventRestrictionMaxAggregate']> = ResolversObject<{
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  details?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  iconUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventRestrictionMinAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventRestrictionMinAggregate'] = ResolversParentTypes['ClearEventRestrictionMinAggregate']> = ResolversObject<{
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  details?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  iconUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearEventSumAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearEventSumAggregate'] = ResolversParentTypes['ClearEventSumAggregate']> = ResolversObject<{
  earlyBirdPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  groupPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  majorityAge?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  maxAge?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  minAge?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  overnightMinAge?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  ticketPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface ClearJsonScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['ClearJSON'], any> {
  name: 'ClearJSON';
}

export interface ClearJsonObjectScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['ClearJSONObject'], any> {
  name: 'ClearJSONObject';
}

export type ClearMailingListMemberResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearMailingListMember'] = ResolversParentTypes['ClearMailingListMember']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearMailingListMemberCount']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  getMetadata?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, RequireFields<ClearMailingListMemberGetMetadataArgs, 'key'>>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  interestedInEvents?: Resolver<Array<ResolversTypes['ClearEvent']>, ParentType, ContextType, Partial<ClearMailingListMemberInterestedInEventsArgs>>;
  lastEmailed?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearMailingListMemberCountResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearMailingListMemberCount'] = ResolversParentTypes['ClearMailingListMemberCount']> = ResolversObject<{
  interestedInEvents?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearMailingListMemberCountAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearMailingListMemberCountAggregate'] = ResolversParentTypes['ClearMailingListMemberCountAggregate']> = ResolversObject<{
  _all?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastEmailed?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearMailingListMemberGroupByResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearMailingListMemberGroupBy'] = ResolversParentTypes['ClearMailingListMemberGroupBy']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearMailingListMemberCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearMailingListMemberMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearMailingListMemberMinAggregate']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  lastEmailed?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearMailingListMemberMaxAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearMailingListMemberMaxAggregate'] = ResolversParentTypes['ClearMailingListMemberMaxAggregate']> = ResolversObject<{
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastEmailed?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearMailingListMemberMinAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearMailingListMemberMinAggregate'] = ResolversParentTypes['ClearMailingListMemberMinAggregate']> = ResolversObject<{
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastEmailed?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearMutation'] = ResolversParentTypes['ClearMutation']> = ResolversObject<{
  applyForWorkshop?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ClearMutationApplyForWorkshopArgs, 'bio' | 'description' | 'email' | 'eventWhere' | 'firstName' | 'lastName'>>;
  checkin?: Resolver<Maybe<ResolversTypes['ClearTicket']>, ParentType, ContextType, RequireFields<ClearMutationCheckinArgs, 'where'>>;
  checkout?: Resolver<Maybe<ResolversTypes['ClearTicket']>, ParentType, ContextType, RequireFields<ClearMutationCheckoutArgs, 'where'>>;
  contactEventOrganizers?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ClearMutationContactEventOrganizersArgs, 'body' | 'eventWhere' | 'subject'>>;
  createEmailTemplate?: Resolver<ResolversTypes['ClearEmailTemplate'], ParentType, ContextType, RequireFields<ClearMutationCreateEmailTemplateArgs, 'data'>>;
  createEvent?: Resolver<ResolversTypes['ClearEvent'], ParentType, ContextType, RequireFields<ClearMutationCreateEventArgs, 'data'>>;
  createEventGroup?: Resolver<ResolversTypes['ClearEventGroup'], ParentType, ContextType, RequireFields<ClearMutationCreateEventGroupArgs, 'data'>>;
  createEventRestriction?: Resolver<ResolversTypes['ClearEventRestriction'], ParentType, ContextType, RequireFields<ClearMutationCreateEventRestrictionArgs, 'data'>>;
  createMailingListMember?: Resolver<ResolversTypes['ClearMailingListMember'], ParentType, ContextType, RequireFields<ClearMutationCreateMailingListMemberArgs, 'data'>>;
  createManyEmailTemplate?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationCreateManyEmailTemplateArgs, 'data'>>;
  createManyEvent?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationCreateManyEventArgs, 'data'>>;
  createManyEventGroup?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationCreateManyEventGroupArgs, 'data'>>;
  createManyEventRestriction?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationCreateManyEventRestrictionArgs, 'data'>>;
  createManyMailingListMember?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationCreateManyMailingListMemberArgs, 'data'>>;
  createManyPayment?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationCreateManyPaymentArgs, 'data'>>;
  createManyPerson?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationCreateManyPersonArgs, 'data'>>;
  createManyPromoCode?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationCreateManyPromoCodeArgs, 'data'>>;
  createManyScheduleItem?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationCreateManyScheduleItemArgs, 'data'>>;
  createManySponsor?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationCreateManySponsorArgs, 'data'>>;
  createManyTicket?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationCreateManyTicketArgs, 'data'>>;
  createManyVenue?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationCreateManyVenueArgs, 'data'>>;
  createManyWebhook?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationCreateManyWebhookArgs, 'data'>>;
  createPayment?: Resolver<ResolversTypes['ClearPayment'], ParentType, ContextType, RequireFields<ClearMutationCreatePaymentArgs, 'data'>>;
  createPerson?: Resolver<ResolversTypes['ClearPerson'], ParentType, ContextType, RequireFields<ClearMutationCreatePersonArgs, 'data'>>;
  createPromoCode?: Resolver<ResolversTypes['ClearPromoCode'], ParentType, ContextType, RequireFields<ClearMutationCreatePromoCodeArgs, 'data'>>;
  createScheduleItem?: Resolver<ResolversTypes['ClearScheduleItem'], ParentType, ContextType, RequireFields<ClearMutationCreateScheduleItemArgs, 'data'>>;
  createSponsor?: Resolver<ResolversTypes['ClearSponsor'], ParentType, ContextType, RequireFields<ClearMutationCreateSponsorArgs, 'data'>>;
  createTicket?: Resolver<ResolversTypes['ClearTicket'], ParentType, ContextType, RequireFields<ClearMutationCreateTicketArgs, 'data'>>;
  createVenue?: Resolver<ResolversTypes['ClearVenue'], ParentType, ContextType, RequireFields<ClearMutationCreateVenueArgs, 'data'>>;
  createWebhook?: Resolver<ResolversTypes['ClearWebhook'], ParentType, ContextType, RequireFields<ClearMutationCreateWebhookArgs, 'data'>>;
  deleteEmailTemplate?: Resolver<Maybe<ResolversTypes['ClearEmailTemplate']>, ParentType, ContextType, RequireFields<ClearMutationDeleteEmailTemplateArgs, 'where'>>;
  deleteEvent?: Resolver<Maybe<ResolversTypes['ClearEvent']>, ParentType, ContextType, RequireFields<ClearMutationDeleteEventArgs, 'where'>>;
  deleteEventGroup?: Resolver<Maybe<ResolversTypes['ClearEventGroup']>, ParentType, ContextType, RequireFields<ClearMutationDeleteEventGroupArgs, 'where'>>;
  deleteEventRestriction?: Resolver<Maybe<ResolversTypes['ClearEventRestriction']>, ParentType, ContextType, RequireFields<ClearMutationDeleteEventRestrictionArgs, 'where'>>;
  deleteMailingListMember?: Resolver<Maybe<ResolversTypes['ClearMailingListMember']>, ParentType, ContextType, RequireFields<ClearMutationDeleteMailingListMemberArgs, 'where'>>;
  deleteManyEmailTemplate?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, Partial<ClearMutationDeleteManyEmailTemplateArgs>>;
  deleteManyEvent?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, Partial<ClearMutationDeleteManyEventArgs>>;
  deleteManyEventGroup?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, Partial<ClearMutationDeleteManyEventGroupArgs>>;
  deleteManyEventRestriction?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, Partial<ClearMutationDeleteManyEventRestrictionArgs>>;
  deleteManyMailingListMember?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, Partial<ClearMutationDeleteManyMailingListMemberArgs>>;
  deleteManyPayment?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, Partial<ClearMutationDeleteManyPaymentArgs>>;
  deleteManyPerson?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, Partial<ClearMutationDeleteManyPersonArgs>>;
  deleteManyPromoCode?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, Partial<ClearMutationDeleteManyPromoCodeArgs>>;
  deleteManyScheduleItem?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, Partial<ClearMutationDeleteManyScheduleItemArgs>>;
  deleteManySponsor?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, Partial<ClearMutationDeleteManySponsorArgs>>;
  deleteManyTicket?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, Partial<ClearMutationDeleteManyTicketArgs>>;
  deleteManyVenue?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, Partial<ClearMutationDeleteManyVenueArgs>>;
  deleteManyWebhook?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, Partial<ClearMutationDeleteManyWebhookArgs>>;
  deletePayment?: Resolver<Maybe<ResolversTypes['ClearPayment']>, ParentType, ContextType, RequireFields<ClearMutationDeletePaymentArgs, 'where'>>;
  deletePerson?: Resolver<Maybe<ResolversTypes['ClearPerson']>, ParentType, ContextType, RequireFields<ClearMutationDeletePersonArgs, 'where'>>;
  deletePromoCode?: Resolver<Maybe<ResolversTypes['ClearPromoCode']>, ParentType, ContextType, RequireFields<ClearMutationDeletePromoCodeArgs, 'where'>>;
  deleteScheduleItem?: Resolver<Maybe<ResolversTypes['ClearScheduleItem']>, ParentType, ContextType, RequireFields<ClearMutationDeleteScheduleItemArgs, 'where'>>;
  deleteSponsor?: Resolver<Maybe<ResolversTypes['ClearSponsor']>, ParentType, ContextType, RequireFields<ClearMutationDeleteSponsorArgs, 'where'>>;
  deleteTicket?: Resolver<Maybe<ResolversTypes['ClearTicket']>, ParentType, ContextType, RequireFields<ClearMutationDeleteTicketArgs, 'where'>>;
  deleteVenue?: Resolver<Maybe<ResolversTypes['ClearVenue']>, ParentType, ContextType, RequireFields<ClearMutationDeleteVenueArgs, 'where'>>;
  deleteWebhook?: Resolver<Maybe<ResolversTypes['ClearWebhook']>, ParentType, ContextType, RequireFields<ClearMutationDeleteWebhookArgs, 'where'>>;
  finalizePayment?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType, RequireFields<ClearMutationFinalizePaymentArgs, 'paymentIntentId' | 'paymentProvider'>>;
  registerForEvent?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, RequireFields<ClearMutationRegisterForEventArgs, 'eventWhere' | 'paymentProvider'>>;
  requestEventScholarship?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ClearMutationRequestEventScholarshipArgs, 'eventWhere' | 'scholarshipReason'>>;
  sendInterestedEmail?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ClearMutationSendInterestedEmailArgs, 'eventWhere'>>;
  sendNotification?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ClearMutationSendNotificationArgs, 'eventWhere' | 'guardian'>>;
  sendWaiverReminder?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<ClearMutationSendWaiverReminderArgs, 'regenerate' | 'where'>>;
  setEmailTemplateMetadata?: Resolver<Maybe<ResolversTypes['ClearEmailTemplate']>, ParentType, ContextType, RequireFields<ClearMutationSetEmailTemplateMetadataArgs, 'key' | 'value' | 'where'>>;
  setEventGroupMetadata?: Resolver<Maybe<ResolversTypes['ClearEventGroup']>, ParentType, ContextType, RequireFields<ClearMutationSetEventGroupMetadataArgs, 'key' | 'value' | 'where'>>;
  setEventMetadata?: Resolver<Maybe<ResolversTypes['ClearEvent']>, ParentType, ContextType, RequireFields<ClearMutationSetEventMetadataArgs, 'key' | 'value' | 'where'>>;
  setEventRestrictionMetadata?: Resolver<Maybe<ResolversTypes['ClearEventRestriction']>, ParentType, ContextType, RequireFields<ClearMutationSetEventRestrictionMetadataArgs, 'key' | 'value' | 'where'>>;
  setMailingListMemberMetadata?: Resolver<Maybe<ResolversTypes['ClearMailingListMember']>, ParentType, ContextType, RequireFields<ClearMutationSetMailingListMemberMetadataArgs, 'key' | 'value' | 'where'>>;
  setPaymentMetadata?: Resolver<Maybe<ResolversTypes['ClearPayment']>, ParentType, ContextType, RequireFields<ClearMutationSetPaymentMetadataArgs, 'key' | 'value' | 'where'>>;
  setPersonMetadata?: Resolver<Maybe<ResolversTypes['ClearPerson']>, ParentType, ContextType, RequireFields<ClearMutationSetPersonMetadataArgs, 'key' | 'value' | 'where'>>;
  setPromoCodeMetadata?: Resolver<Maybe<ResolversTypes['ClearPromoCode']>, ParentType, ContextType, RequireFields<ClearMutationSetPromoCodeMetadataArgs, 'key' | 'value' | 'where'>>;
  setScheduleItemMetadata?: Resolver<Maybe<ResolversTypes['ClearScheduleItem']>, ParentType, ContextType, RequireFields<ClearMutationSetScheduleItemMetadataArgs, 'key' | 'value' | 'where'>>;
  setSponsorMetadata?: Resolver<Maybe<ResolversTypes['ClearSponsor']>, ParentType, ContextType, RequireFields<ClearMutationSetSponsorMetadataArgs, 'key' | 'value' | 'where'>>;
  setTicketMetadata?: Resolver<Maybe<ResolversTypes['ClearTicket']>, ParentType, ContextType, RequireFields<ClearMutationSetTicketMetadataArgs, 'key' | 'value' | 'where'>>;
  setVenueMetadata?: Resolver<Maybe<ResolversTypes['ClearVenue']>, ParentType, ContextType, RequireFields<ClearMutationSetVenueMetadataArgs, 'key' | 'value' | 'where'>>;
  subscribeToMailingList?: Resolver<Maybe<ResolversTypes['ClearMailingListMember']>, ParentType, ContextType, RequireFields<ClearMutationSubscribeToMailingListArgs, 'email' | 'where'>>;
  updateEmailTemplate?: Resolver<Maybe<ResolversTypes['ClearEmailTemplate']>, ParentType, ContextType, RequireFields<ClearMutationUpdateEmailTemplateArgs, 'data' | 'where'>>;
  updateEvent?: Resolver<Maybe<ResolversTypes['ClearEvent']>, ParentType, ContextType, RequireFields<ClearMutationUpdateEventArgs, 'data' | 'where'>>;
  updateEventGroup?: Resolver<Maybe<ResolversTypes['ClearEventGroup']>, ParentType, ContextType, RequireFields<ClearMutationUpdateEventGroupArgs, 'data' | 'where'>>;
  updateEventRestriction?: Resolver<Maybe<ResolversTypes['ClearEventRestriction']>, ParentType, ContextType, RequireFields<ClearMutationUpdateEventRestrictionArgs, 'data' | 'where'>>;
  updateMailingListMember?: Resolver<Maybe<ResolversTypes['ClearMailingListMember']>, ParentType, ContextType, RequireFields<ClearMutationUpdateMailingListMemberArgs, 'data' | 'where'>>;
  updateManyEmailTemplate?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationUpdateManyEmailTemplateArgs, 'data'>>;
  updateManyEvent?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationUpdateManyEventArgs, 'data'>>;
  updateManyEventGroup?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationUpdateManyEventGroupArgs, 'data'>>;
  updateManyEventRestriction?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationUpdateManyEventRestrictionArgs, 'data'>>;
  updateManyMailingListMember?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationUpdateManyMailingListMemberArgs, 'data'>>;
  updateManyPayment?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationUpdateManyPaymentArgs, 'data'>>;
  updateManyPerson?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationUpdateManyPersonArgs, 'data'>>;
  updateManyPromoCode?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationUpdateManyPromoCodeArgs, 'data'>>;
  updateManyScheduleItem?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationUpdateManyScheduleItemArgs, 'data'>>;
  updateManySponsor?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationUpdateManySponsorArgs, 'data'>>;
  updateManyTicket?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationUpdateManyTicketArgs, 'data'>>;
  updateManyVenue?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationUpdateManyVenueArgs, 'data'>>;
  updateManyWebhook?: Resolver<ResolversTypes['ClearAffectedRowsOutput'], ParentType, ContextType, RequireFields<ClearMutationUpdateManyWebhookArgs, 'data'>>;
  updatePayment?: Resolver<Maybe<ResolversTypes['ClearPayment']>, ParentType, ContextType, RequireFields<ClearMutationUpdatePaymentArgs, 'data' | 'where'>>;
  updatePerson?: Resolver<Maybe<ResolversTypes['ClearPerson']>, ParentType, ContextType, RequireFields<ClearMutationUpdatePersonArgs, 'data' | 'where'>>;
  updatePromoCode?: Resolver<Maybe<ResolversTypes['ClearPromoCode']>, ParentType, ContextType, RequireFields<ClearMutationUpdatePromoCodeArgs, 'data' | 'where'>>;
  updateScheduleItem?: Resolver<Maybe<ResolversTypes['ClearScheduleItem']>, ParentType, ContextType, RequireFields<ClearMutationUpdateScheduleItemArgs, 'data' | 'where'>>;
  updateSponsor?: Resolver<Maybe<ResolversTypes['ClearSponsor']>, ParentType, ContextType, RequireFields<ClearMutationUpdateSponsorArgs, 'data' | 'where'>>;
  updateTicket?: Resolver<Maybe<ResolversTypes['ClearTicket']>, ParentType, ContextType, RequireFields<ClearMutationUpdateTicketArgs, 'data' | 'where'>>;
  updateVenue?: Resolver<Maybe<ResolversTypes['ClearVenue']>, ParentType, ContextType, RequireFields<ClearMutationUpdateVenueArgs, 'data' | 'where'>>;
  updateWebhook?: Resolver<Maybe<ResolversTypes['ClearWebhook']>, ParentType, ContextType, RequireFields<ClearMutationUpdateWebhookArgs, 'data' | 'where'>>;
  uploadDarkSponsorLogo?: Resolver<Maybe<ResolversTypes['ClearSponsor']>, ParentType, ContextType, RequireFields<ClearMutationUploadDarkSponsorLogoArgs, 'upload' | 'where'>>;
  uploadEventRestrictionIcon?: Resolver<Maybe<ResolversTypes['ClearEventRestriction']>, ParentType, ContextType, RequireFields<ClearMutationUploadEventRestrictionIconArgs, 'upload' | 'where'>>;
  uploadSponsorLogo?: Resolver<Maybe<ResolversTypes['ClearSponsor']>, ParentType, ContextType, RequireFields<ClearMutationUploadSponsorLogoArgs, 'upload' | 'where'>>;
  upsertEmailTemplate?: Resolver<ResolversTypes['ClearEmailTemplate'], ParentType, ContextType, RequireFields<ClearMutationUpsertEmailTemplateArgs, 'create' | 'update' | 'where'>>;
  upsertEvent?: Resolver<ResolversTypes['ClearEvent'], ParentType, ContextType, RequireFields<ClearMutationUpsertEventArgs, 'create' | 'update' | 'where'>>;
  upsertEventGroup?: Resolver<ResolversTypes['ClearEventGroup'], ParentType, ContextType, RequireFields<ClearMutationUpsertEventGroupArgs, 'create' | 'update' | 'where'>>;
  upsertEventRestriction?: Resolver<ResolversTypes['ClearEventRestriction'], ParentType, ContextType, RequireFields<ClearMutationUpsertEventRestrictionArgs, 'create' | 'update' | 'where'>>;
  upsertMailingListMember?: Resolver<ResolversTypes['ClearMailingListMember'], ParentType, ContextType, RequireFields<ClearMutationUpsertMailingListMemberArgs, 'create' | 'update' | 'where'>>;
  upsertPayment?: Resolver<ResolversTypes['ClearPayment'], ParentType, ContextType, RequireFields<ClearMutationUpsertPaymentArgs, 'create' | 'update' | 'where'>>;
  upsertPerson?: Resolver<ResolversTypes['ClearPerson'], ParentType, ContextType, RequireFields<ClearMutationUpsertPersonArgs, 'create' | 'update' | 'where'>>;
  upsertPromoCode?: Resolver<ResolversTypes['ClearPromoCode'], ParentType, ContextType, RequireFields<ClearMutationUpsertPromoCodeArgs, 'create' | 'update' | 'where'>>;
  upsertScheduleItem?: Resolver<ResolversTypes['ClearScheduleItem'], ParentType, ContextType, RequireFields<ClearMutationUpsertScheduleItemArgs, 'create' | 'update' | 'where'>>;
  upsertSponsor?: Resolver<ResolversTypes['ClearSponsor'], ParentType, ContextType, RequireFields<ClearMutationUpsertSponsorArgs, 'create' | 'update' | 'where'>>;
  upsertTicket?: Resolver<ResolversTypes['ClearTicket'], ParentType, ContextType, RequireFields<ClearMutationUpsertTicketArgs, 'create' | 'update' | 'where'>>;
  upsertVenue?: Resolver<ResolversTypes['ClearVenue'], ParentType, ContextType, RequireFields<ClearMutationUpsertVenueArgs, 'create' | 'update' | 'where'>>;
  upsertWebhook?: Resolver<ResolversTypes['ClearWebhook'], ParentType, ContextType, RequireFields<ClearMutationUpsertWebhookArgs, 'create' | 'update' | 'where'>>;
  withdrawFailedPayment?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ClearMutationWithdrawFailedPaymentArgs, 'paymentIntentId' | 'paymentProvider'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPaymentResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPayment'] = ResolversParentTypes['ClearPayment']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearPaymentCount']>, ParentType, ContextType>;
  complete?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  getMetadata?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, RequireFields<ClearPaymentGetMetadataArgs, 'key'>>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  paymentProvider?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stripePaymentIntentId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  tickets?: Resolver<Array<ResolversTypes['ClearTicket']>, ParentType, ContextType, Partial<ClearPaymentTicketsArgs>>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPaymentCountResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPaymentCount'] = ResolversParentTypes['ClearPaymentCount']> = ResolversObject<{
  tickets?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPaymentCountAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPaymentCountAggregate'] = ResolversParentTypes['ClearPaymentCountAggregate']> = ResolversObject<{
  _all?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  complete?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  paymentProvider?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  stripePaymentIntentId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPaymentGroupByResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPaymentGroupBy'] = ResolversParentTypes['ClearPaymentGroupBy']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearPaymentCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearPaymentMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearPaymentMinAggregate']>, ParentType, ContextType>;
  complete?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  paymentProvider?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stripePaymentIntentId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPaymentMaxAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPaymentMaxAggregate'] = ResolversParentTypes['ClearPaymentMaxAggregate']> = ResolversObject<{
  complete?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  paymentProvider?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stripePaymentIntentId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPaymentMinAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPaymentMinAggregate'] = ResolversParentTypes['ClearPaymentMinAggregate']> = ResolversObject<{
  complete?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  paymentProvider?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stripePaymentIntentId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPersonResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPerson'] = ResolversParentTypes['ClearPerson']> = ResolversObject<{
  Ticket?: Resolver<Array<ResolversTypes['ClearTicket']>, ParentType, ContextType, Partial<ClearPersonTicketArgs>>;
  _count?: Resolver<Maybe<ResolversTypes['ClearPersonCount']>, ParentType, ContextType>;
  age?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  getMetadata?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, RequireFields<ClearPersonGetMetadataArgs, 'key'>>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  lastName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pronouns?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  whatsApp?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPersonAvgAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPersonAvgAggregate'] = ResolversParentTypes['ClearPersonAvgAggregate']> = ResolversObject<{
  age?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPersonCountResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPersonCount'] = ResolversParentTypes['ClearPersonCount']> = ResolversObject<{
  Ticket?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPersonCountAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPersonCountAggregate'] = ResolversParentTypes['ClearPersonCountAggregate']> = ResolversObject<{
  _all?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  age?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  firstName?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastName?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  phone?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  pronouns?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  username?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  whatsApp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPersonGroupByResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPersonGroupBy'] = ResolversParentTypes['ClearPersonGroupBy']> = ResolversObject<{
  _avg?: Resolver<Maybe<ResolversTypes['ClearPersonAvgAggregate']>, ParentType, ContextType>;
  _count?: Resolver<Maybe<ResolversTypes['ClearPersonCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearPersonMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearPersonMinAggregate']>, ParentType, ContextType>;
  _sum?: Resolver<Maybe<ResolversTypes['ClearPersonSumAggregate']>, ParentType, ContextType>;
  age?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  lastName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pronouns?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  whatsApp?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPersonMaxAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPersonMaxAggregate'] = ResolversParentTypes['ClearPersonMaxAggregate']> = ResolversObject<{
  age?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  locale?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pronouns?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  whatsApp?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPersonMinAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPersonMinAggregate'] = ResolversParentTypes['ClearPersonMinAggregate']> = ResolversObject<{
  age?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  locale?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pronouns?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  whatsApp?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPersonSumAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPersonSumAggregate'] = ResolversParentTypes['ClearPersonSumAggregate']> = ResolversObject<{
  age?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPromoCodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPromoCode'] = ResolversParentTypes['ClearPromoCode']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearPromoCodeCount']>, ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  event?: Resolver<Maybe<ResolversTypes['ClearEvent']>, ParentType, ContextType>;
  eventGroup?: Resolver<Maybe<ResolversTypes['ClearEventGroup']>, ParentType, ContextType>;
  eventGroupId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  getMetadata?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, RequireFields<ClearPromoCodeGetMetadataArgs, 'key'>>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  tickets?: Resolver<Array<ResolversTypes['ClearTicket']>, ParentType, ContextType, Partial<ClearPromoCodeTicketsArgs>>;
  type?: Resolver<ResolversTypes['ClearDiscountType'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  uses?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  usesCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  usesRemaining?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPromoCodeAvgAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPromoCodeAvgAggregate'] = ResolversParentTypes['ClearPromoCodeAvgAggregate']> = ResolversObject<{
  amount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  uses?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPromoCodeCountResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPromoCodeCount'] = ResolversParentTypes['ClearPromoCodeCount']> = ResolversObject<{
  tickets?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPromoCodeCountAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPromoCodeCountAggregate'] = ResolversParentTypes['ClearPromoCodeCountAggregate']> = ResolversObject<{
  _all?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  eventGroupId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  eventId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  uses?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPromoCodeGroupByResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPromoCodeGroupBy'] = ResolversParentTypes['ClearPromoCodeGroupBy']> = ResolversObject<{
  _avg?: Resolver<Maybe<ResolversTypes['ClearPromoCodeAvgAggregate']>, ParentType, ContextType>;
  _count?: Resolver<Maybe<ResolversTypes['ClearPromoCodeCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearPromoCodeMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearPromoCodeMinAggregate']>, ParentType, ContextType>;
  _sum?: Resolver<Maybe<ResolversTypes['ClearPromoCodeSumAggregate']>, ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  eventGroupId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ClearDiscountType'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  uses?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPromoCodeMaxAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPromoCodeMaxAggregate'] = ResolversParentTypes['ClearPromoCodeMaxAggregate']> = ResolversObject<{
  amount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  eventGroupId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['ClearDiscountType']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  uses?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPromoCodeMinAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPromoCodeMinAggregate'] = ResolversParentTypes['ClearPromoCodeMinAggregate']> = ResolversObject<{
  amount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  eventGroupId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['ClearDiscountType']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  uses?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPromoCodeSumAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPromoCodeSumAggregate'] = ResolversParentTypes['ClearPromoCodeSumAggregate']> = ResolversObject<{
  amount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  uses?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearPublicPersonResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearPublicPerson'] = ResolversParentTypes['ClearPublicPerson']> = ResolversObject<{
  account?: Resolver<Maybe<ResolversTypes['AccountUser']>, ParentType, ContextType>;
  avatarUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  firstName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  lastName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearQueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearQuery'] = ResolversParentTypes['ClearQuery']> = ResolversObject<{
  aggregateEmailTemplate?: Resolver<ResolversTypes['ClearAggregateEmailTemplate'], ParentType, ContextType, Partial<ClearQueryAggregateEmailTemplateArgs>>;
  aggregateEvent?: Resolver<ResolversTypes['ClearAggregateEvent'], ParentType, ContextType, Partial<ClearQueryAggregateEventArgs>>;
  aggregateEventGroup?: Resolver<ResolversTypes['ClearAggregateEventGroup'], ParentType, ContextType, Partial<ClearQueryAggregateEventGroupArgs>>;
  aggregateEventRestriction?: Resolver<ResolversTypes['ClearAggregateEventRestriction'], ParentType, ContextType, Partial<ClearQueryAggregateEventRestrictionArgs>>;
  aggregateMailingListMember?: Resolver<ResolversTypes['ClearAggregateMailingListMember'], ParentType, ContextType, Partial<ClearQueryAggregateMailingListMemberArgs>>;
  aggregatePayment?: Resolver<ResolversTypes['ClearAggregatePayment'], ParentType, ContextType, Partial<ClearQueryAggregatePaymentArgs>>;
  aggregatePerson?: Resolver<ResolversTypes['ClearAggregatePerson'], ParentType, ContextType, Partial<ClearQueryAggregatePersonArgs>>;
  aggregatePromoCode?: Resolver<ResolversTypes['ClearAggregatePromoCode'], ParentType, ContextType, Partial<ClearQueryAggregatePromoCodeArgs>>;
  aggregateScheduleItem?: Resolver<ResolversTypes['ClearAggregateScheduleItem'], ParentType, ContextType, Partial<ClearQueryAggregateScheduleItemArgs>>;
  aggregateSponsor?: Resolver<ResolversTypes['ClearAggregateSponsor'], ParentType, ContextType, Partial<ClearQueryAggregateSponsorArgs>>;
  aggregateTicket?: Resolver<ResolversTypes['ClearAggregateTicket'], ParentType, ContextType, Partial<ClearQueryAggregateTicketArgs>>;
  aggregateVenue?: Resolver<ResolversTypes['ClearAggregateVenue'], ParentType, ContextType, Partial<ClearQueryAggregateVenueArgs>>;
  aggregateWebhook?: Resolver<ResolversTypes['ClearAggregateWebhook'], ParentType, ContextType, Partial<ClearQueryAggregateWebhookArgs>>;
  emailTemplate?: Resolver<Maybe<ResolversTypes['ClearEmailTemplate']>, ParentType, ContextType, RequireFields<ClearQueryEmailTemplateArgs, 'where'>>;
  emailTemplates?: Resolver<Array<ResolversTypes['ClearEmailTemplate']>, ParentType, ContextType, Partial<ClearQueryEmailTemplatesArgs>>;
  event?: Resolver<Maybe<ResolversTypes['ClearEvent']>, ParentType, ContextType, RequireFields<ClearQueryEventArgs, 'where'>>;
  eventGroup?: Resolver<Maybe<ResolversTypes['ClearEventGroup']>, ParentType, ContextType, RequireFields<ClearQueryEventGroupArgs, 'where'>>;
  eventGroups?: Resolver<Array<ResolversTypes['ClearEventGroup']>, ParentType, ContextType, Partial<ClearQueryEventGroupsArgs>>;
  eventRestriction?: Resolver<Maybe<ResolversTypes['ClearEventRestriction']>, ParentType, ContextType, RequireFields<ClearQueryEventRestrictionArgs, 'where'>>;
  eventRestrictions?: Resolver<Array<ResolversTypes['ClearEventRestriction']>, ParentType, ContextType, Partial<ClearQueryEventRestrictionsArgs>>;
  events?: Resolver<Array<ResolversTypes['ClearEvent']>, ParentType, ContextType, Partial<ClearQueryEventsArgs>>;
  findFirstEmailTemplate?: Resolver<Maybe<ResolversTypes['ClearEmailTemplate']>, ParentType, ContextType, Partial<ClearQueryFindFirstEmailTemplateArgs>>;
  findFirstEvent?: Resolver<Maybe<ResolversTypes['ClearEvent']>, ParentType, ContextType, Partial<ClearQueryFindFirstEventArgs>>;
  findFirstEventGroup?: Resolver<Maybe<ResolversTypes['ClearEventGroup']>, ParentType, ContextType, Partial<ClearQueryFindFirstEventGroupArgs>>;
  findFirstEventRestriction?: Resolver<Maybe<ResolversTypes['ClearEventRestriction']>, ParentType, ContextType, Partial<ClearQueryFindFirstEventRestrictionArgs>>;
  findFirstMailingListMember?: Resolver<Maybe<ResolversTypes['ClearMailingListMember']>, ParentType, ContextType, Partial<ClearQueryFindFirstMailingListMemberArgs>>;
  findFirstPayment?: Resolver<Maybe<ResolversTypes['ClearPayment']>, ParentType, ContextType, Partial<ClearQueryFindFirstPaymentArgs>>;
  findFirstPerson?: Resolver<Maybe<ResolversTypes['ClearPerson']>, ParentType, ContextType, Partial<ClearQueryFindFirstPersonArgs>>;
  findFirstPromoCode?: Resolver<Maybe<ResolversTypes['ClearPromoCode']>, ParentType, ContextType, Partial<ClearQueryFindFirstPromoCodeArgs>>;
  findFirstScheduleItem?: Resolver<Maybe<ResolversTypes['ClearScheduleItem']>, ParentType, ContextType, Partial<ClearQueryFindFirstScheduleItemArgs>>;
  findFirstSponsor?: Resolver<Maybe<ResolversTypes['ClearSponsor']>, ParentType, ContextType, Partial<ClearQueryFindFirstSponsorArgs>>;
  findFirstTicket?: Resolver<Maybe<ResolversTypes['ClearTicket']>, ParentType, ContextType, Partial<ClearQueryFindFirstTicketArgs>>;
  findFirstVenue?: Resolver<Maybe<ResolversTypes['ClearVenue']>, ParentType, ContextType, Partial<ClearQueryFindFirstVenueArgs>>;
  findFirstWebhook?: Resolver<Maybe<ResolversTypes['ClearWebhook']>, ParentType, ContextType, Partial<ClearQueryFindFirstWebhookArgs>>;
  groupByEmailTemplate?: Resolver<Array<ResolversTypes['ClearEmailTemplateGroupBy']>, ParentType, ContextType, RequireFields<ClearQueryGroupByEmailTemplateArgs, 'by'>>;
  groupByEvent?: Resolver<Array<ResolversTypes['ClearEventGroupBy']>, ParentType, ContextType, RequireFields<ClearQueryGroupByEventArgs, 'by'>>;
  groupByEventGroup?: Resolver<Array<ResolversTypes['ClearEventGroupGroupBy']>, ParentType, ContextType, RequireFields<ClearQueryGroupByEventGroupArgs, 'by'>>;
  groupByEventRestriction?: Resolver<Array<ResolversTypes['ClearEventRestrictionGroupBy']>, ParentType, ContextType, RequireFields<ClearQueryGroupByEventRestrictionArgs, 'by'>>;
  groupByMailingListMember?: Resolver<Array<ResolversTypes['ClearMailingListMemberGroupBy']>, ParentType, ContextType, RequireFields<ClearQueryGroupByMailingListMemberArgs, 'by'>>;
  groupByPayment?: Resolver<Array<ResolversTypes['ClearPaymentGroupBy']>, ParentType, ContextType, RequireFields<ClearQueryGroupByPaymentArgs, 'by'>>;
  groupByPerson?: Resolver<Array<ResolversTypes['ClearPersonGroupBy']>, ParentType, ContextType, RequireFields<ClearQueryGroupByPersonArgs, 'by'>>;
  groupByPromoCode?: Resolver<Array<ResolversTypes['ClearPromoCodeGroupBy']>, ParentType, ContextType, RequireFields<ClearQueryGroupByPromoCodeArgs, 'by'>>;
  groupByScheduleItem?: Resolver<Array<ResolversTypes['ClearScheduleItemGroupBy']>, ParentType, ContextType, RequireFields<ClearQueryGroupByScheduleItemArgs, 'by'>>;
  groupBySponsor?: Resolver<Array<ResolversTypes['ClearSponsorGroupBy']>, ParentType, ContextType, RequireFields<ClearQueryGroupBySponsorArgs, 'by'>>;
  groupByTicket?: Resolver<Array<ResolversTypes['ClearTicketGroupBy']>, ParentType, ContextType, RequireFields<ClearQueryGroupByTicketArgs, 'by'>>;
  groupByVenue?: Resolver<Array<ResolversTypes['ClearVenueGroupBy']>, ParentType, ContextType, RequireFields<ClearQueryGroupByVenueArgs, 'by'>>;
  groupByWebhook?: Resolver<Array<ResolversTypes['ClearWebhookGroupBy']>, ParentType, ContextType, RequireFields<ClearQueryGroupByWebhookArgs, 'by'>>;
  mailingListMember?: Resolver<Maybe<ResolversTypes['ClearMailingListMember']>, ParentType, ContextType, RequireFields<ClearQueryMailingListMemberArgs, 'where'>>;
  mailingListMembers?: Resolver<Array<ResolversTypes['ClearMailingListMember']>, ParentType, ContextType, Partial<ClearQueryMailingListMembersArgs>>;
  payment?: Resolver<Maybe<ResolversTypes['ClearPayment']>, ParentType, ContextType, RequireFields<ClearQueryPaymentArgs, 'where'>>;
  payments?: Resolver<Array<ResolversTypes['ClearPayment']>, ParentType, ContextType, Partial<ClearQueryPaymentsArgs>>;
  people?: Resolver<Array<ResolversTypes['ClearPerson']>, ParentType, ContextType, Partial<ClearQueryPeopleArgs>>;
  person?: Resolver<Maybe<ResolversTypes['ClearPerson']>, ParentType, ContextType, RequireFields<ClearQueryPersonArgs, 'where'>>;
  promoCode?: Resolver<Maybe<ResolversTypes['ClearPromoCode']>, ParentType, ContextType, RequireFields<ClearQueryPromoCodeArgs, 'where'>>;
  promoCodes?: Resolver<Array<ResolversTypes['ClearPromoCode']>, ParentType, ContextType, Partial<ClearQueryPromoCodesArgs>>;
  scheduleItem?: Resolver<Maybe<ResolversTypes['ClearScheduleItem']>, ParentType, ContextType, RequireFields<ClearQueryScheduleItemArgs, 'where'>>;
  scheduleItems?: Resolver<Array<ResolversTypes['ClearScheduleItem']>, ParentType, ContextType, Partial<ClearQueryScheduleItemsArgs>>;
  sponsor?: Resolver<Maybe<ResolversTypes['ClearSponsor']>, ParentType, ContextType, RequireFields<ClearQuerySponsorArgs, 'where'>>;
  sponsors?: Resolver<Array<ResolversTypes['ClearSponsor']>, ParentType, ContextType, Partial<ClearQuerySponsorsArgs>>;
  ticket?: Resolver<Maybe<ResolversTypes['ClearTicket']>, ParentType, ContextType, RequireFields<ClearQueryTicketArgs, 'where'>>;
  tickets?: Resolver<Array<ResolversTypes['ClearTicket']>, ParentType, ContextType, Partial<ClearQueryTicketsArgs>>;
  venue?: Resolver<Maybe<ResolversTypes['ClearVenue']>, ParentType, ContextType, RequireFields<ClearQueryVenueArgs, 'where'>>;
  venues?: Resolver<Array<ResolversTypes['ClearVenue']>, ParentType, ContextType, Partial<ClearQueryVenuesArgs>>;
  webhook?: Resolver<Maybe<ResolversTypes['ClearWebhook']>, ParentType, ContextType, RequireFields<ClearQueryWebhookArgs, 'where'>>;
  webhooks?: Resolver<Array<ResolversTypes['ClearWebhook']>, ParentType, ContextType, Partial<ClearQueryWebhooksArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearScheduleItemResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearScheduleItem'] = ResolversParentTypes['ClearScheduleItem']> = ResolversObject<{
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  displayTime?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  displayTimeWithDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  end?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  event?: Resolver<Maybe<ResolversTypes['ClearEvent']>, ParentType, ContextType>;
  eventGroup?: Resolver<Maybe<ResolversTypes['ClearEventGroup']>, ParentType, ContextType>;
  eventGroupId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  finalized?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  getMetadata?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, RequireFields<ClearScheduleItemGetMetadataArgs, 'key'>>;
  hostEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hostName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hostPronoun?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  internal?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  organizerEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  organizerName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  organizerPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  start?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearScheduleItemCountAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearScheduleItemCountAggregate'] = ResolversParentTypes['ClearScheduleItemCountAggregate']> = ResolversObject<{
  _all?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  end?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  eventGroupId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  eventId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  finalized?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hostEmail?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hostName?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hostPronoun?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  internal?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  link?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  organizerEmail?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  organizerName?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  organizerPhone?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  start?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearScheduleItemGroupByResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearScheduleItemGroupBy'] = ResolversParentTypes['ClearScheduleItemGroupBy']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearScheduleItemCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearScheduleItemMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearScheduleItemMinAggregate']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  end?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  eventGroupId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  finalized?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  hostEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hostName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hostPronoun?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  internal?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  organizerEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  organizerName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  organizerPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  start?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearScheduleItemMaxAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearScheduleItemMaxAggregate'] = ResolversParentTypes['ClearScheduleItemMaxAggregate']> = ResolversObject<{
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  end?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  eventGroupId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  finalized?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  hostEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hostName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hostPronoun?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  internal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  organizerEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  organizerName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  organizerPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  start?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearScheduleItemMinAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearScheduleItemMinAggregate'] = ResolversParentTypes['ClearScheduleItemMinAggregate']> = ResolversObject<{
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  end?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  eventGroupId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  finalized?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  hostEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hostName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hostPronoun?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  internal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  organizerEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  organizerName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  organizerPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  start?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearSponsorResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearSponsor'] = ResolversParentTypes['ClearSponsor']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  contactEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  darkLogoImageUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  event?: Resolver<Maybe<ResolversTypes['ClearEvent']>, ParentType, ContextType>;
  eventId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  getMetadata?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, RequireFields<ClearSponsorGetMetadataArgs, 'key'>>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  logoImageUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  perks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearSponsorAvgAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearSponsorAvgAggregate'] = ResolversParentTypes['ClearSponsorAvgAggregate']> = ResolversObject<{
  amount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearSponsorCountAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearSponsorCountAggregate'] = ResolversParentTypes['ClearSponsorCountAggregate']> = ResolversObject<{
  _all?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  contactEmail?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  contactName?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  contactPhone?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  darkLogoImageUri?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  eventId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  link?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  logoImageUri?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  perks?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearSponsorGroupByResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearSponsorGroupBy'] = ResolversParentTypes['ClearSponsorGroupBy']> = ResolversObject<{
  _avg?: Resolver<Maybe<ResolversTypes['ClearSponsorAvgAggregate']>, ParentType, ContextType>;
  _count?: Resolver<Maybe<ResolversTypes['ClearSponsorCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearSponsorMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearSponsorMinAggregate']>, ParentType, ContextType>;
  _sum?: Resolver<Maybe<ResolversTypes['ClearSponsorSumAggregate']>, ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  contactEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  darkLogoImageUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  logoImageUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  perks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearSponsorMaxAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearSponsorMaxAggregate'] = ResolversParentTypes['ClearSponsorMaxAggregate']> = ResolversObject<{
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  contactEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  darkLogoImageUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  logoImageUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  perks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearSponsorMinAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearSponsorMinAggregate'] = ResolversParentTypes['ClearSponsorMinAggregate']> = ResolversObject<{
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  contactEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  darkLogoImageUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  logoImageUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  perks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearSponsorSumAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearSponsorSumAggregate'] = ResolversParentTypes['ClearSponsorSumAggregate']> = ResolversObject<{
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearTeamResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearTeam'] = ResolversParentTypes['ClearTeam']> = ResolversObject<{
  judges?: Resolver<Array<ResolversTypes['ClearPublicPerson']>, ParentType, ContextType>;
  mentors?: Resolver<Array<ResolversTypes['ClearPublicPerson']>, ParentType, ContextType>;
  staff?: Resolver<Array<ResolversTypes['ClearPublicPerson']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearTicketResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearTicket'] = ResolversParentTypes['ClearTicket']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearTicketCount']>, ParentType, ContextType>;
  age?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  checkedIn?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  checkedOut?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  couponCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  event?: Resolver<ResolversTypes['ClearEvent'], ParentType, ContextType>;
  eventId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  firstName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  getMetadata?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, RequireFields<ClearTicketGetMetadataArgs, 'key'>>;
  guardian?: Resolver<Maybe<ResolversTypes['ClearPerson']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  lastName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  needsGuardian?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  payment?: Resolver<Maybe<ResolversTypes['ClearPayment']>, ParentType, ContextType>;
  paymentId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  personId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  promoCode?: Resolver<Maybe<ResolversTypes['ClearPromoCode']>, ParentType, ContextType>;
  promoCodeId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sentEmails?: Resolver<Array<ResolversTypes['ClearEmailTemplate']>, ParentType, ContextType, Partial<ClearTicketSentEmailsArgs>>;
  type?: Resolver<ResolversTypes['ClearTicketType'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  waiverPdfUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  waiverSigned?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  waiverSignedId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  waiverTrackingId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  waiverUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  whatsApp?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearTicketAvgAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearTicketAvgAggregate'] = ResolversParentTypes['ClearTicketAvgAggregate']> = ResolversObject<{
  age?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearTicketCountResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearTicketCount'] = ResolversParentTypes['ClearTicketCount']> = ResolversObject<{
  sentEmails?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearTicketCountAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearTicketCountAggregate'] = ResolversParentTypes['ClearTicketCountAggregate']> = ResolversObject<{
  _all?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  age?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  checkedIn?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  checkedOut?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  couponCode?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  eventId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  firstName?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lastName?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  paymentId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  personId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  phone?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  promoCodeId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  username?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  waiverPdfUrl?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  waiverSigned?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  waiverSignedId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  waiverTrackingId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  waiverUrl?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  whatsApp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearTicketGroupByResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearTicketGroupBy'] = ResolversParentTypes['ClearTicketGroupBy']> = ResolversObject<{
  _avg?: Resolver<Maybe<ResolversTypes['ClearTicketAvgAggregate']>, ParentType, ContextType>;
  _count?: Resolver<Maybe<ResolversTypes['ClearTicketCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearTicketMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearTicketMinAggregate']>, ParentType, ContextType>;
  _sum?: Resolver<Maybe<ResolversTypes['ClearTicketSumAggregate']>, ParentType, ContextType>;
  age?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  checkedIn?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  checkedOut?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  couponCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  firstName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  lastName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  paymentId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  personId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  promoCodeId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ClearTicketType'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  waiverPdfUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  waiverSigned?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  waiverSignedId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  waiverTrackingId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  waiverUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  whatsApp?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearTicketMaxAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearTicketMaxAggregate'] = ResolversParentTypes['ClearTicketMaxAggregate']> = ResolversObject<{
  age?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  checkedIn?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  checkedOut?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  couponCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  locale?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  paymentId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  personId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  promoCodeId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['ClearTicketType']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  waiverPdfUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  waiverSigned?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  waiverSignedId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  waiverTrackingId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  waiverUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  whatsApp?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearTicketMinAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearTicketMinAggregate'] = ResolversParentTypes['ClearTicketMinAggregate']> = ResolversObject<{
  age?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  checkedIn?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  checkedOut?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  couponCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  locale?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  paymentId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  personId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  promoCodeId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['ClearTicketType']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  waiverPdfUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  waiverSigned?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  waiverSignedId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  waiverTrackingId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  waiverUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  whatsApp?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearTicketSumAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearTicketSumAggregate'] = ResolversParentTypes['ClearTicketSumAggregate']> = ResolversObject<{
  age?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearVenueResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearVenue'] = ResolversParentTypes['ClearVenue']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearVenueCount']>, ParentType, ContextType>;
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressInline?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine3?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  capacity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  countryAbbreviation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  events?: Resolver<Array<ResolversTypes['ClearEvent']>, ParentType, ContextType, Partial<ClearVenueEventsArgs>>;
  getMetadata?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, RequireFields<ClearVenueGetMetadataArgs, 'key'>>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  mapLink?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stateAbbreviation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  zipCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearVenueAvgAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearVenueAvgAggregate'] = ResolversParentTypes['ClearVenueAvgAggregate']> = ResolversObject<{
  capacity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearVenueCountResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearVenueCount'] = ResolversParentTypes['ClearVenueCount']> = ResolversObject<{
  events?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearVenueCountAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearVenueCountAggregate'] = ResolversParentTypes['ClearVenueCountAggregate']> = ResolversObject<{
  _all?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  address?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  addressLine1?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  addressLine2?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  addressLine3?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  capacity?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  city?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  contactEmail?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  contactName?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  contactPhone?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  country?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  countryAbbreviation?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  mapLink?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  state?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  stateAbbreviation?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  zipCode?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearVenueGroupByResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearVenueGroupBy'] = ResolversParentTypes['ClearVenueGroupBy']> = ResolversObject<{
  _avg?: Resolver<Maybe<ResolversTypes['ClearVenueAvgAggregate']>, ParentType, ContextType>;
  _count?: Resolver<Maybe<ResolversTypes['ClearVenueCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearVenueMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearVenueMinAggregate']>, ParentType, ContextType>;
  _sum?: Resolver<Maybe<ResolversTypes['ClearVenueSumAggregate']>, ParentType, ContextType>;
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine3?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  capacity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  countryAbbreviation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  mapLink?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['ClearJSON']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stateAbbreviation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ClearDateTime'], ParentType, ContextType>;
  zipCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearVenueMaxAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearVenueMaxAggregate'] = ResolversParentTypes['ClearVenueMaxAggregate']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine3?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  capacity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  countryAbbreviation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mapLink?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stateAbbreviation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  zipCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearVenueMinAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearVenueMinAggregate'] = ResolversParentTypes['ClearVenueMinAggregate']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine3?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  capacity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contactPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  countryAbbreviation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mapLink?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stateAbbreviation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['ClearDateTime']>, ParentType, ContextType>;
  zipCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearVenueSumAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearVenueSumAggregate'] = ResolversParentTypes['ClearVenueSumAggregate']> = ResolversObject<{
  capacity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearWebhookResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearWebhook'] = ResolversParentTypes['ClearWebhook']> = ResolversObject<{
  event?: Resolver<Maybe<ResolversTypes['ClearEvent']>, ParentType, ContextType>;
  eventGroup?: Resolver<Maybe<ResolversTypes['ClearEventGroup']>, ParentType, ContextType>;
  eventGroupId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  service?: Resolver<ResolversTypes['ClearWebhookService'], ParentType, ContextType>;
  sink?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ClearWebhookType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearWebhookCountAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearWebhookCountAggregate'] = ResolversParentTypes['ClearWebhookCountAggregate']> = ResolversObject<{
  _all?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  eventGroupId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  eventId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  service?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  sink?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearWebhookGroupByResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearWebhookGroupBy'] = ResolversParentTypes['ClearWebhookGroupBy']> = ResolversObject<{
  _count?: Resolver<Maybe<ResolversTypes['ClearWebhookCountAggregate']>, ParentType, ContextType>;
  _max?: Resolver<Maybe<ResolversTypes['ClearWebhookMaxAggregate']>, ParentType, ContextType>;
  _min?: Resolver<Maybe<ResolversTypes['ClearWebhookMinAggregate']>, ParentType, ContextType>;
  eventGroupId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  service?: Resolver<ResolversTypes['ClearWebhookService'], ParentType, ContextType>;
  sink?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ClearWebhookType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearWebhookMaxAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearWebhookMaxAggregate'] = ResolversParentTypes['ClearWebhookMaxAggregate']> = ResolversObject<{
  eventGroupId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  service?: Resolver<Maybe<ResolversTypes['ClearWebhookService']>, ParentType, ContextType>;
  sink?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['ClearWebhookType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClearWebhookMinAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ClearWebhookMinAggregate'] = ResolversParentTypes['ClearWebhookMinAggregate']> = ResolversObject<{
  eventGroupId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  service?: Resolver<Maybe<ResolversTypes['ClearWebhookService']>, ParentType, ContextType>;
  sink?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['ClearWebhookType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsAnnouncementResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsAnnouncement'] = ResolversParentTypes['CmsAnnouncement']> = ResolversObject<{
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  displayAt?: Resolver<Maybe<ResolversTypes['CmsDateTime']>, ParentType, ContextType, Partial<CmsAnnouncementDisplayAtArgs>>;
  endAt?: Resolver<Maybe<ResolversTypes['CmsDateTime']>, ParentType, ContextType, Partial<CmsAnnouncementEndAtArgs>>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsAnnouncementLinkArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsAnnouncementLinkingCollections']>, ParentType, ContextType, Partial<CmsAnnouncementLinkedFromArgs>>;
  oneline?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsAnnouncementOnelineArgs>>;
  programs?: Resolver<Maybe<ResolversTypes['CmsAnnouncementProgramCollection']>, ParentType, ContextType, RequireFields<CmsAnnouncementProgramsArgs, 'limit' | 'skip'>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsAnnouncementTitleArgs>>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsAnnouncementTypeArgs>>;
  visibility?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsAnnouncementVisibilityArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsAnnouncementCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsAnnouncementCollection'] = ResolversParentTypes['CmsAnnouncementCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsAnnouncement']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsAnnouncementLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsAnnouncementLinkingCollections'] = ResolversParentTypes['CmsAnnouncementLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsAnnouncementLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsAnnouncementProgramCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsAnnouncementProgramCollection'] = ResolversParentTypes['CmsAnnouncementProgramCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsProgram']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsAssetResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsAsset'] = ResolversParentTypes['CmsAsset']> = ResolversObject<{
  contentType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsAssetContentTypeArgs>>;
  contentfulBaseUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsAssetContentfulBaseUrlArgs>>;
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsAssetDescriptionArgs>>;
  fileName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsAssetFileNameArgs>>;
  height?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType, Partial<CmsAssetHeightArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsAssetLinkingCollections']>, ParentType, ContextType, Partial<CmsAssetLinkedFromArgs>>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType, Partial<CmsAssetSizeArgs>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsAssetTitleArgs>>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsAssetUrlArgs>>;
  width?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType, Partial<CmsAssetWidthArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsAssetCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsAssetCollection'] = ResolversParentTypes['CmsAssetCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsAssetLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsAssetLinkingCollections'] = ResolversParentTypes['CmsAssetLinkingCollections']> = ResolversObject<{
  awards?: Resolver<Maybe<ResolversTypes['CmsAwardCollection']>, ParentType, ContextType, RequireFields<CmsAssetLinkingCollectionsAwardsArgs, 'limit' | 'skip'>>;
  badges?: Resolver<Maybe<ResolversTypes['CmsBadgeCollection']>, ParentType, ContextType, RequireFields<CmsAssetLinkingCollectionsBadgesArgs, 'limit' | 'skip'>>;
  communityPartners?: Resolver<Maybe<ResolversTypes['CmsCommunityPartnerCollection']>, ParentType, ContextType, RequireFields<CmsAssetLinkingCollectionsCommunityPartnersArgs, 'limit' | 'skip'>>;
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsAssetLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  eventRestrictions?: Resolver<Maybe<ResolversTypes['CmsEventRestrictionCollection']>, ParentType, ContextType, RequireFields<CmsAssetLinkingCollectionsEventRestrictionsArgs, 'limit' | 'skip'>>;
  events?: Resolver<Maybe<ResolversTypes['CmsEventCollection']>, ParentType, ContextType, RequireFields<CmsAssetLinkingCollectionsEventsArgs, 'limit' | 'skip'>>;
  forms?: Resolver<Maybe<ResolversTypes['CmsFormCollection']>, ParentType, ContextType, RequireFields<CmsAssetLinkingCollectionsFormsArgs, 'limit' | 'skip'>>;
  globalSponsors?: Resolver<Maybe<ResolversTypes['CmsGlobalSponsorCollection']>, ParentType, ContextType, RequireFields<CmsAssetLinkingCollectionsGlobalSponsorsArgs, 'limit' | 'skip'>>;
  hiringCompanies?: Resolver<Maybe<ResolversTypes['CmsHiringCompanyCollection']>, ParentType, ContextType, RequireFields<CmsAssetLinkingCollectionsHiringCompaniesArgs, 'limit' | 'skip'>>;
  legalDocuments?: Resolver<Maybe<ResolversTypes['CmsLegalDocumentCollection']>, ParentType, ContextType, RequireFields<CmsAssetLinkingCollectionsLegalDocumentsArgs, 'limit' | 'skip'>>;
  newsCoverages?: Resolver<Maybe<ResolversTypes['CmsNewsCoverageCollection']>, ParentType, ContextType, RequireFields<CmsAssetLinkingCollectionsNewsCoveragesArgs, 'limit' | 'skip'>>;
  pressPhotos?: Resolver<Maybe<ResolversTypes['CmsPressPhotoCollection']>, ParentType, ContextType, RequireFields<CmsAssetLinkingCollectionsPressPhotosArgs, 'limit' | 'skip'>>;
  programs?: Resolver<Maybe<ResolversTypes['CmsProgramCollection']>, ParentType, ContextType, RequireFields<CmsAssetLinkingCollectionsProgramsArgs, 'limit' | 'skip'>>;
  regions?: Resolver<Maybe<ResolversTypes['CmsRegionCollection']>, ParentType, ContextType, RequireFields<CmsAssetLinkingCollectionsRegionsArgs, 'limit' | 'skip'>>;
  socialMedias?: Resolver<Maybe<ResolversTypes['CmsSocialMediaCollection']>, ParentType, ContextType, RequireFields<CmsAssetLinkingCollectionsSocialMediasArgs, 'limit' | 'skip'>>;
  stockMusics?: Resolver<Maybe<ResolversTypes['CmsStockMusicCollection']>, ParentType, ContextType, RequireFields<CmsAssetLinkingCollectionsStockMusicsArgs, 'limit' | 'skip'>>;
  testimonials?: Resolver<Maybe<ResolversTypes['CmsTestimonialCollection']>, ParentType, ContextType, RequireFields<CmsAssetLinkingCollectionsTestimonialsArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsAwardResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsAward'] = ResolversParentTypes['CmsAward']> = ResolversObject<{
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsAwardDescriptionArgs>>;
  featured?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, Partial<CmsAwardFeaturedArgs>>;
  icon?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsAwardIconArgs>>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsAwardIdArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsAwardLinkingCollections']>, ParentType, ContextType, Partial<CmsAwardLinkedFromArgs>>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsAwardNameArgs>>;
  programs?: Resolver<Maybe<ResolversTypes['CmsAwardProgramsCollection']>, ParentType, ContextType, RequireFields<CmsAwardProgramsArgs, 'limit' | 'skip'>>;
  ranking?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType, Partial<CmsAwardRankingArgs>>;
  suggestedModifiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType, Partial<CmsAwardSuggestedModifiersArgs>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsAwardCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsAwardCollection'] = ResolversParentTypes['CmsAwardCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsAward']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsAwardLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsAwardLinkingCollections'] = ResolversParentTypes['CmsAwardLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsAwardLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsAwardProgramsCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsAwardProgramsCollection'] = ResolversParentTypes['CmsAwardProgramsCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsProgram']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsBadgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsBadge'] = ResolversParentTypes['CmsBadge']> = ResolversObject<{
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsBadgeDescriptionArgs>>;
  earnCriteria?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsBadgeEarnCriteriaArgs>>;
  earnMessage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsBadgeEarnMessageArgs>>;
  emoji?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsBadgeEmojiArgs>>;
  grantPermissionOverrideIDs?: Resolver<Maybe<ResolversTypes['CmsJSON']>, ParentType, ContextType, Partial<CmsBadgeGrantPermissionOverrideIDsArgs>>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsBadgeIdArgs>>;
  image?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsBadgeImageArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsBadgeLinkingCollections']>, ParentType, ContextType, Partial<CmsBadgeLinkedFromArgs>>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsBadgeNameArgs>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsBadgeCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsBadgeCollection'] = ResolversParentTypes['CmsBadgeCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsBadge']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsBadgeLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsBadgeLinkingCollections'] = ResolversParentTypes['CmsBadgeLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsBadgeLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsBumperResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsBumper'] = ResolversParentTypes['CmsBumper']> = ResolversObject<{
  ambient?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, Partial<CmsBumperAmbientArgs>>;
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsBumperLinkingCollections']>, ParentType, ContextType, Partial<CmsBumperLinkedFromArgs>>;
  purpose?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType, Partial<CmsBumperPurposeArgs>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsBumperTitleArgs>>;
  video?: Resolver<Maybe<ResolversTypes['CmsJSON']>, ParentType, ContextType, Partial<CmsBumperVideoArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsBumperCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsBumperCollection'] = ResolversParentTypes['CmsBumperCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsBumper']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsBumperLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsBumperLinkingCollections'] = ResolversParentTypes['CmsBumperLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsBumperLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface CmsCircleScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['CmsCircle'], any> {
  name: 'CmsCircle';
}

export type CmsCommunityPartnerResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsCommunityPartner'] = ResolversParentTypes['CmsCommunityPartner']> = ResolversObject<{
  audience?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType, Partial<CmsCommunityPartnerAudienceArgs>>;
  blurb?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsCommunityPartnerBlurbArgs>>;
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  cost?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType, Partial<CmsCommunityPartnerCostArgs>>;
  details?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsCommunityPartnerDetailsArgs>>;
  displayUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsCommunityPartnerDisplayUrlArgs>>;
  eligibility?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsCommunityPartnerEligibilityArgs>>;
  expires?: Resolver<Maybe<ResolversTypes['CmsDateTime']>, ParentType, ContextType, Partial<CmsCommunityPartnerExpiresArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsCommunityPartnerLinkingCollections']>, ParentType, ContextType, Partial<CmsCommunityPartnerLinkedFromArgs>>;
  logo?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsCommunityPartnerLogoArgs>>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsCommunityPartnerNameArgs>>;
  regions?: Resolver<Maybe<ResolversTypes['CmsCommunityPartnerRegionCollection']>, ParentType, ContextType, RequireFields<CmsCommunityPartnerRegionsArgs, 'limit' | 'skip'>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsCommunityPartnerUrlArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsCommunityPartnerCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsCommunityPartnerCollection'] = ResolversParentTypes['CmsCommunityPartnerCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsCommunityPartner']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsCommunityPartnerLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsCommunityPartnerLinkingCollections'] = ResolversParentTypes['CmsCommunityPartnerLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsCommunityPartnerLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsCommunityPartnerRegionCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsCommunityPartnerRegionCollection'] = ResolversParentTypes['CmsCommunityPartnerRegionCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsRegion']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsContentTypeStringResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsContentTypeString'] = ResolversParentTypes['CmsContentTypeString']> = ResolversObject<{
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  json?: Resolver<Maybe<ResolversTypes['CmsJSON']>, ParentType, ContextType, Partial<CmsContentTypeStringJsonArgs>>;
  key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsContentTypeStringKeyArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsContentTypeStringLinkingCollections']>, ParentType, ContextType, Partial<CmsContentTypeStringLinkedFromArgs>>;
  richValue?: Resolver<Maybe<ResolversTypes['CmsContentTypeStringRichValue']>, ParentType, ContextType, Partial<CmsContentTypeStringRichValueArgs>>;
  subvalues?: Resolver<Maybe<ResolversTypes['CmsContentTypeStringSubvalueCollection']>, ParentType, ContextType, RequireFields<CmsContentTypeStringSubvaluesArgs, 'limit' | 'skip'>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsContentTypeStringValueArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsContentTypeStringCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsContentTypeStringCollection'] = ResolversParentTypes['CmsContentTypeStringCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsContentTypeString']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsContentTypeStringLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsContentTypeStringLinkingCollections'] = ResolversParentTypes['CmsContentTypeStringLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsContentTypeStringLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  strings?: Resolver<Maybe<ResolversTypes['CmsContentTypeStringCollection']>, ParentType, ContextType, RequireFields<CmsContentTypeStringLinkingCollectionsStringsArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsContentTypeStringRichValueResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsContentTypeStringRichValue'] = ResolversParentTypes['CmsContentTypeStringRichValue']> = ResolversObject<{
  json?: Resolver<ResolversTypes['CmsJSON'], ParentType, ContextType>;
  links?: Resolver<ResolversTypes['CmsContentTypeStringRichValueLinks'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsContentTypeStringRichValueAssetsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsContentTypeStringRichValueAssets'] = ResolversParentTypes['CmsContentTypeStringRichValueAssets']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsContentTypeStringRichValueEntriesResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsContentTypeStringRichValueEntries'] = ResolversParentTypes['CmsContentTypeStringRichValueEntries']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  inline?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsContentTypeStringRichValueLinksResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsContentTypeStringRichValueLinks'] = ResolversParentTypes['CmsContentTypeStringRichValueLinks']> = ResolversObject<{
  assets?: Resolver<ResolversTypes['CmsContentTypeStringRichValueAssets'], ParentType, ContextType>;
  entries?: Resolver<ResolversTypes['CmsContentTypeStringRichValueEntries'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsContentTypeStringSubvalueCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsContentTypeStringSubvalueCollection'] = ResolversParentTypes['CmsContentTypeStringSubvalueCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsContentTypeString']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsContentfulMetadataResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsContentfulMetadata'] = ResolversParentTypes['CmsContentfulMetadata']> = ResolversObject<{
  tags?: Resolver<Array<Maybe<ResolversTypes['CmsContentfulTag']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsContentfulTagResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsContentfulTag'] = ResolversParentTypes['CmsContentfulTag']> = ResolversObject<{
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface CmsDateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['CmsDateTime'], any> {
  name: 'CmsDateTime';
}

export interface CmsDimensionScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['CmsDimension'], any> {
  name: 'CmsDimension';
}

export type CmsEntryResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsEntry'] = ResolversParentTypes['CmsEntry']> = ResolversObject<{
  __resolveType: TypeResolveFn<'CmsAnnouncement' | 'CmsAward' | 'CmsBadge' | 'CmsBumper' | 'CmsCommunityPartner' | 'CmsContentTypeString' | 'CmsEvent' | 'CmsEventRestriction' | 'CmsFaq' | 'CmsForm' | 'CmsGlobalSponsor' | 'CmsHiringCompany' | 'CmsHiringPost' | 'CmsLegalDocument' | 'CmsLocalizationConfig' | 'CmsNewsCoverage' | 'CmsPressPhoto' | 'CmsProgram' | 'CmsRegion' | 'CmsSite' | 'CmsSocialMedia' | 'CmsStockMusic' | 'CmsTestimonial', ParentType, ContextType>;
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
}>;

export type CmsEntryCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsEntryCollection'] = ResolversParentTypes['CmsEntryCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsEventResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsEvent'] = ResolversParentTypes['CmsEvent']> = ResolversObject<{
  awardsAt?: Resolver<Maybe<ResolversTypes['CmsDateTime']>, ParentType, ContextType, Partial<CmsEventAwardsAtArgs>>;
  calendarReleaseDate?: Resolver<Maybe<ResolversTypes['CmsDateTime']>, ParentType, ContextType, Partial<CmsEventCalendarReleaseDateArgs>>;
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  endsAt?: Resolver<Maybe<ResolversTypes['CmsDateTime']>, ParentType, ContextType, Partial<CmsEventEndsAtArgs>>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsEventIdArgs>>;
  kickoffVideo?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsEventKickoffVideoArgs>>;
  kickoffVideoCaptions?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsEventKickoffVideoCaptionsArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsEventLinkingCollections']>, ParentType, ContextType, Partial<CmsEventLinkedFromArgs>>;
  notice?: Resolver<Maybe<ResolversTypes['CmsEventNotice']>, ParentType, ContextType, Partial<CmsEventNoticeArgs>>;
  participantRoleId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsEventParticipantRoleIdArgs>>;
  posters?: Resolver<Maybe<ResolversTypes['CmsAssetCollection']>, ParentType, ContextType, RequireFields<CmsEventPostersArgs, 'limit' | 'skip'>>;
  program?: Resolver<Maybe<ResolversTypes['CmsProgram']>, ParentType, ContextType, Partial<CmsEventProgramArgs>>;
  registrationsCloseAt?: Resolver<Maybe<ResolversTypes['CmsDateTime']>, ParentType, ContextType, Partial<CmsEventRegistrationsCloseAtArgs>>;
  registrationsOpenAt?: Resolver<Maybe<ResolversTypes['CmsDateTime']>, ParentType, ContextType, Partial<CmsEventRegistrationsOpenAtArgs>>;
  startsAt?: Resolver<Maybe<ResolversTypes['CmsDateTime']>, ParentType, ContextType, Partial<CmsEventStartsAtArgs>>;
  statEventCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType, Partial<CmsEventStatEventCountArgs>>;
  statLowInterestContinuedCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType, Partial<CmsEventStatLowInterestContinuedCountArgs>>;
  statLowInterestCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType, Partial<CmsEventStatLowInterestCountArgs>>;
  statStudentCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType, Partial<CmsEventStatStudentCountArgs>>;
  subEventIds?: Resolver<Maybe<ResolversTypes['CmsJSON']>, ParentType, ContextType, Partial<CmsEventSubEventIdsArgs>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  theme?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsEventThemeArgs>>;
  themeBackgrounds?: Resolver<Maybe<ResolversTypes['CmsAssetCollection']>, ParentType, ContextType, RequireFields<CmsEventThemeBackgroundsArgs, 'limit' | 'skip'>>;
  themeLogoBackgrounds?: Resolver<Maybe<ResolversTypes['CmsAssetCollection']>, ParentType, ContextType, RequireFields<CmsEventThemeLogoBackgroundsArgs, 'limit' | 'skip'>>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsEventTitleArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsEventCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsEventCollection'] = ResolversParentTypes['CmsEventCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsEvent']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsEventLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsEventLinkingCollections'] = ResolversParentTypes['CmsEventLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsEventLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  pressPhotos?: Resolver<Maybe<ResolversTypes['CmsPressPhotoCollection']>, ParentType, ContextType, RequireFields<CmsEventLinkingCollectionsPressPhotosArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsEventNoticeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsEventNotice'] = ResolversParentTypes['CmsEventNotice']> = ResolversObject<{
  json?: Resolver<ResolversTypes['CmsJSON'], ParentType, ContextType>;
  links?: Resolver<ResolversTypes['CmsEventNoticeLinks'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsEventNoticeAssetsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsEventNoticeAssets'] = ResolversParentTypes['CmsEventNoticeAssets']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsEventNoticeEntriesResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsEventNoticeEntries'] = ResolversParentTypes['CmsEventNoticeEntries']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  inline?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsEventNoticeLinksResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsEventNoticeLinks'] = ResolversParentTypes['CmsEventNoticeLinks']> = ResolversObject<{
  assets?: Resolver<ResolversTypes['CmsEventNoticeAssets'], ParentType, ContextType>;
  entries?: Resolver<ResolversTypes['CmsEventNoticeEntries'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsEventRestrictionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsEventRestriction'] = ResolversParentTypes['CmsEventRestriction']> = ResolversObject<{
  applicablePrograms?: Resolver<Maybe<ResolversTypes['CmsEventRestrictionApplicableProgramsCollection']>, ParentType, ContextType, RequireFields<CmsEventRestrictionApplicableProgramsArgs, 'limit' | 'skip'>>;
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  details?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsEventRestrictionDetailsArgs>>;
  icon?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsEventRestrictionIconArgs>>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsEventRestrictionIdArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsEventRestrictionLinkingCollections']>, ParentType, ContextType, Partial<CmsEventRestrictionLinkedFromArgs>>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsEventRestrictionNameArgs>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsEventRestrictionTitleArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsEventRestrictionApplicableProgramsCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsEventRestrictionApplicableProgramsCollection'] = ResolversParentTypes['CmsEventRestrictionApplicableProgramsCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsProgram']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsEventRestrictionCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsEventRestrictionCollection'] = ResolversParentTypes['CmsEventRestrictionCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsEventRestriction']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsEventRestrictionLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsEventRestrictionLinkingCollections'] = ResolversParentTypes['CmsEventRestrictionLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsEventRestrictionLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  localizationConfigs?: Resolver<Maybe<ResolversTypes['CmsLocalizationConfigCollection']>, ParentType, ContextType, RequireFields<CmsEventRestrictionLinkingCollectionsLocalizationConfigsArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsFaqResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsFaq'] = ResolversParentTypes['CmsFaq']> = ResolversObject<{
  answer?: Resolver<Maybe<ResolversTypes['CmsFaqAnswer']>, ParentType, ContextType, Partial<CmsFaqAnswerArgs>>;
  audience?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType, Partial<CmsFaqAudienceArgs>>;
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  featured?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, Partial<CmsFaqFeaturedArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsFaqLinkingCollections']>, ParentType, ContextType, Partial<CmsFaqLinkedFromArgs>>;
  program?: Resolver<Maybe<ResolversTypes['CmsProgram']>, ParentType, ContextType, Partial<CmsFaqProgramArgs>>;
  relatedAnswers?: Resolver<Maybe<ResolversTypes['CmsFaqRelatedAnswersCollection']>, ParentType, ContextType, RequireFields<CmsFaqRelatedAnswersArgs, 'limit' | 'skip'>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType, Partial<CmsFaqTagsArgs>>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsFaqTitleArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsFaqAnswerResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsFaqAnswer'] = ResolversParentTypes['CmsFaqAnswer']> = ResolversObject<{
  json?: Resolver<ResolversTypes['CmsJSON'], ParentType, ContextType>;
  links?: Resolver<ResolversTypes['CmsFaqAnswerLinks'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsFaqAnswerAssetsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsFaqAnswerAssets'] = ResolversParentTypes['CmsFaqAnswerAssets']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsFaqAnswerEntriesResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsFaqAnswerEntries'] = ResolversParentTypes['CmsFaqAnswerEntries']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  inline?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsFaqAnswerLinksResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsFaqAnswerLinks'] = ResolversParentTypes['CmsFaqAnswerLinks']> = ResolversObject<{
  assets?: Resolver<ResolversTypes['CmsFaqAnswerAssets'], ParentType, ContextType>;
  entries?: Resolver<ResolversTypes['CmsFaqAnswerEntries'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsFaqCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsFaqCollection'] = ResolversParentTypes['CmsFaqCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsFaq']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsFaqLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsFaqLinkingCollections'] = ResolversParentTypes['CmsFaqLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsFaqLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  faqs?: Resolver<Maybe<ResolversTypes['CmsFaqCollection']>, ParentType, ContextType, RequireFields<CmsFaqLinkingCollectionsFaqsArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsFaqRelatedAnswersCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsFaqRelatedAnswersCollection'] = ResolversParentTypes['CmsFaqRelatedAnswersCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsFaq']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsFormResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsForm'] = ResolversParentTypes['CmsForm']> = ResolversObject<{
  cognitoForm?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType, Partial<CmsFormCognitoFormArgs>>;
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  details?: Resolver<Maybe<ResolversTypes['CmsFormDetails']>, ParentType, ContextType, Partial<CmsFormDetailsArgs>>;
  image?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsFormImageArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsFormLinkingCollections']>, ParentType, ContextType, Partial<CmsFormLinkedFromArgs>>;
  prefill?: Resolver<Maybe<ResolversTypes['CmsJSON']>, ParentType, ContextType, Partial<CmsFormPrefillArgs>>;
  sidebar?: Resolver<Maybe<ResolversTypes['CmsFormSidebar']>, ParentType, ContextType, Partial<CmsFormSidebarArgs>>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsFormSlugArgs>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsFormTitleArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsFormCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsFormCollection'] = ResolversParentTypes['CmsFormCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsForm']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsFormDetailsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsFormDetails'] = ResolversParentTypes['CmsFormDetails']> = ResolversObject<{
  json?: Resolver<ResolversTypes['CmsJSON'], ParentType, ContextType>;
  links?: Resolver<ResolversTypes['CmsFormDetailsLinks'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsFormDetailsAssetsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsFormDetailsAssets'] = ResolversParentTypes['CmsFormDetailsAssets']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsFormDetailsEntriesResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsFormDetailsEntries'] = ResolversParentTypes['CmsFormDetailsEntries']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  inline?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsFormDetailsLinksResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsFormDetailsLinks'] = ResolversParentTypes['CmsFormDetailsLinks']> = ResolversObject<{
  assets?: Resolver<ResolversTypes['CmsFormDetailsAssets'], ParentType, ContextType>;
  entries?: Resolver<ResolversTypes['CmsFormDetailsEntries'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsFormLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsFormLinkingCollections'] = ResolversParentTypes['CmsFormLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsFormLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsFormSidebarResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsFormSidebar'] = ResolversParentTypes['CmsFormSidebar']> = ResolversObject<{
  json?: Resolver<ResolversTypes['CmsJSON'], ParentType, ContextType>;
  links?: Resolver<ResolversTypes['CmsFormSidebarLinks'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsFormSidebarAssetsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsFormSidebarAssets'] = ResolversParentTypes['CmsFormSidebarAssets']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsFormSidebarEntriesResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsFormSidebarEntries'] = ResolversParentTypes['CmsFormSidebarEntries']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  inline?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsFormSidebarLinksResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsFormSidebarLinks'] = ResolversParentTypes['CmsFormSidebarLinks']> = ResolversObject<{
  assets?: Resolver<ResolversTypes['CmsFormSidebarAssets'], ParentType, ContextType>;
  entries?: Resolver<ResolversTypes['CmsFormSidebarEntries'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsGlobalSponsorResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsGlobalSponsor'] = ResolversParentTypes['CmsGlobalSponsor']> = ResolversObject<{
  audio?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsGlobalSponsorAudioArgs>>;
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  darkLogo?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsGlobalSponsorDarkLogoArgs>>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsGlobalSponsorDescriptionArgs>>;
  instagramUsername?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsGlobalSponsorInstagramUsernameArgs>>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsGlobalSponsorLinkArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsGlobalSponsorLinkingCollections']>, ParentType, ContextType, Partial<CmsGlobalSponsorLinkedFromArgs>>;
  logo?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsGlobalSponsorLogoArgs>>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsGlobalSponsorNameArgs>>;
  perks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsGlobalSponsorPerksArgs>>;
  shortDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsGlobalSponsorShortDescriptionArgs>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  twitterUsername?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsGlobalSponsorTwitterUsernameArgs>>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsGlobalSponsorTypeArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsGlobalSponsorCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsGlobalSponsorCollection'] = ResolversParentTypes['CmsGlobalSponsorCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsGlobalSponsor']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsGlobalSponsorLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsGlobalSponsorLinkingCollections'] = ResolversParentTypes['CmsGlobalSponsorLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsGlobalSponsorLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  hiringCompanies?: Resolver<Maybe<ResolversTypes['CmsHiringCompanyCollection']>, ParentType, ContextType, RequireFields<CmsGlobalSponsorLinkingCollectionsHiringCompaniesArgs, 'limit' | 'skip'>>;
  programs?: Resolver<Maybe<ResolversTypes['CmsProgramCollection']>, ParentType, ContextType, RequireFields<CmsGlobalSponsorLinkingCollectionsProgramsArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface CmsHexColorScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['CmsHexColor'], any> {
  name: 'CmsHexColor';
}

export type CmsHiringCompanyResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsHiringCompany'] = ResolversParentTypes['CmsHiringCompany']> = ResolversObject<{
  alumniReferralAccounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['AccountUser']>>>, ParentType, ContextType>;
  alumniReferrals?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType, Partial<CmsHiringCompanyAlumniReferralsArgs>>;
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['CmsHiringCompanyDescription']>, ParentType, ContextType, Partial<CmsHiringCompanyDescriptionArgs>>;
  featured?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, Partial<CmsHiringCompanyFeaturedArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsHiringCompanyLinkingCollections']>, ParentType, ContextType, Partial<CmsHiringCompanyLinkedFromArgs>>;
  logo?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsHiringCompanyLogoArgs>>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsHiringCompanyNameArgs>>;
  relatedSponsor?: Resolver<Maybe<ResolversTypes['CmsGlobalSponsor']>, ParentType, ContextType, Partial<CmsHiringCompanyRelatedSponsorArgs>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsHiringCompanyUrlArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsHiringCompanyCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsHiringCompanyCollection'] = ResolversParentTypes['CmsHiringCompanyCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsHiringCompany']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsHiringCompanyDescriptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsHiringCompanyDescription'] = ResolversParentTypes['CmsHiringCompanyDescription']> = ResolversObject<{
  json?: Resolver<ResolversTypes['CmsJSON'], ParentType, ContextType>;
  links?: Resolver<ResolversTypes['CmsHiringCompanyDescriptionLinks'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsHiringCompanyDescriptionAssetsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsHiringCompanyDescriptionAssets'] = ResolversParentTypes['CmsHiringCompanyDescriptionAssets']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsHiringCompanyDescriptionEntriesResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsHiringCompanyDescriptionEntries'] = ResolversParentTypes['CmsHiringCompanyDescriptionEntries']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  inline?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsHiringCompanyDescriptionLinksResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsHiringCompanyDescriptionLinks'] = ResolversParentTypes['CmsHiringCompanyDescriptionLinks']> = ResolversObject<{
  assets?: Resolver<ResolversTypes['CmsHiringCompanyDescriptionAssets'], ParentType, ContextType>;
  entries?: Resolver<ResolversTypes['CmsHiringCompanyDescriptionEntries'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsHiringCompanyLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsHiringCompanyLinkingCollections'] = ResolversParentTypes['CmsHiringCompanyLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsHiringCompanyLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  hiringPosts?: Resolver<Maybe<ResolversTypes['CmsHiringPostCollection']>, ParentType, ContextType, RequireFields<CmsHiringCompanyLinkingCollectionsHiringPostsArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsHiringPostResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsHiringPost'] = ResolversParentTypes['CmsHiringPost']> = ResolversObject<{
  company?: Resolver<Maybe<ResolversTypes['CmsHiringCompany']>, ParentType, ContextType, Partial<CmsHiringPostCompanyArgs>>;
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['CmsHiringPostDescription']>, ParentType, ContextType, Partial<CmsHiringPostDescriptionArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsHiringPostLinkingCollections']>, ParentType, ContextType, Partial<CmsHiringPostLinkedFromArgs>>;
  paid?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, Partial<CmsHiringPostPaidArgs>>;
  regions?: Resolver<Maybe<ResolversTypes['CmsHiringPostRegionsCollection']>, ParentType, ContextType, RequireFields<CmsHiringPostRegionsArgs, 'limit' | 'skip'>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsHiringPostTitleArgs>>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsHiringPostTypeArgs>>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsHiringPostUrlArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsHiringPostCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsHiringPostCollection'] = ResolversParentTypes['CmsHiringPostCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsHiringPost']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsHiringPostDescriptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsHiringPostDescription'] = ResolversParentTypes['CmsHiringPostDescription']> = ResolversObject<{
  json?: Resolver<ResolversTypes['CmsJSON'], ParentType, ContextType>;
  links?: Resolver<ResolversTypes['CmsHiringPostDescriptionLinks'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsHiringPostDescriptionAssetsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsHiringPostDescriptionAssets'] = ResolversParentTypes['CmsHiringPostDescriptionAssets']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsHiringPostDescriptionEntriesResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsHiringPostDescriptionEntries'] = ResolversParentTypes['CmsHiringPostDescriptionEntries']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  inline?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsHiringPostDescriptionLinksResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsHiringPostDescriptionLinks'] = ResolversParentTypes['CmsHiringPostDescriptionLinks']> = ResolversObject<{
  assets?: Resolver<ResolversTypes['CmsHiringPostDescriptionAssets'], ParentType, ContextType>;
  entries?: Resolver<ResolversTypes['CmsHiringPostDescriptionEntries'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsHiringPostLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsHiringPostLinkingCollections'] = ResolversParentTypes['CmsHiringPostLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsHiringPostLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsHiringPostRegionsCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsHiringPostRegionsCollection'] = ResolversParentTypes['CmsHiringPostRegionsCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsRegion']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface CmsJsonScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['CmsJSON'], any> {
  name: 'CmsJSON';
}

export type CmsLegalDocumentResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsLegalDocument'] = ResolversParentTypes['CmsLegalDocument']> = ResolversObject<{
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  date?: Resolver<Maybe<ResolversTypes['CmsDateTime']>, ParentType, ContextType, Partial<CmsLegalDocumentDateArgs>>;
  file?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsLegalDocumentFileArgs>>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsLegalDocumentIdArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsLegalDocumentLinkingCollections']>, ParentType, ContextType, Partial<CmsLegalDocumentLinkedFromArgs>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsLegalDocumentTitleArgs>>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsLegalDocumentTypeArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsLegalDocumentCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsLegalDocumentCollection'] = ResolversParentTypes['CmsLegalDocumentCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsLegalDocument']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsLegalDocumentLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsLegalDocumentLinkingCollections'] = ResolversParentTypes['CmsLegalDocumentLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsLegalDocumentLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsLocalizationConfigResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsLocalizationConfig'] = ResolversParentTypes['CmsLocalizationConfig']> = ResolversObject<{
  contactDefaultType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsLocalizationConfigContactDefaultTypeArgs>>;
  contactDefaultValue?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsLocalizationConfigContactDefaultValueArgs>>;
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  countryName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsLocalizationConfigCountryNameArgs>>;
  countryNameAdjective?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsLocalizationConfigCountryNameAdjectiveArgs>>;
  countryNameShort?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsLocalizationConfigCountryNameShortArgs>>;
  countryNameShortAdjective?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsLocalizationConfigCountryNameShortAdjectiveArgs>>;
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsLocalizationConfigCurrencyArgs>>;
  currencySymbol?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsLocalizationConfigCurrencySymbolArgs>>;
  e164CountryCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsLocalizationConfigE164CountryCodeArgs>>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsLocalizationConfigIdArgs>>;
  iso3166Alpha2Code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsLocalizationConfigIso3166Alpha2CodeArgs>>;
  iso3166Alpha3Code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsLocalizationConfigIso3166Alpha3CodeArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsLocalizationConfigLinkingCollections']>, ParentType, ContextType, Partial<CmsLocalizationConfigLinkedFromArgs>>;
  locale?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsLocalizationConfigLocaleArgs>>;
  messagingServices?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType, Partial<CmsLocalizationConfigMessagingServicesArgs>>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsLocalizationConfigNameArgs>>;
  paymentProviders?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType, Partial<CmsLocalizationConfigPaymentProvidersArgs>>;
  requiredEventRestrictions?: Resolver<Maybe<ResolversTypes['CmsLocalizationConfigRequiredEventRestrictionsCollection']>, ParentType, ContextType, RequireFields<CmsLocalizationConfigRequiredEventRestrictionsArgs, 'limit' | 'skip'>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  use24HourTime?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, Partial<CmsLocalizationConfigUse24HourTimeArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsLocalizationConfigCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsLocalizationConfigCollection'] = ResolversParentTypes['CmsLocalizationConfigCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsLocalizationConfig']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsLocalizationConfigLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsLocalizationConfigLinkingCollections'] = ResolversParentTypes['CmsLocalizationConfigLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsLocalizationConfigLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  regions?: Resolver<Maybe<ResolversTypes['CmsRegionCollection']>, ParentType, ContextType, RequireFields<CmsLocalizationConfigLinkingCollectionsRegionsArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsLocalizationConfigRequiredEventRestrictionsCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsLocalizationConfigRequiredEventRestrictionsCollection'] = ResolversParentTypes['CmsLocalizationConfigRequiredEventRestrictionsCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsEventRestriction']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsLocationResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsLocation'] = ResolversParentTypes['CmsLocation']> = ResolversObject<{
  lat?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  lon?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsNewsCoverageResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsNewsCoverage'] = ResolversParentTypes['CmsNewsCoverage']> = ResolversObject<{
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  date?: Resolver<Maybe<ResolversTypes['CmsDateTime']>, ParentType, ContextType, Partial<CmsNewsCoverageDateArgs>>;
  featured?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, Partial<CmsNewsCoverageFeaturedArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsNewsCoverageLinkingCollections']>, ParentType, ContextType, Partial<CmsNewsCoverageLinkedFromArgs>>;
  publicationLogo?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsNewsCoveragePublicationLogoArgs>>;
  publicationName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsNewsCoveragePublicationNameArgs>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsNewsCoverageTitleArgs>>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsNewsCoverageUrlArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsNewsCoverageCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsNewsCoverageCollection'] = ResolversParentTypes['CmsNewsCoverageCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsNewsCoverage']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsNewsCoverageLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsNewsCoverageLinkingCollections'] = ResolversParentTypes['CmsNewsCoverageLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsNewsCoverageLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsPressPhotoResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsPressPhoto'] = ResolversParentTypes['CmsPressPhoto']> = ResolversObject<{
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  event?: Resolver<Maybe<ResolversTypes['CmsEvent']>, ParentType, ContextType, Partial<CmsPressPhotoEventArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsPressPhotoLinkingCollections']>, ParentType, ContextType, Partial<CmsPressPhotoLinkedFromArgs>>;
  photo?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsPressPhotoPhotoArgs>>;
  region?: Resolver<Maybe<ResolversTypes['CmsRegion']>, ParentType, ContextType, Partial<CmsPressPhotoRegionArgs>>;
  subProgram?: Resolver<Maybe<ResolversTypes['CmsProgram']>, ParentType, ContextType, Partial<CmsPressPhotoSubProgramArgs>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  tags?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType, Partial<CmsPressPhotoTagsArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsPressPhotoCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsPressPhotoCollection'] = ResolversParentTypes['CmsPressPhotoCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsPressPhoto']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsPressPhotoLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsPressPhotoLinkingCollections'] = ResolversParentTypes['CmsPressPhotoLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsPressPhotoLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgram'] = ResolversParentTypes['CmsProgram']> = ResolversObject<{
  archived?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, Partial<CmsProgramArchivedArgs>>;
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsProgramDescriptionArgs>>;
  educationDetails?: Resolver<Maybe<ResolversTypes['CmsProgramEducationDetails']>, ParentType, ContextType, Partial<CmsProgramEducationDetailsArgs>>;
  eligibility?: Resolver<Maybe<ResolversTypes['CmsProgramEligibility']>, ParentType, ContextType, Partial<CmsProgramEligibilityArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsProgramLinkingCollections']>, ParentType, ContextType, Partial<CmsProgramLinkedFromArgs>>;
  logo?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsProgramLogoArgs>>;
  logoWhite?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsProgramLogoWhiteArgs>>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsProgramNameArgs>>;
  posters?: Resolver<Maybe<ResolversTypes['CmsAssetCollection']>, ParentType, ContextType, RequireFields<CmsProgramPostersArgs, 'limit' | 'skip'>>;
  presentingSponsors?: Resolver<Maybe<ResolversTypes['CmsProgramPresentingSponsorsCollection']>, ParentType, ContextType, RequireFields<CmsProgramPresentingSponsorsArgs, 'limit' | 'skip'>>;
  shortDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsProgramShortDescriptionArgs>>;
  sponsorPerks?: Resolver<Maybe<ResolversTypes['CmsJSON']>, ParentType, ContextType, Partial<CmsProgramSponsorPerksArgs>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsProgramTypeArgs>>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsProgramUrlArgs>>;
  virtual?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, Partial<CmsProgramVirtualArgs>>;
  volunteerBlurb?: Resolver<Maybe<ResolversTypes['CmsProgramVolunteerBlurb']>, ParentType, ContextType, Partial<CmsProgramVolunteerBlurbArgs>>;
  volunteerDetails?: Resolver<Maybe<ResolversTypes['CmsProgramVolunteerDetails']>, ParentType, ContextType, Partial<CmsProgramVolunteerDetailsArgs>>;
  volunteerPositions?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType, Partial<CmsProgramVolunteerPositionsArgs>>;
  volunteerRecruitingResources?: Resolver<Maybe<ResolversTypes['CmsAssetCollection']>, ParentType, ContextType, RequireFields<CmsProgramVolunteerRecruitingResourcesArgs, 'limit' | 'skip'>>;
  volunteerUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsProgramVolunteerUrlArgs>>;
  webname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsProgramWebnameArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgramCollection'] = ResolversParentTypes['CmsProgramCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsProgram']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramEducationDetailsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgramEducationDetails'] = ResolversParentTypes['CmsProgramEducationDetails']> = ResolversObject<{
  json?: Resolver<ResolversTypes['CmsJSON'], ParentType, ContextType>;
  links?: Resolver<ResolversTypes['CmsProgramEducationDetailsLinks'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramEducationDetailsAssetsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgramEducationDetailsAssets'] = ResolversParentTypes['CmsProgramEducationDetailsAssets']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramEducationDetailsEntriesResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgramEducationDetailsEntries'] = ResolversParentTypes['CmsProgramEducationDetailsEntries']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  inline?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramEducationDetailsLinksResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgramEducationDetailsLinks'] = ResolversParentTypes['CmsProgramEducationDetailsLinks']> = ResolversObject<{
  assets?: Resolver<ResolversTypes['CmsProgramEducationDetailsAssets'], ParentType, ContextType>;
  entries?: Resolver<ResolversTypes['CmsProgramEducationDetailsEntries'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramEligibilityResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgramEligibility'] = ResolversParentTypes['CmsProgramEligibility']> = ResolversObject<{
  json?: Resolver<ResolversTypes['CmsJSON'], ParentType, ContextType>;
  links?: Resolver<ResolversTypes['CmsProgramEligibilityLinks'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramEligibilityAssetsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgramEligibilityAssets'] = ResolversParentTypes['CmsProgramEligibilityAssets']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramEligibilityEntriesResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgramEligibilityEntries'] = ResolversParentTypes['CmsProgramEligibilityEntries']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  inline?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramEligibilityLinksResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgramEligibilityLinks'] = ResolversParentTypes['CmsProgramEligibilityLinks']> = ResolversObject<{
  assets?: Resolver<ResolversTypes['CmsProgramEligibilityAssets'], ParentType, ContextType>;
  entries?: Resolver<ResolversTypes['CmsProgramEligibilityEntries'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgramLinkingCollections'] = ResolversParentTypes['CmsProgramLinkingCollections']> = ResolversObject<{
  announcements?: Resolver<Maybe<ResolversTypes['CmsAnnouncementCollection']>, ParentType, ContextType, RequireFields<CmsProgramLinkingCollectionsAnnouncementsArgs, 'limit' | 'skip'>>;
  awards?: Resolver<Maybe<ResolversTypes['CmsAwardCollection']>, ParentType, ContextType, RequireFields<CmsProgramLinkingCollectionsAwardsArgs, 'limit' | 'skip'>>;
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsProgramLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  eventRestrictions?: Resolver<Maybe<ResolversTypes['CmsEventRestrictionCollection']>, ParentType, ContextType, RequireFields<CmsProgramLinkingCollectionsEventRestrictionsArgs, 'limit' | 'skip'>>;
  events?: Resolver<Maybe<ResolversTypes['CmsEventCollection']>, ParentType, ContextType, RequireFields<CmsProgramLinkingCollectionsEventsArgs, 'limit' | 'skip'>>;
  faqs?: Resolver<Maybe<ResolversTypes['CmsFaqCollection']>, ParentType, ContextType, RequireFields<CmsProgramLinkingCollectionsFaqsArgs, 'limit' | 'skip'>>;
  pressPhotos?: Resolver<Maybe<ResolversTypes['CmsPressPhotoCollection']>, ParentType, ContextType, RequireFields<CmsProgramLinkingCollectionsPressPhotosArgs, 'limit' | 'skip'>>;
  testimonials?: Resolver<Maybe<ResolversTypes['CmsTestimonialCollection']>, ParentType, ContextType, RequireFields<CmsProgramLinkingCollectionsTestimonialsArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramPresentingSponsorsCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgramPresentingSponsorsCollection'] = ResolversParentTypes['CmsProgramPresentingSponsorsCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsGlobalSponsor']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramVolunteerBlurbResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgramVolunteerBlurb'] = ResolversParentTypes['CmsProgramVolunteerBlurb']> = ResolversObject<{
  json?: Resolver<ResolversTypes['CmsJSON'], ParentType, ContextType>;
  links?: Resolver<ResolversTypes['CmsProgramVolunteerBlurbLinks'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramVolunteerBlurbAssetsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgramVolunteerBlurbAssets'] = ResolversParentTypes['CmsProgramVolunteerBlurbAssets']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramVolunteerBlurbEntriesResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgramVolunteerBlurbEntries'] = ResolversParentTypes['CmsProgramVolunteerBlurbEntries']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  inline?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramVolunteerBlurbLinksResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgramVolunteerBlurbLinks'] = ResolversParentTypes['CmsProgramVolunteerBlurbLinks']> = ResolversObject<{
  assets?: Resolver<ResolversTypes['CmsProgramVolunteerBlurbAssets'], ParentType, ContextType>;
  entries?: Resolver<ResolversTypes['CmsProgramVolunteerBlurbEntries'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramVolunteerDetailsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgramVolunteerDetails'] = ResolversParentTypes['CmsProgramVolunteerDetails']> = ResolversObject<{
  json?: Resolver<ResolversTypes['CmsJSON'], ParentType, ContextType>;
  links?: Resolver<ResolversTypes['CmsProgramVolunteerDetailsLinks'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramVolunteerDetailsAssetsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgramVolunteerDetailsAssets'] = ResolversParentTypes['CmsProgramVolunteerDetailsAssets']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsAsset']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramVolunteerDetailsEntriesResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgramVolunteerDetailsEntries'] = ResolversParentTypes['CmsProgramVolunteerDetailsEntries']> = ResolversObject<{
  block?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  hyperlink?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  inline?: Resolver<Array<Maybe<ResolversTypes['CmsEntry']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsProgramVolunteerDetailsLinksResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsProgramVolunteerDetailsLinks'] = ResolversParentTypes['CmsProgramVolunteerDetailsLinks']> = ResolversObject<{
  assets?: Resolver<ResolversTypes['CmsProgramVolunteerDetailsAssets'], ParentType, ContextType>;
  entries?: Resolver<ResolversTypes['CmsProgramVolunteerDetailsEntries'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface CmsQualityScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['CmsQuality'], any> {
  name: 'CmsQuality';
}

export type CmsQueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsQuery'] = ResolversParentTypes['CmsQuery']> = ResolversObject<{
  announcement?: Resolver<Maybe<ResolversTypes['CmsAnnouncement']>, ParentType, ContextType, RequireFields<CmsQueryAnnouncementArgs, 'id'>>;
  announcements?: Resolver<Maybe<ResolversTypes['CmsAnnouncementCollection']>, ParentType, ContextType, RequireFields<CmsQueryAnnouncementsArgs, 'limit' | 'skip'>>;
  asset?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, RequireFields<CmsQueryAssetArgs, 'id'>>;
  assets?: Resolver<Maybe<ResolversTypes['CmsAssetCollection']>, ParentType, ContextType, RequireFields<CmsQueryAssetsArgs, 'limit' | 'skip'>>;
  award?: Resolver<Maybe<ResolversTypes['CmsAward']>, ParentType, ContextType, RequireFields<CmsQueryAwardArgs, 'id'>>;
  awards?: Resolver<Maybe<ResolversTypes['CmsAwardCollection']>, ParentType, ContextType, RequireFields<CmsQueryAwardsArgs, 'limit' | 'skip'>>;
  badge?: Resolver<Maybe<ResolversTypes['CmsBadge']>, ParentType, ContextType, RequireFields<CmsQueryBadgeArgs, 'id'>>;
  badges?: Resolver<Maybe<ResolversTypes['CmsBadgeCollection']>, ParentType, ContextType, RequireFields<CmsQueryBadgesArgs, 'limit' | 'skip'>>;
  bumper?: Resolver<Maybe<ResolversTypes['CmsBumper']>, ParentType, ContextType, RequireFields<CmsQueryBumperArgs, 'id'>>;
  bumpers?: Resolver<Maybe<ResolversTypes['CmsBumperCollection']>, ParentType, ContextType, RequireFields<CmsQueryBumpersArgs, 'limit' | 'skip'>>;
  communityPartner?: Resolver<Maybe<ResolversTypes['CmsCommunityPartner']>, ParentType, ContextType, RequireFields<CmsQueryCommunityPartnerArgs, 'id'>>;
  communityPartners?: Resolver<Maybe<ResolversTypes['CmsCommunityPartnerCollection']>, ParentType, ContextType, RequireFields<CmsQueryCommunityPartnersArgs, 'limit' | 'skip'>>;
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsQueryEntriesArgs, 'limit' | 'skip'>>;
  event?: Resolver<Maybe<ResolversTypes['CmsEvent']>, ParentType, ContextType, RequireFields<CmsQueryEventArgs, 'id'>>;
  eventRestriction?: Resolver<Maybe<ResolversTypes['CmsEventRestriction']>, ParentType, ContextType, RequireFields<CmsQueryEventRestrictionArgs, 'id'>>;
  eventRestrictions?: Resolver<Maybe<ResolversTypes['CmsEventRestrictionCollection']>, ParentType, ContextType, RequireFields<CmsQueryEventRestrictionsArgs, 'limit' | 'skip'>>;
  events?: Resolver<Maybe<ResolversTypes['CmsEventCollection']>, ParentType, ContextType, RequireFields<CmsQueryEventsArgs, 'limit' | 'skip'>>;
  faq?: Resolver<Maybe<ResolversTypes['CmsFaq']>, ParentType, ContextType, RequireFields<CmsQueryFaqArgs, 'id'>>;
  faqs?: Resolver<Maybe<ResolversTypes['CmsFaqCollection']>, ParentType, ContextType, RequireFields<CmsQueryFaqsArgs, 'limit' | 'skip'>>;
  form?: Resolver<Maybe<ResolversTypes['CmsForm']>, ParentType, ContextType, RequireFields<CmsQueryFormArgs, 'id'>>;
  forms?: Resolver<Maybe<ResolversTypes['CmsFormCollection']>, ParentType, ContextType, RequireFields<CmsQueryFormsArgs, 'limit' | 'skip'>>;
  globalSponsor?: Resolver<Maybe<ResolversTypes['CmsGlobalSponsor']>, ParentType, ContextType, RequireFields<CmsQueryGlobalSponsorArgs, 'id'>>;
  globalSponsors?: Resolver<Maybe<ResolversTypes['CmsGlobalSponsorCollection']>, ParentType, ContextType, RequireFields<CmsQueryGlobalSponsorsArgs, 'limit' | 'skip'>>;
  hiringCompanies?: Resolver<Maybe<ResolversTypes['CmsHiringCompanyCollection']>, ParentType, ContextType, RequireFields<CmsQueryHiringCompaniesArgs, 'limit' | 'skip'>>;
  hiringCompany?: Resolver<Maybe<ResolversTypes['CmsHiringCompany']>, ParentType, ContextType, RequireFields<CmsQueryHiringCompanyArgs, 'id'>>;
  hiringPost?: Resolver<Maybe<ResolversTypes['CmsHiringPost']>, ParentType, ContextType, RequireFields<CmsQueryHiringPostArgs, 'id'>>;
  hiringPosts?: Resolver<Maybe<ResolversTypes['CmsHiringPostCollection']>, ParentType, ContextType, RequireFields<CmsQueryHiringPostsArgs, 'limit' | 'skip'>>;
  legalDocument?: Resolver<Maybe<ResolversTypes['CmsLegalDocument']>, ParentType, ContextType, RequireFields<CmsQueryLegalDocumentArgs, 'id'>>;
  legalDocuments?: Resolver<Maybe<ResolversTypes['CmsLegalDocumentCollection']>, ParentType, ContextType, RequireFields<CmsQueryLegalDocumentsArgs, 'limit' | 'skip'>>;
  localizationConfig?: Resolver<Maybe<ResolversTypes['CmsLocalizationConfig']>, ParentType, ContextType, RequireFields<CmsQueryLocalizationConfigArgs, 'id'>>;
  localizationConfigs?: Resolver<Maybe<ResolversTypes['CmsLocalizationConfigCollection']>, ParentType, ContextType, RequireFields<CmsQueryLocalizationConfigsArgs, 'limit' | 'skip'>>;
  newsCoverage?: Resolver<Maybe<ResolversTypes['CmsNewsCoverage']>, ParentType, ContextType, RequireFields<CmsQueryNewsCoverageArgs, 'id'>>;
  newsCoverages?: Resolver<Maybe<ResolversTypes['CmsNewsCoverageCollection']>, ParentType, ContextType, RequireFields<CmsQueryNewsCoveragesArgs, 'limit' | 'skip'>>;
  pressPhoto?: Resolver<Maybe<ResolversTypes['CmsPressPhoto']>, ParentType, ContextType, RequireFields<CmsQueryPressPhotoArgs, 'id'>>;
  pressPhotos?: Resolver<Maybe<ResolversTypes['CmsPressPhotoCollection']>, ParentType, ContextType, RequireFields<CmsQueryPressPhotosArgs, 'limit' | 'skip'>>;
  program?: Resolver<Maybe<ResolversTypes['CmsProgram']>, ParentType, ContextType, RequireFields<CmsQueryProgramArgs, 'id'>>;
  programs?: Resolver<Maybe<ResolversTypes['CmsProgramCollection']>, ParentType, ContextType, RequireFields<CmsQueryProgramsArgs, 'limit' | 'skip'>>;
  region?: Resolver<Maybe<ResolversTypes['CmsRegion']>, ParentType, ContextType, RequireFields<CmsQueryRegionArgs, 'id'>>;
  regions?: Resolver<Maybe<ResolversTypes['CmsRegionCollection']>, ParentType, ContextType, RequireFields<CmsQueryRegionsArgs, 'limit' | 'skip'>>;
  site?: Resolver<Maybe<ResolversTypes['CmsSite']>, ParentType, ContextType, RequireFields<CmsQuerySiteArgs, 'id'>>;
  sites?: Resolver<Maybe<ResolversTypes['CmsSiteCollection']>, ParentType, ContextType, RequireFields<CmsQuerySitesArgs, 'limit' | 'skip'>>;
  socialMedia?: Resolver<Maybe<ResolversTypes['CmsSocialMedia']>, ParentType, ContextType, RequireFields<CmsQuerySocialMediaArgs, 'id'>>;
  socialMedias?: Resolver<Maybe<ResolversTypes['CmsSocialMediaCollection']>, ParentType, ContextType, RequireFields<CmsQuerySocialMediasArgs, 'limit' | 'skip'>>;
  stockMusic?: Resolver<Maybe<ResolversTypes['CmsStockMusic']>, ParentType, ContextType, RequireFields<CmsQueryStockMusicArgs, 'id'>>;
  stockMusics?: Resolver<Maybe<ResolversTypes['CmsStockMusicCollection']>, ParentType, ContextType, RequireFields<CmsQueryStockMusicsArgs, 'limit' | 'skip'>>;
  string?: Resolver<Maybe<ResolversTypes['CmsContentTypeString']>, ParentType, ContextType, RequireFields<CmsQueryStringArgs, 'id'>>;
  strings?: Resolver<Maybe<ResolversTypes['CmsContentTypeStringCollection']>, ParentType, ContextType, RequireFields<CmsQueryStringsArgs, 'limit' | 'skip'>>;
  testimonial?: Resolver<Maybe<ResolversTypes['CmsTestimonial']>, ParentType, ContextType, RequireFields<CmsQueryTestimonialArgs, 'id'>>;
  testimonials?: Resolver<Maybe<ResolversTypes['CmsTestimonialCollection']>, ParentType, ContextType, RequireFields<CmsQueryTestimonialsArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface CmsRectangleScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['CmsRectangle'], any> {
  name: 'CmsRectangle';
}

export type CmsRegionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsRegion'] = ResolversParentTypes['CmsRegion']> = ResolversObject<{
  abbr?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsRegionAbbrArgs>>;
  accountingName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsRegionAccountingNameArgs>>;
  aliases?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType, Partial<CmsRegionAliasesArgs>>;
  clearEvents?: Resolver<Array<ResolversTypes['ClearEvent']>, ParentType, ContextType>;
  complication?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsRegionComplicationArgs>>;
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  countryName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsRegionCountryNameArgs>>;
  countryNameAdjective?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsRegionCountryNameAdjectiveArgs>>;
  countryNameShort?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsRegionCountryNameShortArgs>>;
  countryNameShortAdjective?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsRegionCountryNameShortAdjectiveArgs>>;
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsRegionCurrencyArgs>>;
  currencySymbol?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsRegionCurrencySymbolArgs>>;
  e164CountryCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsRegionE164CountryCodeArgs>>;
  iso3166Alpha2Code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsRegionIso3166Alpha2CodeArgs>>;
  iso3166Alpha3Code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsRegionIso3166Alpha3CodeArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsRegionLinkingCollections']>, ParentType, ContextType, Partial<CmsRegionLinkedFromArgs>>;
  localizationConfig?: Resolver<Maybe<ResolversTypes['CmsLocalizationConfig']>, ParentType, ContextType, Partial<CmsRegionLocalizationConfigArgs>>;
  location?: Resolver<Maybe<ResolversTypes['CmsLocation']>, ParentType, ContextType, Partial<CmsRegionLocationArgs>>;
  messagingServices?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType, Partial<CmsRegionMessagingServicesArgs>>;
  motto?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsRegionMottoArgs>>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsRegionNameArgs>>;
  pastPhotos?: Resolver<Array<ResolversTypes['ShowcasePhoto']>, ParentType, ContextType, Partial<CmsRegionPastPhotosArgs>>;
  paymentProvider?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsRegionPaymentProviderArgs>>;
  primaryColor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsRegionPrimaryColorArgs>>;
  regionPhotos?: Resolver<Maybe<ResolversTypes['CmsAssetCollection']>, ParentType, ContextType, RequireFields<CmsRegionRegionPhotosArgs, 'limit' | 'skip'>>;
  skylinePhoto?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsRegionSkylinePhotoArgs>>;
  stickerLarge?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsRegionStickerLargeArgs>>;
  stickerSmall?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsRegionStickerSmallArgs>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  timezone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsRegionTimezoneArgs>>;
  webname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsRegionWebnameArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsRegionCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsRegionCollection'] = ResolversParentTypes['CmsRegionCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsRegion']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsRegionLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsRegionLinkingCollections'] = ResolversParentTypes['CmsRegionLinkingCollections']> = ResolversObject<{
  communityPartners?: Resolver<Maybe<ResolversTypes['CmsCommunityPartnerCollection']>, ParentType, ContextType, RequireFields<CmsRegionLinkingCollectionsCommunityPartnersArgs, 'limit' | 'skip'>>;
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsRegionLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  hiringPosts?: Resolver<Maybe<ResolversTypes['CmsHiringPostCollection']>, ParentType, ContextType, RequireFields<CmsRegionLinkingCollectionsHiringPostsArgs, 'limit' | 'skip'>>;
  pressPhotos?: Resolver<Maybe<ResolversTypes['CmsPressPhotoCollection']>, ParentType, ContextType, RequireFields<CmsRegionLinkingCollectionsPressPhotosArgs, 'limit' | 'skip'>>;
  testimonials?: Resolver<Maybe<ResolversTypes['CmsTestimonialCollection']>, ParentType, ContextType, RequireFields<CmsRegionLinkingCollectionsTestimonialsArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsSiteResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsSite'] = ResolversParentTypes['CmsSite']> = ResolversObject<{
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  display?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType, Partial<CmsSiteDisplayArgs>>;
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsSiteLinkArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsSiteLinkingCollections']>, ParentType, ContextType, Partial<CmsSiteLinkedFromArgs>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsSiteTitleArgs>>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsSiteTypeArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsSiteCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsSiteCollection'] = ResolversParentTypes['CmsSiteCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsSite']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsSiteLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsSiteLinkingCollections'] = ResolversParentTypes['CmsSiteLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsSiteLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsSocialMediaResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsSocialMedia'] = ResolversParentTypes['CmsSocialMedia']> = ResolversObject<{
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  icon?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsSocialMediaIconArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsSocialMediaLinkingCollections']>, ParentType, ContextType, Partial<CmsSocialMediaLinkedFromArgs>>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsSocialMediaNameArgs>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsSocialMediaUrlArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsSocialMediaCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsSocialMediaCollection'] = ResolversParentTypes['CmsSocialMediaCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsSocialMedia']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsSocialMediaLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsSocialMediaLinkingCollections'] = ResolversParentTypes['CmsSocialMediaLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsSocialMediaLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsStockMusicResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsStockMusic'] = ResolversParentTypes['CmsStockMusic']> = ResolversObject<{
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsStockMusicLinkingCollections']>, ParentType, ContextType, Partial<CmsStockMusicLinkedFromArgs>>;
  music?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsStockMusicMusicArgs>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsStockMusicTitleArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsStockMusicCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsStockMusicCollection'] = ResolversParentTypes['CmsStockMusicCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsStockMusic']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsStockMusicLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsStockMusicLinkingCollections'] = ResolversParentTypes['CmsStockMusicLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsStockMusicLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsSysResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsSys'] = ResolversParentTypes['CmsSys']> = ResolversObject<{
  environmentId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  firstPublishedAt?: Resolver<Maybe<ResolversTypes['CmsDateTime']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['CmsDateTime']>, ParentType, ContextType>;
  publishedVersion?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  spaceId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsTestimonialResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsTestimonial'] = ResolversParentTypes['CmsTestimonial']> = ResolversObject<{
  company?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsTestimonialCompanyArgs>>;
  contentfulMetadata?: Resolver<ResolversTypes['CmsContentfulMetadata'], ParentType, ContextType>;
  experience?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsTestimonialExperienceArgs>>;
  featured?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, Partial<CmsTestimonialFeaturedArgs>>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsTestimonialFirstNameArgs>>;
  groupName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsTestimonialGroupNameArgs>>;
  image?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsTestimonialImageArgs>>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsTestimonialLastNameArgs>>;
  linkedFrom?: Resolver<Maybe<ResolversTypes['CmsTestimonialLinkingCollections']>, ParentType, ContextType, Partial<CmsTestimonialLinkedFromArgs>>;
  program?: Resolver<Maybe<ResolversTypes['CmsProgram']>, ParentType, ContextType, Partial<CmsTestimonialProgramArgs>>;
  quote?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsTestimonialQuoteArgs>>;
  region?: Resolver<Maybe<ResolversTypes['CmsRegion']>, ParentType, ContextType, Partial<CmsTestimonialRegionArgs>>;
  sys?: Resolver<ResolversTypes['CmsSys'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsTestimonialTitleArgs>>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<CmsTestimonialTypeArgs>>;
  video?: Resolver<Maybe<ResolversTypes['CmsAsset']>, ParentType, ContextType, Partial<CmsTestimonialVideoArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsTestimonialCollectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsTestimonialCollection'] = ResolversParentTypes['CmsTestimonialCollection']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CmsTestimonial']>>, ParentType, ContextType>;
  limit?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  skip?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsTestimonialLinkingCollectionsResolvers<ContextType = any, ParentType extends ResolversParentTypes['CmsTestimonialLinkingCollections'] = ResolversParentTypes['CmsTestimonialLinkingCollections']> = ResolversObject<{
  entries?: Resolver<Maybe<ResolversTypes['CmsEntryCollection']>, ParentType, ContextType, RequireFields<CmsTestimonialLinkingCollectionsEntriesArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface EmailJsonObjectScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['EmailJSONObject'], any> {
  name: 'EmailJSONObject';
}

export type EmailMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['EmailMutation'] = ResolversParentTypes['EmailMutation']> = ResolversObject<{
  subscribe?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, RequireFields<EmailMutationSubscribeArgs, 'email' | 'list'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type EmailQueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['EmailQuery'] = ResolversParentTypes['EmailQuery']> = ResolversObject<{
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GeoGeoResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['GeoGeoResult'] = ResolversParentTypes['GeoGeoResult']> = ResolversObject<{
  accuracy?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  cityName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  countryName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isp?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lat?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  lng?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  organization?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  subdivision?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  subdivisionName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tz?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GeoQueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['GeoQuery'] = ResolversParentTypes['GeoQuery']> = ResolversObject<{
  mine?: Resolver<ResolversTypes['GeoGeoResult'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GithubContributorResolvers<ContextType = any, ParentType extends ResolversParentTypes['GithubContributor'] = ResolversParentTypes['GithubContributor']> = ResolversObject<{
  account?: Resolver<Maybe<ResolversTypes['AccountUser']>, ParentType, ContextType>;
  username?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GithubQueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['GithubQuery'] = ResolversParentTypes['GithubQuery']> = ResolversObject<{
  contributors?: Resolver<Maybe<Array<Maybe<ResolversTypes['GithubContributor']>>>, ParentType, ContextType, RequireFields<GithubQueryContributorsArgs, 'repository'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface JsonObjectScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['JSONObject'], any> {
  name: 'JSONObject';
}

export interface LabsDateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['LabsDateTime'], any> {
  name: 'LabsDateTime';
}

export type LabsEventResolvers<ContextType = any, ParentType extends ResolversParentTypes['LabsEvent'] = ResolversParentTypes['LabsEvent']> = ResolversObject<{
  createdAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  emailTemplate?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  matchPreferenceSubmissionOpen?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  matchingAlgorithm?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  mentorApplicationsEndAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  mentorApplicationsStartAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  startsAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  studentApplicationsEndAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  studentApplicationsStartAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface LabsJsonScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['LabsJSON'], any> {
  name: 'LabsJSON';
}

export interface LabsJsonObjectScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['LabsJSONObject'], any> {
  name: 'LabsJSONObject';
}

export type LabsMatchResolvers<ContextType = any, ParentType extends ResolversParentTypes['LabsMatch'] = ResolversParentTypes['LabsMatch']> = ResolversObject<{
  project?: Resolver<ResolversTypes['LabsProject'], ParentType, ContextType>;
  score?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LabsMentorResolvers<ContextType = any, ParentType extends ResolversParentTypes['LabsMentor'] = ResolversParentTypes['LabsMentor']> = ResolversObject<{
  account?: Resolver<Maybe<ResolversTypes['AccountUser']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  event?: Resolver<ResolversTypes['LabsEvent'], ParentType, ContextType>;
  eventId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  givenName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  manager?: Resolver<Maybe<ResolversTypes['AccountUser']>, ParentType, ContextType>;
  managerUsername?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  maxWeeks?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['LabsJSON'], ParentType, ContextType>;
  profileField?: Resolver<Maybe<ResolversTypes['LabsJSON']>, ParentType, ContextType, RequireFields<LabsMentorProfileFieldArgs, 'key'>>;
  projects?: Resolver<Array<ResolversTypes['LabsProject']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['LabsMentorStatus'], ParentType, ContextType>;
  surname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LabsMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['LabsMutation'] = ResolversParentTypes['LabsMutation']> = ResolversObject<{
  acceptStudentOffer?: Resolver<ResolversTypes['LabsStudent'], ParentType, ContextType>;
  addProjectMentor?: Resolver<ResolversTypes['LabsProject'], ParentType, ContextType, RequireFields<LabsMutationAddProjectMentorArgs, 'mentor' | 'project'>>;
  addProjectStudent?: Resolver<ResolversTypes['LabsProject'], ParentType, ContextType, RequireFields<LabsMutationAddProjectStudentArgs, 'project' | 'student'>>;
  applyMentor?: Resolver<ResolversTypes['LabsMentor'], ParentType, ContextType, RequireFields<LabsMutationApplyMentorArgs, 'data'>>;
  applyStudent?: Resolver<ResolversTypes['LabsStudent'], ParentType, ContextType, RequireFields<LabsMutationApplyStudentArgs, 'data'>>;
  cancelStudentApplication?: Resolver<ResolversTypes['LabsStudent'], ParentType, ContextType>;
  createMentor?: Resolver<ResolversTypes['LabsMentor'], ParentType, ContextType, RequireFields<LabsMutationCreateMentorArgs, 'data'>>;
  createProject?: Resolver<ResolversTypes['LabsProject'], ParentType, ContextType, RequireFields<LabsMutationCreateProjectArgs, 'data'>>;
  createStudent?: Resolver<ResolversTypes['LabsStudent'], ParentType, ContextType, RequireFields<LabsMutationCreateStudentArgs, 'data'>>;
  createSurvey?: Resolver<ResolversTypes['LabsSurvey'], ParentType, ContextType, RequireFields<LabsMutationCreateSurveyArgs, 'data'>>;
  createSurveyOccurence?: Resolver<ResolversTypes['LabsSurveyOccurence'], ParentType, ContextType, RequireFields<LabsMutationCreateSurveyOccurenceArgs, 'dueAt' | 'survey' | 'visibleAt'>>;
  createTag?: Resolver<ResolversTypes['LabsTag'], ParentType, ContextType, RequireFields<LabsMutationCreateTagArgs, 'data'>>;
  deleteMentor?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<LabsMutationDeleteMentorArgs, 'where'>>;
  deleteProject?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<LabsMutationDeleteProjectArgs, 'project'>>;
  deleteStudent?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<LabsMutationDeleteStudentArgs, 'where'>>;
  deleteTag?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<LabsMutationDeleteTagArgs, 'tag'>>;
  editMentor?: Resolver<ResolversTypes['LabsMentor'], ParentType, ContextType, RequireFields<LabsMutationEditMentorArgs, 'data'>>;
  editProject?: Resolver<ResolversTypes['LabsProject'], ParentType, ContextType, RequireFields<LabsMutationEditProjectArgs, 'data' | 'project'>>;
  editStudent?: Resolver<ResolversTypes['LabsStudent'], ParentType, ContextType, RequireFields<LabsMutationEditStudentArgs, 'data'>>;
  editTag?: Resolver<ResolversTypes['LabsTag'], ParentType, ContextType, RequireFields<LabsMutationEditTagArgs, 'data' | 'tag'>>;
  expressProjectPreferences?: Resolver<Maybe<Array<ResolversTypes['LabsPreference']>>, ParentType, ContextType, RequireFields<LabsMutationExpressProjectPreferencesArgs, 'projects'>>;
  offerStudentAdmission?: Resolver<ResolversTypes['LabsStudent'], ParentType, ContextType, RequireFields<LabsMutationOfferStudentAdmissionArgs, 'where'>>;
  rejectStudent?: Resolver<ResolversTypes['LabsStudent'], ParentType, ContextType, RequireFields<LabsMutationRejectStudentArgs, 'where'>>;
  removeProjectMentor?: Resolver<ResolversTypes['LabsProject'], ParentType, ContextType, RequireFields<LabsMutationRemoveProjectMentorArgs, 'mentor' | 'project'>>;
  removeProjectStudent?: Resolver<ResolversTypes['LabsProject'], ParentType, ContextType, RequireFields<LabsMutationRemoveProjectStudentArgs, 'project' | 'student'>>;
  resetStudentAdmissionOffer?: Resolver<ResolversTypes['LabsStudent'], ParentType, ContextType, RequireFields<LabsMutationResetStudentAdmissionOfferArgs, 'where'>>;
  sendMentorEmail?: Resolver<ResolversTypes['Float'], ParentType, ContextType, RequireFields<LabsMutationSendMentorEmailArgs, 'body' | 'dryRun' | 'subject'>>;
  sendStudentEmail?: Resolver<ResolversTypes['Float'], ParentType, ContextType, RequireFields<LabsMutationSendStudentEmailArgs, 'body' | 'dryRun' | 'subject'>>;
  submitStudentRating?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<LabsMutationSubmitStudentRatingArgs, 'rating' | 'track' | 'where'>>;
  submitTraining?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<LabsMutationSubmitTrainingArgs, 'tag' | 'url'>>;
  surveyRespond?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<LabsMutationSurveyRespondArgs, 'occurrence' | 'responses'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LabsPreferenceResolvers<ContextType = any, ParentType extends ResolversParentTypes['LabsPreference'] = ResolversParentTypes['LabsPreference']> = ResolversObject<{
  project?: Resolver<ResolversTypes['LabsProject'], ParentType, ContextType>;
  ranking?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LabsProjectResolvers<ContextType = any, ParentType extends ResolversParentTypes['LabsProject'] = ResolversParentTypes['LabsProject']> = ResolversObject<{
  createdAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  deliverables?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  event?: Resolver<ResolversTypes['LabsEvent'], ParentType, ContextType>;
  eventId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  maxStudents?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  mentors?: Resolver<Array<ResolversTypes['LabsMentor']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['LabsProjectStatus'], ParentType, ContextType>;
  studentCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  students?: Resolver<Array<ResolversTypes['LabsStudent']>, ParentType, ContextType>;
  tags?: Resolver<Array<ResolversTypes['LabsTag']>, ParentType, ContextType>;
  track?: Resolver<ResolversTypes['LabsTrack'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LabsQueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['LabsQuery'] = ResolversParentTypes['LabsQuery']> = ResolversObject<{
  event?: Resolver<Maybe<ResolversTypes['LabsEvent']>, ParentType, ContextType>;
  mentor?: Resolver<Maybe<ResolversTypes['LabsMentor']>, ParentType, ContextType, Partial<LabsQueryMentorArgs>>;
  mentors?: Resolver<Array<ResolversTypes['LabsMentor']>, ParentType, ContextType, Partial<LabsQueryMentorsArgs>>;
  nextStudentNeedingRating?: Resolver<Maybe<ResolversTypes['LabsStudent']>, ParentType, ContextType, Partial<LabsQueryNextStudentNeedingRatingArgs>>;
  projectMatches?: Resolver<Maybe<Array<ResolversTypes['LabsMatch']>>, ParentType, ContextType, RequireFields<LabsQueryProjectMatchesArgs, 'tags'>>;
  projectPreferences?: Resolver<Maybe<Array<ResolversTypes['LabsPreference']>>, ParentType, ContextType>;
  statAdmissionsStatus?: Resolver<Array<ResolversTypes['LabsStat']>, ParentType, ContextType, Partial<LabsQueryStatAdmissionsStatusArgs>>;
  student?: Resolver<Maybe<ResolversTypes['LabsStudent']>, ParentType, ContextType, Partial<LabsQueryStudentArgs>>;
  students?: Resolver<Array<ResolversTypes['LabsStudent']>, ParentType, ContextType, Partial<LabsQueryStudentsArgs>>;
  studentsTopRated?: Resolver<Array<ResolversTypes['LabsStudent']>, ParentType, ContextType, Partial<LabsQueryStudentsTopRatedArgs>>;
  survey?: Resolver<ResolversTypes['LabsSurvey'], ParentType, ContextType, RequireFields<LabsQuerySurveyArgs, 'survey'>>;
  surveys?: Resolver<Array<ResolversTypes['LabsSurvey']>, ParentType, ContextType>;
  tags?: Resolver<Array<ResolversTypes['LabsTag']>, ParentType, ContextType, Partial<LabsQueryTagsArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LabsStatResolvers<ContextType = any, ParentType extends ResolversParentTypes['LabsStat'] = ResolversParentTypes['LabsStat']> = ResolversObject<{
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LabsStudentResolvers<ContextType = any, ParentType extends ResolversParentTypes['LabsStudent'] = ResolversParentTypes['LabsStudent']> = ResolversObject<{
  account?: Resolver<Maybe<ResolversTypes['AccountUser']>, ParentType, ContextType>;
  admissionRatingAverage?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  admissionRatingCount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  event?: Resolver<ResolversTypes['LabsEvent'], ParentType, ContextType>;
  eventId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  givenName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasValidAdmissionOffer?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  minHours?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  offerDate?: Resolver<Maybe<ResolversTypes['LabsDateTime']>, ParentType, ContextType>;
  partnerCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['LabsJSON'], ParentType, ContextType>;
  projectCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  projectPreferences?: Resolver<Array<ResolversTypes['LabsPreference']>, ParentType, ContextType>;
  projects?: Resolver<Array<ResolversTypes['LabsProject']>, ParentType, ContextType>;
  rejectionReason?: Resolver<Maybe<ResolversTypes['LabsRejectionReason']>, ParentType, ContextType>;
  requiredTagTraining?: Resolver<Array<ResolversTypes['LabsTag']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['LabsStudentStatus'], ParentType, ContextType>;
  surname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  surveyResponsesAbout?: Resolver<Array<ResolversTypes['LabsSurveyResponse']>, ParentType, ContextType>;
  tagTrainingSubmissions?: Resolver<Array<ResolversTypes['LabsTagTrainingSubmission']>, ParentType, ContextType>;
  tags?: Resolver<Array<ResolversTypes['LabsTag']>, ParentType, ContextType>;
  track?: Resolver<ResolversTypes['LabsTrack'], ParentType, ContextType>;
  trackRecommendation?: Resolver<Maybe<Array<ResolversTypes['LabsTrackRecommendation']>>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  username?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  weeks?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LabsSurveyResolvers<ContextType = any, ParentType extends ResolversParentTypes['LabsSurvey'] = ResolversParentTypes['LabsSurvey']> = ResolversObject<{
  createdAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  event?: Resolver<ResolversTypes['LabsEvent'], ParentType, ContextType>;
  eventId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  menteeCaution?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  menteeSchema?: Resolver<Maybe<ResolversTypes['LabsJSONObject']>, ParentType, ContextType>;
  menteeShare?: Resolver<Maybe<ResolversTypes['LabsJSONObject']>, ParentType, ContextType>;
  menteeUi?: Resolver<Maybe<ResolversTypes['LabsJSONObject']>, ParentType, ContextType>;
  mentorCaution?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mentorSchema?: Resolver<Maybe<ResolversTypes['LabsJSONObject']>, ParentType, ContextType>;
  mentorShare?: Resolver<Maybe<ResolversTypes['LabsJSONObject']>, ParentType, ContextType>;
  mentorUi?: Resolver<Maybe<ResolversTypes['LabsJSONObject']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  occurrences?: Resolver<Array<ResolversTypes['LabsSurveyOccurence']>, ParentType, ContextType>;
  peerCaution?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  peerSchema?: Resolver<Maybe<ResolversTypes['LabsJSONObject']>, ParentType, ContextType>;
  peerShare?: Resolver<Maybe<ResolversTypes['LabsJSONObject']>, ParentType, ContextType>;
  peerUi?: Resolver<Maybe<ResolversTypes['LabsJSONObject']>, ParentType, ContextType>;
  personType?: Resolver<ResolversTypes['LabsPersonType'], ParentType, ContextType>;
  projectCaution?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  projectSchema?: Resolver<Maybe<ResolversTypes['LabsJSONObject']>, ParentType, ContextType>;
  projectShare?: Resolver<Maybe<ResolversTypes['LabsJSONObject']>, ParentType, ContextType>;
  projectUi?: Resolver<Maybe<ResolversTypes['LabsJSONObject']>, ParentType, ContextType>;
  selfCaution?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  selfSchema?: Resolver<Maybe<ResolversTypes['LabsJSONObject']>, ParentType, ContextType>;
  selfUi?: Resolver<Maybe<ResolversTypes['LabsJSONObject']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LabsSurveyOccurenceResolvers<ContextType = any, ParentType extends ResolversParentTypes['LabsSurveyOccurence'] = ResolversParentTypes['LabsSurveyOccurence']> = ResolversObject<{
  createdAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  dueAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  survey?: Resolver<ResolversTypes['LabsSurvey'], ParentType, ContextType>;
  surveyFeedback?: Resolver<Array<ResolversTypes['LabsSurveyResponse']>, ParentType, ContextType, Partial<LabsSurveyOccurenceSurveyFeedbackArgs>>;
  surveyId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  surveyResponses?: Resolver<Array<ResolversTypes['LabsSurveyResponse']>, ParentType, ContextType, Partial<LabsSurveyOccurenceSurveyResponsesArgs>>;
  updatedAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  visibleAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LabsSurveyResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['LabsSurveyResponse'] = ResolversParentTypes['LabsSurveyResponse']> = ResolversObject<{
  authorMentor?: Resolver<Maybe<ResolversTypes['LabsMentor']>, ParentType, ContextType>;
  authorMentorId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  authorStudent?: Resolver<Maybe<ResolversTypes['LabsStudent']>, ParentType, ContextType>;
  authorStudentId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  caution?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  mentor?: Resolver<Maybe<ResolversTypes['LabsMentor']>, ParentType, ContextType>;
  mentorId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  project?: Resolver<Maybe<ResolversTypes['LabsProject']>, ParentType, ContextType>;
  projectId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  response?: Resolver<ResolversTypes['LabsJSONObject'], ParentType, ContextType>;
  student?: Resolver<Maybe<ResolversTypes['LabsStudent']>, ParentType, ContextType>;
  studentId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  surveyOccurence?: Resolver<ResolversTypes['LabsSurveyOccurence'], ParentType, ContextType>;
  surveyOccurenceId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LabsTagResolvers<ContextType = any, ParentType extends ResolversParentTypes['LabsTag'] = ResolversParentTypes['LabsTag']> = ResolversObject<{
  createdAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  mentorDisplayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  studentDisplayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  trainingLink?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['LabsTagType'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LabsTagTrainingSubmissionResolvers<ContextType = any, ParentType extends ResolversParentTypes['LabsTagTrainingSubmission'] = ResolversParentTypes['LabsTagTrainingSubmission']> = ResolversObject<{
  createdAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  student?: Resolver<ResolversTypes['LabsStudent'], ParentType, ContextType>;
  tag?: Resolver<ResolversTypes['LabsTag'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['LabsDateTime'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LabsTrackRecommendationResolvers<ContextType = any, ParentType extends ResolversParentTypes['LabsTrackRecommendation'] = ResolversParentTypes['LabsTrackRecommendation']> = ResolversObject<{
  track?: Resolver<ResolversTypes['LabsTrack'], ParentType, ContextType>;
  weight?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = ResolversObject<{
  account?: Resolver<ResolversTypes['AccountMutation'], ParentType, ContextType>;
  advisor?: Resolver<ResolversTypes['AdvisorMutation'], ParentType, ContextType>;
  blog?: Resolver<ResolversTypes['BlogRootMutation'], ParentType, ContextType>;
  calendar?: Resolver<ResolversTypes['CalendarMutation'], ParentType, ContextType>;
  clear?: Resolver<ResolversTypes['ClearMutation'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['EmailMutation'], ParentType, ContextType>;
  labs?: Resolver<ResolversTypes['LabsMutation'], ParentType, ContextType>;
  showcase?: Resolver<ResolversTypes['ShowcaseMutation'], ParentType, ContextType>;
}>;

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = ResolversObject<{
  account?: Resolver<ResolversTypes['AccountQuery'], ParentType, ContextType>;
  advisor?: Resolver<ResolversTypes['AdvisorQuery'], ParentType, ContextType>;
  blog?: Resolver<ResolversTypes['BlogRootQuery'], ParentType, ContextType>;
  calendar?: Resolver<ResolversTypes['CalendarQuery'], ParentType, ContextType>;
  clear?: Resolver<ResolversTypes['ClearQuery'], ParentType, ContextType>;
  cms?: Resolver<ResolversTypes['CmsQuery'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['EmailQuery'], ParentType, ContextType>;
  geo?: Resolver<ResolversTypes['GeoQuery'], ParentType, ContextType>;
  github?: Resolver<ResolversTypes['GithubQuery'], ParentType, ContextType>;
  labs?: Resolver<ResolversTypes['LabsQuery'], ParentType, ContextType>;
  showcase?: Resolver<ResolversTypes['ShowcaseQuery'], ParentType, ContextType>;
  showyourwork?: Resolver<ResolversTypes['ShowyourworkQuery'], ParentType, ContextType>;
  twitch?: Resolver<ResolversTypes['TwitchQuery'], ParentType, ContextType>;
}>;

export type ShowcaseAwardResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShowcaseAward'] = ResolversParentTypes['ShowcaseAward']> = ResolversObject<{
  createdAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  info?: Resolver<Maybe<ResolversTypes['CmsAward']>, ParentType, ContextType>;
  modifier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  project?: Resolver<ResolversTypes['ShowcaseProject'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface ShowcaseDateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['ShowcaseDateTime'], any> {
  name: 'ShowcaseDateTime';
}

export type ShowcaseJudgementResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShowcaseJudgement'] = ResolversParentTypes['ShowcaseJudgement']> = ResolversObject<{
  createdAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  judgingCriteria?: Resolver<ResolversTypes['ShowcaseJudgingCriteria'], ParentType, ContextType>;
  judgingPool?: Resolver<ResolversTypes['ShowcaseJudgingPool'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  username?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShowcaseJudgingCriteriaResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShowcaseJudgingCriteria'] = ResolversParentTypes['ShowcaseJudgingCriteria']> = ResolversObject<{
  createdAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  judgingPool?: Resolver<ResolversTypes['ShowcaseJudgingPool'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  weight?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShowcaseJudgingPoolResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShowcaseJudgingPool'] = ResolversParentTypes['ShowcaseJudgingPool']> = ResolversObject<{
  createdAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  eventGroupId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  judgingCriteria?: Resolver<Array<ResolversTypes['ShowcaseJudgingCriteria']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  programId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  projects?: Resolver<Array<ResolversTypes['ShowcaseProject']>, ParentType, ContextType, RequireFields<ShowcaseJudgingPoolProjectsArgs, 'needsJudging' | 'take'>>;
  regionId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  results?: Resolver<Array<ResolversTypes['ShowcaseJudgingResult']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShowcaseJudgingResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShowcaseJudgingResult'] = ResolversParentTypes['ShowcaseJudgingResult']> = ResolversObject<{
  count?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  project?: Resolver<ResolversTypes['ShowcaseProject'], ParentType, ContextType>;
  subScores?: Resolver<Array<ResolversTypes['ShowcaseJudgingResultSubValue']>, ParentType, ContextType>;
  value?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShowcaseJudgingResultSubValueResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShowcaseJudgingResultSubValue'] = ResolversParentTypes['ShowcaseJudgingResultSubValue']> = ResolversObject<{
  count?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  judgingCriteria?: Resolver<ResolversTypes['ShowcaseJudgingCriteria'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShowcaseMediaResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShowcaseMedia'] = ResolversParentTypes['ShowcaseMedia']> = ResolversObject<{
  createdAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  download?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  featured?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  image?: Resolver<ResolversTypes['String'], ParentType, ContextType, Partial<ShowcaseMediaImageArgs>>;
  project?: Resolver<ResolversTypes['ShowcaseProject'], ParentType, ContextType>;
  stream?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  topic?: Resolver<ResolversTypes['ShowcaseMediaTopic'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ShowcaseMediaType'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShowcaseMemberResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShowcaseMember'] = ResolversParentTypes['ShowcaseMember']> = ResolversObject<{
  account?: Resolver<Maybe<ResolversTypes['AccountUser']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  project?: Resolver<ResolversTypes['ShowcaseProject'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  username?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShowcaseMetadataResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShowcaseMetadata'] = ResolversParentTypes['ShowcaseMetadata']> = ResolversObject<{
  createdAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  project?: Resolver<ResolversTypes['ShowcaseProject'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  visibility?: Resolver<ResolversTypes['ShowcaseMetadataVisibility'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShowcaseMetricAggregateResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShowcaseMetricAggregate'] = ResolversParentTypes['ShowcaseMetricAggregate']> = ResolversObject<{
  project?: Resolver<ResolversTypes['ShowcaseProject'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShowcaseMetricTimeSeriesResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShowcaseMetricTimeSeries'] = ResolversParentTypes['ShowcaseMetricTimeSeries']> = ResolversObject<{
  time?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShowcaseMutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShowcaseMutation'] = ResolversParentTypes['ShowcaseMutation']> = ResolversObject<{
  addAward?: Resolver<ResolversTypes['ShowcaseAward'], ParentType, ContextType, RequireFields<ShowcaseMutationAddAwardArgs, 'project' | 'type'>>;
  addMember?: Resolver<ResolversTypes['ShowcaseMember'], ParentType, ContextType, RequireFields<ShowcaseMutationAddMemberArgs, 'project' | 'username'>>;
  addReactions?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ShowcaseMutationAddReactionsArgs, 'id' | 'reactions'>>;
  createJudgingPool?: Resolver<ResolversTypes['ShowcaseJudgingPool'], ParentType, ContextType, RequireFields<ShowcaseMutationCreateJudgingPoolArgs, 'judgingPool'>>;
  createProject?: Resolver<ResolversTypes['ShowcaseProject'], ParentType, ContextType, RequireFields<ShowcaseMutationCreateProjectArgs, 'project'>>;
  deleteMedia?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ShowcaseMutationDeleteMediaArgs, 'id'>>;
  deletePhoto?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ShowcaseMutationDeletePhotoArgs, 'id'>>;
  deleteProject?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ShowcaseMutationDeleteProjectArgs, 'id'>>;
  editPhoto?: Resolver<ResolversTypes['ShowcasePhoto'], ParentType, ContextType, RequireFields<ShowcaseMutationEditPhotoArgs, 'data' | 'id'>>;
  editProject?: Resolver<ResolversTypes['ShowcaseProject'], ParentType, ContextType, RequireFields<ShowcaseMutationEditProjectArgs, 'id' | 'project'>>;
  featureMedia?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ShowcaseMutationFeatureMediaArgs, 'id'>>;
  featurePhoto?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ShowcaseMutationFeaturePhotoArgs, 'id'>>;
  featureProject?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ShowcaseMutationFeatureProjectArgs, 'id'>>;
  importPhotos?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ShowcaseMutationImportPhotosArgs, 'photos'>>;
  judgeProject?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ShowcaseMutationJudgeProjectArgs, 'judgingCriteria' | 'project' | 'value'>>;
  peerJudgeProjects?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ShowcaseMutationPeerJudgeProjectsArgs, 'eventId' | 'projects'>>;
  recordMetric?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ShowcaseMutationRecordMetricArgs, 'member' | 'name' | 'project' | 'value'>>;
  removeAward?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ShowcaseMutationRemoveAwardArgs, 'id'>>;
  removeJudgingPool?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ShowcaseMutationRemoveJudgingPoolArgs, 'judgingPool'>>;
  removeMember?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ShowcaseMutationRemoveMemberArgs, 'project' | 'username'>>;
  setMetadata?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ShowcaseMutationSetMetadataArgs, 'key' | 'project' | 'value' | 'visibility'>>;
  unsetMetadata?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType, RequireFields<ShowcaseMutationUnsetMetadataArgs, 'key' | 'project'>>;
  uploadMedia?: Resolver<ResolversTypes['ShowcaseMedia'], ParentType, ContextType, RequireFields<ShowcaseMutationUploadMediaArgs, 'project' | 'topic' | 'type' | 'upload'>>;
  uploadPhoto?: Resolver<ResolversTypes['ShowcasePhoto'], ParentType, ContextType, RequireFields<ShowcaseMutationUploadPhotoArgs, 'eventId' | 'upload'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShowcasePeerJudgementResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShowcasePeerJudgement'] = ResolversParentTypes['ShowcasePeerJudgement']> = ResolversObject<{
  createdAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  eventId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  project?: Resolver<ResolversTypes['ShowcaseProject'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  username?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShowcasePhotoResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShowcasePhoto'] = ResolversParentTypes['ShowcasePhoto']> = ResolversObject<{
  createdAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  eventGroup?: Resolver<Maybe<ResolversTypes['CmsEvent']>, ParentType, ContextType>;
  eventGroupId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  featured?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  program?: Resolver<Maybe<ResolversTypes['CmsProgram']>, ParentType, ContextType>;
  programId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  region?: Resolver<Maybe<ResolversTypes['CmsRegion']>, ParentType, ContextType>;
  regionId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  thanks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  urlLarge?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  urlMedium?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  urlSmall?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShowcaseProjectResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShowcaseProject'] = ResolversParentTypes['ShowcaseProject']> = ResolversObject<{
  awards?: Resolver<Maybe<Array<ResolversTypes['ShowcaseAward']>>, ParentType, ContextType>;
  canAdmin?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  canEdit?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  challengesEncountered?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  codeLink?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventGroup?: Resolver<Maybe<ResolversTypes['CmsEvent']>, ParentType, ContextType>;
  eventGroupId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  featured?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  media?: Resolver<Maybe<Array<ResolversTypes['ShowcaseMedia']>>, ParentType, ContextType, RequireFields<ShowcaseProjectMediaArgs, 'take'>>;
  members?: Resolver<Maybe<Array<ResolversTypes['ShowcaseMember']>>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<Array<ResolversTypes['ShowcaseMetadata']>>, ParentType, ContextType>;
  metadataValue?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, RequireFields<ShowcaseProjectMetadataValueArgs, 'key'>>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  peerJudgements?: Resolver<Maybe<Array<ResolversTypes['ShowcasePeerJudgement']>>, ParentType, ContextType>;
  priorExperience?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  program?: Resolver<Maybe<ResolversTypes['CmsProgram']>, ParentType, ContextType>;
  programId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  reactionCounts?: Resolver<Array<ResolversTypes['ShowcaseReactionCount']>, ParentType, ContextType>;
  region?: Resolver<Maybe<ResolversTypes['CmsRegion']>, ParentType, ContextType>;
  regionId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tags?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ShowcaseProjectType'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['ShowcaseDateTime'], ParentType, ContextType>;
  userJudgement?: Resolver<Maybe<Array<ResolversTypes['ShowcaseJudgement']>>, ParentType, ContextType>;
  viewLink?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShowcaseQueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShowcaseQuery'] = ResolversParentTypes['ShowcaseQuery']> = ResolversObject<{
  averageMemberRecentResponses?: Resolver<Array<ResolversTypes['ShowcaseMetricAggregate']>, ParentType, ContextType, RequireFields<ShowcaseQueryAverageMemberRecentResponsesArgs, 'name'>>;
  judgingPools?: Resolver<Array<ResolversTypes['ShowcaseJudgingPool']>, ParentType, ContextType>;
  membersOverTime?: Resolver<Array<ResolversTypes['ShowcaseMetricTimeSeries']>, ParentType, ContextType, RequireFields<ShowcaseQueryMembersOverTimeArgs, 'where'>>;
  myJudgingPool?: Resolver<ResolversTypes['ShowcaseJudgingPool'], ParentType, ContextType>;
  photo?: Resolver<ResolversTypes['ShowcasePhoto'], ParentType, ContextType, Partial<ShowcaseQueryPhotoArgs>>;
  photos?: Resolver<Array<ResolversTypes['ShowcasePhoto']>, ParentType, ContextType, Partial<ShowcaseQueryPhotosArgs>>;
  presentationReadyPercent?: Resolver<ResolversTypes['Float'], ParentType, ContextType, RequireFields<ShowcaseQueryPresentationReadyPercentArgs, 'where'>>;
  project?: Resolver<ResolversTypes['ShowcaseProject'], ParentType, ContextType, Partial<ShowcaseQueryProjectArgs>>;
  projects?: Resolver<Array<ResolversTypes['ShowcaseProject']>, ParentType, ContextType, Partial<ShowcaseQueryProjectsArgs>>;
  projectsOverTime?: Resolver<Array<ResolversTypes['ShowcaseMetricTimeSeries']>, ParentType, ContextType, RequireFields<ShowcaseQueryProjectsOverTimeArgs, 'where'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShowcaseReactionCountResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShowcaseReactionCount'] = ResolversParentTypes['ShowcaseReactionCount']> = ResolversObject<{
  count?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ShowcaseReactionType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface ShowyourworkDateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['ShowyourworkDateTime'], any> {
  name: 'ShowyourworkDateTime';
}

export type ShowyourworkDiscordMessageResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShowyourworkDiscordMessage'] = ResolversParentTypes['ShowyourworkDiscordMessage']> = ResolversObject<{
  author?: Resolver<Maybe<ResolversTypes['AccountUser']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['ShowyourworkDateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  imageUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType, Partial<ShowyourworkDiscordMessageImageUrlArgs>>;
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  userId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  videoUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShowyourworkQueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['ShowyourworkQuery'] = ResolversParentTypes['ShowyourworkQuery']> = ResolversObject<{
  messages?: Resolver<Array<ResolversTypes['ShowyourworkDiscordMessage']>, ParentType, ContextType, Partial<ShowyourworkQueryMessagesArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SubscriptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Subscription'] = ResolversParentTypes['Subscription']> = ResolversObject<{
  memberAdded?: SubscriptionResolver<ResolversTypes['ShowcaseMember'], "memberAdded", ParentType, ContextType, Partial<SubscriptionMemberAddedArgs>>;
  memberRemoved?: SubscriptionResolver<ResolversTypes['ShowcaseMember'], "memberRemoved", ParentType, ContextType, Partial<SubscriptionMemberRemovedArgs>>;
  projectCreated?: SubscriptionResolver<ResolversTypes['ShowcaseProject'], "projectCreated", ParentType, ContextType, Partial<SubscriptionProjectCreatedArgs>>;
  projectDeleted?: SubscriptionResolver<ResolversTypes['ShowcaseProject'], "projectDeleted", ParentType, ContextType, Partial<SubscriptionProjectDeletedArgs>>;
  projectEdited?: SubscriptionResolver<ResolversTypes['ShowcaseProject'], "projectEdited", ParentType, ContextType, Partial<SubscriptionProjectEditedArgs>>;
  userBadgeUpdate?: SubscriptionResolver<ResolversTypes['AccountSubscriptionBadge'], "userBadgeUpdate", ParentType, ContextType>;
  userCultSelection?: SubscriptionResolver<ResolversTypes['AccountSubscriptionUser'], "userCultSelection", ParentType, ContextType>;
  userDisplayedBadgesUpdate?: SubscriptionResolver<ResolversTypes['AccountSubscriptionUser'], "userDisplayedBadgesUpdate", ParentType, ContextType>;
  userProfilePictureUpdate?: SubscriptionResolver<ResolversTypes['AccountSubscriptionUser'], "userProfilePictureUpdate", ParentType, ContextType>;
  userRoleUpdate?: SubscriptionResolver<ResolversTypes['AccountSubscriptionUser'], "userRoleUpdate", ParentType, ContextType>;
  userUnlinkDiscord?: SubscriptionResolver<ResolversTypes['String'], "userUnlinkDiscord", ParentType, ContextType>;
  userUpdate?: SubscriptionResolver<ResolversTypes['AccountSubscriptionUser'], "userUpdate", ParentType, ContextType>;
}>;

export type TwitchLiveStatusResolvers<ContextType = any, ParentType extends ResolversParentTypes['TwitchLiveStatus'] = ResolversParentTypes['TwitchLiveStatus']> = ResolversObject<{
  startedAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  thumbnail?: Resolver<ResolversTypes['String'], ParentType, ContextType, RequireFields<TwitchLiveStatusThumbnailArgs, 'height' | 'width'>>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  username?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  viewerCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TwitchQueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['TwitchQuery'] = ResolversParentTypes['TwitchQuery']> = ResolversObject<{
  live?: Resolver<Maybe<ResolversTypes['TwitchLiveStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface UploadScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Upload'], any> {
  name: 'Upload';
}

export type Resolvers<ContextType = any> = ResolversObject<{
  AccountBadge?: AccountBadgeResolvers<ContextType>;
  AccountDiscordInformation?: AccountDiscordInformationResolvers<ContextType>;
  AccountMutation?: AccountMutationResolvers<ContextType>;
  AccountQuery?: AccountQueryResolvers<ContextType>;
  AccountRole?: AccountRoleResolvers<ContextType>;
  AccountSubscriptionBadge?: AccountSubscriptionBadgeResolvers<ContextType>;
  AccountSubscriptionUser?: AccountSubscriptionUserResolvers<ContextType>;
  AccountUser?: AccountUserResolvers<ContextType>;
  AdvisorAdvisor?: AdvisorAdvisorResolvers<ContextType>;
  AdvisorDateTime?: GraphQLScalarType;
  AdvisorEventParticipation?: AdvisorEventParticipationResolvers<ContextType>;
  AdvisorJSONObject?: GraphQLScalarType;
  AdvisorMutation?: AdvisorMutationResolvers<ContextType>;
  AdvisorPendingRequests?: AdvisorPendingRequestsResolvers<ContextType>;
  AdvisorProfile?: AdvisorProfileResolvers<ContextType>;
  AdvisorQuery?: AdvisorQueryResolvers<ContextType>;
  AdvisorRecommendation?: AdvisorRecommendationResolvers<ContextType>;
  AdvisorRemainingRequestsByAdvisorType?: AdvisorRemainingRequestsByAdvisorTypeResolvers<ContextType>;
  AdvisorRemainingRequestsType?: AdvisorRemainingRequestsTypeResolvers<ContextType>;
  AdvisorRequest?: AdvisorRequestResolvers<ContextType>;
  AdvisorRequestAssignment?: AdvisorRequestAssignmentResolvers<ContextType>;
  AdvisorRequestCount?: AdvisorRequestCountResolvers<ContextType>;
  AdvisorTag?: AdvisorTagResolvers<ContextType>;
  BlogAcfFieldGroup?: BlogAcfFieldGroupResolvers<ContextType>;
  BlogAvatar?: BlogAvatarResolvers<ContextType>;
  BlogCategory?: BlogCategoryResolvers<ContextType>;
  BlogCategoryToAncestorsCategoryConnection?: BlogCategoryToAncestorsCategoryConnectionResolvers<ContextType>;
  BlogCategoryToAncestorsCategoryConnectionEdge?: BlogCategoryToAncestorsCategoryConnectionEdgeResolvers<ContextType>;
  BlogCategoryToCategoryConnection?: BlogCategoryToCategoryConnectionResolvers<ContextType>;
  BlogCategoryToCategoryConnectionEdge?: BlogCategoryToCategoryConnectionEdgeResolvers<ContextType>;
  BlogCategoryToContentNodeConnection?: BlogCategoryToContentNodeConnectionResolvers<ContextType>;
  BlogCategoryToContentNodeConnectionEdge?: BlogCategoryToContentNodeConnectionEdgeResolvers<ContextType>;
  BlogCategoryToParentCategoryConnectionEdge?: BlogCategoryToParentCategoryConnectionEdgeResolvers<ContextType>;
  BlogCategoryToPostConnection?: BlogCategoryToPostConnectionResolvers<ContextType>;
  BlogCategoryToPostConnectionEdge?: BlogCategoryToPostConnectionEdgeResolvers<ContextType>;
  BlogCategoryToTaxonomyConnectionEdge?: BlogCategoryToTaxonomyConnectionEdgeResolvers<ContextType>;
  BlogCategory_Display?: BlogCategory_DisplayResolvers<ContextType>;
  BlogComment?: BlogCommentResolvers<ContextType>;
  BlogCommentAuthor?: BlogCommentAuthorResolvers<ContextType>;
  BlogCommentToCommentConnection?: BlogCommentToCommentConnectionResolvers<ContextType>;
  BlogCommentToCommentConnectionEdge?: BlogCommentToCommentConnectionEdgeResolvers<ContextType>;
  BlogCommentToCommenterConnectionEdge?: BlogCommentToCommenterConnectionEdgeResolvers<ContextType>;
  BlogCommentToContentNodeConnectionEdge?: BlogCommentToContentNodeConnectionEdgeResolvers<ContextType>;
  BlogCommentToParentCommentConnectionEdge?: BlogCommentToParentCommentConnectionEdgeResolvers<ContextType>;
  BlogCommenter?: BlogCommenterResolvers<ContextType>;
  BlogContentNode?: BlogContentNodeResolvers<ContextType>;
  BlogContentNodeToContentTypeConnectionEdge?: BlogContentNodeToContentTypeConnectionEdgeResolvers<ContextType>;
  BlogContentNodeToEditLastConnectionEdge?: BlogContentNodeToEditLastConnectionEdgeResolvers<ContextType>;
  BlogContentNodeToEditLockConnectionEdge?: BlogContentNodeToEditLockConnectionEdgeResolvers<ContextType>;
  BlogContentNodeToEnqueuedScriptConnection?: BlogContentNodeToEnqueuedScriptConnectionResolvers<ContextType>;
  BlogContentNodeToEnqueuedScriptConnectionEdge?: BlogContentNodeToEnqueuedScriptConnectionEdgeResolvers<ContextType>;
  BlogContentNodeToEnqueuedStylesheetConnection?: BlogContentNodeToEnqueuedStylesheetConnectionResolvers<ContextType>;
  BlogContentNodeToEnqueuedStylesheetConnectionEdge?: BlogContentNodeToEnqueuedStylesheetConnectionEdgeResolvers<ContextType>;
  BlogContentRevisionUnion?: BlogContentRevisionUnionResolvers<ContextType>;
  BlogContentTemplate?: BlogContentTemplateResolvers<ContextType>;
  BlogContentType?: BlogContentTypeResolvers<ContextType>;
  BlogContentTypeToContentNodeConnection?: BlogContentTypeToContentNodeConnectionResolvers<ContextType>;
  BlogContentTypeToContentNodeConnectionEdge?: BlogContentTypeToContentNodeConnectionEdgeResolvers<ContextType>;
  BlogContentTypeToTaxonomyConnection?: BlogContentTypeToTaxonomyConnectionResolvers<ContextType>;
  BlogContentTypeToTaxonomyConnectionEdge?: BlogContentTypeToTaxonomyConnectionEdgeResolvers<ContextType>;
  BlogCreateCategoryPayload?: BlogCreateCategoryPayloadResolvers<ContextType>;
  BlogCreateCommentPayload?: BlogCreateCommentPayloadResolvers<ContextType>;
  BlogCreateMediaItemPayload?: BlogCreateMediaItemPayloadResolvers<ContextType>;
  BlogCreatePagePayload?: BlogCreatePagePayloadResolvers<ContextType>;
  BlogCreatePostFormatPayload?: BlogCreatePostFormatPayloadResolvers<ContextType>;
  BlogCreatePostPayload?: BlogCreatePostPayloadResolvers<ContextType>;
  BlogCreateTagPayload?: BlogCreateTagPayloadResolvers<ContextType>;
  BlogCreateUserPayload?: BlogCreateUserPayloadResolvers<ContextType>;
  BlogDatabaseIdentifier?: BlogDatabaseIdentifierResolvers<ContextType>;
  BlogDefaultTemplate?: BlogDefaultTemplateResolvers<ContextType>;
  BlogDeleteCategoryPayload?: BlogDeleteCategoryPayloadResolvers<ContextType>;
  BlogDeleteCommentPayload?: BlogDeleteCommentPayloadResolvers<ContextType>;
  BlogDeleteMediaItemPayload?: BlogDeleteMediaItemPayloadResolvers<ContextType>;
  BlogDeletePagePayload?: BlogDeletePagePayloadResolvers<ContextType>;
  BlogDeletePostFormatPayload?: BlogDeletePostFormatPayloadResolvers<ContextType>;
  BlogDeletePostPayload?: BlogDeletePostPayloadResolvers<ContextType>;
  BlogDeleteTagPayload?: BlogDeleteTagPayloadResolvers<ContextType>;
  BlogDeleteUserPayload?: BlogDeleteUserPayloadResolvers<ContextType>;
  BlogDiscussionSettings?: BlogDiscussionSettingsResolvers<ContextType>;
  BlogEnqueuedAsset?: BlogEnqueuedAssetResolvers<ContextType>;
  BlogEnqueuedScript?: BlogEnqueuedScriptResolvers<ContextType>;
  BlogEnqueuedStylesheet?: BlogEnqueuedStylesheetResolvers<ContextType>;
  BlogGeneralSettings?: BlogGeneralSettingsResolvers<ContextType>;
  BlogHierarchicalContentNode?: BlogHierarchicalContentNodeResolvers<ContextType>;
  BlogHierarchicalContentNodeToContentNodeAncestorsConnection?: BlogHierarchicalContentNodeToContentNodeAncestorsConnectionResolvers<ContextType>;
  BlogHierarchicalContentNodeToContentNodeAncestorsConnectionEdge?: BlogHierarchicalContentNodeToContentNodeAncestorsConnectionEdgeResolvers<ContextType>;
  BlogHierarchicalContentNodeToContentNodeChildrenConnection?: BlogHierarchicalContentNodeToContentNodeChildrenConnectionResolvers<ContextType>;
  BlogHierarchicalContentNodeToContentNodeChildrenConnectionEdge?: BlogHierarchicalContentNodeToContentNodeChildrenConnectionEdgeResolvers<ContextType>;
  BlogHierarchicalContentNodeToParentContentNodeConnectionEdge?: BlogHierarchicalContentNodeToParentContentNodeConnectionEdgeResolvers<ContextType>;
  BlogHierarchicalTermNode?: BlogHierarchicalTermNodeResolvers<ContextType>;
  BlogMediaDetails?: BlogMediaDetailsResolvers<ContextType>;
  BlogMediaItem?: BlogMediaItemResolvers<ContextType>;
  BlogMediaItemMeta?: BlogMediaItemMetaResolvers<ContextType>;
  BlogMediaItemToCommentConnection?: BlogMediaItemToCommentConnectionResolvers<ContextType>;
  BlogMediaItemToCommentConnectionEdge?: BlogMediaItemToCommentConnectionEdgeResolvers<ContextType>;
  BlogMediaSize?: BlogMediaSizeResolvers<ContextType>;
  BlogMenu?: BlogMenuResolvers<ContextType>;
  BlogMenuItem?: BlogMenuItemResolvers<ContextType>;
  BlogMenuItemLinkable?: BlogMenuItemLinkableResolvers<ContextType>;
  BlogMenuItemObjectUnion?: BlogMenuItemObjectUnionResolvers<ContextType>;
  BlogMenuItemToMenuConnectionEdge?: BlogMenuItemToMenuConnectionEdgeResolvers<ContextType>;
  BlogMenuItemToMenuItemConnection?: BlogMenuItemToMenuItemConnectionResolvers<ContextType>;
  BlogMenuItemToMenuItemConnectionEdge?: BlogMenuItemToMenuItemConnectionEdgeResolvers<ContextType>;
  BlogMenuItemToMenuItemLinkableConnectionEdge?: BlogMenuItemToMenuItemLinkableConnectionEdgeResolvers<ContextType>;
  BlogMenuToMenuItemConnection?: BlogMenuToMenuItemConnectionResolvers<ContextType>;
  BlogMenuToMenuItemConnectionEdge?: BlogMenuToMenuItemConnectionEdgeResolvers<ContextType>;
  BlogNode?: BlogNodeResolvers<ContextType>;
  BlogNodeWithAuthor?: BlogNodeWithAuthorResolvers<ContextType>;
  BlogNodeWithAuthorToUserConnectionEdge?: BlogNodeWithAuthorToUserConnectionEdgeResolvers<ContextType>;
  BlogNodeWithComments?: BlogNodeWithCommentsResolvers<ContextType>;
  BlogNodeWithContentEditor?: BlogNodeWithContentEditorResolvers<ContextType>;
  BlogNodeWithExcerpt?: BlogNodeWithExcerptResolvers<ContextType>;
  BlogNodeWithFeaturedImage?: BlogNodeWithFeaturedImageResolvers<ContextType>;
  BlogNodeWithFeaturedImageToMediaItemConnectionEdge?: BlogNodeWithFeaturedImageToMediaItemConnectionEdgeResolvers<ContextType>;
  BlogNodeWithPageAttributes?: BlogNodeWithPageAttributesResolvers<ContextType>;
  BlogNodeWithRevisions?: BlogNodeWithRevisionsResolvers<ContextType>;
  BlogNodeWithRevisionsToContentNodeConnectionEdge?: BlogNodeWithRevisionsToContentNodeConnectionEdgeResolvers<ContextType>;
  BlogNodeWithTemplate?: BlogNodeWithTemplateResolvers<ContextType>;
  BlogNodeWithTitle?: BlogNodeWithTitleResolvers<ContextType>;
  BlogNodeWithTrackbacks?: BlogNodeWithTrackbacksResolvers<ContextType>;
  BlogPage?: BlogPageResolvers<ContextType>;
  BlogPageToCommentConnection?: BlogPageToCommentConnectionResolvers<ContextType>;
  BlogPageToCommentConnectionEdge?: BlogPageToCommentConnectionEdgeResolvers<ContextType>;
  BlogPageToPreviewConnectionEdge?: BlogPageToPreviewConnectionEdgeResolvers<ContextType>;
  BlogPageToRevisionConnection?: BlogPageToRevisionConnectionResolvers<ContextType>;
  BlogPageToRevisionConnectionEdge?: BlogPageToRevisionConnectionEdgeResolvers<ContextType>;
  BlogPlugin?: BlogPluginResolvers<ContextType>;
  BlogPost?: BlogPostResolvers<ContextType>;
  BlogPostFormat?: BlogPostFormatResolvers<ContextType>;
  BlogPostFormatToContentNodeConnection?: BlogPostFormatToContentNodeConnectionResolvers<ContextType>;
  BlogPostFormatToContentNodeConnectionEdge?: BlogPostFormatToContentNodeConnectionEdgeResolvers<ContextType>;
  BlogPostFormatToPostConnection?: BlogPostFormatToPostConnectionResolvers<ContextType>;
  BlogPostFormatToPostConnectionEdge?: BlogPostFormatToPostConnectionEdgeResolvers<ContextType>;
  BlogPostFormatToTaxonomyConnectionEdge?: BlogPostFormatToTaxonomyConnectionEdgeResolvers<ContextType>;
  BlogPostToCategoryConnection?: BlogPostToCategoryConnectionResolvers<ContextType>;
  BlogPostToCategoryConnectionEdge?: BlogPostToCategoryConnectionEdgeResolvers<ContextType>;
  BlogPostToCommentConnection?: BlogPostToCommentConnectionResolvers<ContextType>;
  BlogPostToCommentConnectionEdge?: BlogPostToCommentConnectionEdgeResolvers<ContextType>;
  BlogPostToPostFormatConnection?: BlogPostToPostFormatConnectionResolvers<ContextType>;
  BlogPostToPostFormatConnectionEdge?: BlogPostToPostFormatConnectionEdgeResolvers<ContextType>;
  BlogPostToPreviewConnectionEdge?: BlogPostToPreviewConnectionEdgeResolvers<ContextType>;
  BlogPostToRevisionConnection?: BlogPostToRevisionConnectionResolvers<ContextType>;
  BlogPostToRevisionConnectionEdge?: BlogPostToRevisionConnectionEdgeResolvers<ContextType>;
  BlogPostToTagConnection?: BlogPostToTagConnectionResolvers<ContextType>;
  BlogPostToTagConnectionEdge?: BlogPostToTagConnectionEdgeResolvers<ContextType>;
  BlogPostToTermNodeConnection?: BlogPostToTermNodeConnectionResolvers<ContextType>;
  BlogPostToTermNodeConnectionEdge?: BlogPostToTermNodeConnectionEdgeResolvers<ContextType>;
  BlogPostTypeLabelDetails?: BlogPostTypeLabelDetailsResolvers<ContextType>;
  BlogPost_Authoroverride?: BlogPost_AuthoroverrideResolvers<ContextType>;
  BlogPost_Marketing?: BlogPost_MarketingResolvers<ContextType>;
  BlogPost_Release?: BlogPost_ReleaseResolvers<ContextType>;
  BlogReadingSettings?: BlogReadingSettingsResolvers<ContextType>;
  BlogRegisterUserPayload?: BlogRegisterUserPayloadResolvers<ContextType>;
  BlogResetUserPasswordPayload?: BlogResetUserPasswordPayloadResolvers<ContextType>;
  BlogRestoreCommentPayload?: BlogRestoreCommentPayloadResolvers<ContextType>;
  BlogRootMutation?: BlogRootMutationResolvers<ContextType>;
  BlogRootQuery?: BlogRootQueryResolvers<ContextType>;
  BlogRootQueryToCategoryConnection?: BlogRootQueryToCategoryConnectionResolvers<ContextType>;
  BlogRootQueryToCategoryConnectionEdge?: BlogRootQueryToCategoryConnectionEdgeResolvers<ContextType>;
  BlogRootQueryToCommentConnection?: BlogRootQueryToCommentConnectionResolvers<ContextType>;
  BlogRootQueryToCommentConnectionEdge?: BlogRootQueryToCommentConnectionEdgeResolvers<ContextType>;
  BlogRootQueryToContentNodeConnection?: BlogRootQueryToContentNodeConnectionResolvers<ContextType>;
  BlogRootQueryToContentNodeConnectionEdge?: BlogRootQueryToContentNodeConnectionEdgeResolvers<ContextType>;
  BlogRootQueryToContentRevisionUnionConnection?: BlogRootQueryToContentRevisionUnionConnectionResolvers<ContextType>;
  BlogRootQueryToContentRevisionUnionConnectionEdge?: BlogRootQueryToContentRevisionUnionConnectionEdgeResolvers<ContextType>;
  BlogRootQueryToContentTypeConnection?: BlogRootQueryToContentTypeConnectionResolvers<ContextType>;
  BlogRootQueryToContentTypeConnectionEdge?: BlogRootQueryToContentTypeConnectionEdgeResolvers<ContextType>;
  BlogRootQueryToEnqueuedScriptConnection?: BlogRootQueryToEnqueuedScriptConnectionResolvers<ContextType>;
  BlogRootQueryToEnqueuedScriptConnectionEdge?: BlogRootQueryToEnqueuedScriptConnectionEdgeResolvers<ContextType>;
  BlogRootQueryToEnqueuedStylesheetConnection?: BlogRootQueryToEnqueuedStylesheetConnectionResolvers<ContextType>;
  BlogRootQueryToEnqueuedStylesheetConnectionEdge?: BlogRootQueryToEnqueuedStylesheetConnectionEdgeResolvers<ContextType>;
  BlogRootQueryToMediaItemConnection?: BlogRootQueryToMediaItemConnectionResolvers<ContextType>;
  BlogRootQueryToMediaItemConnectionEdge?: BlogRootQueryToMediaItemConnectionEdgeResolvers<ContextType>;
  BlogRootQueryToMenuConnection?: BlogRootQueryToMenuConnectionResolvers<ContextType>;
  BlogRootQueryToMenuConnectionEdge?: BlogRootQueryToMenuConnectionEdgeResolvers<ContextType>;
  BlogRootQueryToMenuItemConnection?: BlogRootQueryToMenuItemConnectionResolvers<ContextType>;
  BlogRootQueryToMenuItemConnectionEdge?: BlogRootQueryToMenuItemConnectionEdgeResolvers<ContextType>;
  BlogRootQueryToPageConnection?: BlogRootQueryToPageConnectionResolvers<ContextType>;
  BlogRootQueryToPageConnectionEdge?: BlogRootQueryToPageConnectionEdgeResolvers<ContextType>;
  BlogRootQueryToPluginConnection?: BlogRootQueryToPluginConnectionResolvers<ContextType>;
  BlogRootQueryToPluginConnectionEdge?: BlogRootQueryToPluginConnectionEdgeResolvers<ContextType>;
  BlogRootQueryToPostConnection?: BlogRootQueryToPostConnectionResolvers<ContextType>;
  BlogRootQueryToPostConnectionEdge?: BlogRootQueryToPostConnectionEdgeResolvers<ContextType>;
  BlogRootQueryToPostFormatConnection?: BlogRootQueryToPostFormatConnectionResolvers<ContextType>;
  BlogRootQueryToPostFormatConnectionEdge?: BlogRootQueryToPostFormatConnectionEdgeResolvers<ContextType>;
  BlogRootQueryToTagConnection?: BlogRootQueryToTagConnectionResolvers<ContextType>;
  BlogRootQueryToTagConnectionEdge?: BlogRootQueryToTagConnectionEdgeResolvers<ContextType>;
  BlogRootQueryToTaxonomyConnection?: BlogRootQueryToTaxonomyConnectionResolvers<ContextType>;
  BlogRootQueryToTaxonomyConnectionEdge?: BlogRootQueryToTaxonomyConnectionEdgeResolvers<ContextType>;
  BlogRootQueryToTermNodeConnection?: BlogRootQueryToTermNodeConnectionResolvers<ContextType>;
  BlogRootQueryToTermNodeConnectionEdge?: BlogRootQueryToTermNodeConnectionEdgeResolvers<ContextType>;
  BlogRootQueryToThemeConnection?: BlogRootQueryToThemeConnectionResolvers<ContextType>;
  BlogRootQueryToThemeConnectionEdge?: BlogRootQueryToThemeConnectionEdgeResolvers<ContextType>;
  BlogRootQueryToUserConnection?: BlogRootQueryToUserConnectionResolvers<ContextType>;
  BlogRootQueryToUserConnectionEdge?: BlogRootQueryToUserConnectionEdgeResolvers<ContextType>;
  BlogRootQueryToUserRoleConnection?: BlogRootQueryToUserRoleConnectionResolvers<ContextType>;
  BlogRootQueryToUserRoleConnectionEdge?: BlogRootQueryToUserRoleConnectionEdgeResolvers<ContextType>;
  BlogSendPasswordResetEmailPayload?: BlogSendPasswordResetEmailPayloadResolvers<ContextType>;
  BlogSettings?: BlogSettingsResolvers<ContextType>;
  BlogTag?: BlogTagResolvers<ContextType>;
  BlogTagToContentNodeConnection?: BlogTagToContentNodeConnectionResolvers<ContextType>;
  BlogTagToContentNodeConnectionEdge?: BlogTagToContentNodeConnectionEdgeResolvers<ContextType>;
  BlogTagToPostConnection?: BlogTagToPostConnectionResolvers<ContextType>;
  BlogTagToPostConnectionEdge?: BlogTagToPostConnectionEdgeResolvers<ContextType>;
  BlogTagToTaxonomyConnectionEdge?: BlogTagToTaxonomyConnectionEdgeResolvers<ContextType>;
  BlogTaxonomy?: BlogTaxonomyResolvers<ContextType>;
  BlogTaxonomyToContentTypeConnection?: BlogTaxonomyToContentTypeConnectionResolvers<ContextType>;
  BlogTaxonomyToContentTypeConnectionEdge?: BlogTaxonomyToContentTypeConnectionEdgeResolvers<ContextType>;
  BlogTermNode?: BlogTermNodeResolvers<ContextType>;
  BlogTermNodeToEnqueuedScriptConnection?: BlogTermNodeToEnqueuedScriptConnectionResolvers<ContextType>;
  BlogTermNodeToEnqueuedScriptConnectionEdge?: BlogTermNodeToEnqueuedScriptConnectionEdgeResolvers<ContextType>;
  BlogTermNodeToEnqueuedStylesheetConnection?: BlogTermNodeToEnqueuedStylesheetConnectionResolvers<ContextType>;
  BlogTermNodeToEnqueuedStylesheetConnectionEdge?: BlogTermNodeToEnqueuedStylesheetConnectionEdgeResolvers<ContextType>;
  BlogTheme?: BlogThemeResolvers<ContextType>;
  BlogUniformResourceIdentifiable?: BlogUniformResourceIdentifiableResolvers<ContextType>;
  BlogUpdateCategoryPayload?: BlogUpdateCategoryPayloadResolvers<ContextType>;
  BlogUpdateCommentPayload?: BlogUpdateCommentPayloadResolvers<ContextType>;
  BlogUpdateMediaItemPayload?: BlogUpdateMediaItemPayloadResolvers<ContextType>;
  BlogUpdatePagePayload?: BlogUpdatePagePayloadResolvers<ContextType>;
  BlogUpdatePostFormatPayload?: BlogUpdatePostFormatPayloadResolvers<ContextType>;
  BlogUpdatePostPayload?: BlogUpdatePostPayloadResolvers<ContextType>;
  BlogUpdateSettingsPayload?: BlogUpdateSettingsPayloadResolvers<ContextType>;
  BlogUpdateTagPayload?: BlogUpdateTagPayloadResolvers<ContextType>;
  BlogUpdateUserPayload?: BlogUpdateUserPayloadResolvers<ContextType>;
  BlogUser?: BlogUserResolvers<ContextType>;
  BlogUserRole?: BlogUserRoleResolvers<ContextType>;
  BlogUserToCommentConnection?: BlogUserToCommentConnectionResolvers<ContextType>;
  BlogUserToCommentConnectionEdge?: BlogUserToCommentConnectionEdgeResolvers<ContextType>;
  BlogUserToContentRevisionUnionConnection?: BlogUserToContentRevisionUnionConnectionResolvers<ContextType>;
  BlogUserToContentRevisionUnionConnectionEdge?: BlogUserToContentRevisionUnionConnectionEdgeResolvers<ContextType>;
  BlogUserToEnqueuedScriptConnection?: BlogUserToEnqueuedScriptConnectionResolvers<ContextType>;
  BlogUserToEnqueuedScriptConnectionEdge?: BlogUserToEnqueuedScriptConnectionEdgeResolvers<ContextType>;
  BlogUserToEnqueuedStylesheetConnection?: BlogUserToEnqueuedStylesheetConnectionResolvers<ContextType>;
  BlogUserToEnqueuedStylesheetConnectionEdge?: BlogUserToEnqueuedStylesheetConnectionEdgeResolvers<ContextType>;
  BlogUserToMediaItemConnection?: BlogUserToMediaItemConnectionResolvers<ContextType>;
  BlogUserToMediaItemConnectionEdge?: BlogUserToMediaItemConnectionEdgeResolvers<ContextType>;
  BlogUserToPageConnection?: BlogUserToPageConnectionResolvers<ContextType>;
  BlogUserToPageConnectionEdge?: BlogUserToPageConnectionEdgeResolvers<ContextType>;
  BlogUserToPostConnection?: BlogUserToPostConnectionResolvers<ContextType>;
  BlogUserToPostConnectionEdge?: BlogUserToPostConnectionEdgeResolvers<ContextType>;
  BlogUserToUserRoleConnection?: BlogUserToUserRoleConnectionResolvers<ContextType>;
  BlogUserToUserRoleConnectionEdge?: BlogUserToUserRoleConnectionEdgeResolvers<ContextType>;
  BlogWPPageInfo?: BlogWpPageInfoResolvers<ContextType>;
  BlogWritingSettings?: BlogWritingSettingsResolvers<ContextType>;
  CalendarCalendarEvent?: CalendarCalendarEventResolvers<ContextType>;
  CalendarDateTime?: GraphQLScalarType;
  CalendarJSONObject?: GraphQLScalarType;
  CalendarMutation?: CalendarMutationResolvers<ContextType>;
  CalendarQuery?: CalendarQueryResolvers<ContextType>;
  ClearAffectedRowsOutput?: ClearAffectedRowsOutputResolvers<ContextType>;
  ClearAggregateEmailTemplate?: ClearAggregateEmailTemplateResolvers<ContextType>;
  ClearAggregateEvent?: ClearAggregateEventResolvers<ContextType>;
  ClearAggregateEventGroup?: ClearAggregateEventGroupResolvers<ContextType>;
  ClearAggregateEventRestriction?: ClearAggregateEventRestrictionResolvers<ContextType>;
  ClearAggregateMailingListMember?: ClearAggregateMailingListMemberResolvers<ContextType>;
  ClearAggregatePayment?: ClearAggregatePaymentResolvers<ContextType>;
  ClearAggregatePerson?: ClearAggregatePersonResolvers<ContextType>;
  ClearAggregatePromoCode?: ClearAggregatePromoCodeResolvers<ContextType>;
  ClearAggregateScheduleItem?: ClearAggregateScheduleItemResolvers<ContextType>;
  ClearAggregateSponsor?: ClearAggregateSponsorResolvers<ContextType>;
  ClearAggregateTicket?: ClearAggregateTicketResolvers<ContextType>;
  ClearAggregateVenue?: ClearAggregateVenueResolvers<ContextType>;
  ClearAggregateWebhook?: ClearAggregateWebhookResolvers<ContextType>;
  ClearDateTime?: GraphQLScalarType;
  ClearEmailTemplate?: ClearEmailTemplateResolvers<ContextType>;
  ClearEmailTemplateCount?: ClearEmailTemplateCountResolvers<ContextType>;
  ClearEmailTemplateCountAggregate?: ClearEmailTemplateCountAggregateResolvers<ContextType>;
  ClearEmailTemplateGroupBy?: ClearEmailTemplateGroupByResolvers<ContextType>;
  ClearEmailTemplateMaxAggregate?: ClearEmailTemplateMaxAggregateResolvers<ContextType>;
  ClearEmailTemplateMinAggregate?: ClearEmailTemplateMinAggregateResolvers<ContextType>;
  ClearEvent?: ClearEventResolvers<ContextType>;
  ClearEventAvgAggregate?: ClearEventAvgAggregateResolvers<ContextType>;
  ClearEventCount?: ClearEventCountResolvers<ContextType>;
  ClearEventCountAggregate?: ClearEventCountAggregateResolvers<ContextType>;
  ClearEventGroup?: ClearEventGroupResolvers<ContextType>;
  ClearEventGroupAvgAggregate?: ClearEventGroupAvgAggregateResolvers<ContextType>;
  ClearEventGroupBy?: ClearEventGroupByResolvers<ContextType>;
  ClearEventGroupCount?: ClearEventGroupCountResolvers<ContextType>;
  ClearEventGroupCountAggregate?: ClearEventGroupCountAggregateResolvers<ContextType>;
  ClearEventGroupGroupBy?: ClearEventGroupGroupByResolvers<ContextType>;
  ClearEventGroupMaxAggregate?: ClearEventGroupMaxAggregateResolvers<ContextType>;
  ClearEventGroupMinAggregate?: ClearEventGroupMinAggregateResolvers<ContextType>;
  ClearEventGroupSumAggregate?: ClearEventGroupSumAggregateResolvers<ContextType>;
  ClearEventMaxAggregate?: ClearEventMaxAggregateResolvers<ContextType>;
  ClearEventMinAggregate?: ClearEventMinAggregateResolvers<ContextType>;
  ClearEventRestriction?: ClearEventRestrictionResolvers<ContextType>;
  ClearEventRestrictionCount?: ClearEventRestrictionCountResolvers<ContextType>;
  ClearEventRestrictionCountAggregate?: ClearEventRestrictionCountAggregateResolvers<ContextType>;
  ClearEventRestrictionGroupBy?: ClearEventRestrictionGroupByResolvers<ContextType>;
  ClearEventRestrictionMaxAggregate?: ClearEventRestrictionMaxAggregateResolvers<ContextType>;
  ClearEventRestrictionMinAggregate?: ClearEventRestrictionMinAggregateResolvers<ContextType>;
  ClearEventSumAggregate?: ClearEventSumAggregateResolvers<ContextType>;
  ClearJSON?: GraphQLScalarType;
  ClearJSONObject?: GraphQLScalarType;
  ClearMailingListMember?: ClearMailingListMemberResolvers<ContextType>;
  ClearMailingListMemberCount?: ClearMailingListMemberCountResolvers<ContextType>;
  ClearMailingListMemberCountAggregate?: ClearMailingListMemberCountAggregateResolvers<ContextType>;
  ClearMailingListMemberGroupBy?: ClearMailingListMemberGroupByResolvers<ContextType>;
  ClearMailingListMemberMaxAggregate?: ClearMailingListMemberMaxAggregateResolvers<ContextType>;
  ClearMailingListMemberMinAggregate?: ClearMailingListMemberMinAggregateResolvers<ContextType>;
  ClearMutation?: ClearMutationResolvers<ContextType>;
  ClearPayment?: ClearPaymentResolvers<ContextType>;
  ClearPaymentCount?: ClearPaymentCountResolvers<ContextType>;
  ClearPaymentCountAggregate?: ClearPaymentCountAggregateResolvers<ContextType>;
  ClearPaymentGroupBy?: ClearPaymentGroupByResolvers<ContextType>;
  ClearPaymentMaxAggregate?: ClearPaymentMaxAggregateResolvers<ContextType>;
  ClearPaymentMinAggregate?: ClearPaymentMinAggregateResolvers<ContextType>;
  ClearPerson?: ClearPersonResolvers<ContextType>;
  ClearPersonAvgAggregate?: ClearPersonAvgAggregateResolvers<ContextType>;
  ClearPersonCount?: ClearPersonCountResolvers<ContextType>;
  ClearPersonCountAggregate?: ClearPersonCountAggregateResolvers<ContextType>;
  ClearPersonGroupBy?: ClearPersonGroupByResolvers<ContextType>;
  ClearPersonMaxAggregate?: ClearPersonMaxAggregateResolvers<ContextType>;
  ClearPersonMinAggregate?: ClearPersonMinAggregateResolvers<ContextType>;
  ClearPersonSumAggregate?: ClearPersonSumAggregateResolvers<ContextType>;
  ClearPromoCode?: ClearPromoCodeResolvers<ContextType>;
  ClearPromoCodeAvgAggregate?: ClearPromoCodeAvgAggregateResolvers<ContextType>;
  ClearPromoCodeCount?: ClearPromoCodeCountResolvers<ContextType>;
  ClearPromoCodeCountAggregate?: ClearPromoCodeCountAggregateResolvers<ContextType>;
  ClearPromoCodeGroupBy?: ClearPromoCodeGroupByResolvers<ContextType>;
  ClearPromoCodeMaxAggregate?: ClearPromoCodeMaxAggregateResolvers<ContextType>;
  ClearPromoCodeMinAggregate?: ClearPromoCodeMinAggregateResolvers<ContextType>;
  ClearPromoCodeSumAggregate?: ClearPromoCodeSumAggregateResolvers<ContextType>;
  ClearPublicPerson?: ClearPublicPersonResolvers<ContextType>;
  ClearQuery?: ClearQueryResolvers<ContextType>;
  ClearScheduleItem?: ClearScheduleItemResolvers<ContextType>;
  ClearScheduleItemCountAggregate?: ClearScheduleItemCountAggregateResolvers<ContextType>;
  ClearScheduleItemGroupBy?: ClearScheduleItemGroupByResolvers<ContextType>;
  ClearScheduleItemMaxAggregate?: ClearScheduleItemMaxAggregateResolvers<ContextType>;
  ClearScheduleItemMinAggregate?: ClearScheduleItemMinAggregateResolvers<ContextType>;
  ClearSponsor?: ClearSponsorResolvers<ContextType>;
  ClearSponsorAvgAggregate?: ClearSponsorAvgAggregateResolvers<ContextType>;
  ClearSponsorCountAggregate?: ClearSponsorCountAggregateResolvers<ContextType>;
  ClearSponsorGroupBy?: ClearSponsorGroupByResolvers<ContextType>;
  ClearSponsorMaxAggregate?: ClearSponsorMaxAggregateResolvers<ContextType>;
  ClearSponsorMinAggregate?: ClearSponsorMinAggregateResolvers<ContextType>;
  ClearSponsorSumAggregate?: ClearSponsorSumAggregateResolvers<ContextType>;
  ClearTeam?: ClearTeamResolvers<ContextType>;
  ClearTicket?: ClearTicketResolvers<ContextType>;
  ClearTicketAvgAggregate?: ClearTicketAvgAggregateResolvers<ContextType>;
  ClearTicketCount?: ClearTicketCountResolvers<ContextType>;
  ClearTicketCountAggregate?: ClearTicketCountAggregateResolvers<ContextType>;
  ClearTicketGroupBy?: ClearTicketGroupByResolvers<ContextType>;
  ClearTicketMaxAggregate?: ClearTicketMaxAggregateResolvers<ContextType>;
  ClearTicketMinAggregate?: ClearTicketMinAggregateResolvers<ContextType>;
  ClearTicketSumAggregate?: ClearTicketSumAggregateResolvers<ContextType>;
  ClearVenue?: ClearVenueResolvers<ContextType>;
  ClearVenueAvgAggregate?: ClearVenueAvgAggregateResolvers<ContextType>;
  ClearVenueCount?: ClearVenueCountResolvers<ContextType>;
  ClearVenueCountAggregate?: ClearVenueCountAggregateResolvers<ContextType>;
  ClearVenueGroupBy?: ClearVenueGroupByResolvers<ContextType>;
  ClearVenueMaxAggregate?: ClearVenueMaxAggregateResolvers<ContextType>;
  ClearVenueMinAggregate?: ClearVenueMinAggregateResolvers<ContextType>;
  ClearVenueSumAggregate?: ClearVenueSumAggregateResolvers<ContextType>;
  ClearWebhook?: ClearWebhookResolvers<ContextType>;
  ClearWebhookCountAggregate?: ClearWebhookCountAggregateResolvers<ContextType>;
  ClearWebhookGroupBy?: ClearWebhookGroupByResolvers<ContextType>;
  ClearWebhookMaxAggregate?: ClearWebhookMaxAggregateResolvers<ContextType>;
  ClearWebhookMinAggregate?: ClearWebhookMinAggregateResolvers<ContextType>;
  CmsAnnouncement?: CmsAnnouncementResolvers<ContextType>;
  CmsAnnouncementCollection?: CmsAnnouncementCollectionResolvers<ContextType>;
  CmsAnnouncementLinkingCollections?: CmsAnnouncementLinkingCollectionsResolvers<ContextType>;
  CmsAnnouncementProgramCollection?: CmsAnnouncementProgramCollectionResolvers<ContextType>;
  CmsAsset?: CmsAssetResolvers<ContextType>;
  CmsAssetCollection?: CmsAssetCollectionResolvers<ContextType>;
  CmsAssetLinkingCollections?: CmsAssetLinkingCollectionsResolvers<ContextType>;
  CmsAward?: CmsAwardResolvers<ContextType>;
  CmsAwardCollection?: CmsAwardCollectionResolvers<ContextType>;
  CmsAwardLinkingCollections?: CmsAwardLinkingCollectionsResolvers<ContextType>;
  CmsAwardProgramsCollection?: CmsAwardProgramsCollectionResolvers<ContextType>;
  CmsBadge?: CmsBadgeResolvers<ContextType>;
  CmsBadgeCollection?: CmsBadgeCollectionResolvers<ContextType>;
  CmsBadgeLinkingCollections?: CmsBadgeLinkingCollectionsResolvers<ContextType>;
  CmsBumper?: CmsBumperResolvers<ContextType>;
  CmsBumperCollection?: CmsBumperCollectionResolvers<ContextType>;
  CmsBumperLinkingCollections?: CmsBumperLinkingCollectionsResolvers<ContextType>;
  CmsCircle?: GraphQLScalarType;
  CmsCommunityPartner?: CmsCommunityPartnerResolvers<ContextType>;
  CmsCommunityPartnerCollection?: CmsCommunityPartnerCollectionResolvers<ContextType>;
  CmsCommunityPartnerLinkingCollections?: CmsCommunityPartnerLinkingCollectionsResolvers<ContextType>;
  CmsCommunityPartnerRegionCollection?: CmsCommunityPartnerRegionCollectionResolvers<ContextType>;
  CmsContentTypeString?: CmsContentTypeStringResolvers<ContextType>;
  CmsContentTypeStringCollection?: CmsContentTypeStringCollectionResolvers<ContextType>;
  CmsContentTypeStringLinkingCollections?: CmsContentTypeStringLinkingCollectionsResolvers<ContextType>;
  CmsContentTypeStringRichValue?: CmsContentTypeStringRichValueResolvers<ContextType>;
  CmsContentTypeStringRichValueAssets?: CmsContentTypeStringRichValueAssetsResolvers<ContextType>;
  CmsContentTypeStringRichValueEntries?: CmsContentTypeStringRichValueEntriesResolvers<ContextType>;
  CmsContentTypeStringRichValueLinks?: CmsContentTypeStringRichValueLinksResolvers<ContextType>;
  CmsContentTypeStringSubvalueCollection?: CmsContentTypeStringSubvalueCollectionResolvers<ContextType>;
  CmsContentfulMetadata?: CmsContentfulMetadataResolvers<ContextType>;
  CmsContentfulTag?: CmsContentfulTagResolvers<ContextType>;
  CmsDateTime?: GraphQLScalarType;
  CmsDimension?: GraphQLScalarType;
  CmsEntry?: CmsEntryResolvers<ContextType>;
  CmsEntryCollection?: CmsEntryCollectionResolvers<ContextType>;
  CmsEvent?: CmsEventResolvers<ContextType>;
  CmsEventCollection?: CmsEventCollectionResolvers<ContextType>;
  CmsEventLinkingCollections?: CmsEventLinkingCollectionsResolvers<ContextType>;
  CmsEventNotice?: CmsEventNoticeResolvers<ContextType>;
  CmsEventNoticeAssets?: CmsEventNoticeAssetsResolvers<ContextType>;
  CmsEventNoticeEntries?: CmsEventNoticeEntriesResolvers<ContextType>;
  CmsEventNoticeLinks?: CmsEventNoticeLinksResolvers<ContextType>;
  CmsEventRestriction?: CmsEventRestrictionResolvers<ContextType>;
  CmsEventRestrictionApplicableProgramsCollection?: CmsEventRestrictionApplicableProgramsCollectionResolvers<ContextType>;
  CmsEventRestrictionCollection?: CmsEventRestrictionCollectionResolvers<ContextType>;
  CmsEventRestrictionLinkingCollections?: CmsEventRestrictionLinkingCollectionsResolvers<ContextType>;
  CmsFaq?: CmsFaqResolvers<ContextType>;
  CmsFaqAnswer?: CmsFaqAnswerResolvers<ContextType>;
  CmsFaqAnswerAssets?: CmsFaqAnswerAssetsResolvers<ContextType>;
  CmsFaqAnswerEntries?: CmsFaqAnswerEntriesResolvers<ContextType>;
  CmsFaqAnswerLinks?: CmsFaqAnswerLinksResolvers<ContextType>;
  CmsFaqCollection?: CmsFaqCollectionResolvers<ContextType>;
  CmsFaqLinkingCollections?: CmsFaqLinkingCollectionsResolvers<ContextType>;
  CmsFaqRelatedAnswersCollection?: CmsFaqRelatedAnswersCollectionResolvers<ContextType>;
  CmsForm?: CmsFormResolvers<ContextType>;
  CmsFormCollection?: CmsFormCollectionResolvers<ContextType>;
  CmsFormDetails?: CmsFormDetailsResolvers<ContextType>;
  CmsFormDetailsAssets?: CmsFormDetailsAssetsResolvers<ContextType>;
  CmsFormDetailsEntries?: CmsFormDetailsEntriesResolvers<ContextType>;
  CmsFormDetailsLinks?: CmsFormDetailsLinksResolvers<ContextType>;
  CmsFormLinkingCollections?: CmsFormLinkingCollectionsResolvers<ContextType>;
  CmsFormSidebar?: CmsFormSidebarResolvers<ContextType>;
  CmsFormSidebarAssets?: CmsFormSidebarAssetsResolvers<ContextType>;
  CmsFormSidebarEntries?: CmsFormSidebarEntriesResolvers<ContextType>;
  CmsFormSidebarLinks?: CmsFormSidebarLinksResolvers<ContextType>;
  CmsGlobalSponsor?: CmsGlobalSponsorResolvers<ContextType>;
  CmsGlobalSponsorCollection?: CmsGlobalSponsorCollectionResolvers<ContextType>;
  CmsGlobalSponsorLinkingCollections?: CmsGlobalSponsorLinkingCollectionsResolvers<ContextType>;
  CmsHexColor?: GraphQLScalarType;
  CmsHiringCompany?: CmsHiringCompanyResolvers<ContextType>;
  CmsHiringCompanyCollection?: CmsHiringCompanyCollectionResolvers<ContextType>;
  CmsHiringCompanyDescription?: CmsHiringCompanyDescriptionResolvers<ContextType>;
  CmsHiringCompanyDescriptionAssets?: CmsHiringCompanyDescriptionAssetsResolvers<ContextType>;
  CmsHiringCompanyDescriptionEntries?: CmsHiringCompanyDescriptionEntriesResolvers<ContextType>;
  CmsHiringCompanyDescriptionLinks?: CmsHiringCompanyDescriptionLinksResolvers<ContextType>;
  CmsHiringCompanyLinkingCollections?: CmsHiringCompanyLinkingCollectionsResolvers<ContextType>;
  CmsHiringPost?: CmsHiringPostResolvers<ContextType>;
  CmsHiringPostCollection?: CmsHiringPostCollectionResolvers<ContextType>;
  CmsHiringPostDescription?: CmsHiringPostDescriptionResolvers<ContextType>;
  CmsHiringPostDescriptionAssets?: CmsHiringPostDescriptionAssetsResolvers<ContextType>;
  CmsHiringPostDescriptionEntries?: CmsHiringPostDescriptionEntriesResolvers<ContextType>;
  CmsHiringPostDescriptionLinks?: CmsHiringPostDescriptionLinksResolvers<ContextType>;
  CmsHiringPostLinkingCollections?: CmsHiringPostLinkingCollectionsResolvers<ContextType>;
  CmsHiringPostRegionsCollection?: CmsHiringPostRegionsCollectionResolvers<ContextType>;
  CmsJSON?: GraphQLScalarType;
  CmsLegalDocument?: CmsLegalDocumentResolvers<ContextType>;
  CmsLegalDocumentCollection?: CmsLegalDocumentCollectionResolvers<ContextType>;
  CmsLegalDocumentLinkingCollections?: CmsLegalDocumentLinkingCollectionsResolvers<ContextType>;
  CmsLocalizationConfig?: CmsLocalizationConfigResolvers<ContextType>;
  CmsLocalizationConfigCollection?: CmsLocalizationConfigCollectionResolvers<ContextType>;
  CmsLocalizationConfigLinkingCollections?: CmsLocalizationConfigLinkingCollectionsResolvers<ContextType>;
  CmsLocalizationConfigRequiredEventRestrictionsCollection?: CmsLocalizationConfigRequiredEventRestrictionsCollectionResolvers<ContextType>;
  CmsLocation?: CmsLocationResolvers<ContextType>;
  CmsNewsCoverage?: CmsNewsCoverageResolvers<ContextType>;
  CmsNewsCoverageCollection?: CmsNewsCoverageCollectionResolvers<ContextType>;
  CmsNewsCoverageLinkingCollections?: CmsNewsCoverageLinkingCollectionsResolvers<ContextType>;
  CmsPressPhoto?: CmsPressPhotoResolvers<ContextType>;
  CmsPressPhotoCollection?: CmsPressPhotoCollectionResolvers<ContextType>;
  CmsPressPhotoLinkingCollections?: CmsPressPhotoLinkingCollectionsResolvers<ContextType>;
  CmsProgram?: CmsProgramResolvers<ContextType>;
  CmsProgramCollection?: CmsProgramCollectionResolvers<ContextType>;
  CmsProgramEducationDetails?: CmsProgramEducationDetailsResolvers<ContextType>;
  CmsProgramEducationDetailsAssets?: CmsProgramEducationDetailsAssetsResolvers<ContextType>;
  CmsProgramEducationDetailsEntries?: CmsProgramEducationDetailsEntriesResolvers<ContextType>;
  CmsProgramEducationDetailsLinks?: CmsProgramEducationDetailsLinksResolvers<ContextType>;
  CmsProgramEligibility?: CmsProgramEligibilityResolvers<ContextType>;
  CmsProgramEligibilityAssets?: CmsProgramEligibilityAssetsResolvers<ContextType>;
  CmsProgramEligibilityEntries?: CmsProgramEligibilityEntriesResolvers<ContextType>;
  CmsProgramEligibilityLinks?: CmsProgramEligibilityLinksResolvers<ContextType>;
  CmsProgramLinkingCollections?: CmsProgramLinkingCollectionsResolvers<ContextType>;
  CmsProgramPresentingSponsorsCollection?: CmsProgramPresentingSponsorsCollectionResolvers<ContextType>;
  CmsProgramVolunteerBlurb?: CmsProgramVolunteerBlurbResolvers<ContextType>;
  CmsProgramVolunteerBlurbAssets?: CmsProgramVolunteerBlurbAssetsResolvers<ContextType>;
  CmsProgramVolunteerBlurbEntries?: CmsProgramVolunteerBlurbEntriesResolvers<ContextType>;
  CmsProgramVolunteerBlurbLinks?: CmsProgramVolunteerBlurbLinksResolvers<ContextType>;
  CmsProgramVolunteerDetails?: CmsProgramVolunteerDetailsResolvers<ContextType>;
  CmsProgramVolunteerDetailsAssets?: CmsProgramVolunteerDetailsAssetsResolvers<ContextType>;
  CmsProgramVolunteerDetailsEntries?: CmsProgramVolunteerDetailsEntriesResolvers<ContextType>;
  CmsProgramVolunteerDetailsLinks?: CmsProgramVolunteerDetailsLinksResolvers<ContextType>;
  CmsQuality?: GraphQLScalarType;
  CmsQuery?: CmsQueryResolvers<ContextType>;
  CmsRectangle?: GraphQLScalarType;
  CmsRegion?: CmsRegionResolvers<ContextType>;
  CmsRegionCollection?: CmsRegionCollectionResolvers<ContextType>;
  CmsRegionLinkingCollections?: CmsRegionLinkingCollectionsResolvers<ContextType>;
  CmsSite?: CmsSiteResolvers<ContextType>;
  CmsSiteCollection?: CmsSiteCollectionResolvers<ContextType>;
  CmsSiteLinkingCollections?: CmsSiteLinkingCollectionsResolvers<ContextType>;
  CmsSocialMedia?: CmsSocialMediaResolvers<ContextType>;
  CmsSocialMediaCollection?: CmsSocialMediaCollectionResolvers<ContextType>;
  CmsSocialMediaLinkingCollections?: CmsSocialMediaLinkingCollectionsResolvers<ContextType>;
  CmsStockMusic?: CmsStockMusicResolvers<ContextType>;
  CmsStockMusicCollection?: CmsStockMusicCollectionResolvers<ContextType>;
  CmsStockMusicLinkingCollections?: CmsStockMusicLinkingCollectionsResolvers<ContextType>;
  CmsSys?: CmsSysResolvers<ContextType>;
  CmsTestimonial?: CmsTestimonialResolvers<ContextType>;
  CmsTestimonialCollection?: CmsTestimonialCollectionResolvers<ContextType>;
  CmsTestimonialLinkingCollections?: CmsTestimonialLinkingCollectionsResolvers<ContextType>;
  EmailJSONObject?: GraphQLScalarType;
  EmailMutation?: EmailMutationResolvers<ContextType>;
  EmailQuery?: EmailQueryResolvers<ContextType>;
  GeoGeoResult?: GeoGeoResultResolvers<ContextType>;
  GeoQuery?: GeoQueryResolvers<ContextType>;
  GithubContributor?: GithubContributorResolvers<ContextType>;
  GithubQuery?: GithubQueryResolvers<ContextType>;
  JSONObject?: GraphQLScalarType;
  LabsDateTime?: GraphQLScalarType;
  LabsEvent?: LabsEventResolvers<ContextType>;
  LabsJSON?: GraphQLScalarType;
  LabsJSONObject?: GraphQLScalarType;
  LabsMatch?: LabsMatchResolvers<ContextType>;
  LabsMentor?: LabsMentorResolvers<ContextType>;
  LabsMutation?: LabsMutationResolvers<ContextType>;
  LabsPreference?: LabsPreferenceResolvers<ContextType>;
  LabsProject?: LabsProjectResolvers<ContextType>;
  LabsQuery?: LabsQueryResolvers<ContextType>;
  LabsStat?: LabsStatResolvers<ContextType>;
  LabsStudent?: LabsStudentResolvers<ContextType>;
  LabsSurvey?: LabsSurveyResolvers<ContextType>;
  LabsSurveyOccurence?: LabsSurveyOccurenceResolvers<ContextType>;
  LabsSurveyResponse?: LabsSurveyResponseResolvers<ContextType>;
  LabsTag?: LabsTagResolvers<ContextType>;
  LabsTagTrainingSubmission?: LabsTagTrainingSubmissionResolvers<ContextType>;
  LabsTrackRecommendation?: LabsTrackRecommendationResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  ShowcaseAward?: ShowcaseAwardResolvers<ContextType>;
  ShowcaseDateTime?: GraphQLScalarType;
  ShowcaseJudgement?: ShowcaseJudgementResolvers<ContextType>;
  ShowcaseJudgingCriteria?: ShowcaseJudgingCriteriaResolvers<ContextType>;
  ShowcaseJudgingPool?: ShowcaseJudgingPoolResolvers<ContextType>;
  ShowcaseJudgingResult?: ShowcaseJudgingResultResolvers<ContextType>;
  ShowcaseJudgingResultSubValue?: ShowcaseJudgingResultSubValueResolvers<ContextType>;
  ShowcaseMedia?: ShowcaseMediaResolvers<ContextType>;
  ShowcaseMember?: ShowcaseMemberResolvers<ContextType>;
  ShowcaseMetadata?: ShowcaseMetadataResolvers<ContextType>;
  ShowcaseMetricAggregate?: ShowcaseMetricAggregateResolvers<ContextType>;
  ShowcaseMetricTimeSeries?: ShowcaseMetricTimeSeriesResolvers<ContextType>;
  ShowcaseMutation?: ShowcaseMutationResolvers<ContextType>;
  ShowcasePeerJudgement?: ShowcasePeerJudgementResolvers<ContextType>;
  ShowcasePhoto?: ShowcasePhotoResolvers<ContextType>;
  ShowcaseProject?: ShowcaseProjectResolvers<ContextType>;
  ShowcaseQuery?: ShowcaseQueryResolvers<ContextType>;
  ShowcaseReactionCount?: ShowcaseReactionCountResolvers<ContextType>;
  ShowyourworkDateTime?: GraphQLScalarType;
  ShowyourworkDiscordMessage?: ShowyourworkDiscordMessageResolvers<ContextType>;
  ShowyourworkQuery?: ShowyourworkQueryResolvers<ContextType>;
  Subscription?: SubscriptionResolvers<ContextType>;
  TwitchLiveStatus?: TwitchLiveStatusResolvers<ContextType>;
  TwitchQuery?: TwitchQueryResolvers<ContextType>;
  Upload?: GraphQLScalarType;
}>;

